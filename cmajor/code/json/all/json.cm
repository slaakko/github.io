using System;
using System.Collections;
using System.Text;
using System.IO;
using System.Json;

[json]
public class Member
{
    public nothrow Member() : x(0)
    {
    }
    public explicit nothrow Member(int x_) : x(x_)
    {
    }
    public default virtual ~Member(); // base class must be polymorphic
    public virtual void Dump(CodeFormatter& formatter)
    {
        formatter.WriteLine("member : x = " + ToString(x));
    }
    private int x;
}

[json]
public class DerivedMember : Member
{
    public nothrow DerivedMember() : base(), d(0)
    {
    }
    public nothrow DerivedMember(int x_, double d_) : base(x_), d(d_)
    {
    }
    public override void Dump(CodeFormatter& formatter)
    {
        base->Dump(formatter);
        formatter.WriteLine("derived member : d = " + ToString(d));
    }
    private double d;
}

[json]
public class Beta
{
    Beta() : b(false), s("xyzzy")
    {
    }
    public default virtual ~Beta(); // base class must be polymorphic
    public void Dump(CodeFormatter& formatter)
    {
        formatter.WriteLine("beta:");
        formatter.WriteLine("b : " + ToString(b));
        formatter.WriteLine("s : " + s);
    }
    [json="false"]
    private bool b; // not serialized
    [jsonFieldName="beta.s"]
    private string s; // changed conflicting field name
}

[json]
public class Alpha : Beta
{
    public Alpha() : i(1), d(2.0), b(true), s("foo"), w(w"bar"), u(u"öhkömömmö"), member(), memberPtr(new DerivedMember(10, 3.14))
    {
        l.Add(1);
        l.Add(2);
        l.Add(3);
        m["abc"] = 4;
        m["def"] = 5;
        h["xyz"] = 6.5;
        memberList.Add(Member(1));
        memberList.Add(Member(2));
    }
    public void Dump(CodeFormatter& formatter)
    {
        base->Dump(formatter);
        formatter.WriteLine("alpha:");
        formatter.WriteLine("i : " + ToString(i));
        formatter.WriteLine("d : " + ToString(d));
        formatter.WriteLine("b : " + ToString(b));
        formatter.WriteLine("s : " + s);
        formatter.WriteLine("w : " + ToUtf8(w));
        formatter.WriteLine("u : " + ToUtf8(u));
        formatter.WriteLine("l : " + ToString(l.Count()));
        formatter.IncIndent();
        for (int x : l)
        {
            formatter.WriteLine(ToString(x));
        }
        formatter.DecIndent();
        formatter.WriteLine("m : " + ToString(m.Count()));
        formatter.IncIndent();
        for (const Pair<string, int>& x : m)
        {
            formatter.WriteLine(x.first + " : " + ToString(x.second));
        }
        formatter.DecIndent();
        formatter.WriteLine("h : " + ToString(h.Count()));
        formatter.IncIndent();
        for (const Pair<string, double>& x : h)
        {
            formatter.WriteLine(x.first + " : " + ToString(x.second));
        }
        formatter.DecIndent();
        member.Dump(formatter);
        formatter.WriteLine("memberList : " + ToString(memberList.Count()));
        formatter.IncIndent();
        for (const Member& x : memberList)
        {
            x.Dump(formatter);
        }
        if (memberPtr.IsNull())
        {
            formatter.WriteLine("memberPtr : null");
        }
        else
        {
            memberPtr->Dump(formatter);
        }
        formatter.DecIndent();
    }
    private int i;
    private double d;
    private bool b;
    private string s;
    private wstring w;
    private ustring u;
    private List<int> l;
    private Map<string, int> m;
    private HashMap<string, double> h;
    private Member member;
    private List<Member> memberList;
    private UniquePtr<Member> memberPtr;
}

void main()
{
    try
    {
        CodeFormatter formatter(Console.Out());
        Alpha alpha;
        alpha.Dump(formatter);
        UniquePtr<JsonValue> value = alpha.ToJson();
        string jsonText = value->ToString();
        Console.WriteLine("alpha as JSON:");
        Console.WriteLine(jsonText);
        UniquePtr<JsonValue> jsonValue = ParseJson(jsonText);
        Alpha alphaFromJson(jsonValue.Get());
        alphaFromJson.Dump(formatter);
    }
    catch (const Exception& ex)
    {
        Console.WriteLine(ex.ToString());
    }
}
