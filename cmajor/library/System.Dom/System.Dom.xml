<library>
    <name>System.Dom</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Dom">
            <name>System.Dom</name>
            <classes>
                <class id="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B">
                    <name>BuildIndexVisitor</name>
                    <groupName>BuildIndexVisitor</groupName>
                    <syntax> public class BuildIndexVisitor;</syntax>
                    <baseClass ref="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC"/>
                    <constructors>
                        <constructor id="constructor_BuildIndexVisitor_51B5F1343E9A3CEB909523CCDF3813F1B43C4855">
                            <name>BuildIndexVisitor(HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp; elementsByIdMap_)</name>
                            <syntax>public nothrow BuildIndexVisitor(HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp; elementsByIdMap_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>elementsByIdMap_</name>
                                    <type ref="type.11579286"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_BeginVisit_BuildIndexVisitor_70524D3B38303F20E6093E21332E1B0F05DC4B36">
                            <name>BeginVisit(DomElement* element)</name>
                            <syntax>public override void BeginVisit(DomElement* element);</syntax>
                            <parameters>
                                <parameter>
                                    <name>element</name>
                                    <type ref="type.11578581"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845">
                    <name>DomAttr</name>
                    <groupName>DomAttr</groupName>
                    <syntax> public class DomAttr;</syntax>
                    <baseClass ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                    <constructors>
                        <constructor id="default_constructor_DomAttr_AB81CB5DE709B9B2F150026010CE711068D659AE">
                            <name>DomAttr()</name>
                            <syntax>public nothrow DomAttr();</syntax>
                        </constructor>
                        <constructor id="constructor_DomAttr_C5E02F499E72D96385554375EF366871A59B666C">
                            <name>DomAttr(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; value_)</name>
                            <syntax>public nothrow DomAttr(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CloneNode_DomAttr_935C5C343A9FD5B15937A0DB83F63C34AF21AB7B">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.11565906"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579270"/>
                        </function>
                        <function id="member_function_Prefix_DomAttr_9E251FBB8F3693299BC88C721AD7E82AC96BE8A8">
                            <name>Prefix() const</name>
                            <syntax>public nothrow override String&lt;uchar> Prefix() const;</syntax>
                            <returnType ref="type.11567208"/>
                        </function>
                        <function id="member_function_SetPrefix_DomAttr_B38F0B9956405E41A3EBD7A8D0E04A5D93B63933">
                            <name>SetPrefix(const String&lt;uchar>&amp; prefix)</name>
                            <syntax>public override void SetPrefix(const String&lt;uchar>&amp; prefix);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prefix</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_Value_73DFA4B0DF934D95503D7A95D8152E8150B0F634">
                            <name>Value</name>
                            <overloads>
                                <overload id="member_function_Value_DomAttr_0688EAFB5D021FF9EA3596D9D9FA1488C0F8E5A6">
                                    <name>Value()</name>
                                    <syntax>public nothrow inline String&lt;uchar>&amp; Value();</syntax>
                                    <returnType ref="type.11567210"/>
                                </overload>
                                <overload id="member_function_Value_DomAttr_350BF1A9B050ED3BF0BA27E4469D4F7AD138FBF5">
                                    <name>Value() const</name>
                                    <syntax>public nothrow inline const String&lt;uchar>&amp; Value() const;</syntax>
                                    <returnType ref="type.11567213"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Write_DomAttr_1B6A9ACE9639381C547B451DBE726C33AEB0CB94">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.11566265"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C">
                    <name>DomCDataSection</name>
                    <groupName>DomCDataSection</groupName>
                    <syntax> public class DomCDataSection;</syntax>
                    <baseClass ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                    <constructors>
                        <constructor id="default_constructor_DomCDataSection_B0AFDEF331FDBF6919B4308C1C105A49BD4555C3">
                            <name>DomCDataSection()</name>
                            <syntax>public nothrow DomCDataSection();</syntax>
                        </constructor>
                        <constructor id="constructor_DomCDataSection_21A8F4462D9EA214BEDDD2AC7C0AD09A1CC34403">
                            <name>DomCDataSection(const String&lt;uchar>&amp; data_)</name>
                            <syntax>public nothrow explicit DomCDataSection(const String&lt;uchar>&amp; data_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>data_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomCDataSection_2F328A27731CD73CA08C10553B1CD2EA4B4EADB1">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.11578610"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomCDataSection_8DF77F2D3E03157D0AC8218FD9F43B7290948342">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.11565906"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579270"/>
                        </function>
                        <function id="member_function_Write_DomCDataSection_93A48B52D57E1E2FC4FE3A8F0106B0C83595D96F">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.11566265"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991">
                    <name>DomCharacterData</name>
                    <groupName>DomCharacterData</groupName>
                    <syntax>abstract public class DomCharacterData;</syntax>
                    <baseClass ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                    <constructors>
                        <constructor id="constructor_DomCharacterData_0D2ED50FD9C542E4989FC83F182A400A992C5279">
                            <name>DomCharacterData(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow explicit DomCharacterData(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_DomCharacterData_FC8F73FDD5E03EF991785C797F62291A3258936D">
                            <name>DomCharacterData(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; data_)</name>
                            <syntax>public nothrow DomCharacterData(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; data_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                                <parameter>
                                    <name>data_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Data_F9BE76778A8EABC85EA40A68A25A7B0703385A7F">
                            <name>Data</name>
                            <overloads>
                                <overload id="member_function_Data_DomCharacterData_971275725C713034BD6564D861B70DA652C0F0BA">
                                    <name>Data()</name>
                                    <syntax>public nothrow String&lt;uchar>&amp; Data();</syntax>
                                    <returnType ref="type.11567210"/>
                                </overload>
                                <overload id="member_function_Data_DomCharacterData_9614944259DCCB50426994A4909CABA60E4ECA0E">
                                    <name>Data() const</name>
                                    <syntax>public nothrow const String&lt;uchar>&amp; Data() const;</syntax>
                                    <returnType ref="type.11567213"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_ValueContainsNewLine_DomCharacterData_0FFE57235C068A23D738740AFA620D3212081A50">
                            <name>ValueContainsNewLine()</name>
                            <syntax>public nothrow override bool ValueContainsNewLine();</syntax>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_Write_DomCharacterData_000E6794CE3D92AA20F50682E234CD4B6F38124A">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.11566265"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38">
                    <name>DomComment</name>
                    <groupName>DomComment</groupName>
                    <syntax> public class DomComment;</syntax>
                    <baseClass ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                    <constructors>
                        <constructor id="default_constructor_DomComment_D6391ABCEEC52D7B8E55F450EC9451DD1FDFC642">
                            <name>DomComment()</name>
                            <syntax>public nothrow DomComment();</syntax>
                        </constructor>
                        <constructor id="constructor_DomComment_8F2626E5AF8513C847915CAFDD203F610AA91A3E">
                            <name>DomComment(const String&lt;uchar>&amp; data_)</name>
                            <syntax>public nothrow explicit DomComment(const String&lt;uchar>&amp; data_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>data_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomComment_F387713A67D0604D693674D50DA69D7B09738A12">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.11578610"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomComment_919EB4CF012E5EE3EABF9FB2DE82DAFF0E044331">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.11565906"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579270"/>
                        </function>
                        <function id="member_function_Write_DomComment_99B996338A898CFBEBFEC3BAA0FAB9E2CC0268C3">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.11566265"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8">
                    <name>DomDocument</name>
                    <groupName>DomDocument</groupName>
                    <syntax> public class DomDocument;</syntax>
                    <baseClass ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                    <constructors>
                        <constructor id="default_constructor_DomDocument_B8F0784EA32E884DF21C63B4A14DF9D544567DC9">
                            <name>DomDocument()</name>
                            <syntax>public nothrow DomDocument();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomDocument_8F4220E308D689CD6DA67DFF64E8503276BA6543">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.11578610"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AppendChild_DomDocument_79F3A44DE896CD5FAA80F311288965B7FF1A7E85">
                            <name>AppendChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild)</name>
                            <syntax>public override DomNode* AppendChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.11579276"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11578597"/>
                        </function>
                        <function id="member_function_CloneNode_DomDocument_E87D6EE8F706AE697F6C95869C4933882AD49EB0">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.11565906"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579270"/>
                        </function>
                        <function id="member_function_DocumentElement_DomDocument_EA7DB052EE2116825A5AA6216D3AE127C9760CE4">
                            <name>DocumentElement() const</name>
                            <syntax>public nothrow inline DomElement* DocumentElement() const;</syntax>
                            <returnType ref="type.11578581"/>
                        </function>
                        <function id="member_function_GetElementById_DomDocument_9CE592627CE61165EB4DBD62EA1E0AEF39F07DAA">
                            <name>GetElementById(const String&lt;uchar>&amp; elementId)</name>
                            <syntax>public DomElement* GetElementById(const String&lt;uchar>&amp; elementId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>elementId</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11578581"/>
                        </function>
                        <function id="member_function_InsertBefore_DomDocument_DD4532A7C4B299DE45557825035402E58919B411">
                            <name>InsertBefore(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* refChild)</name>
                            <syntax>public override DomNode* InsertBefore(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* refChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.11579276"/>
                                </parameter>
                                <parameter>
                                    <name>refChild</name>
                                    <type ref="type.11578597"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11578597"/>
                        </function>
                        <function id="member_function_InternalInvalidateIndex_DomDocument_F781AA27409ED770095C4F30128600D4D39EC8DB">
                            <name>InternalInvalidateIndex()</name>
                            <syntax>public nothrow inline void InternalInvalidateIndex();</syntax>
                        </function>
                        <function id="member_function_RemoveChild_DomDocument_90FE30CBAAFDB1C62D343FF6CE06E05B2A11454B">
                            <name>RemoveChild(DomNode* oldChild)</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> RemoveChild(DomNode* oldChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>oldChild</name>
                                    <type ref="type.11578597"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579270"/>
                        </function>
                        <function id="member_function_ReplaceChild_DomDocument_61D8A2CE0D8786438A22377237BBBAC39DD18EFF">
                            <name>ReplaceChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* oldChild)</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ReplaceChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* oldChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.11579276"/>
                                </parameter>
                                <parameter>
                                    <name>oldChild</name>
                                    <type ref="type.11578597"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579270"/>
                        </function>
                        <function id="member_function_SetXmlEncoding_DomDocument_1FBADC79BCCAF5076E46C065A819B23C113B287B">
                            <name>SetXmlEncoding(const String&lt;uchar>&amp; xmlEncoding_)</name>
                            <syntax>public nothrow inline void SetXmlEncoding(const String&lt;uchar>&amp; xmlEncoding_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlEncoding_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetXmlStandalone_DomDocument_859F7B8E15E3030ED33ACEAF6C7022704035AD40">
                            <name>SetXmlStandalone(bool xmlStandalone_)</name>
                            <syntax>public nothrow inline void SetXmlStandalone(bool xmlStandalone_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlStandalone_</name>
                                    <type ref="type.11565906"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetXmlVersion_DomDocument_F82DBF6FB0290167F663312956F88F27B58582E3">
                            <name>SetXmlVersion(const String&lt;uchar>&amp; xmlVersion_)</name>
                            <syntax>public nothrow inline void SetXmlVersion(const String&lt;uchar>&amp; xmlVersion_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlVersion_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_XmlEncoding_DomDocument_55F846A6B10A28EB0B2427074C636914E17F9BA5">
                            <name>XmlEncoding() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; XmlEncoding() const;</syntax>
                            <returnType ref="type.11567213"/>
                        </function>
                        <function id="member_function_XmlStandalone_DomDocument_4280CB2592F8D44967B8EB73AC2B0491F1E71DA0">
                            <name>XmlStandalone() const</name>
                            <syntax>public nothrow inline bool XmlStandalone() const;</syntax>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_XmlVersion_DomDocument_90F041999067B56FDD22A11C204CACECC32CE5C9">
                            <name>XmlVersion() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; XmlVersion() const;</syntax>
                            <returnType ref="type.11567213"/>
                        </function>
                    </functions>
                </class>
                <class id="class_DomDocumentBuilder_397E94D2EA454117602C5070385DB01C1EFBB45B">
                    <name>DomDocumentBuilder</name>
                    <groupName>DomDocumentBuilder</groupName>
                    <syntax> public class DomDocumentBuilder;</syntax>
                    <baseClass ref="class_XmlContentHandler_7429223FCBE3A541F14FD9475F2099B20E248715"/>
                    <constructors>
                        <constructor id="default_constructor_DomDocumentBuilder_3513E415B4B6A29E9AAE2321D004C71B2F4D9118">
                            <name>DomDocumentBuilder()</name>
                            <syntax>public DomDocumentBuilder();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CDataSection_DomDocumentBuilder_C9C6C3454EE2A21538686310C908DFC265907934">
                            <name>CDataSection(const String&lt;uchar>&amp; cdata)</name>
                            <syntax>public override void CDataSection(const String&lt;uchar>&amp; cdata);</syntax>
                            <parameters>
                                <parameter>
                                    <name>cdata</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Comment_DomDocumentBuilder_082FFD95DC14A5AB475CB65318CC235650A57DAA">
                            <name>Comment(const String&lt;uchar>&amp; comment)</name>
                            <syntax>public override void Comment(const String&lt;uchar>&amp; comment);</syntax>
                            <parameters>
                                <parameter>
                                    <name>comment</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Encoding_DomDocumentBuilder_85CA7F73D22C1ED735BEC3E5DEF59BFCC460A36A">
                            <name>Encoding(const String&lt;uchar>&amp; encoding)</name>
                            <syntax>public override void Encoding(const String&lt;uchar>&amp; encoding);</syntax>
                            <parameters>
                                <parameter>
                                    <name>encoding</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_EndDocument_DomDocumentBuilder_88A13847CC99A504B0A26AE398E0A6977F936E65">
                            <name>EndDocument()</name>
                            <syntax>public override void EndDocument();</syntax>
                        </function>
                        <function id="member_function_EndElement_DomDocumentBuilder_531007E1486D7FE0AE0DC2CD67125DE778D19C35">
                            <name>EndElement(const String&lt;uchar>&amp; namespaceUri, const String&lt;uchar>&amp; localName, const String&lt;uchar>&amp; qualifiedName)</name>
                            <syntax>public override void EndElement(const String&lt;uchar>&amp; namespaceUri, const String&lt;uchar>&amp; localName, const String&lt;uchar>&amp; qualifiedName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>namespaceUri</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                                <parameter>
                                    <name>localName</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                                <parameter>
                                    <name>qualifiedName</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_GetDocument_DomDocumentBuilder_CC246904CFD7CD24AF446EDE668F2F20ADB1F359">
                            <name>GetDocument()</name>
                            <syntax>public UniquePtr&lt;System.Dom.DomDocument> GetDocument();</syntax>
                            <returnType ref="type.11579494"/>
                        </function>
                        <function id="member_function_PI_DomDocumentBuilder_61F51DF9AA353D12FE9AADA6520FEB6BEA5C0593">
                            <name>PI(const String&lt;uchar>&amp; target, const String&lt;uchar>&amp; data)</name>
                            <syntax>public override void PI(const String&lt;uchar>&amp; target, const String&lt;uchar>&amp; data);</syntax>
                            <parameters>
                                <parameter>
                                    <name>target</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                                <parameter>
                                    <name>data</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SkippedEntity_DomDocumentBuilder_15657861BA4A18BD4976D5430AF7A427169E9A3F">
                            <name>SkippedEntity(const String&lt;uchar>&amp; entityName)</name>
                            <syntax>public override void SkippedEntity(const String&lt;uchar>&amp; entityName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>entityName</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Standalone_DomDocumentBuilder_B408A87030CEE9CB9B32143D6A469B17F4F9C7D1">
                            <name>Standalone(bool standalone)</name>
                            <syntax>public override void Standalone(bool standalone);</syntax>
                            <parameters>
                                <parameter>
                                    <name>standalone</name>
                                    <type ref="type.11565906"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_StartDocument_DomDocumentBuilder_81609C5E7C8C1F3ABC965847DAFC035EFB6232DD">
                            <name>StartDocument()</name>
                            <syntax>public override void StartDocument();</syntax>
                        </function>
                        <function id="member_function_StartElement_DomDocumentBuilder_0BB68E5B2C1AF454B0DE3D59A0BC8D62F4E3966B">
                            <name>StartElement(const String&lt;uchar>&amp; namespaceUri, const String&lt;uchar>&amp; localName, const String&lt;uchar>&amp; qualifiedName, const Attributes&amp; attributes)</name>
                            <syntax>public override void StartElement(const String&lt;uchar>&amp; namespaceUri, const String&lt;uchar>&amp; localName, const String&lt;uchar>&amp; qualifiedName, const Attributes&amp; attributes);</syntax>
                            <parameters>
                                <parameter>
                                    <name>namespaceUri</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                                <parameter>
                                    <name>localName</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                                <parameter>
                                    <name>qualifiedName</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                                <parameter>
                                    <name>attributes</name>
                                    <type ref="type.11577034"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Text_DomDocumentBuilder_BE076A6CAECBA788FC2003811419E82FFF7D7D84">
                            <name>Text(const String&lt;uchar>&amp; text)</name>
                            <syntax>public override void Text(const String&lt;uchar>&amp; text);</syntax>
                            <parameters>
                                <parameter>
                                    <name>text</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Version_DomDocumentBuilder_2D201C2C5147C07698DD6C449348343BB7BA61B1">
                            <name>Version(const String&lt;uchar>&amp; version)</name>
                            <syntax>public override void Version(const String&lt;uchar>&amp; version);</syntax>
                            <parameters>
                                <parameter>
                                    <name>version</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3">
                    <name>DomDocumentFragment</name>
                    <groupName>DomDocumentFragment</groupName>
                    <syntax> public class DomDocumentFragment;</syntax>
                    <baseClass ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                    <constructors>
                        <constructor id="default_constructor_DomDocumentFragment_93DE42A92D8A94F263414AC46CE66B08C5038967">
                            <name>DomDocumentFragment()</name>
                            <syntax>public nothrow DomDocumentFragment();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CloneNode_DomDocumentFragment_35B846C79961A3025073B5C482B4A40539283892">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.11565906"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579270"/>
                        </function>
                    </functions>
                </class>
                <class id="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B">
                    <name>DomElement</name>
                    <groupName>DomElement</groupName>
                    <syntax> public class DomElement;</syntax>
                    <baseClass ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                    <constructors>
                        <constructor id="constructor_DomElement_186B1B1F0883B010030F370B2A79FE1306D9FFD9">
                            <name>DomElement(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public explicit DomElement(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_DomElement_197296D679BDD963B14CB5BF301229DCBB641F36">
                            <name>DomElement(const String&lt;uchar>&amp; name_, List&lt;UniquePtr&lt;System.Dom.DomAttr>>&amp;&amp; attrs_, Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>&amp;&amp; attrMap_)</name>
                            <syntax>public DomElement(const String&lt;uchar>&amp; name_, List&lt;UniquePtr&lt;System.Dom.DomAttr>>&amp;&amp; attrs_, Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>&amp;&amp; attrMap_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                                <parameter>
                                    <name>attrs_</name>
                                    <type ref="type.11579394"/>
                                </parameter>
                                <parameter>
                                    <name>attrMap_</name>
                                    <type ref="type.11579461"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddAttribute_DomElement_35F28C40B3AF25749FFE7E3857BD6A6A71244A96">
                            <name>AddAttribute(UniquePtr&lt;System.Dom.DomAttr>&amp;&amp; attr)</name>
                            <syntax>public void AddAttribute(UniquePtr&lt;System.Dom.DomAttr>&amp;&amp; attr);</syntax>
                            <parameters>
                                <parameter>
                                    <name>attr</name>
                                    <type ref="type.11579373"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomElement_BEA193FB092CFFC0973D2E84DA0205A1CB679EDA">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.11565906"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579270"/>
                        </function>
                        <function id="member_function_GetAttribute_DomElement_E340EFCACFF415B6AE664EAC51245781B895A16D">
                            <name>GetAttribute(const String&lt;uchar>&amp; attrName) const</name>
                            <syntax>public String&lt;uchar> GetAttribute(const String&lt;uchar>&amp; attrName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>attrName</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11567208"/>
                        </function>
                        <function id="member_function_GetElementsByTagName_DomElement_7805B6581C1815547E63C325E65F07DD439A84CE">
                            <name>GetElementsByTagName(const String&lt;uchar>&amp; tagName)</name>
                            <syntax>public NodeList GetElementsByTagName(const String&lt;uchar>&amp; tagName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>tagName</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                        </function>
                        <function id="member_function_HasAttributes_DomElement_7849C3B615C07C6DDC4EF43809539FE2798FF326">
                            <name>HasAttributes() const</name>
                            <syntax>public nothrow override bool HasAttributes() const;</syntax>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_Prefix_DomElement_A8D720F37E6FD61240CCF1A6C3A835524F125A9B">
                            <name>Prefix() const</name>
                            <syntax>public nothrow override String&lt;uchar> Prefix() const;</syntax>
                            <returnType ref="type.11567208"/>
                        </function>
                        <function id="member_function_RemoveAttribute_DomElement_98ABF1EA03C0C539ABA7D5D0004ED9C074CFD5C1">
                            <name>RemoveAttribute(const String&lt;uchar>&amp; attrName)</name>
                            <syntax>public void RemoveAttribute(const String&lt;uchar>&amp; attrName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>attrName</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetAttribute_DomElement_B7062E899FF7C4A47CFD4C689D80F65222ACBB52">
                            <name>SetAttribute(const String&lt;uchar>&amp; attrName, const String&lt;uchar>&amp; attrValue)</name>
                            <syntax>public void SetAttribute(const String&lt;uchar>&amp; attrName, const String&lt;uchar>&amp; attrValue);</syntax>
                            <parameters>
                                <parameter>
                                    <name>attrName</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                                <parameter>
                                    <name>attrValue</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetPrefix_DomElement_3908E49BBCD453800503F73891121EB356014C8F">
                            <name>SetPrefix(const String&lt;uchar>&amp; prefix)</name>
                            <syntax>public override void SetPrefix(const String&lt;uchar>&amp; prefix);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prefix</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_TagName_DomElement_7677108EDD12B88BF7E56662293BDB90B3D4C125">
                            <name>TagName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; TagName() const;</syntax>
                            <returnType ref="type.11567213"/>
                        </function>
                        <function id="member_function_WalkAttribute_DomElement_A479D4CEC7BB7E257B51125038E1BA90342C3465">
                            <name>WalkAttribute(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkAttribute(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Write_DomElement_D13A7148F28037033B06BE4350145904F0951B79">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.11566265"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA">
                    <name>DomException</name>
                    <groupName>DomException</groupName>
                    <syntax> public class DomException;</syntax>
                    <baseClass ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                    <constructors>
                        <constructor id="constructor_DomException_B242291ADF40674A01BECFCB5FFC4134A9C08232">
                            <name>DomException(const String&lt;char>&amp; message_)</name>
                            <syntax>public nothrow DomException(const String&lt;char>&amp; message_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.11567125"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509">
                    <name>DomNode</name>
                    <groupName>DomNode</groupName>
                    <syntax>abstract public class DomNode;</syntax>
                    <constructors>
                        <constructor id="constructor_DomNode_DEF6FCBFFA6705BF64FC558B4793E0504D78D924">
                            <name>DomNode(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow explicit DomNode(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomNode_93156422DA9CB0B1C2D63101BBAF37A641684CBA">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public virtual void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.11578610"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomNode_80F4FF592368B1019ACFF7973093B65A977546C8">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public abstract UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.11565906"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579270"/>
                        </function>
                        <function id="member_function_HasAttributes_DomNode_54692EAF28A9A74D13108AA969F4DE6282EAD5E2">
                            <name>HasAttributes() const</name>
                            <syntax>public nothrow virtual bool HasAttributes() const;</syntax>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_HasChildNodes_DomNode_B54CDA859D4965DDBC948BB3FDF17166ED63D5C3">
                            <name>HasChildNodes() const</name>
                            <syntax>public nothrow virtual bool HasChildNodes() const;</syntax>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_InternalLinkAfter_DomNode_E4B161D58A96C09A21C45015A8DB8265EC8C5343">
                            <name>InternalLinkAfter(DomNode* newNode)</name>
                            <syntax>public nothrow void InternalLinkAfter(DomNode* newNode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newNode</name>
                                    <type ref="type.11578597"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_InternalLinkBefore_DomNode_C6640AB2F340DA5649F3A4A8E88E6DFF893A30E8">
                            <name>InternalLinkBefore(DomNode* newNode)</name>
                            <syntax>public nothrow void InternalLinkBefore(DomNode* newNode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newNode</name>
                                    <type ref="type.11578597"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_InternalSetNamespaceUri_DomNode_C8A2900D5C2AB1CCFAC3B8518C2697519F8E3F7C">
                            <name>InternalSetNamespaceUri(const String&lt;uchar>&amp; namespaceUri_)</name>
                            <syntax>public nothrow void InternalSetNamespaceUri(const String&lt;uchar>&amp; namespaceUri_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>namespaceUri_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_InternalSetOwnerDocument_DomNode_2C7B4B1F61644BB75869AFF28315BE03BF5D5C3E">
                            <name>InternalSetOwnerDocument(DomDocument* ownerDocument_)</name>
                            <syntax>public nothrow inline void InternalSetOwnerDocument(DomDocument* ownerDocument_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ownerDocument_</name>
                                    <type ref="type.11578560"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_InternalSetParent_DomNode_D22E05A7FBD258419F2399CDD157320F1042ADA1">
                            <name>InternalSetParent(DomParentNode* parent_)</name>
                            <syntax>public nothrow inline void InternalSetParent(DomParentNode* parent_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parent_</name>
                                    <type ref="type.11578603"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_InternalUnlink_DomNode_372BF940A9BCBDD4C88FBA39B4E58A6B956FF862">
                            <name>InternalUnlink()</name>
                            <syntax>public nothrow void InternalUnlink();</syntax>
                        </function>
                        <function id="member_function_LocalName_DomNode_8FCF7CCC9ED964F2F3F18157D385CD15FCA5B8A1">
                            <name>LocalName() const</name>
                            <syntax>public nothrow virtual String&lt;uchar> LocalName() const;</syntax>
                            <returnType ref="type.11567208"/>
                        </function>
                        <function id="member_function_Name_DomNode_8CD8D09862447AE4797372A4EDFF89767B901773">
                            <name>Name() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Name() const;</syntax>
                            <returnType ref="type.11567213"/>
                        </function>
                        <function id="member_function_NamespaceUri_DomNode_E5EAFC2221783EA15DBACE764BA8D26A31E7ABDA">
                            <name>NamespaceUri() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; NamespaceUri() const;</syntax>
                            <returnType ref="type.11567213"/>
                        </function>
                        <function id="member_function_NextSibling_DomNode_0F805F8FF3BA2E16BAD6076AD19F39E281F97560">
                            <name>NextSibling() const</name>
                            <syntax>public nothrow inline DomNode* NextSibling() const;</syntax>
                            <returnType ref="type.11578597"/>
                        </function>
                        <function id="member_function_OwnerDocument_DomNode_51DC44DE9EB31C919B8FAF2B2BA58E99DAF00459">
                            <name>OwnerDocument() const</name>
                            <syntax>public nothrow inline DomDocument* OwnerDocument() const;</syntax>
                            <returnType ref="type.11578560"/>
                        </function>
                        <function id="member_function_Parent_DomNode_98114524C537E4DA6BCA22B350EFF8DBC67FDF74">
                            <name>Parent() const</name>
                            <syntax>public nothrow inline DomParentNode* Parent() const;</syntax>
                            <returnType ref="type.11578603"/>
                        </function>
                        <function id="member_function_Prefix_DomNode_40E6CCC46282FA896E243C1DFCC5F7026765F4BC">
                            <name>Prefix() const</name>
                            <syntax>public nothrow virtual String&lt;uchar> Prefix() const;</syntax>
                            <returnType ref="type.11567208"/>
                        </function>
                        <function id="member_function_PreviousSibling_DomNode_8D75DC5A9E4CB7CA82FB1CA757CF1BA8BDD85DA5">
                            <name>PreviousSibling() const</name>
                            <syntax>public nothrow inline DomNode* PreviousSibling() const;</syntax>
                            <returnType ref="type.11578597"/>
                        </function>
                        <function id="member_function_SetName_DomNode_91F610996B54D1DF548AF27DFFAB5413120FCF58">
                            <name>SetName(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow inline void SetName(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetPrefix_DomNode_1EF9E6E9F12B9304CBCCE73EF377A7845644752A">
                            <name>SetPrefix(const String&lt;uchar>&amp; prefix)</name>
                            <syntax>public virtual void SetPrefix(const String&lt;uchar>&amp; prefix);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prefix</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ValueContainsNewLine_DomNode_974B7395ED104A9EA1FC118BDC23FB852C72CD01">
                            <name>ValueContainsNewLine() const</name>
                            <syntax>public nothrow virtual bool ValueContainsNewLine() const;</syntax>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_Walk_DomNode_01D4B49EA0B27E6999659D9231EAA4CE5F93FA17">
                            <name>Walk(NodeOp&amp; nodeOp, Axis axis)</name>
                            <syntax>public void Walk(NodeOp&amp; nodeOp, Axis axis);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                                <parameter>
                                    <name>axis</name>
                                    <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkAncestor_DomNode_8A1869ED749CAEA7336C50365124ADB13DEE7333">
                            <name>WalkAncestor(NodeOp&amp; nodeOp)</name>
                            <syntax>public void WalkAncestor(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkAncestorOrSelf_DomNode_A604F521EF7C8A9696C620419BEDC0572DB09D3E">
                            <name>WalkAncestorOrSelf(NodeOp&amp; nodeOp)</name>
                            <syntax>public void WalkAncestorOrSelf(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkAttribute_DomNode_8A0665448EE9CE1E9C74FE41BF720F7C86C216A6">
                            <name>WalkAttribute(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkAttribute(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkChildren_DomNode_4DD4F52B40723B3813286AC7E5E3EFFBEF6309E8">
                            <name>WalkChildren(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkChildren(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkDescendant_DomNode_B7C74C6FA6D24AC004677A8BCF260A391793DC03">
                            <name>WalkDescendant(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkDescendant(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkDescendantOrSelf_DomNode_3A057E15ABDDD5FC0174C40D8B192F311787BF6A">
                            <name>WalkDescendantOrSelf(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkDescendantOrSelf(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkFollowing_DomNode_7CFDC8A2014BE7FD32038D0392616893F5834737">
                            <name>WalkFollowing(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkFollowing(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkFollowingSibling_DomNode_81AB8D182C77437313C38ADB960FAE0A12323961">
                            <name>WalkFollowingSibling(NodeOp&amp; nodeOp)</name>
                            <syntax>public void WalkFollowingSibling(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkParent_DomNode_38AAB90381E23F25AEDED3949B52676416064649">
                            <name>WalkParent(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkParent(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkPreceding_DomNode_9555D61B3089AAB5DE2EB57A9BE97A4ABC954760">
                            <name>WalkPreceding(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkPreceding(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkPrecedingOrSelf_DomNode_B139187B8ECA3961CA670800D1459FB50123EFB9">
                            <name>WalkPrecedingOrSelf(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkPrecedingOrSelf(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkPrecedingSibling_DomNode_213F71D6721D3C10C66EDCCA57EA6EFF4A97ED69">
                            <name>WalkPrecedingSibling(NodeOp&amp; nodeOp)</name>
                            <syntax>public void WalkPrecedingSibling(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Write_DomNode_05F285958389E34CA6C2512D954F2AA7FDB24AD0">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public abstract void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.11566265"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2">
                    <name>DomParentNode</name>
                    <groupName>DomParentNode</groupName>
                    <syntax>abstract public class DomParentNode;</syntax>
                    <baseClass ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                    <constructors>
                        <constructor id="constructor_DomParentNode_2EDAC20B45AD0B1A87C3482C3E5B254E7956735E">
                            <name>DomParentNode(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow explicit DomParentNode(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomParentNode_175630373BD383BB3C6E293E38D5E5C53BF34F9A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.11578610"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AppendChild_DomParentNode_DF3053D68BC15CAB455F46A051614D39DA1617AA">
                            <name>AppendChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild)</name>
                            <syntax>public virtual DomNode* AppendChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.11579276"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11578597"/>
                        </function>
                        <function id="member_function_ChildNodes_DomParentNode_6CB6FF0C8FD2B4262A6BBA7000162F3F1C4D0E4C">
                            <name>ChildNodes() const</name>
                            <syntax>public NodeList ChildNodes() const;</syntax>
                            <returnType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                        </function>
                        <function id="member_function_CloneChildrenTo_DomParentNode_E2459F3C1144E6B9C29FF70D150EA6F05945360B">
                            <name>CloneChildrenTo(DomParentNode* clone)</name>
                            <syntax>public void CloneChildrenTo(DomParentNode* clone);</syntax>
                            <parameters>
                                <parameter>
                                    <name>clone</name>
                                    <type ref="type.11578603"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_FirstChild_DomParentNode_B129A4013D1ECA9D760003712A718B9862B795DA">
                            <name>FirstChild() const</name>
                            <syntax>public nothrow inline DomNode* FirstChild() const;</syntax>
                            <returnType ref="type.11578597"/>
                        </function>
                        <function id="member_function_HasChildNodes_DomParentNode_18200E1E599C509661EB96D824FD8BA6B2EBEC7E">
                            <name>HasChildNodes() const</name>
                            <syntax>public nothrow override bool HasChildNodes() const;</syntax>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_InsertBefore_DomParentNode_0CA9971641672C82BAFEA8AB38C97C38E2DAAE45">
                            <name>InsertBefore(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* refChild)</name>
                            <syntax>public virtual DomNode* InsertBefore(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* refChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.11579276"/>
                                </parameter>
                                <parameter>
                                    <name>refChild</name>
                                    <type ref="type.11578597"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11578597"/>
                        </function>
                        <function id="member_function_LastChild_DomParentNode_01D8CE35EB4B754F1A625ABAE597FA0C56CF6371">
                            <name>LastChild() const</name>
                            <syntax>public nothrow inline DomNode* LastChild() const;</syntax>
                            <returnType ref="type.11578597"/>
                        </function>
                        <function id="member_function_RemoveChild_DomParentNode_BC671645753B4144C18087A3B363FC1FF2A50A4F">
                            <name>RemoveChild(DomNode* oldChild)</name>
                            <syntax>public virtual UniquePtr&lt;System.Dom.DomNode> RemoveChild(DomNode* oldChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>oldChild</name>
                                    <type ref="type.11578597"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579270"/>
                        </function>
                        <function id="member_function_ReplaceChild_DomParentNode_F30E2B35F5C6E879A979D455243DD32E9965E37E">
                            <name>ReplaceChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* oldChild)</name>
                            <syntax>public virtual UniquePtr&lt;System.Dom.DomNode> ReplaceChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* oldChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.11579276"/>
                                </parameter>
                                <parameter>
                                    <name>oldChild</name>
                                    <type ref="type.11578597"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579270"/>
                        </function>
                        <function id="member_function_WalkChildren_DomParentNode_F71B72A14AC2758A406A828A5686082E4D163532">
                            <name>WalkChildren(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkChildren(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkDescendant_DomParentNode_440D2197E6D78C9AD8B5EE673525FF6A4032C700">
                            <name>WalkDescendant(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkDescendant(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkDescendantOrSelf_DomParentNode_366E0175C363C8A7904AA01D63B4AE6895EB4B97">
                            <name>WalkDescendantOrSelf(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkDescendantOrSelf(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkPreceding_DomParentNode_B0FFC420855EF0F92B933377CF6CCC74820998ED">
                            <name>WalkPreceding(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkPreceding(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkPrecedingOrSelf_DomParentNode_6FE048113B73BFDBABB90BB32AE75681CF7880DA">
                            <name>WalkPrecedingOrSelf(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkPrecedingOrSelf(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.11578595"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Write_DomParentNode_81B62CCF5A83DC3EEA9195BC39D3F1CC22B26A89">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.11566265"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881">
                    <name>DomProcessingInstruction</name>
                    <groupName>DomProcessingInstruction</groupName>
                    <syntax> public class DomProcessingInstruction;</syntax>
                    <baseClass ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                    <constructors>
                        <constructor id="constructor_DomProcessingInstruction_DE21C7B52CDBA1009A84861A78DCDE03CECE4BC7">
                            <name>DomProcessingInstruction(const String&lt;uchar>&amp; target_, const String&lt;uchar>&amp; data_)</name>
                            <syntax>public nothrow DomProcessingInstruction(const String&lt;uchar>&amp; target_, const String&lt;uchar>&amp; data_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>target_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                                <parameter>
                                    <name>data_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomProcessingInstruction_F0E91A1A782BC0C775010334643E7FF0817FB99B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.11578610"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomProcessingInstruction_D80974BD3509ADF130742C494ABE20283916CEAC">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.11565906"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579270"/>
                        </function>
                        <function id="function_group_Data_4D2BA8D5B249FFFCE41FD8C890321070827616EC">
                            <name>Data</name>
                            <overloads>
                                <overload id="member_function_Data_DomProcessingInstruction_AB163AA45F23C116BF841417BB9BF40FE0B874D4">
                                    <name>Data()</name>
                                    <syntax>public nothrow inline String&lt;uchar>&amp; Data();</syntax>
                                    <returnType ref="type.11567210"/>
                                </overload>
                                <overload id="member_function_Data_DomProcessingInstruction_8FB02FEF10367B281308D8E28BCE5E6589079D59">
                                    <name>Data() const</name>
                                    <syntax>public nothrow inline const String&lt;uchar>&amp; Data() const;</syntax>
                                    <returnType ref="type.11567213"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Target_5F883D15E62A29E04C1477225F4BFD81303AE764">
                            <name>Target</name>
                            <overloads>
                                <overload id="member_function_Target_DomProcessingInstruction_951942C2E3FDE12B36440A2351C6817A25554AA2">
                                    <name>Target()</name>
                                    <syntax>public nothrow inline String&lt;uchar>&amp; Target();</syntax>
                                    <returnType ref="type.11567210"/>
                                </overload>
                                <overload id="member_function_Target_DomProcessingInstruction_6F380474EBCAF57D61BDD7F12D4D7A3174B5A844">
                                    <name>Target() const</name>
                                    <syntax>public nothrow inline const String&lt;uchar>&amp; Target() const;</syntax>
                                    <returnType ref="type.11567213"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Write_DomProcessingInstruction_C1B17952426F3D4C254F69BD0AF10A60F266D8C8">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.11566265"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D">
                    <name>DomText</name>
                    <groupName>DomText</groupName>
                    <syntax> public class DomText;</syntax>
                    <baseClass ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                    <constructors>
                        <constructor id="default_constructor_DomText_B844151B3EF41E0790D555F06F518F3F7FD16496">
                            <name>DomText()</name>
                            <syntax>public nothrow DomText();</syntax>
                        </constructor>
                        <constructor id="constructor_DomText_B3E3835B94AD0A4CE92A3F8AFA7BFD3D2A5606B0">
                            <name>DomText(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow explicit DomText(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_DomText_F419AA7037823C5D76020FADE3B2C177539CBEB8">
                            <name>DomText(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; data_)</name>
                            <syntax>public nothrow DomText(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; data_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                                <parameter>
                                    <name>data_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomText_C20BA958979ABC837784825A7CCACBB950ACF37A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.11578610"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomText_437A987BDB56AEBE601A7FF332519456A1FB2E00">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.11565906"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579270"/>
                        </function>
                    </functions>
                </class>
                <class id="class_ElementsByTagNameVisitor_DBE61B07E819E1EB70C9AEFFF9A22069D47BD652">
                    <name>ElementsByTagNameVisitor</name>
                    <groupName>ElementsByTagNameVisitor</groupName>
                    <syntax> public class ElementsByTagNameVisitor;</syntax>
                    <baseClass ref="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC"/>
                    <constructors>
                        <constructor id="constructor_ElementsByTagNameVisitor_A9CC3BAD2BAE97A962E046EB9F5296C1FB00E044">
                            <name>ElementsByTagNameVisitor(NodeList&amp; elements_, const String&lt;uchar>&amp; tagName_)</name>
                            <syntax>public nothrow ElementsByTagNameVisitor(NodeList&amp; elements_, const String&lt;uchar>&amp; tagName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>elements_</name>
                                    <type ref="type.11578616"/>
                                </parameter>
                                <parameter>
                                    <name>tagName_</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_BeginVisit_ElementsByTagNameVisitor_1E834A403D412DF90E15C2817BFF05858EBA7ECE">
                            <name>BeginVisit(DomElement* element)</name>
                            <syntax>public override void BeginVisit(DomElement* element);</syntax>
                            <parameters>
                                <parameter>
                                    <name>element</name>
                                    <type ref="type.11578581"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B">
                    <name>NodeList</name>
                    <groupName>NodeList</groupName>
                    <syntax> public class NodeList;</syntax>
                    <functions>
                        <function id="member_function_InternalAddNode_NodeList_AD29C2CD97655C72BC89C20E8785A03E0EE09AA8">
                            <name>InternalAddNode(DomNode* node)</name>
                            <syntax>public void InternalAddNode(DomNode* node);</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.11578597"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Item_NodeList_3A3D59B690B0DBC6AD7459F73805CAA1451D3F3F">
                            <name>Item(long index) const</name>
                            <syntax>public nothrow inline DomNode* Item(long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.11565913"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11578597"/>
                        </function>
                        <function id="member_function_Length_NodeList_F2FE1619D547220DDBAEC7BAA5E5C4B6EE9C4DC9">
                            <name>Length() const</name>
                            <syntax>public nothrow inline long Length() const;</syntax>
                            <returnType ref="type.11565913"/>
                        </function>
                        <function id="member_function_op_index_NodeList_1780681D22AE39396942CA34FF753C94B5DEEAED">
                            <name>operator[](long index) const</name>
                            <syntax>public nothrow inline DomNode* operator[](long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.11565913"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11578597"/>
                        </function>
                    </functions>
                </class>
                <class id="class_NodeOp_A834E32432E8B9893D49D376C8198B2DA0983A10">
                    <name>NodeOp</name>
                    <groupName>NodeOp</groupName>
                    <syntax> public class NodeOp;</syntax>
                    <functions>
                        <function id="member_function_Apply_NodeOp_9D50791E1E5C94351EFCB6673C31DC266BB61D94">
                            <name>Apply(DomNode* node)</name>
                            <syntax>public virtual void Apply(DomNode* node);</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.11578597"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC">
                    <name>Visitor</name>
                    <groupName>Visitor</groupName>
                    <syntax> public class Visitor;</syntax>
                    <functions>
                        <function id="function_group_BeginVisit_B95139E413B6344EE39468BC12C1EBAA4A84CAAE">
                            <name>BeginVisit</name>
                            <overloads>
                                <overload id="member_function_BeginVisit_Visitor_9932BCCF15E1E576730A17901E60D14F62FADAA1">
                                    <name>BeginVisit(DomDocument* document)</name>
                                    <syntax>public virtual void BeginVisit(DomDocument* document);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>document</name>
                                            <type ref="type.11578560"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_B15AA35A55ED994E7C1E95FEBC0ED7BEA62EC1DD">
                                    <name>BeginVisit(DomElement* element)</name>
                                    <syntax>public virtual void BeginVisit(DomElement* element);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>element</name>
                                            <type ref="type.11578581"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_EndVisit_6794E8B220ADA88A084AE3C6637B0804D14056F1">
                            <name>EndVisit</name>
                            <overloads>
                                <overload id="member_function_EndVisit_Visitor_245CB1C98B54C28A814CC3E39B212FE05015CD6F">
                                    <name>EndVisit(DomDocument* document)</name>
                                    <syntax>public virtual void EndVisit(DomDocument* document);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>document</name>
                                            <type ref="type.11578560"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_9E5C2BB49E3CC3D2AFD84D51EA0B3F8007F5192E">
                                    <name>EndVisit(DomElement* element)</name>
                                    <syntax>public virtual void EndVisit(DomElement* element);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>element</name>
                                            <type ref="type.11578581"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Visit_B12049CF36CAD47850D47714F20E6756604181A6">
                            <name>Visit</name>
                            <overloads>
                                <overload id="member_function_Visit_Visitor_1A27464E9FE736CA7E9E6D09721F4428BE2D250D">
                                    <name>Visit(DomCDataSection* cdataSection)</name>
                                    <syntax>public virtual void Visit(DomCDataSection* cdataSection);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>cdataSection</name>
                                            <type ref="type.11578542"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A0BB6B6195C899ACC084C24EE4AB684FE22F0072">
                                    <name>Visit(DomComment* comment)</name>
                                    <syntax>public virtual void Visit(DomComment* comment);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>comment</name>
                                            <type ref="type.11578548"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_066CDCD711BD2D7F6D6F54485317F141C05F030A">
                                    <name>Visit(DomProcessingInstruction* processingInstruction)</name>
                                    <syntax>public virtual void Visit(DomProcessingInstruction* processingInstruction);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>processingInstruction</name>
                                            <type ref="type.11578554"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_5866A26A863EB49561A5F8CC68AC6CA84D5B94A6">
                                    <name>Visit(DomText* text)</name>
                                    <syntax>public virtual void Visit(DomText* text);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>text</name>
                                            <type ref="type.11578536"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_AttrValueEscape_362208DD2DF9A6171A5AF308A9E079DB7C7E27B0">
                    <name>AttrValueEscape(const String&lt;uchar>&amp; attributeValue, uchar delimiter)</name>
                    <syntax>public nothrow String&lt;uchar> AttrValueEscape(const String&lt;uchar>&amp; attributeValue, uchar delimiter);</syntax>
                    <parameters>
                        <parameter>
                            <name>attributeValue</name>
                            <type ref="type.11567213"/>
                        </parameter>
                        <parameter>
                            <name>delimiter</name>
                            <type ref="type.11565919"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.11567208"/>
                </function>
                <function id="function_AxisName_D89A234F6060B307C3C9DADFF0CBDE9BF2CA2312">
                    <name>AxisName(Axis axis)</name>
                    <syntax>public nothrow String&lt;uchar> AxisName(Axis axis);</syntax>
                    <parameters>
                        <parameter>
                            <name>axis</name>
                            <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.11567208"/>
                </function>
                <function id="function_MakeXmlAttrValue_EF82DEEB8B524A7E6BE0F669B376D42D9ED4A48A">
                    <name>MakeXmlAttrValue(const String&lt;uchar>&amp; attrValue)</name>
                    <syntax>public nothrow String&lt;uchar> MakeXmlAttrValue(const String&lt;uchar>&amp; attrValue);</syntax>
                    <parameters>
                        <parameter>
                            <name>attrValue</name>
                            <type ref="type.11567213"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.11567208"/>
                </function>
                <function id="function_group_ParseXmlContentToDomDocument_3D7C62FBB65FEC9673C2CB0A95BD58D4A0081799">
                    <name>ParseXmlContentToDomDocument</name>
                    <overloads>
                        <overload id="function_ParseXmlContentToDomDocument_908DF5EBE9F27F3A5F117904A2E58021B0EC0AC2">
                            <name>ParseXmlContentToDomDocument(const String&lt;char>&amp; xmlContent, const String&lt;char>&amp; systemId)</name>
                            <syntax>public UniquePtr&lt;System.Dom.DomDocument> ParseXmlContentToDomDocument(const String&lt;char>&amp; xmlContent, const String&lt;char>&amp; systemId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlContent</name>
                                    <type ref="type.11567125"/>
                                </parameter>
                                <parameter>
                                    <name>systemId</name>
                                    <type ref="type.11567125"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579494"/>
                        </overload>
                        <overload id="function_ParseXmlContentToDomDocument_43FCDABD5857D3B7093B08EE39ABDA8D063B9990">
                            <name>ParseXmlContentToDomDocument(const String&lt;uchar>&amp; xmlContent, const String&lt;char>&amp; systemId)</name>
                            <syntax>public UniquePtr&lt;System.Dom.DomDocument> ParseXmlContentToDomDocument(const String&lt;uchar>&amp; xmlContent, const String&lt;char>&amp; systemId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlContent</name>
                                    <type ref="type.11567213"/>
                                </parameter>
                                <parameter>
                                    <name>systemId</name>
                                    <type ref="type.11567125"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579494"/>
                        </overload>
                        <overload id="function_ParseXmlContentToDomDocument_0BE70E7597FC179FFB38BBE863EB51E81DCF4005">
                            <name>ParseXmlContentToDomDocument(const String&lt;wchar>&amp; xmlContent, const String&lt;char>&amp; systemId)</name>
                            <syntax>public UniquePtr&lt;System.Dom.DomDocument> ParseXmlContentToDomDocument(const String&lt;wchar>&amp; xmlContent, const String&lt;char>&amp; systemId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlContent</name>
                                    <type ref="type.11567168"/>
                                </parameter>
                                <parameter>
                                    <name>systemId</name>
                                    <type ref="type.11567125"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11579494"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ParseXmlFileToDomDocument_CDBEF03097E654DC3609B662FEAF72116D01B7CA">
                    <name>ParseXmlFileToDomDocument(const String&lt;char>&amp; xmlFileName)</name>
                    <syntax>public UniquePtr&lt;System.Dom.DomDocument> ParseXmlFileToDomDocument(const String&lt;char>&amp; xmlFileName);</syntax>
                    <parameters>
                        <parameter>
                            <name>xmlFileName</name>
                            <type ref="type.11567125"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.11579494"/>
                </function>
                <function id="function_XmlCharDataEscape_3E37A8F52A656F4295DB0FCACB3F063949966382">
                    <name>XmlCharDataEscape(const String&lt;uchar>&amp; charData)</name>
                    <syntax>public nothrow String&lt;uchar> XmlCharDataEscape(const String&lt;uchar>&amp; charData);</syntax>
                    <parameters>
                        <parameter>
                            <name>charData</name>
                            <type ref="type.11567213"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.11567208"/>
                </function>
                <function id="function_op_eq_C18E752F81824F111C84E6AE9A1DA83240CB03B6">
                    <name>operator==(Axis left, Axis right)</name>
                    <syntax>public bool operator==(Axis left, Axis right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.11565906"/>
                </function>
            </functions>
            <enumerations>
                <enumeration id="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB">
                    <name>Axis</name>
                    <syntax>public enum Axis;</syntax>
                    <underlyingType ref="type.11565911"/>
                    <enumConstant>
                        <name>child</name>
                        <value>0</value>
                    </enumConstant>
                    <enumConstant>
                        <name>descendant</name>
                        <value>1</value>
                    </enumConstant>
                    <enumConstant>
                        <name>parent</name>
                        <value>2</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ancestor</name>
                        <value>3</value>
                    </enumConstant>
                    <enumConstant>
                        <name>followingSibling</name>
                        <value>4</value>
                    </enumConstant>
                    <enumConstant>
                        <name>precedingSibling</name>
                        <value>5</value>
                    </enumConstant>
                    <enumConstant>
                        <name>following</name>
                        <value>6</value>
                    </enumConstant>
                    <enumConstant>
                        <name>preceding</name>
                        <value>7</value>
                    </enumConstant>
                    <enumConstant>
                        <name>attribute</name>
                        <value>8</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ns</name>
                        <value>9</value>
                    </enumConstant>
                    <enumConstant>
                        <name>self</name>
                        <value>10</value>
                    </enumConstant>
                    <enumConstant>
                        <name>descendantOrSelf</name>
                        <value>11</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ancestorOrSelf</name>
                        <value>12</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
    </namespaces>
    <types>
        <type derived="true" id="type.4699">
            <name>AddressOf&amp;&amp;</name>
            <content>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4771">
            <name>AssertStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB">
            <name>Axis</name>
        </type>
        <type derived="true" id="type.11579463">
            <name>Axis&amp;</name>
            <content>
                <baseType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579464">
            <name>Axis&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579462">
            <name>Axis*</name>
            <content>
                <baseType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A" specialization="true">
            <name>BackInsertIterator&lt;C></name>
            <content>
                <primaryType ref="class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A"/>
                <argumentType ref="11566242"/>
            </content>
        </type>
        <type derived="true" id="type.4159">
            <name>BackInsertIterator&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4153">
            <name>BackInsertIterator&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD" specialization="true">
            <name>BackInsertProxy&lt;C></name>
            <content>
                <primaryType ref="class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
                <argumentType ref="11566242"/>
            </content>
        </type>
        <type derived="true" id="type.4145">
            <name>BackInsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4156">
            <name>BackInsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4149">
            <name>BackInsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567958" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.4268">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.11567958"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579316" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.11579290"/>
            </content>
        </type>
        <type derived="true" id="type.11579318">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>&amp;</name>
            <content>
                <baseType ref="type.11579316"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579317">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*</name>
            <content>
                <baseType ref="type.11579316"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579349">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;</name>
            <content>
                <baseType ref="type.11579316"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579359">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.11579316"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579350">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**</name>
            <content>
                <baseType ref="type.11579316"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579557">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**&amp;</name>
            <content>
                <baseType ref="type.11579316"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579558">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.11579316"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579556">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>***</name>
            <content>
                <baseType ref="type.11579316"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="11566559"/>
            </content>
        </type>
        <type derived="true" id="type.4276">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="11566580"/>
            </content>
        </type>
        <type derived="true" id="type.4289">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B">
            <name>BuildIndexVisitor</name>
        </type>
        <type derived="true" id="type.11578567">
            <name>BuildIndexVisitor&amp;</name>
            <content>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4807">
            <name>BuildIndexVisitor&amp;&amp;</name>
            <content>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578566">
            <name>BuildIndexVisitor*</name>
            <content>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4795">
            <name>CharParser&amp;&amp;</name>
            <content>
                <baseType ref="class_CharParser_F30B4B7DDC9B8D3CD1476C03049B3C7189028FDA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4778">
            <name>CodeExpandingVisitor&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11566265">
            <name>CodeFormatter&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4677">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4714">
            <name>Complement&amp;&amp;</name>
            <content>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578489">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4138">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578489">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578488">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4137">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4772">
            <name>Const&amp;&amp;</name>
            <content>
                <baseType ref="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4732">
            <name>Construct&amp;&amp;</name>
            <content>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567094" specialization="true">
            <name>Counter&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type id="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30" specialization="true">
            <name>Counter&lt;T></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="11566726"/>
            </content>
        </type>
        <type derived="true" id="type.4410">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4395">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4376">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4417">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4388">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4379">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A" specialization="true">
            <name>Counter&lt;U></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="11566732"/>
            </content>
        </type>
        <type derived="true" id="type.4750">
            <name>DeleteStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4696">
            <name>Deref&amp;&amp;</name>
            <content>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4753">
            <name>DestroyStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845">
            <name>DomAttr</name>
        </type>
        <type derived="true" id="type.11578576">
            <name>DomAttr&amp;</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579365">
            <name>DomAttr&amp;&amp;</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578575">
            <name>DomAttr*</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579460">
            <name>DomAttr*&amp;</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579596">
            <name>DomAttr*&amp;&amp;</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579595">
            <name>DomAttr**</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C">
            <name>DomCDataSection</name>
        </type>
        <type derived="true" id="type.11578543">
            <name>DomCDataSection&amp;</name>
            <content>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579279">
            <name>DomCDataSection&amp;&amp;</name>
            <content>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578542">
            <name>DomCDataSection*</name>
            <content>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991">
            <name>DomCharacterData</name>
        </type>
        <type derived="true" id="type.11578531">
            <name>DomCharacterData&amp;</name>
            <content>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579277">
            <name>DomCharacterData&amp;&amp;</name>
            <content>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578530">
            <name>DomCharacterData*</name>
            <content>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38">
            <name>DomComment</name>
        </type>
        <type derived="true" id="type.11578549">
            <name>DomComment&amp;</name>
            <content>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579280">
            <name>DomComment&amp;&amp;</name>
            <content>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578548">
            <name>DomComment*</name>
            <content>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8">
            <name>DomDocument</name>
        </type>
        <type derived="true" id="type.11578561">
            <name>DomDocument&amp;</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579283">
            <name>DomDocument&amp;&amp;</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578560">
            <name>DomDocument*</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579579">
            <name>DomDocument*&amp;</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579578">
            <name>DomDocument**</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomDocumentBuilder_397E94D2EA454117602C5070385DB01C1EFBB45B">
            <name>DomDocumentBuilder</name>
        </type>
        <type derived="true" id="type.11578619">
            <name>DomDocumentBuilder&amp;</name>
            <content>
                <baseType ref="class_DomDocumentBuilder_397E94D2EA454117602C5070385DB01C1EFBB45B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578618">
            <name>DomDocumentBuilder*</name>
            <content>
                <baseType ref="class_DomDocumentBuilder_397E94D2EA454117602C5070385DB01C1EFBB45B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3">
            <name>DomDocumentFragment</name>
        </type>
        <type derived="true" id="type.11578570">
            <name>DomDocumentFragment&amp;</name>
            <content>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579364">
            <name>DomDocumentFragment&amp;&amp;</name>
            <content>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578569">
            <name>DomDocumentFragment*</name>
            <content>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579655">
            <name>DomDocumentFragment*&amp;</name>
            <content>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579654">
            <name>DomDocumentFragment**</name>
            <content>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B">
            <name>DomElement</name>
        </type>
        <type derived="true" id="type.11578582">
            <name>DomElement&amp;</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579366">
            <name>DomElement&amp;&amp;</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578581">
            <name>DomElement*</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579360">
            <name>DomElement*&amp;</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579543">
            <name>DomElement*&amp;&amp;</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579541">
            <name>DomElement**</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA">
            <name>DomException</name>
        </type>
        <type derived="true" id="type.11578592">
            <name>DomException&amp;</name>
            <content>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579467">
            <name>DomException&amp;&amp;</name>
            <content>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578591">
            <name>DomException*</name>
            <content>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509">
            <name>DomNode</name>
        </type>
        <type derived="true" id="type.11578598">
            <name>DomNode&amp;</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579269">
            <name>DomNode&amp;&amp;</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578597">
            <name>DomNode*</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579483">
            <name>DomNode*&amp;</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579493">
            <name>DomNode*&amp;&amp;</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579484">
            <name>DomNode**</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579649">
            <name>DomNode**&amp;</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579648">
            <name>DomNode***</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578487">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4136">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4690">
            <name>DomObject&amp;&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578486">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4135">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2">
            <name>DomParentNode</name>
        </type>
        <type derived="true" id="type.11578604">
            <name>DomParentNode&amp;</name>
            <content>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579282">
            <name>DomParentNode&amp;&amp;</name>
            <content>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578603">
            <name>DomParentNode*</name>
            <content>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579560">
            <name>DomParentNode*&amp;</name>
            <content>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579559">
            <name>DomParentNode**</name>
            <content>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881">
            <name>DomProcessingInstruction</name>
        </type>
        <type derived="true" id="type.11578555">
            <name>DomProcessingInstruction&amp;</name>
            <content>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579281">
            <name>DomProcessingInstruction&amp;&amp;</name>
            <content>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578554">
            <name>DomProcessingInstruction*</name>
            <content>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D">
            <name>DomText</name>
        </type>
        <type derived="true" id="type.11578537">
            <name>DomText&amp;</name>
            <content>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579278">
            <name>DomText&amp;&amp;</name>
            <content>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578536">
            <name>DomText*</name>
            <content>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ElementsByTagNameVisitor_DBE61B07E819E1EB70C9AEFFF9A22069D47BD652">
            <name>ElementsByTagNameVisitor</name>
        </type>
        <type derived="true" id="type.11578588">
            <name>ElementsByTagNameVisitor&amp;</name>
            <content>
                <baseType ref="class_ElementsByTagNameVisitor_DBE61B07E819E1EB70C9AEFFF9A22069D47BD652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578587">
            <name>ElementsByTagNameVisitor*</name>
            <content>
                <baseType ref="class_ElementsByTagNameVisitor_DBE61B07E819E1EB70C9AEFFF9A22069D47BD652"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11575520" specialization="true">
            <name>EqualTo&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="type.11567208"/>
            </content>
        </type>
        <type derived="true" id="type.4790">
            <name>ExpectationParser&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4756">
            <name>ExpressionStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <argumentType ref="11566463"/>
            </content>
        </type>
        <type derived="true" id="type.4209">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="11566456"/>
                <argumentType ref="11566457"/>
                <argumentType ref="11566458"/>
            </content>
        </type>
        <type derived="true" id="type.4206">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4205">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="11566464"/>
                <argumentType ref="type.11567453"/>
                <argumentType ref="type.11567455"/>
            </content>
        </type>
        <type derived="true" id="type.4213">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4211">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4208">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="11566463"/>
                <argumentType ref="type.11567406"/>
                <argumentType ref="type.11567407"/>
            </content>
        </type>
        <type derived="true" id="type.4207">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4210">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4212">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8" specialization="true">
            <name>FrontInsertIterator&lt;C></name>
            <content>
                <primaryType ref="class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8"/>
                <argumentType ref="11566470"/>
            </content>
        </type>
        <type derived="true" id="type.4230">
            <name>FrontInsertIterator&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4224">
            <name>FrontInsertIterator&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467" specialization="true">
            <name>FrontInsertProxy&lt;C></name>
            <content>
                <primaryType ref="class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
                <argumentType ref="11566469"/>
            </content>
        </type>
        <type derived="true" id="type.4220">
            <name>FrontInsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4227">
            <name>FrontInsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4216">
            <name>FrontInsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4660">
            <name>FunctionProfiler&amp;&amp;</name>
            <content>
                <baseType ref="class_FunctionProfiler_809E118D4757DEA417E0CB7F4E658DF7C4B79B00"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4762">
            <name>GotoCaseStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4747">
            <name>GotoStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579284" specialization="true">
            <name>HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11578581"/>
                <argumentType ref="type.11575514"/>
                <argumentType ref="type.11575520"/>
            </content>
        </type>
        <type derived="true" id="type.11579286">
            <name>HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.11579284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579285">
            <name>HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.11579284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579590">
            <name>HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.11579284"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579589">
            <name>HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.11579284"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11575514" specialization="true">
            <name>Hasher&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <argumentType ref="type.11567208"/>
            </content>
        </type>
        <type id="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="11566550"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <argumentType ref="11566552"/>
                <argumentType ref="11566553"/>
            </content>
        </type>
        <type derived="true" id="type.4264">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="11566579"/>
                <argumentType ref="11566580"/>
                <argumentType ref="11566581"/>
                <argumentType ref="11566582"/>
                <argumentType ref="11566583"/>
            </content>
        </type>
        <type derived="true" id="type.4284">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579304" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11579290"/>
                <argumentType ref="type.11579294"/>
                <argumentType ref="type.11575514"/>
                <argumentType ref="type.11575520"/>
            </content>
        </type>
        <type derived="true" id="type.11579306">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.11579304"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579330">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579304"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579305">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.11579304"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579574">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.11579304"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579575">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.11579304"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579573">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.11579304"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11575828" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11575819"/>
                <argumentType ref="type.11575514"/>
                <argumentType ref="type.11575520"/>
            </content>
        </type>
        <type id="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="11566559"/>
                <argumentType ref="11566559"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="11566560"/>
                <argumentType ref="11566561"/>
            </content>
        </type>
        <type derived="true" id="type.4272">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579310" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.11579290"/>
                <argumentType ref="type.11579292"/>
                <argumentType ref="type.11579291"/>
                <argumentType ref="type.11579304"/>
            </content>
        </type>
        <type derived="true" id="type.11579312">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.11579310"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579582">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579310"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579311">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.11579310"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579324" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.11579290"/>
                <argumentType ref="type.11579301"/>
                <argumentType ref="type.11579322"/>
                <argumentType ref="type.11579304"/>
            </content>
        </type>
        <type derived="true" id="type.11579326">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.11579324"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579576">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579324"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579325">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.11579324"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579033" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567210"/>
                <argumentType ref="type.11567209"/>
                <argumentType ref="type.11575828"/>
            </content>
        </type>
        <type id="type.4555" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567210"/>
                <argumentType ref="type.11567209"/>
                <argumentType ref="type.11575828"/>
            </content>
        </type>
        <type id="type.11579033" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567210"/>
                <argumentType ref="type.11567209"/>
                <argumentType ref="type.11575828"/>
            </content>
        </type>
        <type derived="true" id="type.4557">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.4555"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579035">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.11579033"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4556">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.4555"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579034">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.11579033"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4561" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567213"/>
                <argumentType ref="type.11567212"/>
                <argumentType ref="type.11575828"/>
            </content>
        </type>
        <type id="type.11579039" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567213"/>
                <argumentType ref="type.11567212"/>
                <argumentType ref="type.11575828"/>
            </content>
        </type>
        <type derived="true" id="type.11579041">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.11579039"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4563">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.4561"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579041">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.11579039"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579040">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.11579039"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4562">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.4561"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4736">
            <name>Identifier&amp;&amp;</name>
            <content>
                <baseType ref="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A" specialization="true">
            <name>InsertProxy&lt;C></name>
            <content>
                <primaryType ref="class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
                <argumentType ref="11566587"/>
            </content>
        </type>
        <type derived="true" id="type.4297">
            <name>InsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4300">
            <name>InsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4293">
            <name>InsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4804">
            <name>InternalEntity&amp;&amp;</name>
            <content>
                <baseType ref="class_InternalEntity_724D2DA658DF130784EEFD7D00A1AF74339A3CBD"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4717">
            <name>Invoke&amp;&amp;</name>
            <content>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4787">
            <name>KleeneStarParser&amp;&amp;</name>
            <content>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579395" specialization="true">
            <name>Less&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2"/>
                <argumentType ref="type.11567208"/>
            </content>
        </type>
        <type derived="true" id="type.11579400">
            <name>Less&lt;String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.11579395"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579602">
            <name>Less&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579395"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579399">
            <name>Less&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.11579395"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <argumentType ref="11566595"/>
            </content>
        </type>
        <type derived="true" id="type.4304">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4303">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567977" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.11567959"/>
            </content>
        </type>
        <type derived="true" id="type.4267">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567977"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579334" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.11579317"/>
            </content>
        </type>
        <type derived="true" id="type.11579336">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*>&amp;</name>
            <content>
                <baseType ref="type.11579334"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579358">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579334"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579335">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*>*</name>
            <content>
                <baseType ref="type.11579334"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11568130" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.11568113"/>
            </content>
        </type>
        <type derived="true" id="type.4275">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568130"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568315" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.11568296"/>
            </content>
        </type>
        <type derived="true" id="type.4288">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568315"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579468" specialization="true">
            <name>List&lt;DomNode*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.11578597"/>
            </content>
        </type>
        <type derived="true" id="type.11579470">
            <name>List&lt;DomNode*>&amp;</name>
            <content>
                <baseType ref="type.11579468"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579492">
            <name>List&lt;DomNode*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579468"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579469">
            <name>List&lt;DomNode*>*</name>
            <content>
                <baseType ref="type.11579468"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11569841" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.4435">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569841"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4619" specialization="true">
            <name>List&lt;String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.11567209"/>
            </content>
        </type>
        <type id="type.11579097" specialization="true">
            <name>List&lt;String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.11567209"/>
            </content>
        </type>
        <type derived="true" id="type.11579099">
            <name>List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <baseType ref="type.11579097"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4621">
            <name>List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <baseType ref="type.4619"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4650">
            <name>List&lt;String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579097"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4639">
            <name>List&lt;String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4619"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4620">
            <name>List&lt;String&lt;uchar>*>*</name>
            <content>
                <baseType ref="type.4619"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579098">
            <name>List&lt;String&lt;uchar>*>*</name>
            <content>
                <baseType ref="type.11579097"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="11566742"/>
            </content>
        </type>
        <type derived="true" id="type.4347">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4429">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4307">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579374" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Dom.DomAttr>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.11579367"/>
            </content>
        </type>
        <type derived="true" id="type.11579376">
            <name>List&lt;UniquePtr&lt;System.Dom.DomAttr>>&amp;</name>
            <content>
                <baseType ref="type.11579374"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579394">
            <name>List&lt;UniquePtr&lt;System.Dom.DomAttr>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579374"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579375">
            <name>List&lt;UniquePtr&lt;System.Dom.DomAttr>>*</name>
            <content>
                <baseType ref="type.11579374"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579514" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Dom.DomElement>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.11579501"/>
            </content>
        </type>
        <type derived="true" id="type.11579516">
            <name>List&lt;UniquePtr&lt;System.Dom.DomElement>>&amp;</name>
            <content>
                <baseType ref="type.11579514"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579534">
            <name>List&lt;UniquePtr&lt;System.Dom.DomElement>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579514"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579515">
            <name>List&lt;UniquePtr&lt;System.Dom.DomElement>>*</name>
            <content>
                <baseType ref="type.11579514"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4740">
            <name>Literal&amp;&amp;</name>
            <content>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1" specialization="true">
            <name>LockGuard&lt;Mtx></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="11566637"/>
            </content>
        </type>
        <type derived="true" id="type.4335">
            <name>LockGuard&lt;Mtx>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572183" specialization="true">
            <name>LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.4522">
            <name>LockGuard&lt;System.Threading.Mutex>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572183"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4773">
            <name>LvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579401" specialization="true">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11578575"/>
                <argumentType ref="type.11579395"/>
            </content>
        </type>
        <type derived="true" id="type.11579403">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.11579401"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579461">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579401"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579402">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.11579401"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579631">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.11579401"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579630">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.11579401"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4332">
            <name>Mtx&amp;</name>
            <content>
                <baseType ref="11566637"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4735">
            <name>New&amp;&amp;</name>
            <content>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B">
            <name>NodeList</name>
        </type>
        <type derived="true" id="type.11578616">
            <name>NodeList&amp;</name>
            <content>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579651">
            <name>NodeList&amp;&amp;</name>
            <content>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578615">
            <name>NodeList*</name>
            <content>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NodeOp_A834E32432E8B9893D49D376C8198B2DA0983A10">
            <name>NodeOp</name>
        </type>
        <type derived="true" id="type.11578595">
            <name>NodeOp&amp;</name>
            <content>
                <baseType ref="class_NodeOp_A834E32432E8B9893D49D376C8198B2DA0983A10"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578594">
            <name>NodeOp*</name>
            <content>
                <baseType ref="class_NodeOp_A834E32432E8B9893D49D376C8198B2DA0983A10"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4693">
            <name>Not&amp;&amp;</name>
            <content>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4781">
            <name>OptionalParser&amp;&amp;</name>
            <content>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579331" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.11579310"/>
                <argumentType ref="type.11565906"/>
            </content>
        </type>
        <type derived="true" id="type.11579333">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.11579331"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579585">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579331"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579332">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.11579331"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579045" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.11579033"/>
                <argumentType ref="type.11565906"/>
            </content>
        </type>
        <type id="type.4567" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4555"/>
                <argumentType ref="type.11565906"/>
            </content>
        </type>
        <type derived="true" id="type.11579047">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.11579045"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4569">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.4567"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579046">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.11579045"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4568">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.4567"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579450" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.11579442"/>
                <argumentType ref="type.11565906"/>
            </content>
        </type>
        <type derived="true" id="type.11579452">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.11579450"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579627">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579450"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579451">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>, bool>*</name>
            <content>
                <baseType ref="type.11579450"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579407" specialization="true">
            <name>Pair&lt;String&lt;uchar>, DomAttr*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11578575"/>
            </content>
        </type>
        <type derived="true" id="type.11579409">
            <name>Pair&lt;String&lt;uchar>, DomAttr*>&amp;</name>
            <content>
                <baseType ref="type.11579407"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579594">
            <name>Pair&lt;String&lt;uchar>, DomAttr*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579407"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579408">
            <name>Pair&lt;String&lt;uchar>, DomAttr*>*</name>
            <content>
                <baseType ref="type.11579407"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579290" specialization="true">
            <name>Pair&lt;String&lt;uchar>, DomElement*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11578581"/>
            </content>
        </type>
        <type derived="true" id="type.11579292">
            <name>Pair&lt;String&lt;uchar>, DomElement*>&amp;</name>
            <content>
                <baseType ref="type.11579290"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579542">
            <name>Pair&lt;String&lt;uchar>, DomElement*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579290"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579291">
            <name>Pair&lt;String&lt;uchar>, DomElement*>*</name>
            <content>
                <baseType ref="type.11579290"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="11566648"/>
                <argumentType ref="11566649"/>
            </content>
        </type>
        <type derived="true" id="type.11578491">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4140">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578491">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4139">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578490">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4794">
            <name>ParsingData&amp;&amp;</name>
            <content>
                <baseType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4142">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578493">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578492">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4141">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578492">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4775">
            <name>Pointer&amp;&amp;</name>
            <content>
                <baseType ref="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4784">
            <name>PositiveParser&amp;&amp;</name>
            <content>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4723">
            <name>PostfixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4720">
            <name>PostfixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4705">
            <name>PrefixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4702">
            <name>PrefixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576247" specialization="true">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574389"/>
                <argumentType ref="type.11576245"/>
                <argumentType ref="type.11576246"/>
            </content>
        </type>
        <type derived="true" id="type.4587">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576247"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571024" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566857"/>
                <argumentType ref="type.11570867"/>
                <argumentType ref="type.11571023"/>
            </content>
        </type>
        <type derived="true" id="type.4479">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571024"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572064" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566928"/>
                <argumentType ref="type.11571907"/>
                <argumentType ref="type.11572063"/>
            </content>
        </type>
        <type derived="true" id="type.4504">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571648" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566902"/>
                <argumentType ref="type.11571491"/>
                <argumentType ref="type.11571647"/>
            </content>
        </type>
        <type derived="true" id="type.4494">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571648"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571856" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566915"/>
                <argumentType ref="type.11571699"/>
                <argumentType ref="type.11571855"/>
            </content>
        </type>
        <type derived="true" id="type.4499">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571856"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570387" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566827"/>
                <argumentType ref="type.11570216"/>
                <argumentType ref="type.11570386"/>
            </content>
        </type>
        <type derived="true" id="type.4464">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570387"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570605" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566837"/>
                <argumentType ref="type.11570448"/>
                <argumentType ref="type.11570604"/>
            </content>
        </type>
        <type derived="true" id="type.4469">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570605"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575789" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575756"/>
                <argumentType ref="type.11575787"/>
                <argumentType ref="type.11575788"/>
            </content>
        </type>
        <type derived="true" id="type.4554">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575789"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575780" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575756"/>
                <argumentType ref="type.11575778"/>
                <argumentType ref="type.11575779"/>
            </content>
        </type>
        <type derived="true" id="type.4553">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575780"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567994" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567959"/>
                <argumentType ref="type.11567992"/>
                <argumentType ref="type.11567993"/>
            </content>
        </type>
        <type id="type.11568072" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568038"/>
                <argumentType ref="type.11568070"/>
                <argumentType ref="type.11568071"/>
            </content>
        </type>
        <type id="type.11567994" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567959"/>
                <argumentType ref="type.11567992"/>
                <argumentType ref="type.11567993"/>
            </content>
        </type>
        <type derived="true" id="type.4271">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568072"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4266">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567994"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567985" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567959"/>
                <argumentType ref="type.11567983"/>
                <argumentType ref="type.11567984"/>
            </content>
        </type>
        <type id="type.11568063" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568038"/>
                <argumentType ref="type.11568061"/>
                <argumentType ref="type.11568062"/>
            </content>
        </type>
        <type derived="true" id="type.4270">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568063"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4265">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567985"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571001" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570967"/>
                <argumentType ref="type.11570999"/>
                <argumentType ref="type.11571000"/>
            </content>
        </type>
        <type derived="true" id="type.4478">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571001"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570992" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570967"/>
                <argumentType ref="type.11570990"/>
                <argumentType ref="type.11570991"/>
            </content>
        </type>
        <type derived="true" id="type.4477">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570992"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572041" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572007"/>
                <argumentType ref="type.11572039"/>
                <argumentType ref="type.11572040"/>
            </content>
        </type>
        <type derived="true" id="type.4503">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572041"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572032" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572007"/>
                <argumentType ref="type.11572030"/>
                <argumentType ref="type.11572031"/>
            </content>
        </type>
        <type derived="true" id="type.4502">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572032"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571625" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571591"/>
                <argumentType ref="type.11571623"/>
                <argumentType ref="type.11571624"/>
            </content>
        </type>
        <type derived="true" id="type.4493">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571625"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571616" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571591"/>
                <argumentType ref="type.11571614"/>
                <argumentType ref="type.11571615"/>
            </content>
        </type>
        <type derived="true" id="type.4492">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571616"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571833" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571799"/>
                <argumentType ref="type.11571831"/>
                <argumentType ref="type.11571832"/>
            </content>
        </type>
        <type derived="true" id="type.4498">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571833"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571824" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571799"/>
                <argumentType ref="type.11571822"/>
                <argumentType ref="type.11571823"/>
            </content>
        </type>
        <type derived="true" id="type.4497">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571824"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570371" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570337"/>
                <argumentType ref="type.11570369"/>
                <argumentType ref="type.11570370"/>
            </content>
        </type>
        <type derived="true" id="type.4463">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570371"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570362" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570337"/>
                <argumentType ref="type.11570360"/>
                <argumentType ref="type.11570361"/>
            </content>
        </type>
        <type derived="true" id="type.4462">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570362"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570582" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570548"/>
                <argumentType ref="type.11570580"/>
                <argumentType ref="type.11570581"/>
            </content>
        </type>
        <type derived="true" id="type.4468">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570582"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570573" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570548"/>
                <argumentType ref="type.11570571"/>
                <argumentType ref="type.11570572"/>
            </content>
        </type>
        <type derived="true" id="type.4467">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570573"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570793" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570759"/>
                <argumentType ref="type.11570791"/>
                <argumentType ref="type.11570792"/>
            </content>
        </type>
        <type derived="true" id="type.4473">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570793"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570784" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570759"/>
                <argumentType ref="type.11570782"/>
                <argumentType ref="type.11570783"/>
            </content>
        </type>
        <type derived="true" id="type.4472">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570784"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571417" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571383"/>
                <argumentType ref="type.11571415"/>
                <argumentType ref="type.11571416"/>
            </content>
        </type>
        <type derived="true" id="type.4488">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571417"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571408" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571383"/>
                <argumentType ref="type.11571406"/>
                <argumentType ref="type.11571407"/>
            </content>
        </type>
        <type derived="true" id="type.4487">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571408"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571209" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571175"/>
                <argumentType ref="type.11571207"/>
                <argumentType ref="type.11571208"/>
            </content>
        </type>
        <type derived="true" id="type.4483">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571209"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571200" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571175"/>
                <argumentType ref="type.11571198"/>
                <argumentType ref="type.11571199"/>
            </content>
        </type>
        <type derived="true" id="type.4482">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571200"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579351" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11579317"/>
                <argumentType ref="type.11579349"/>
                <argumentType ref="type.11579350"/>
            </content>
        </type>
        <type derived="true" id="type.11579353">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;</name>
            <content>
                <baseType ref="type.11579351"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4654">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579351"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579352">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>*</name>
            <content>
                <baseType ref="type.11579351"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579342" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11579317"/>
                <argumentType ref="type.11579340"/>
                <argumentType ref="type.11579341"/>
            </content>
        </type>
        <type derived="true" id="type.11579344">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;</name>
            <content>
                <baseType ref="type.11579342"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4653">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579342"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579343">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>*</name>
            <content>
                <baseType ref="type.11579342"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11578068" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11578034"/>
                <argumentType ref="type.11578066"/>
                <argumentType ref="type.11578067"/>
            </content>
        </type>
        <type derived="true" id="type.4618">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11578068"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11578059" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11578034"/>
                <argumentType ref="type.11578057"/>
                <argumentType ref="type.11578058"/>
            </content>
        </type>
        <type derived="true" id="type.4617">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11578059"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576035" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576001"/>
                <argumentType ref="type.11576033"/>
                <argumentType ref="type.11576034"/>
            </content>
        </type>
        <type derived="true" id="type.4578">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576035"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576026" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576001"/>
                <argumentType ref="type.11576024"/>
                <argumentType ref="type.11576025"/>
            </content>
        </type>
        <type derived="true" id="type.4577">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576026"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576111" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576077"/>
                <argumentType ref="type.11576109"/>
                <argumentType ref="type.11576110"/>
            </content>
        </type>
        <type derived="true" id="type.4580">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576111"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576102" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576077"/>
                <argumentType ref="type.11576100"/>
                <argumentType ref="type.11576101"/>
            </content>
        </type>
        <type derived="true" id="type.4579">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576102"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576358" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576324"/>
                <argumentType ref="type.11576356"/>
                <argumentType ref="type.11576357"/>
            </content>
        </type>
        <type derived="true" id="type.4590">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576349" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576324"/>
                <argumentType ref="type.11576347"/>
                <argumentType ref="type.11576348"/>
            </content>
        </type>
        <type derived="true" id="type.4589">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576349"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575601" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575567"/>
                <argumentType ref="type.11575599"/>
                <argumentType ref="type.11575600"/>
            </content>
        </type>
        <type derived="true" id="type.4549">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575601"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575592" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575567"/>
                <argumentType ref="type.11575590"/>
                <argumentType ref="type.11575591"/>
            </content>
        </type>
        <type derived="true" id="type.4548">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575592"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570925" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570891"/>
                <argumentType ref="type.11570923"/>
                <argumentType ref="type.11570924"/>
            </content>
        </type>
        <type derived="true" id="type.4476">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570925"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570916" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570891"/>
                <argumentType ref="type.11570914"/>
                <argumentType ref="type.11570915"/>
            </content>
        </type>
        <type derived="true" id="type.4475">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570916"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571965" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571931"/>
                <argumentType ref="type.11571963"/>
                <argumentType ref="type.11571964"/>
            </content>
        </type>
        <type derived="true" id="type.4501">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571965"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571956" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571931"/>
                <argumentType ref="type.11571954"/>
                <argumentType ref="type.11571955"/>
            </content>
        </type>
        <type derived="true" id="type.4500">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571956"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571549" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571515"/>
                <argumentType ref="type.11571547"/>
                <argumentType ref="type.11571548"/>
            </content>
        </type>
        <type derived="true" id="type.4491">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571549"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571540" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571515"/>
                <argumentType ref="type.11571538"/>
                <argumentType ref="type.11571539"/>
            </content>
        </type>
        <type derived="true" id="type.4490">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571540"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571757" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571723"/>
                <argumentType ref="type.11571755"/>
                <argumentType ref="type.11571756"/>
            </content>
        </type>
        <type derived="true" id="type.4496">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571757"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571748" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571723"/>
                <argumentType ref="type.11571746"/>
                <argumentType ref="type.11571747"/>
            </content>
        </type>
        <type derived="true" id="type.4495">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571748"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570274" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570240"/>
                <argumentType ref="type.11570272"/>
                <argumentType ref="type.11570273"/>
            </content>
        </type>
        <type derived="true" id="type.4461">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570274"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570265" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570240"/>
                <argumentType ref="type.11570263"/>
                <argumentType ref="type.11570264"/>
            </content>
        </type>
        <type derived="true" id="type.4460">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570265"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570506" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570472"/>
                <argumentType ref="type.11570504"/>
                <argumentType ref="type.11570505"/>
            </content>
        </type>
        <type derived="true" id="type.4466">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570506"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570497" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570472"/>
                <argumentType ref="type.11570495"/>
                <argumentType ref="type.11570496"/>
            </content>
        </type>
        <type derived="true" id="type.4465">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570497"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570717" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570683"/>
                <argumentType ref="type.11570715"/>
                <argumentType ref="type.11570716"/>
            </content>
        </type>
        <type derived="true" id="type.4471">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570717"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570708" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570683"/>
                <argumentType ref="type.11570706"/>
                <argumentType ref="type.11570707"/>
            </content>
        </type>
        <type derived="true" id="type.4470">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570708"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571341" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571307"/>
                <argumentType ref="type.11571339"/>
                <argumentType ref="type.11571340"/>
            </content>
        </type>
        <type derived="true" id="type.4486">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571341"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571332" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571307"/>
                <argumentType ref="type.11571330"/>
                <argumentType ref="type.11571331"/>
            </content>
        </type>
        <type derived="true" id="type.4485">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571332"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571133" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571099"/>
                <argumentType ref="type.11571131"/>
                <argumentType ref="type.11571132"/>
            </content>
        </type>
        <type derived="true" id="type.4481">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571133"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571124" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571099"/>
                <argumentType ref="type.11571122"/>
                <argumentType ref="type.11571123"/>
            </content>
        </type>
        <type derived="true" id="type.4480">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571124"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575873" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575841"/>
                <argumentType ref="type.11575871"/>
                <argumentType ref="type.11575872"/>
            </content>
        </type>
        <type derived="true" id="type.4571">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575873"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575864" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575841"/>
                <argumentType ref="type.11575862"/>
                <argumentType ref="type.11575863"/>
            </content>
        </type>
        <type derived="true" id="type.4570">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575864"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568221" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568187"/>
                <argumentType ref="type.11568219"/>
                <argumentType ref="type.11568220"/>
            </content>
        </type>
        <type id="type.11568147" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568113"/>
                <argumentType ref="type.11568145"/>
                <argumentType ref="type.11568146"/>
            </content>
        </type>
        <type derived="true" id="type.4278">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568221"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4274">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568147"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568212" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568187"/>
                <argumentType ref="type.11568210"/>
                <argumentType ref="type.11568211"/>
            </content>
        </type>
        <type id="type.11568138" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568113"/>
                <argumentType ref="type.11568136"/>
                <argumentType ref="type.11568137"/>
            </content>
        </type>
        <type derived="true" id="type.4277">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568212"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4273">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568138"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568332" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568296"/>
                <argumentType ref="type.11568330"/>
                <argumentType ref="type.11568331"/>
            </content>
        </type>
        <type derived="true" id="type.4287">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568332"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568323" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568296"/>
                <argumentType ref="type.11568321"/>
                <argumentType ref="type.11568322"/>
            </content>
        </type>
        <type derived="true" id="type.4286">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568323"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="11566766"/>
                <argumentType ref="type.11569878"/>
                <argumentType ref="type.11569879"/>
            </content>
        </type>
        <type derived="true" id="type.4457">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4437">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4453">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4445">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4431">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4441">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4449">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="11566766"/>
                <argumentType ref="type.11569868"/>
                <argumentType ref="type.11569869"/>
            </content>
        </type>
        <type derived="true" id="type.4430">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4448">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4440">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4452">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4444">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4456">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4436">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579485" specialization="true">
            <name>RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11578597"/>
                <argumentType ref="type.11579483"/>
                <argumentType ref="type.11579484"/>
            </content>
        </type>
        <type derived="true" id="type.11579487">
            <name>RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>&amp;</name>
            <content>
                <baseType ref="type.11579485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4656">
            <name>RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579485"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579486">
            <name>RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>*</name>
            <content>
                <baseType ref="type.11579485"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579476" specialization="true">
            <name>RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11578597"/>
                <argumentType ref="type.11579474"/>
                <argumentType ref="type.11579475"/>
            </content>
        </type>
        <type derived="true" id="type.11579478">
            <name>RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**>&amp;</name>
            <content>
                <baseType ref="type.11579476"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579482">
            <name>RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579476"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579477">
            <name>RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**>*</name>
            <content>
                <baseType ref="type.11579476"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11570816" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566847"/>
                <argumentType ref="type.11570659"/>
                <argumentType ref="type.11570815"/>
            </content>
        </type>
        <type derived="true" id="type.4474">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570816"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576138" specialization="true">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574494"/>
                <argumentType ref="type.11576053"/>
                <argumentType ref="type.11576134"/>
            </content>
        </type>
        <type derived="true" id="type.4581">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576138"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576273" specialization="true">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574502"/>
                <argumentType ref="type.11576271"/>
                <argumentType ref="type.11576272"/>
            </content>
        </type>
        <type derived="true" id="type.4588">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576273"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571433" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566889"/>
                <argumentType ref="type.11571283"/>
                <argumentType ref="type.11571432"/>
            </content>
        </type>
        <type derived="true" id="type.4489">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571433"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567340" specialization="true">
            <name>RandomAccessIter&lt;Pair&lt;int, String&lt;char>>, Pair&lt;int, String&lt;char>>&amp;, Pair&lt;int, String&lt;char>>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567320"/>
                <argumentType ref="type.11567322"/>
                <argumentType ref="type.11567321"/>
            </content>
        </type>
        <type derived="true" id="type.4200">
            <name>RandomAccessIter&lt;Pair&lt;int, String&lt;char>>, Pair&lt;int, String&lt;char>>&amp;, Pair&lt;int, String&lt;char>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567340"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575686" specialization="true">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574733"/>
                <argumentType ref="type.11575684"/>
                <argumentType ref="type.11575685"/>
            </content>
        </type>
        <type derived="true" id="type.4552">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575686"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571232" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566870"/>
                <argumentType ref="type.11571075"/>
                <argumentType ref="type.11571231"/>
            </content>
        </type>
        <type derived="true" id="type.4484">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571232"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570042" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11570005"/>
                <argumentType ref="type.11570004"/>
            </content>
        </type>
        <type id="type.11569854" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569817"/>
                <argumentType ref="type.11569816"/>
            </content>
        </type>
        <type id="type.11569901" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569864"/>
                <argumentType ref="type.11569863"/>
            </content>
        </type>
        <type id="type.11570042" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11570005"/>
                <argumentType ref="type.11570004"/>
            </content>
        </type>
        <type id="type.11569948" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569911"/>
                <argumentType ref="type.11569910"/>
            </content>
        </type>
        <type id="type.11569995" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569958"/>
                <argumentType ref="type.11569957"/>
            </content>
        </type>
        <type id="type.11570136" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11570099"/>
                <argumentType ref="type.11570098"/>
            </content>
        </type>
        <type id="type.11570089" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11570055"/>
                <argumentType ref="type.11570054"/>
            </content>
        </type>
        <type derived="true" id="type.4447">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569995"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4443">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4439">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569901"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4459">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570136"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4451">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570042"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4455">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570089"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4434">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569854"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570129" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11570102"/>
                <argumentType ref="type.11570101"/>
            </content>
        </type>
        <type id="type.11570082" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11570058"/>
                <argumentType ref="type.11570057"/>
            </content>
        </type>
        <type id="type.11569847" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569820"/>
                <argumentType ref="type.11569819"/>
            </content>
        </type>
        <type id="type.11570035" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11570008"/>
                <argumentType ref="type.11570007"/>
            </content>
        </type>
        <type id="type.11569988" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569961"/>
                <argumentType ref="type.11569960"/>
            </content>
        </type>
        <type id="type.11569941" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569914"/>
                <argumentType ref="type.11569913"/>
            </content>
        </type>
        <type id="type.11569894" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569867"/>
                <argumentType ref="type.11569866"/>
            </content>
        </type>
        <type id="type.11570082" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11570058"/>
                <argumentType ref="type.11570057"/>
            </content>
        </type>
        <type derived="true" id="type.4446">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569988"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4433">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569847"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4442">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569941"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4438">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569894"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4458">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570129"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4454">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570082"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4450">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570035"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567155" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567120"/>
                <argumentType ref="type.11567122"/>
                <argumentType ref="type.11567121"/>
            </content>
        </type>
        <type derived="true" id="type.4170">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567155"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567148" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567120"/>
                <argumentType ref="type.11567125"/>
                <argumentType ref="type.11567124"/>
            </content>
        </type>
        <type derived="true" id="type.4169">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567148"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579110" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567209"/>
                <argumentType ref="type.11576430"/>
                <argumentType ref="type.11576542"/>
            </content>
        </type>
        <type id="type.4632" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567209"/>
                <argumentType ref="type.11576430"/>
                <argumentType ref="type.11576542"/>
            </content>
        </type>
        <type derived="true" id="type.4634">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.4632"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579112">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.11579110"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4638">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4632"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4652">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579110"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4633">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.4632"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579111">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.11579110"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11578097" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567209"/>
                <argumentType ref="type.11576375"/>
                <argumentType ref="type.11576540"/>
            </content>
        </type>
        <type id="type.4625" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567209"/>
                <argumentType ref="type.11576375"/>
                <argumentType ref="type.11576540"/>
            </content>
        </type>
        <type id="type.11579103" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567209"/>
                <argumentType ref="type.11576375"/>
                <argumentType ref="type.11576540"/>
            </content>
        </type>
        <type derived="true" id="type.11579105">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.11579103"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4627">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.4625"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4651">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579103"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4631">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4625"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4640">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11578097"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579104">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.11579103"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4626">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.4625"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11567245" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567210"/>
                <argumentType ref="type.11567209"/>
            </content>
        </type>
        <type derived="true" id="type.4189">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567245"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567238" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567213"/>
                <argumentType ref="type.11567212"/>
            </content>
        </type>
        <type derived="true" id="type.4188">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567238"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567200" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567163"/>
                <argumentType ref="type.11567165"/>
                <argumentType ref="type.11567164"/>
            </content>
        </type>
        <type derived="true" id="type.4179">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567200"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567193" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567163"/>
                <argumentType ref="type.11567168"/>
                <argumentType ref="type.11567167"/>
            </content>
        </type>
        <type derived="true" id="type.4178">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567193"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576223" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_AttrOrVar_50B6EF23E232C2A406B7F5C94499D4CC0CC6D353"/>
                <argumentType ref="type.11574725"/>
                <argumentType ref="type.11574724"/>
            </content>
        </type>
        <type derived="true" id="type.4586">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576223"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576209" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.11574560"/>
                <argumentType ref="type.11574559"/>
            </content>
        </type>
        <type derived="true" id="type.4585">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576209"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576202" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.11574563"/>
                <argumentType ref="type.11574562"/>
            </content>
        </type>
        <type derived="true" id="type.4584">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576202"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575960" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.11575942"/>
                <argumentType ref="type.11575941"/>
            </content>
        </type>
        <type derived="true" id="type.4576">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575960"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575953" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.11575950"/>
                <argumentType ref="type.11575951"/>
            </content>
        </type>
        <type derived="true" id="type.4575">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575953"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572094" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.11566941"/>
                <argumentType ref="type.11566940"/>
            </content>
        </type>
        <type derived="true" id="type.4506">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572094"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572087" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.11566944"/>
                <argumentType ref="type.11566943"/>
            </content>
        </type>
        <type derived="true" id="type.4505">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572087"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="11566666"/>
                <argumentType ref="11566667"/>
                <argumentType ref="11566668"/>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="11566675"/>
                <argumentType ref="11566676"/>
                <argumentType ref="11566677"/>
            </content>
        </type>
        <type derived="true" id="type.4349">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4348">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4351">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4352">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4353">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4354">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4350">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="11566658"/>
                <argumentType ref="type.11568941"/>
                <argumentType ref="type.11568942"/>
            </content>
        </type>
        <type derived="true" id="type.4310">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4312">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4428">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4346">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4306">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="11566608"/>
                <argumentType ref="type.11568610"/>
                <argumentType ref="type.11568611"/>
            </content>
        </type>
        <type derived="true" id="type.4309">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4305">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4311">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4427">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4345">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579387" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11579367"/>
                <argumentType ref="type.11579369"/>
                <argumentType ref="type.11579368"/>
            </content>
        </type>
        <type derived="true" id="type.11579389">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*>&amp;</name>
            <content>
                <baseType ref="type.11579387"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579393">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579387"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579388">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*>*</name>
            <content>
                <baseType ref="type.11579387"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579380" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11579367"/>
                <argumentType ref="type.11579372"/>
                <argumentType ref="type.11579371"/>
            </content>
        </type>
        <type derived="true" id="type.11579382">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>&amp;</name>
            <content>
                <baseType ref="type.11579380"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4655">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579380"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579381">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>*</name>
            <content>
                <baseType ref="type.11579380"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579527" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11579501"/>
                <argumentType ref="type.11579503"/>
                <argumentType ref="type.11579502"/>
            </content>
        </type>
        <type derived="true" id="type.11579529">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*>&amp;</name>
            <content>
                <baseType ref="type.11579527"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579533">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579527"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579528">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*>*</name>
            <content>
                <baseType ref="type.11579527"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579520" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11579501"/>
                <argumentType ref="type.11579506"/>
                <argumentType ref="type.11579505"/>
            </content>
        </type>
        <type derived="true" id="type.11579522">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>&amp;</name>
            <content>
                <baseType ref="type.11579520"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4657">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579520"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579521">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>*</name>
            <content>
                <baseType ref="type.11579520"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11574200" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574184"/>
                <argumentType ref="type.11574189"/>
                <argumentType ref="type.11574188"/>
            </content>
        </type>
        <type derived="true" id="type.4537">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574200"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11574260" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574244"/>
                <argumentType ref="type.11574249"/>
                <argumentType ref="type.11574248"/>
            </content>
        </type>
        <type derived="true" id="type.4538">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574260"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11574099" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574059"/>
                <argumentType ref="type.11574064"/>
                <argumentType ref="type.11574063"/>
            </content>
        </type>
        <type derived="true" id="type.4535">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574099"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11574151" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574138"/>
                <argumentType ref="type.11574143"/>
                <argumentType ref="type.11574142"/>
            </content>
        </type>
        <type derived="true" id="type.4536">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574151"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575926" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575904"/>
                <argumentType ref="type.11575909"/>
                <argumentType ref="type.11575908"/>
            </content>
        </type>
        <type derived="true" id="type.4574">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575926"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575499" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575477"/>
                <argumentType ref="type.11575482"/>
                <argumentType ref="type.11575481"/>
            </content>
        </type>
        <type derived="true" id="type.4547">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575499"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576184" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576164"/>
                <argumentType ref="type.11576166"/>
                <argumentType ref="type.11576165"/>
            </content>
        </type>
        <type derived="true" id="type.4583">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576184"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576177" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576164"/>
                <argumentType ref="type.11576169"/>
                <argumentType ref="type.11576168"/>
            </content>
        </type>
        <type derived="true" id="type.4582">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576177"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575468" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575448"/>
                <argumentType ref="type.11575450"/>
                <argumentType ref="type.11575449"/>
            </content>
        </type>
        <type derived="true" id="type.4546">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575468"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575461" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575448"/>
                <argumentType ref="type.11575453"/>
                <argumentType ref="type.11575452"/>
            </content>
        </type>
        <type derived="true" id="type.4545">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575461"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572123" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572103"/>
                <argumentType ref="type.11572105"/>
                <argumentType ref="type.11572104"/>
            </content>
        </type>
        <type derived="true" id="type.4508">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572123"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572116" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572103"/>
                <argumentType ref="type.11572108"/>
                <argumentType ref="type.11572107"/>
            </content>
        </type>
        <type derived="true" id="type.4507">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572116"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572219" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572199"/>
                <argumentType ref="type.11572201"/>
                <argumentType ref="type.11572200"/>
            </content>
        </type>
        <type derived="true" id="type.4524">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572219"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572212" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572199"/>
                <argumentType ref="type.11572204"/>
                <argumentType ref="type.11572203"/>
            </content>
        </type>
        <type derived="true" id="type.4523">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572212"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572151" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572131"/>
                <argumentType ref="type.11572133"/>
                <argumentType ref="type.11572132"/>
            </content>
        </type>
        <type derived="true" id="type.4510">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572151"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572144" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572131"/>
                <argumentType ref="type.11572136"/>
                <argumentType ref="type.11572135"/>
            </content>
        </type>
        <type derived="true" id="type.4509">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572144"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572254" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572234"/>
                <argumentType ref="type.11572236"/>
                <argumentType ref="type.11572235"/>
            </content>
        </type>
        <type derived="true" id="type.4526">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572254"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572247" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572234"/>
                <argumentType ref="type.11572239"/>
                <argumentType ref="type.11572238"/>
            </content>
        </type>
        <type derived="true" id="type.4525">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572247"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11578135" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, UniquePtr&lt;System.Xml.Entity>&amp;, UniquePtr&lt;System.Xml.Entity>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11578112"/>
                <argumentType ref="type.11578114"/>
                <argumentType ref="type.11578113"/>
            </content>
        </type>
        <type derived="true" id="type.4642">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, UniquePtr&lt;System.Xml.Entity>&amp;, UniquePtr&lt;System.Xml.Entity>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11578135"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11578128" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, const UniquePtr&lt;System.Xml.Entity>&amp;, const UniquePtr&lt;System.Xml.Entity>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11578112"/>
                <argumentType ref="type.11578117"/>
                <argumentType ref="type.11578116"/>
            </content>
        </type>
        <type derived="true" id="type.4641">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, const UniquePtr&lt;System.Xml.Entity>&amp;, const UniquePtr&lt;System.Xml.Entity>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11578128"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11577533" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565908"/>
                <argumentType ref="type.11565929"/>
                <argumentType ref="type.11565928"/>
            </content>
        </type>
        <type id="type.4324" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565908"/>
                <argumentType ref="type.11565929"/>
                <argumentType ref="type.11565928"/>
            </content>
        </type>
        <type id="type.11573817" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565908"/>
                <argumentType ref="type.11565929"/>
                <argumentType ref="type.11565928"/>
            </content>
        </type>
        <type id="type.11577533" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565908"/>
                <argumentType ref="type.11565929"/>
                <argumentType ref="type.11565928"/>
            </content>
        </type>
        <type id="type.11578801" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565908"/>
                <argumentType ref="type.11565929"/>
                <argumentType ref="type.11565928"/>
            </content>
        </type>
        <type id="type.11568842" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565908"/>
                <argumentType ref="type.11565929"/>
                <argumentType ref="type.11565928"/>
            </content>
        </type>
        <type id="type.11575099" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565908"/>
                <argumentType ref="type.11565929"/>
                <argumentType ref="type.11565928"/>
            </content>
        </type>
        <type derived="true" id="type.11578803">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.11578801"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4326">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.4324"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4648">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11578801"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4533">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11573817"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4331">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568842"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4330">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4324"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4543">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575099"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4615">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11577533"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578802">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.11578801"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4325">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.4324"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578802">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.11578801"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11578639" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565917"/>
                <argumentType ref="type.11565956"/>
                <argumentType ref="type.11565955"/>
            </content>
        </type>
        <type id="type.11577371" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565917"/>
                <argumentType ref="type.11565956"/>
                <argumentType ref="type.11565955"/>
            </content>
        </type>
        <type id="type.11574937" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565917"/>
                <argumentType ref="type.11565956"/>
                <argumentType ref="type.11565955"/>
            </content>
        </type>
        <type id="type.4162" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565917"/>
                <argumentType ref="type.11565956"/>
                <argumentType ref="type.11565955"/>
            </content>
        </type>
        <type id="type.11573655" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565917"/>
                <argumentType ref="type.11565956"/>
                <argumentType ref="type.11565955"/>
            </content>
        </type>
        <type id="type.11577371" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565917"/>
                <argumentType ref="type.11565956"/>
                <argumentType ref="type.11565955"/>
            </content>
        </type>
        <type derived="true" id="type.11578641">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.11578639"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4164">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.4162"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4529">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11573655"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4611">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11577371"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4539">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574937"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4644">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11578639"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4168">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4162"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578640">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.11578639"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4163">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.4162"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578640">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.11578639"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11573674" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565919"/>
                <argumentType ref="type.11565962"/>
                <argumentType ref="type.11565961"/>
            </content>
        </type>
        <type id="type.11578658" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565919"/>
                <argumentType ref="type.11565962"/>
                <argumentType ref="type.11565961"/>
            </content>
        </type>
        <type id="type.11577390" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565919"/>
                <argumentType ref="type.11565962"/>
                <argumentType ref="type.11565961"/>
            </content>
        </type>
        <type id="type.11567224" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565919"/>
                <argumentType ref="type.11565962"/>
                <argumentType ref="type.11565961"/>
            </content>
        </type>
        <type id="type.11574956" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565919"/>
                <argumentType ref="type.11565962"/>
                <argumentType ref="type.11565961"/>
            </content>
        </type>
        <type id="type.4181" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565919"/>
                <argumentType ref="type.11565962"/>
                <argumentType ref="type.11565961"/>
            </content>
        </type>
        <type id="type.11577390" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565919"/>
                <argumentType ref="type.11565962"/>
                <argumentType ref="type.11565961"/>
            </content>
        </type>
        <type derived="true" id="type.11578660">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.11578658"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4183">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.4181"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4613">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11577390"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4190">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567224"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4646">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11578658"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4187">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4181"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4541">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574956"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4531">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11573674"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4182">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.4181"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578659">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.11578658"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11572168" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565912"/>
                <argumentType ref="type.11572165"/>
                <argumentType ref="type.11572166"/>
            </content>
        </type>
        <type derived="true" id="type.4511">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572168"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11577722" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565912"/>
                <argumentType ref="type.11565941"/>
                <argumentType ref="type.11565940"/>
            </content>
        </type>
        <type id="type.11575288" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565912"/>
                <argumentType ref="type.11565941"/>
                <argumentType ref="type.11565940"/>
            </content>
        </type>
        <type id="type.11574006" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565912"/>
                <argumentType ref="type.11565941"/>
                <argumentType ref="type.11565940"/>
            </content>
        </type>
        <type id="type.11578990" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565912"/>
                <argumentType ref="type.11565941"/>
                <argumentType ref="type.11565940"/>
            </content>
        </type>
        <type id="type.11577722" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565912"/>
                <argumentType ref="type.11565941"/>
                <argumentType ref="type.11565940"/>
            </content>
        </type>
        <type id="type.11572175" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565912"/>
                <argumentType ref="type.11565941"/>
                <argumentType ref="type.11565940"/>
            </content>
        </type>
        <type id="type.4512" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565912"/>
                <argumentType ref="type.11565941"/>
                <argumentType ref="type.11565940"/>
            </content>
        </type>
        <type derived="true" id="type.11578992">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.11578990"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4514">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.4512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4519">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572175"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11577722"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4544">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575288"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4534">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574006"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4518">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4512"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4649">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11578990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578991">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.11578990"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4513">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.4512"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11567267" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565914"/>
                <argumentType ref="type.11567264"/>
                <argumentType ref="type.11567265"/>
            </content>
        </type>
        <type derived="true" id="type.4191">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567267"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4192" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565914"/>
                <argumentType ref="type.11565947"/>
                <argumentType ref="type.11565946"/>
            </content>
        </type>
        <type id="type.11567274" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565914"/>
                <argumentType ref="type.11565947"/>
                <argumentType ref="type.11565946"/>
            </content>
        </type>
        <type id="type.11578669" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565914"/>
                <argumentType ref="type.11565947"/>
                <argumentType ref="type.11565946"/>
            </content>
        </type>
        <type id="type.11573685" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565914"/>
                <argumentType ref="type.11565947"/>
                <argumentType ref="type.11565946"/>
            </content>
        </type>
        <type id="type.11578669" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565914"/>
                <argumentType ref="type.11565947"/>
                <argumentType ref="type.11565946"/>
            </content>
        </type>
        <type id="type.11574967" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565914"/>
                <argumentType ref="type.11565947"/>
                <argumentType ref="type.11565946"/>
            </content>
        </type>
        <type id="type.11577401" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565914"/>
                <argumentType ref="type.11565947"/>
                <argumentType ref="type.11565946"/>
            </content>
        </type>
        <type derived="true" id="type.11578671">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.11578669"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4194">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.4192"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4647">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11578669"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4614">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11577401"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4198">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4192"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4199">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567274"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4532">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11573685"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4542">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574967"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578670">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.11578669"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4193">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.4192"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11577380" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565918"/>
                <argumentType ref="type.11565959"/>
                <argumentType ref="type.11565958"/>
            </content>
        </type>
        <type id="type.11574946" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565918"/>
                <argumentType ref="type.11565959"/>
                <argumentType ref="type.11565958"/>
            </content>
        </type>
        <type id="type.11567179" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565918"/>
                <argumentType ref="type.11565959"/>
                <argumentType ref="type.11565958"/>
            </content>
        </type>
        <type id="type.4171" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565918"/>
                <argumentType ref="type.11565959"/>
                <argumentType ref="type.11565958"/>
            </content>
        </type>
        <type id="type.11573664" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565918"/>
                <argumentType ref="type.11565959"/>
                <argumentType ref="type.11565958"/>
            </content>
        </type>
        <type id="type.11578648" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565918"/>
                <argumentType ref="type.11565959"/>
                <argumentType ref="type.11565958"/>
            </content>
        </type>
        <type id="type.11577380" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565918"/>
                <argumentType ref="type.11565959"/>
                <argumentType ref="type.11565958"/>
            </content>
        </type>
        <type derived="true" id="type.4173">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.4171"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578650">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.11578648"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4180">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567179"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4540">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574946"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4530">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11573664"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4612">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11577380"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4645">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11578648"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4177">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4171"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4172">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.4171"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578649">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.11578648"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="11566613"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <argumentType ref="11566615"/>
            </content>
        </type>
        <type derived="true" id="type.4317">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="11566698"/>
                <argumentType ref="11566699"/>
                <argumentType ref="11566700"/>
                <argumentType ref="11566701"/>
            </content>
        </type>
        <type derived="true" id="type.4363">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579421" specialization="true">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11579407"/>
                <argumentType ref="type.11579411"/>
                <argumentType ref="type.11579395"/>
            </content>
        </type>
        <type derived="true" id="type.11579423">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.11579421"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579449">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579421"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579422">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.11579421"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="11566704"/>
                <argumentType ref="11566704"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="11566705"/>
            </content>
        </type>
        <type derived="true" id="type.4368">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579435" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.11579407"/>
            </content>
        </type>
        <type derived="true" id="type.11579437">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>&amp;</name>
            <content>
                <baseType ref="type.11579435"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579436">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>*</name>
            <content>
                <baseType ref="type.11579435"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579604">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>*&amp;</name>
            <content>
                <baseType ref="type.11579435"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579605">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.11579435"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579603">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>**</name>
            <content>
                <baseType ref="type.11579435"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578485">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4134">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4676">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578484">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4133">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578484">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11568745" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.11568711"/>
                <argumentType ref="type.11568710"/>
            </content>
        </type>
        <type id="type.11568684" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.11568645"/>
                <argumentType ref="type.11568644"/>
            </content>
        </type>
        <type id="type.11568806" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.11568772"/>
                <argumentType ref="type.11568771"/>
            </content>
        </type>
        <type id="type.11568684" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.11568645"/>
                <argumentType ref="type.11568644"/>
            </content>
        </type>
        <type derived="true" id="type.4321">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568745"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4323">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568806"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4316">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568684"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568732" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.11568721"/>
                <argumentType ref="type.11568730"/>
            </content>
        </type>
        <type id="type.11568666" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.11568655"/>
                <argumentType ref="type.11568664"/>
            </content>
        </type>
        <type id="type.11568793" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.11568782"/>
                <argumentType ref="type.11568791"/>
            </content>
        </type>
        <type derived="true" id="type.4320">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568732"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4322">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568793"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4315">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568666"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579442" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.11579407"/>
                <argumentType ref="type.11579409"/>
                <argumentType ref="type.11579408"/>
            </content>
        </type>
        <type derived="true" id="type.11579444">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;</name>
            <content>
                <baseType ref="type.11579442"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579448">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579442"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579443">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>*</name>
            <content>
                <baseType ref="type.11579442"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579429" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.11579407"/>
                <argumentType ref="type.11579418"/>
                <argumentType ref="type.11579427"/>
            </content>
        </type>
        <type derived="true" id="type.11579431">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;</name>
            <content>
                <baseType ref="type.11579429"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579441">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579429"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579430">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*>*</name>
            <content>
                <baseType ref="type.11579429"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="11566691"/>
                <argumentType ref="11566692"/>
                <argumentType ref="11566693"/>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="11566694"/>
                <argumentType ref="11566695"/>
                <argumentType ref="11566696"/>
            </content>
        </type>
        <type derived="true" id="type.4359">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4360">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="11566706"/>
                <argumentType ref="type.11569175"/>
                <argumentType ref="type.11569177"/>
            </content>
        </type>
        <type derived="true" id="type.4367">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4371">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4373">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="11566706"/>
                <argumentType ref="type.11569152"/>
                <argumentType ref="type.11569161"/>
            </content>
        </type>
        <type derived="true" id="type.4366">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4372">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4370">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="11566699"/>
                <argumentType ref="type.11569059"/>
                <argumentType ref="type.11569061"/>
            </content>
        </type>
        <type derived="true" id="type.4362">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="11566699"/>
                <argumentType ref="type.11569044"/>
                <argumentType ref="type.11569045"/>
            </content>
        </type>
        <type derived="true" id="type.4361">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4744">
            <name>ReturnStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4774">
            <name>RvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579411" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11578575"/>
            </content>
        </type>
        <type derived="true" id="type.11579420">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*>&amp;</name>
            <content>
                <baseType ref="type.11579411"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579598">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579411"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579419">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*>*</name>
            <content>
                <baseType ref="type.11579411"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579617">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*>*&amp;</name>
            <content>
                <baseType ref="type.11579411"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579616">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*>**</name>
            <content>
                <baseType ref="type.11579411"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579294" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11578581"/>
            </content>
        </type>
        <type derived="true" id="type.11579303">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*>&amp;</name>
            <content>
                <baseType ref="type.11579294"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579547">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579294"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579302">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*>*</name>
            <content>
                <baseType ref="type.11579294"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579565">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*>*&amp;</name>
            <content>
                <baseType ref="type.11579294"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579564">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*>**</name>
            <content>
                <baseType ref="type.11579294"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076" specialization="true">
            <name>SharedCount&lt;T></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="11566725"/>
            </content>
        </type>
        <type derived="true" id="type.4396">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4390">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4418">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4412">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4380">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F" specialization="true">
            <name>SharedPtr&lt;T></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="11566737"/>
            </content>
        </type>
        <type derived="true" id="type.4413">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4420">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4398">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4726">
            <name>SizeOf&amp;&amp;</name>
            <content>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579508" specialization="true">
            <name>Stack&lt;UniquePtr&lt;System.Dom.DomElement>></name>
            <content>
                <primaryType ref="class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963"/>
                <argumentType ref="type.11579501"/>
            </content>
        </type>
        <type derived="true" id="type.11579513">
            <name>Stack&lt;UniquePtr&lt;System.Dom.DomElement>>&amp;</name>
            <content>
                <baseType ref="type.11579508"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579512">
            <name>Stack&lt;UniquePtr&lt;System.Dom.DomElement>>*</name>
            <content>
                <baseType ref="type.11579508"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4741">
            <name>Statement&amp;&amp;</name>
            <content>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4663">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="11566765"/>
            </content>
        </type>
        <type derived="true" id="type.4432">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567208" specialization="true">
            <name>String&lt;uchar></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11565919"/>
            </content>
        </type>
        <type derived="true" id="type.11567210">
            <name>String&lt;uchar>&amp;</name>
            <content>
                <baseType ref="type.11567208"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11567209">
            <name>String&lt;uchar>*</name>
            <content>
                <baseType ref="type.11567208"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11576430">
            <name>String&lt;uchar>*&amp;</name>
            <content>
                <baseType ref="type.11567208"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11576542">
            <name>String&lt;uchar>**</name>
            <content>
                <baseType ref="type.11567208"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4759">
            <name>SwitchStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4356">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566689"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4269">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566551"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4302">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566593"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4202">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566454"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4204">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566456"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4281">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566568"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4283">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566570"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4358">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566691"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4426">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="11566742"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4308">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="11566606"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4344">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="11566658"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4737">
            <name>TemplateId&amp;&amp;</name>
            <content>
                <baseType ref="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4765">
            <name>ThrowStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4793">
            <name>TokenParser&amp;&amp;</name>
            <content>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4768">
            <name>TryStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4689">
            <name>Type&amp;&amp;</name>
            <content>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4729">
            <name>TypeName&amp;&amp;</name>
            <content>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579415" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomAttr*>, String&lt;uchar>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.11579407"/>
                <argumentType ref="type.11567208"/>
            </content>
        </type>
        <type derived="true" id="type.11579417">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomAttr*>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.11579415"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579599">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomAttr*>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579415"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579416">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomAttr*>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.11579415"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579298" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomElement*>, String&lt;uchar>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.11579290"/>
                <argumentType ref="type.11567208"/>
            </content>
        </type>
        <type derived="true" id="type.11579300">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomElement*>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.11579298"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579548">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomElement*>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579298"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579299">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomElement*>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.11579298"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4711">
            <name>UnaryMinus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4708">
            <name>UnaryPlus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568695" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.11568672"/>
            </content>
        </type>
        <type derived="true" id="type.4318">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568695"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579453" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.11579435"/>
            </content>
        </type>
        <type derived="true" id="type.11579455">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>>&amp;</name>
            <content>
                <baseType ref="type.11579453"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579459">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579453"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579454">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>>*</name>
            <content>
                <baseType ref="type.11579453"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11569132" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.4369">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569132"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11569074" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
            </content>
        </type>
        <type derived="true" id="type.4365">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569074"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11579367" specialization="true">
            <name>UniquePtr&lt;System.Dom.DomAttr></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
            </content>
        </type>
        <type derived="true" id="type.11579369">
            <name>UniquePtr&lt;System.Dom.DomAttr>&amp;</name>
            <content>
                <baseType ref="type.11579367"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579373">
            <name>UniquePtr&lt;System.Dom.DomAttr>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579367"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579368">
            <name>UniquePtr&lt;System.Dom.DomAttr>*</name>
            <content>
                <baseType ref="type.11579367"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579592">
            <name>UniquePtr&lt;System.Dom.DomAttr>*&amp;</name>
            <content>
                <baseType ref="type.11579367"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579593">
            <name>UniquePtr&lt;System.Dom.DomAttr>*&amp;&amp;</name>
            <content>
                <baseType ref="type.11579367"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579591">
            <name>UniquePtr&lt;System.Dom.DomAttr>**</name>
            <content>
                <baseType ref="type.11579367"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579494" specialization="true">
            <name>UniquePtr&lt;System.Dom.DomDocument></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
            </content>
        </type>
        <type derived="true" id="type.11579496">
            <name>UniquePtr&lt;System.Dom.DomDocument>&amp;</name>
            <content>
                <baseType ref="type.11579494"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579500">
            <name>UniquePtr&lt;System.Dom.DomDocument>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579494"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579495">
            <name>UniquePtr&lt;System.Dom.DomDocument>*</name>
            <content>
                <baseType ref="type.11579494"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579501" specialization="true">
            <name>UniquePtr&lt;System.Dom.DomElement></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
            </content>
        </type>
        <type derived="true" id="type.11579503">
            <name>UniquePtr&lt;System.Dom.DomElement>&amp;</name>
            <content>
                <baseType ref="type.11579501"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579507">
            <name>UniquePtr&lt;System.Dom.DomElement>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579501"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579502">
            <name>UniquePtr&lt;System.Dom.DomElement>*</name>
            <content>
                <baseType ref="type.11579501"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579669">
            <name>UniquePtr&lt;System.Dom.DomElement>*&amp;</name>
            <content>
                <baseType ref="type.11579501"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579670">
            <name>UniquePtr&lt;System.Dom.DomElement>*&amp;&amp;</name>
            <content>
                <baseType ref="type.11579501"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579668">
            <name>UniquePtr&lt;System.Dom.DomElement>**</name>
            <content>
                <baseType ref="type.11579501"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11579270" specialization="true">
            <name>UniquePtr&lt;System.Dom.DomNode></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
            </content>
        </type>
        <type derived="true" id="type.11579272">
            <name>UniquePtr&lt;System.Dom.DomNode>&amp;</name>
            <content>
                <baseType ref="type.11579270"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579276">
            <name>UniquePtr&lt;System.Dom.DomNode>&amp;&amp;</name>
            <content>
                <baseType ref="type.11579270"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579271">
            <name>UniquePtr&lt;System.Dom.DomNode>*</name>
            <content>
                <baseType ref="type.11579270"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11572328" specialization="true">
            <name>UniquePtr&lt;System.Exception></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
            </content>
        </type>
        <type derived="true" id="type.4528">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572328"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576434" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ExpectationFailure_EBDBB0FC1DDED5BE7E15008622BB34AFCA7E9A8C"/>
            </content>
        </type>
        <type derived="true" id="type.4591">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576434"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575638" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
            </content>
        </type>
        <type derived="true" id="type.4550">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575638"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576562" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingException_71361E1F1BFEB5E7F55F5F6E472A696283973396"/>
            </content>
        </type>
        <type derived="true" id="type.4592">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576562"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575645" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XmlLog_8F1C6843100321A56502C0710D6A400B6E4C7704"/>
            </content>
        </type>
        <type derived="true" id="type.4551">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575645"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="11566973"/>
            </content>
        </type>
        <type derived="true" id="type.4527">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4319">
            <name>Value&amp;</name>
            <content>
                <baseType ref="11566614"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576942" specialization="true">
            <name>ValueObject&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11567208"/>
            </content>
        </type>
        <type derived="true" id="type.4609">
            <name>ValueObject&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576942"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79" specialization="true">
            <name>ValueObject&lt;ValueType></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="11574511"/>
            </content>
        </type>
        <type derived="true" id="type.4573">
            <name>ValueObject&lt;ValueType>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11578166" specialization="true">
            <name>ValueObject&lt;XmlProcessor*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11577347"/>
            </content>
        </type>
        <type derived="true" id="type.4643">
            <name>ValueObject&lt;XmlProcessor*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11578166"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576930" specialization="true">
            <name>ValueObject&lt;bool></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565906"/>
            </content>
        </type>
        <type derived="true" id="type.4608">
            <name>ValueObject&lt;bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576930"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576767" specialization="true">
            <name>ValueObject&lt;byte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565908"/>
            </content>
        </type>
        <type derived="true" id="type.4595">
            <name>ValueObject&lt;byte>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576767"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576906" specialization="true">
            <name>ValueObject&lt;double></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565916"/>
            </content>
        </type>
        <type derived="true" id="type.4607">
            <name>ValueObject&lt;double>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576906"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576892" specialization="true">
            <name>ValueObject&lt;float></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565915"/>
            </content>
        </type>
        <type derived="true" id="type.4605">
            <name>ValueObject&lt;float>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576808" specialization="true">
            <name>ValueObject&lt;int></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565911"/>
            </content>
        </type>
        <type derived="true" id="type.4600">
            <name>ValueObject&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576808"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576833" specialization="true">
            <name>ValueObject&lt;long></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565913"/>
            </content>
        </type>
        <type derived="true" id="type.4602">
            <name>ValueObject&lt;long>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576833"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576750" specialization="true">
            <name>ValueObject&lt;sbyte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565907"/>
            </content>
        </type>
        <type derived="true" id="type.4594">
            <name>ValueObject&lt;sbyte>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576780" specialization="true">
            <name>ValueObject&lt;short></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565909"/>
            </content>
        </type>
        <type derived="true" id="type.4597">
            <name>ValueObject&lt;short>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576780"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576959" specialization="true">
            <name>ValueObject&lt;uchar></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565919"/>
            </content>
        </type>
        <type derived="true" id="type.4610">
            <name>ValueObject&lt;uchar>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576959"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576820" specialization="true">
            <name>ValueObject&lt;uint></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565912"/>
            </content>
        </type>
        <type derived="true" id="type.4601">
            <name>ValueObject&lt;uint>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576845" specialization="true">
            <name>ValueObject&lt;ulong></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565914"/>
            </content>
        </type>
        <type derived="true" id="type.4603">
            <name>ValueObject&lt;ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576845"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576794" specialization="true">
            <name>ValueObject&lt;ushort></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565910"/>
            </content>
        </type>
        <type derived="true" id="type.4599">
            <name>ValueObject&lt;ushort>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576794"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC">
            <name>Visitor</name>
        </type>
        <type derived="true" id="type.11578610">
            <name>Visitor&amp;</name>
            <content>
                <baseType ref="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578609">
            <name>Visitor*</name>
            <content>
                <baseType ref="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F" specialization="true">
            <name>WeakCount&lt;T></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="11566735"/>
            </content>
        </type>
        <type derived="true" id="type.4419">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4381">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4389">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4397">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4411">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567110" specialization="true">
            <name>WeakPtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.4161">
            <name>WeakPtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567110"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC" specialization="true">
            <name>WeakPtr&lt;T></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="11566733"/>
            </content>
        </type>
        <type derived="true" id="type.4424">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4399">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4403">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4414">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4405">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4401">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4421">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021" specialization="true">
            <name>WeakPtr&lt;U></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="11566732"/>
            </content>
        </type>
        <type derived="true" id="type.4407">
            <name>WeakPtr&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4801">
            <name>XmlGrammar&amp;&amp;</name>
            <content>
                <baseType ref="class_XmlGrammar_514387B50789C8E470155317F17349CFC3DF6E94"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11565906">
            <name>bool</name>
        </type>
        <type basic="true" id="type.11565908">
            <name>byte</name>
        </type>
        <type derived="true" id="type.11565929">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.11565908"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11565928">
            <name>byte*</name>
            <content>
                <baseType ref="type.11565908"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11565917">
            <name>char</name>
        </type>
        <type derived="true" id="type.11565956">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.11565917"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11565955">
            <name>char*</name>
            <content>
                <baseType ref="type.11565917"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4697">
            <name>const AddressOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
            </content>
        </type>
        <type derived="true" id="type.4698">
            <name>const AddressOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4769">
            <name>const AssertStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
            </content>
        </type>
        <type derived="true" id="type.4770">
            <name>const AssertStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11577034">
            <name>const Attributes&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Attributes_C4B2B129CAB6BB03A5BC75E44A8C3E96E227069A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4151">
            <name>const BackInsertIterator&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A"/>
            </content>
        </type>
        <type derived="true" id="type.4157">
            <name>const BackInsertIterator&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A"/>
            </content>
        </type>
        <type derived="true" id="type.4158">
            <name>const BackInsertIterator&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4152">
            <name>const BackInsertIterator&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4154">
            <name>const BackInsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
            </content>
        </type>
        <type derived="true" id="type.4143">
            <name>const BackInsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
            </content>
        </type>
        <type derived="true" id="type.4147">
            <name>const BackInsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
            </content>
        </type>
        <type derived="true" id="type.4144">
            <name>const BackInsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4148">
            <name>const BackInsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4155">
            <name>const BackInsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4664">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
            </content>
        </type>
        <type derived="true" id="type.4665">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4666">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
            </content>
        </type>
        <type derived="true" id="type.4667">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579319">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579316"/>
            </content>
        </type>
        <type derived="true" id="type.11579321">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579316"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579320">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579316"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579340">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579316"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579341">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579316"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4668">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
            </content>
        </type>
        <type derived="true" id="type.4805">
            <name>const BuildIndexVisitor</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
            </content>
        </type>
        <type derived="true" id="type.4806">
            <name>const BuildIndexVisitor&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4669">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.4776">
            <name>const CodeExpandingVisitor</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
            </content>
        </type>
        <type derived="true" id="type.4777">
            <name>const CodeExpandingVisitor&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4712">
            <name>const Complement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
            </content>
        </type>
        <type derived="true" id="type.4713">
            <name>const Complement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4678">
            <name>const ConditionVariable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
            </content>
        </type>
        <type derived="true" id="type.4730">
            <name>const Construct</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
            </content>
        </type>
        <type derived="true" id="type.4731">
            <name>const Construct&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4683">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
            </content>
        </type>
        <type derived="true" id="type.4684">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4160">
            <name>const Counter&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11567094"/>
            </content>
        </type>
        <type derived="true" id="type.4400">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4393">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4392">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4391">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4423">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4422">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4415">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4374">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4386">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4384">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4408">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4404">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4383">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4402">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4377">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4382">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4387">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4416">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4375">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4409">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4378">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4394">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4425">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.4385">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.4406">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.4748">
            <name>const DeleteStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
            </content>
        </type>
        <type derived="true" id="type.4749">
            <name>const DeleteStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4694">
            <name>const Deref</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
            </content>
        </type>
        <type derived="true" id="type.4695">
            <name>const Deref&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4751">
            <name>const DestroyStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
            </content>
        </type>
        <type derived="true" id="type.4752">
            <name>const DestroyStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578577">
            <name>const DomAttr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
            </content>
        </type>
        <type derived="true" id="type.11578579">
            <name>const DomAttr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578578">
            <name>const DomAttr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579410">
            <name>const DomAttr*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578544">
            <name>const DomCDataSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
            </content>
        </type>
        <type derived="true" id="type.11578546">
            <name>const DomCDataSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578545">
            <name>const DomCDataSection*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578532">
            <name>const DomCharacterData</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
            </content>
        </type>
        <type derived="true" id="type.11578534">
            <name>const DomCharacterData&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578533">
            <name>const DomCharacterData*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578550">
            <name>const DomComment</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
            </content>
        </type>
        <type derived="true" id="type.11578552">
            <name>const DomComment&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578551">
            <name>const DomComment*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578562">
            <name>const DomDocument</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
            </content>
        </type>
        <type derived="true" id="type.11578564">
            <name>const DomDocument&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578563">
            <name>const DomDocument*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578571">
            <name>const DomDocumentFragment</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
            </content>
        </type>
        <type derived="true" id="type.11578573">
            <name>const DomDocumentFragment&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578572">
            <name>const DomDocumentFragment*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578583">
            <name>const DomElement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
            </content>
        </type>
        <type derived="true" id="type.11578585">
            <name>const DomElement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578584">
            <name>const DomElement*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579293">
            <name>const DomElement*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579613">
            <name>const DomElement**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4808">
            <name>const DomException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
            </content>
        </type>
        <type derived="true" id="type.4809">
            <name>const DomException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578599">
            <name>const DomNode</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
            </content>
        </type>
        <type derived="true" id="type.11578601">
            <name>const DomNode&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578600">
            <name>const DomNode*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579474">
            <name>const DomNode*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579475">
            <name>const DomNode**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579658">
            <name>const DomNode**&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579659">
            <name>const DomNode**&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579657">
            <name>const DomNode***</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578605">
            <name>const DomParentNode</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
            </content>
        </type>
        <type derived="true" id="type.11578607">
            <name>const DomParentNode&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578606">
            <name>const DomParentNode*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578556">
            <name>const DomProcessingInstruction</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
            </content>
        </type>
        <type derived="true" id="type.11578558">
            <name>const DomProcessingInstruction&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578557">
            <name>const DomProcessingInstruction*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578538">
            <name>const DomText</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
            </content>
        </type>
        <type derived="true" id="type.11578540">
            <name>const DomText&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578539">
            <name>const DomText*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4788">
            <name>const ExpectationParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
            </content>
        </type>
        <type derived="true" id="type.4789">
            <name>const ExpectationParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4754">
            <name>const ExpressionStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
            </content>
        </type>
        <type derived="true" id="type.4755">
            <name>const ExpressionStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4670">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
            </content>
        </type>
        <type derived="true" id="type.4671">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4222">
            <name>const FrontInsertIterator&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8"/>
            </content>
        </type>
        <type derived="true" id="type.4228">
            <name>const FrontInsertIterator&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8"/>
            </content>
        </type>
        <type derived="true" id="type.4229">
            <name>const FrontInsertIterator&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4223">
            <name>const FrontInsertIterator&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4225">
            <name>const FrontInsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
            </content>
        </type>
        <type derived="true" id="type.4214">
            <name>const FrontInsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
            </content>
        </type>
        <type derived="true" id="type.4218">
            <name>const FrontInsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
            </content>
        </type>
        <type derived="true" id="type.4219">
            <name>const FrontInsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4226">
            <name>const FrontInsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4215">
            <name>const FrontInsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4658">
            <name>const FunctionProfiler</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FunctionProfiler_809E118D4757DEA417E0CB7F4E658DF7C4B79B00"/>
            </content>
        </type>
        <type derived="true" id="type.4659">
            <name>const FunctionProfiler&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FunctionProfiler_809E118D4757DEA417E0CB7F4E658DF7C4B79B00"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4760">
            <name>const GotoCaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
            </content>
        </type>
        <type derived="true" id="type.4761">
            <name>const GotoCaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4745">
            <name>const GotoStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
            </content>
        </type>
        <type derived="true" id="type.4746">
            <name>const GotoStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579287">
            <name>const HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579284"/>
            </content>
        </type>
        <type derived="true" id="type.11579289">
            <name>const HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579288">
            <name>const HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579307">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579304"/>
            </content>
        </type>
        <type derived="true" id="type.11579309">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579304"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579308">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579304"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579313">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579310"/>
            </content>
        </type>
        <type derived="true" id="type.11579315">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579310"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579314">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579310"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579327">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579324"/>
            </content>
        </type>
        <type derived="true" id="type.11579329">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579324"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579328">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579324"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579036">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579033"/>
            </content>
        </type>
        <type derived="true" id="type.4558">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4555"/>
            </content>
        </type>
        <type derived="true" id="type.11579038">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579033"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4560">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4555"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579038">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579033"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579037">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579033"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4559">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4555"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4564">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4561"/>
            </content>
        </type>
        <type derived="true" id="type.11579042">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579039"/>
            </content>
        </type>
        <type derived="true" id="type.11579044">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579039"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4566">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4561"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579043">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579039"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4565">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4561"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579043">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579039"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4298">
            <name>const InsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
            </content>
        </type>
        <type derived="true" id="type.4295">
            <name>const InsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
            </content>
        </type>
        <type derived="true" id="type.4291">
            <name>const InsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
            </content>
        </type>
        <type derived="true" id="type.4299">
            <name>const InsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4296">
            <name>const InsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4292">
            <name>const InsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4672">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
            </content>
        </type>
        <type derived="true" id="type.4673">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4715">
            <name>const Invoke</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
            </content>
        </type>
        <type derived="true" id="type.4716">
            <name>const Invoke&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4262">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4313">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566613"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4285">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566579"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4364">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566698"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4785">
            <name>const KleeneStarParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
            </content>
        </type>
        <type derived="true" id="type.4786">
            <name>const KleeneStarParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579396">
            <name>const Less&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579395"/>
            </content>
        </type>
        <type derived="true" id="type.11579398">
            <name>const Less&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579395"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579397">
            <name>const Less&lt;String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579395"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579337">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579334"/>
            </content>
        </type>
        <type derived="true" id="type.11579339">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579334"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579338">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579334"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579471">
            <name>const List&lt;DomNode*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579468"/>
            </content>
        </type>
        <type derived="true" id="type.11579473">
            <name>const List&lt;DomNode*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579468"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579472">
            <name>const List&lt;DomNode*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579468"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579100">
            <name>const List&lt;String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579097"/>
            </content>
        </type>
        <type derived="true" id="type.4622">
            <name>const List&lt;String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4619"/>
            </content>
        </type>
        <type derived="true" id="type.11579100">
            <name>const List&lt;String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579097"/>
            </content>
        </type>
        <type derived="true" id="type.11579102">
            <name>const List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579097"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4624">
            <name>const List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4619"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579102">
            <name>const List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579097"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579101">
            <name>const List&lt;String&lt;uchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579097"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4623">
            <name>const List&lt;String&lt;uchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4619"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579377">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomAttr>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579374"/>
            </content>
        </type>
        <type derived="true" id="type.11579379">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomAttr>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579374"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579378">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomAttr>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579374"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579517">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomElement>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579514"/>
            </content>
        </type>
        <type derived="true" id="type.11579519">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomElement>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579514"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579518">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomElement>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579514"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4738">
            <name>const Literal</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
            </content>
        </type>
        <type derived="true" id="type.4739">
            <name>const Literal&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4333">
            <name>const LockGuard&lt;Mtx></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
            </content>
        </type>
        <type derived="true" id="type.4334">
            <name>const LockGuard&lt;Mtx>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4520">
            <name>const LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11572183"/>
            </content>
        </type>
        <type derived="true" id="type.4521">
            <name>const LockGuard&lt;System.Threading.Mutex>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11572183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579404">
            <name>const Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579401"/>
            </content>
        </type>
        <type derived="true" id="type.11579406">
            <name>const Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579401"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579405">
            <name>const Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579401"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4679">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.4733">
            <name>const New</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
            </content>
        </type>
        <type derived="true" id="type.4734">
            <name>const New&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578612">
            <name>const NodeList</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
            </content>
        </type>
        <type derived="true" id="type.11578614">
            <name>const NodeList&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578613">
            <name>const NodeList*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4691">
            <name>const Not</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
            </content>
        </type>
        <type derived="true" id="type.4692">
            <name>const Not&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4779">
            <name>const OptionalParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
            </content>
        </type>
        <type derived="true" id="type.4780">
            <name>const OptionalParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4674">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
            </content>
        </type>
        <type derived="true" id="type.11579428">
            <name>const Pair&lt;String&lt;uchar>, DomAttr*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579407"/>
            </content>
        </type>
        <type derived="true" id="type.11579418">
            <name>const Pair&lt;String&lt;uchar>, DomAttr*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579407"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579427">
            <name>const Pair&lt;String&lt;uchar>, DomAttr*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579407"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579323">
            <name>const Pair&lt;String&lt;uchar>, DomElement*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579290"/>
            </content>
        </type>
        <type derived="true" id="type.11579301">
            <name>const Pair&lt;String&lt;uchar>, DomElement*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579290"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579322">
            <name>const Pair&lt;String&lt;uchar>, DomElement*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579290"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4340">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4343">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4782">
            <name>const PositiveParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
            </content>
        </type>
        <type derived="true" id="type.4783">
            <name>const PositiveParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4721">
            <name>const PostfixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
            </content>
        </type>
        <type derived="true" id="type.4722">
            <name>const PostfixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4718">
            <name>const PostfixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
            </content>
        </type>
        <type derived="true" id="type.4719">
            <name>const PostfixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4703">
            <name>const PrefixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
            </content>
        </type>
        <type derived="true" id="type.4704">
            <name>const PrefixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4700">
            <name>const PrefixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
            </content>
        </type>
        <type derived="true" id="type.4701">
            <name>const PrefixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579354">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579351"/>
            </content>
        </type>
        <type derived="true" id="type.11579356">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579351"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579355">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579351"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579345">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579342"/>
            </content>
        </type>
        <type derived="true" id="type.11579347">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579342"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579346">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579342"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579488">
            <name>const RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579485"/>
            </content>
        </type>
        <type derived="true" id="type.11579490">
            <name>const RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579489">
            <name>const RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579485"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579479">
            <name>const RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579476"/>
            </content>
        </type>
        <type derived="true" id="type.11579481">
            <name>const RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579476"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579480">
            <name>const RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579476"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579113">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579110"/>
            </content>
        </type>
        <type derived="true" id="type.4635">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4632"/>
            </content>
        </type>
        <type derived="true" id="type.4637">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4632"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579115">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579110"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579114">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579110"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4636">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4632"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579106">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579103"/>
            </content>
        </type>
        <type derived="true" id="type.4628">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4625"/>
            </content>
        </type>
        <type derived="true" id="type.11579108">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579103"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4630">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4625"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579108">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579103"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579107">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579103"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4629">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4625"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579107">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579103"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579390">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579387"/>
            </content>
        </type>
        <type derived="true" id="type.11579392">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579387"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579391">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579387"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579383">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579380"/>
            </content>
        </type>
        <type derived="true" id="type.11579385">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579380"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579384">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579380"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579530">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579527"/>
            </content>
        </type>
        <type derived="true" id="type.11579532">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579527"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579531">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579527"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579523">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579520"/>
            </content>
        </type>
        <type derived="true" id="type.11579525">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579520"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579524">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579520"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4327">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4324"/>
            </content>
        </type>
        <type derived="true" id="type.11578804">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578801"/>
            </content>
        </type>
        <type derived="true" id="type.4329">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4324"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578806">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578801"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4328">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4324"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578805">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578801"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4165">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4162"/>
            </content>
        </type>
        <type derived="true" id="type.11578642">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578639"/>
            </content>
        </type>
        <type derived="true" id="type.11578644">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578639"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4167">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4162"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578644">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578639"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578643">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578639"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4166">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4162"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4184">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4181"/>
            </content>
        </type>
        <type derived="true" id="type.11578661">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578658"/>
            </content>
        </type>
        <type derived="true" id="type.4186">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4181"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578663">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578658"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4185">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4181"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578662">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578658"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578993">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578990"/>
            </content>
        </type>
        <type derived="true" id="type.4515">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4512"/>
            </content>
        </type>
        <type derived="true" id="type.11578995">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578990"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4517">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4516">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4512"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578994">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578990"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578672">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578669"/>
            </content>
        </type>
        <type derived="true" id="type.4195">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4192"/>
            </content>
        </type>
        <type derived="true" id="type.11578672">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578669"/>
            </content>
        </type>
        <type derived="true" id="type.11578674">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578669"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4197">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4192"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578673">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578669"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4196">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4192"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578651">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578648"/>
            </content>
        </type>
        <type derived="true" id="type.4174">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4171"/>
            </content>
        </type>
        <type derived="true" id="type.11578653">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578648"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4176">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4171"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578652">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578648"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4175">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4171"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11578652">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11578648"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4680">
            <name>const RecursiveMutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
            </content>
        </type>
        <type derived="true" id="type.11579424">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579421"/>
            </content>
        </type>
        <type derived="true" id="type.11579426">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579421"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579425">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579421"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579438">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579435"/>
            </content>
        </type>
        <type derived="true" id="type.11579440">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579435"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579439">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579435"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579445">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579442"/>
            </content>
        </type>
        <type derived="true" id="type.11579447">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579442"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579446">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579442"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579432">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579429"/>
            </content>
        </type>
        <type derived="true" id="type.11579434">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579429"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579433">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579429"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4742">
            <name>const ReturnStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
            </content>
        </type>
        <type derived="true" id="type.4743">
            <name>const ReturnStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579412">
            <name>const SelectFirst&lt;String&lt;uchar>, DomAttr*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579411"/>
            </content>
        </type>
        <type derived="true" id="type.11579414">
            <name>const SelectFirst&lt;String&lt;uchar>, DomAttr*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579411"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579413">
            <name>const SelectFirst&lt;String&lt;uchar>, DomAttr*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579411"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579615">
            <name>const SelectFirst&lt;String&lt;uchar>, DomAttr*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579411"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579614">
            <name>const SelectFirst&lt;String&lt;uchar>, DomAttr*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579411"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579295">
            <name>const SelectFirst&lt;String&lt;uchar>, DomElement*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579294"/>
            </content>
        </type>
        <type derived="true" id="type.11579297">
            <name>const SelectFirst&lt;String&lt;uchar>, DomElement*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579294"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579296">
            <name>const SelectFirst&lt;String&lt;uchar>, DomElement*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579294"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579563">
            <name>const SelectFirst&lt;String&lt;uchar>, DomElement*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579294"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579562">
            <name>const SelectFirst&lt;String&lt;uchar>, DomElement*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579294"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4724">
            <name>const SizeOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
            </content>
        </type>
        <type derived="true" id="type.4725">
            <name>const SizeOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579509">
            <name>const Stack&lt;UniquePtr&lt;System.Dom.DomElement>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579508"/>
            </content>
        </type>
        <type derived="true" id="type.11579511">
            <name>const Stack&lt;UniquePtr&lt;System.Dom.DomElement>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579508"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579510">
            <name>const Stack&lt;UniquePtr&lt;System.Dom.DomElement>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579508"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4661">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
            </content>
        </type>
        <type derived="true" id="type.4662">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4675">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
            </content>
        </type>
        <type derived="true" id="type.11567125">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11567120"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11567213">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11567208"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11567212">
            <name>const String&lt;uchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11567208"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11576375">
            <name>const String&lt;uchar>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11567208"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11576540">
            <name>const String&lt;uchar>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11567208"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11567168">
            <name>const String&lt;wchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11567163"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4757">
            <name>const SwitchStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
            </content>
        </type>
        <type derived="true" id="type.4758">
            <name>const SwitchStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4280">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566568"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4241">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566507"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4282">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566570"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4245">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566514"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4203">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566456"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4244">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4239">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566504"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4238">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4237">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566500"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4236">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566491"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4201">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566454"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4235">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566489"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4234">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566486"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4233">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4232">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566482"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4231">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566479"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4242">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566509"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4260">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566546"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4301">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566593"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4259">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4258">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566542"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4261">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4257">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566540"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4256">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566538"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4254">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566529"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4336">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566639"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4253">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566527"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4251">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4338">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566648"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4250">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4341">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566651"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4248">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4263">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566551"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4355">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566689"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4247">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566517"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4357">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566691"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4279">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566566"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4681">
            <name>const ThreadingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
            </content>
        </type>
        <type derived="true" id="type.4682">
            <name>const ThreadingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4763">
            <name>const ThrowStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
            </content>
        </type>
        <type derived="true" id="type.4764">
            <name>const ThrowStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4791">
            <name>const TokenParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
            </content>
        </type>
        <type derived="true" id="type.4792">
            <name>const TokenParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4766">
            <name>const TryStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
            </content>
        </type>
        <type derived="true" id="type.4767">
            <name>const TryStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4687">
            <name>const Type</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
            </content>
        </type>
        <type derived="true" id="type.4688">
            <name>const Type&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4727">
            <name>const TypeName</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
            </content>
        </type>
        <type derived="true" id="type.4728">
            <name>const TypeName&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4240">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566505"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4249">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566520"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4246">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566515"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4339">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566649"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4342">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4255">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566530"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4243">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566510"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4337">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566640"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4252">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566525"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579601">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, DomAttr*>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579415"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579550">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, DomElement*>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579298"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4709">
            <name>const UnaryMinus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
            </content>
        </type>
        <type derived="true" id="type.4710">
            <name>const UnaryMinus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4706">
            <name>const UnaryPlus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
            </content>
        </type>
        <type derived="true" id="type.4707">
            <name>const UnaryPlus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4685">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
            </content>
        </type>
        <type derived="true" id="type.4686">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579456">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579453"/>
            </content>
        </type>
        <type derived="true" id="type.11579458">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579453"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579457">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579453"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579370">
            <name>const UniquePtr&lt;System.Dom.DomAttr></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579367"/>
            </content>
        </type>
        <type derived="true" id="type.11579372">
            <name>const UniquePtr&lt;System.Dom.DomAttr>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579367"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579371">
            <name>const UniquePtr&lt;System.Dom.DomAttr>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579367"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579497">
            <name>const UniquePtr&lt;System.Dom.DomDocument></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579494"/>
            </content>
        </type>
        <type derived="true" id="type.11579499">
            <name>const UniquePtr&lt;System.Dom.DomDocument>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579494"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579498">
            <name>const UniquePtr&lt;System.Dom.DomDocument>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579494"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579504">
            <name>const UniquePtr&lt;System.Dom.DomElement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579501"/>
            </content>
        </type>
        <type derived="true" id="type.11579506">
            <name>const UniquePtr&lt;System.Dom.DomElement>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579501"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579505">
            <name>const UniquePtr&lt;System.Dom.DomElement>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579501"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579273">
            <name>const UniquePtr&lt;System.Dom.DomNode></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579270"/>
            </content>
        </type>
        <type derived="true" id="type.11579275">
            <name>const UniquePtr&lt;System.Dom.DomNode>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579270"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11579274">
            <name>const UniquePtr&lt;System.Dom.DomNode>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11579270"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4314">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566614"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4294">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11568359"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4217">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11567499"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4150">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11567056"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4146">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11567043"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4572">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11574511"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4290">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11568345"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4221">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11567512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4799">
            <name>const XmlGrammar</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlGrammar_514387B50789C8E470155317F17349CFC3DF6E94"/>
            </content>
        </type>
        <type derived="true" id="type.4800">
            <name>const XmlGrammar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlGrammar_514387B50789C8E470155317F17349CFC3DF6E94"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4802">
            <name>const XmlProcessingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlProcessingException_38961E809BD4812FD6BEA01B8DDA08229100E6F5"/>
            </content>
        </type>
        <type derived="true" id="type.4803">
            <name>const XmlProcessingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlProcessingException_38961E809BD4812FD6BEA01B8DDA08229100E6F5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4606">
            <name>const double&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565916"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4604">
            <name>const float&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565915"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4593">
            <name>const sbyte&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565907"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4596">
            <name>const short&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565909"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4796">
            <name>const stdlib</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
            </content>
        </type>
        <type derived="true" id="type.4797">
            <name>const stdlib&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4598">
            <name>const ushort&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565910"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11565916">
            <name>double</name>
        </type>
        <type basic="true" id="type.11565915">
            <name>float</name>
        </type>
        <type basic="true" id="type.11565911">
            <name>int</name>
        </type>
        <type basic="true" id="type.11565913">
            <name>long</name>
        </type>
        <type basic="true" id="type.11565907">
            <name>sbyte</name>
        </type>
        <type basic="true" id="type.11565909">
            <name>short</name>
        </type>
        <type derived="true" id="type.4798">
            <name>stdlib&amp;&amp;</name>
            <content>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11565919">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.11565962">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.11565919"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11565961">
            <name>uchar*</name>
            <content>
                <baseType ref="type.11565919"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11565912">
            <name>uint</name>
        </type>
        <type derived="true" id="type.11565941">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.11565912"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11565940">
            <name>uint*</name>
            <content>
                <baseType ref="type.11565912"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11565914">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.11565947">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.11565914"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11565946">
            <name>ulong*</name>
            <content>
                <baseType ref="type.11565914"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11565910">
            <name>ushort</name>
        </type>
        <type basic="true" id="type.11565918">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.11565959">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.11565918"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11565958">
            <name>wchar*</name>
            <content>
                <baseType ref="type.11565918"/>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
