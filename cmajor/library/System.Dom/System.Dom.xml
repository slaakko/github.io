<library>
    <name>System.Dom</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Dom">
            <name>System.Dom</name>
            <classes>
                <class id="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B">
                    <name>BuildIndexVisitor</name>
                    <groupName>BuildIndexVisitor</groupName>
                    <syntax> public class BuildIndexVisitor;</syntax>
                    <baseClass ref="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC"/>
                    <constructors>
                        <constructor id="constructor_BuildIndexVisitor_51B5F1343E9A3CEB909523CCDF3813F1B43C4855">
                            <name>BuildIndexVisitor(HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp; elementsByIdMap_)</name>
                            <syntax>public nothrow BuildIndexVisitor(HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp; elementsByIdMap_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>elementsByIdMap_</name>
                                    <type ref="type.7401721"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_BeginVisit_BuildIndexVisitor_70524D3B38303F20E6093E21332E1B0F05DC4B36">
                            <name>BeginVisit(DomElement* element)</name>
                            <syntax>public override void BeginVisit(DomElement* element);</syntax>
                            <parameters>
                                <parameter>
                                    <name>element</name>
                                    <type ref="type.7401069"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845">
                    <name>DomAttr</name>
                    <groupName>DomAttr</groupName>
                    <syntax> public class DomAttr;</syntax>
                    <baseClass ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                    <constructors>
                        <constructor id="default_constructor_DomAttr_AB81CB5DE709B9B2F150026010CE711068D659AE">
                            <name>DomAttr()</name>
                            <syntax>public nothrow DomAttr();</syntax>
                        </constructor>
                        <constructor id="constructor_DomAttr_C5E02F499E72D96385554375EF366871A59B666C">
                            <name>DomAttr(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; value_)</name>
                            <syntax>public nothrow DomAttr(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CloneNode_DomAttr_935C5C343A9FD5B15937A0DB83F63C34AF21AB7B">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.7388895"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_Prefix_DomAttr_9E251FBB8F3693299BC88C721AD7E82AC96BE8A8">
                            <name>Prefix() const</name>
                            <syntax>public nothrow override String&lt;uchar> Prefix() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_SetPrefix_DomAttr_B38F0B9956405E41A3EBD7A8D0E04A5D93B63933">
                            <name>SetPrefix(const String&lt;uchar>&amp; prefix)</name>
                            <syntax>public override void SetPrefix(const String&lt;uchar>&amp; prefix);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prefix</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_Value_73DFA4B0DF934D95503D7A95D8152E8150B0F634">
                            <name>Value</name>
                            <overloads>
                                <overload id="member_function_Value_DomAttr_0688EAFB5D021FF9EA3596D9D9FA1488C0F8E5A6">
                                    <name>Value()</name>
                                    <syntax>public nothrow inline String&lt;uchar>&amp; Value();</syntax>
                                    <returnType ref="type.7390126"/>
                                </overload>
                                <overload id="member_function_Value_DomAttr_350BF1A9B050ED3BF0BA27E4469D4F7AD138FBF5">
                                    <name>Value() const</name>
                                    <syntax>public nothrow inline const String&lt;uchar>&amp; Value() const;</syntax>
                                    <returnType ref="type.7390129"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Write_DomAttr_1B6A9ACE9639381C547B451DBE726C33AEB0CB94">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C">
                    <name>DomCDataSection</name>
                    <groupName>DomCDataSection</groupName>
                    <syntax> public class DomCDataSection;</syntax>
                    <baseClass ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                    <constructors>
                        <constructor id="default_constructor_DomCDataSection_B0AFDEF331FDBF6919B4308C1C105A49BD4555C3">
                            <name>DomCDataSection()</name>
                            <syntax>public nothrow DomCDataSection();</syntax>
                        </constructor>
                        <constructor id="constructor_DomCDataSection_21A8F4462D9EA214BEDDD2AC7C0AD09A1CC34403">
                            <name>DomCDataSection(const String&lt;uchar>&amp; data_)</name>
                            <syntax>public nothrow explicit DomCDataSection(const String&lt;uchar>&amp; data_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>data_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomCDataSection_2F328A27731CD73CA08C10553B1CD2EA4B4EADB1">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7401098"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomCDataSection_8DF77F2D3E03157D0AC8218FD9F43B7290948342">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.7388895"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_Write_DomCDataSection_93A48B52D57E1E2FC4FE3A8F0106B0C83595D96F">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991">
                    <name>DomCharacterData</name>
                    <groupName>DomCharacterData</groupName>
                    <syntax>abstract public class DomCharacterData;</syntax>
                    <baseClass ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                    <constructors>
                        <constructor id="constructor_DomCharacterData_0D2ED50FD9C542E4989FC83F182A400A992C5279">
                            <name>DomCharacterData(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow explicit DomCharacterData(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_DomCharacterData_FC8F73FDD5E03EF991785C797F62291A3258936D">
                            <name>DomCharacterData(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; data_)</name>
                            <syntax>public nothrow DomCharacterData(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; data_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>data_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Data_F9BE76778A8EABC85EA40A68A25A7B0703385A7F">
                            <name>Data</name>
                            <overloads>
                                <overload id="member_function_Data_DomCharacterData_971275725C713034BD6564D861B70DA652C0F0BA">
                                    <name>Data()</name>
                                    <syntax>public nothrow String&lt;uchar>&amp; Data();</syntax>
                                    <returnType ref="type.7390126"/>
                                </overload>
                                <overload id="member_function_Data_DomCharacterData_9614944259DCCB50426994A4909CABA60E4ECA0E">
                                    <name>Data() const</name>
                                    <syntax>public nothrow const String&lt;uchar>&amp; Data() const;</syntax>
                                    <returnType ref="type.7390129"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_ValueContainsNewLine_DomCharacterData_0FFE57235C068A23D738740AFA620D3212081A50">
                            <name>ValueContainsNewLine()</name>
                            <syntax>public nothrow override bool ValueContainsNewLine();</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_Write_DomCharacterData_000E6794CE3D92AA20F50682E234CD4B6F38124A">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38">
                    <name>DomComment</name>
                    <groupName>DomComment</groupName>
                    <syntax> public class DomComment;</syntax>
                    <baseClass ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                    <constructors>
                        <constructor id="default_constructor_DomComment_D6391ABCEEC52D7B8E55F450EC9451DD1FDFC642">
                            <name>DomComment()</name>
                            <syntax>public nothrow DomComment();</syntax>
                        </constructor>
                        <constructor id="constructor_DomComment_8F2626E5AF8513C847915CAFDD203F610AA91A3E">
                            <name>DomComment(const String&lt;uchar>&amp; data_)</name>
                            <syntax>public nothrow explicit DomComment(const String&lt;uchar>&amp; data_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>data_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomComment_F387713A67D0604D693674D50DA69D7B09738A12">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7401098"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomComment_919EB4CF012E5EE3EABF9FB2DE82DAFF0E044331">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.7388895"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_Write_DomComment_99B996338A898CFBEBFEC3BAA0FAB9E2CC0268C3">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8">
                    <name>DomDocument</name>
                    <groupName>DomDocument</groupName>
                    <syntax> public class DomDocument;</syntax>
                    <baseClass ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                    <constructors>
                        <constructor id="default_constructor_DomDocument_B8F0784EA32E884DF21C63B4A14DF9D544567DC9">
                            <name>DomDocument()</name>
                            <syntax>public nothrow DomDocument();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomDocument_8F4220E308D689CD6DA67DFF64E8503276BA6543">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7401098"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AppendChild_DomDocument_79F3A44DE896CD5FAA80F311288965B7FF1A7E85">
                            <name>AppendChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild)</name>
                            <syntax>public override DomNode* AppendChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.7401711"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401085"/>
                        </function>
                        <function id="member_function_CloneNode_DomDocument_E87D6EE8F706AE697F6C95869C4933882AD49EB0">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.7388895"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_DocumentElement_DomDocument_EA7DB052EE2116825A5AA6216D3AE127C9760CE4">
                            <name>DocumentElement() const</name>
                            <syntax>public nothrow inline DomElement* DocumentElement() const;</syntax>
                            <returnType ref="type.7401069"/>
                        </function>
                        <function id="member_function_GetElementById_DomDocument_9CE592627CE61165EB4DBD62EA1E0AEF39F07DAA">
                            <name>GetElementById(const String&lt;uchar>&amp; elementId)</name>
                            <syntax>public DomElement* GetElementById(const String&lt;uchar>&amp; elementId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>elementId</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401069"/>
                        </function>
                        <function id="member_function_InsertBefore_DomDocument_DD4532A7C4B299DE45557825035402E58919B411">
                            <name>InsertBefore(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* refChild)</name>
                            <syntax>public override DomNode* InsertBefore(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* refChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.7401711"/>
                                </parameter>
                                <parameter>
                                    <name>refChild</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401085"/>
                        </function>
                        <function id="member_function_InternalInvalidateIndex_DomDocument_F781AA27409ED770095C4F30128600D4D39EC8DB">
                            <name>InternalInvalidateIndex()</name>
                            <syntax>public nothrow inline void InternalInvalidateIndex();</syntax>
                        </function>
                        <function id="member_function_RemoveChild_DomDocument_90FE30CBAAFDB1C62D343FF6CE06E05B2A11454B">
                            <name>RemoveChild(DomNode* oldChild)</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> RemoveChild(DomNode* oldChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>oldChild</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_ReplaceChild_DomDocument_61D8A2CE0D8786438A22377237BBBAC39DD18EFF">
                            <name>ReplaceChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* oldChild)</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ReplaceChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* oldChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.7401711"/>
                                </parameter>
                                <parameter>
                                    <name>oldChild</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_SetXmlEncoding_DomDocument_1FBADC79BCCAF5076E46C065A819B23C113B287B">
                            <name>SetXmlEncoding(const String&lt;uchar>&amp; xmlEncoding_)</name>
                            <syntax>public nothrow inline void SetXmlEncoding(const String&lt;uchar>&amp; xmlEncoding_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlEncoding_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetXmlStandalone_DomDocument_859F7B8E15E3030ED33ACEAF6C7022704035AD40">
                            <name>SetXmlStandalone(bool xmlStandalone_)</name>
                            <syntax>public nothrow inline void SetXmlStandalone(bool xmlStandalone_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlStandalone_</name>
                                    <type ref="type.7388895"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetXmlVersion_DomDocument_F82DBF6FB0290167F663312956F88F27B58582E3">
                            <name>SetXmlVersion(const String&lt;uchar>&amp; xmlVersion_)</name>
                            <syntax>public nothrow inline void SetXmlVersion(const String&lt;uchar>&amp; xmlVersion_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlVersion_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_XmlEncoding_DomDocument_55F846A6B10A28EB0B2427074C636914E17F9BA5">
                            <name>XmlEncoding() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; XmlEncoding() const;</syntax>
                            <returnType ref="type.7390129"/>
                        </function>
                        <function id="member_function_XmlStandalone_DomDocument_4280CB2592F8D44967B8EB73AC2B0491F1E71DA0">
                            <name>XmlStandalone() const</name>
                            <syntax>public nothrow inline bool XmlStandalone() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_XmlVersion_DomDocument_90F041999067B56FDD22A11C204CACECC32CE5C9">
                            <name>XmlVersion() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; XmlVersion() const;</syntax>
                            <returnType ref="type.7390129"/>
                        </function>
                    </functions>
                </class>
                <class id="class_DomDocumentBuilder_397E94D2EA454117602C5070385DB01C1EFBB45B">
                    <name>DomDocumentBuilder</name>
                    <groupName>DomDocumentBuilder</groupName>
                    <syntax> public class DomDocumentBuilder;</syntax>
                    <baseClass ref="class_XmlContentHandler_7429223FCBE3A541F14FD9475F2099B20E248715"/>
                    <constructors>
                        <constructor id="default_constructor_DomDocumentBuilder_3513E415B4B6A29E9AAE2321D004C71B2F4D9118">
                            <name>DomDocumentBuilder()</name>
                            <syntax>public DomDocumentBuilder();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CDataSection_DomDocumentBuilder_C9C6C3454EE2A21538686310C908DFC265907934">
                            <name>CDataSection(const String&lt;uchar>&amp; cdata)</name>
                            <syntax>public override void CDataSection(const String&lt;uchar>&amp; cdata);</syntax>
                            <parameters>
                                <parameter>
                                    <name>cdata</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Comment_DomDocumentBuilder_082FFD95DC14A5AB475CB65318CC235650A57DAA">
                            <name>Comment(const String&lt;uchar>&amp; comment)</name>
                            <syntax>public override void Comment(const String&lt;uchar>&amp; comment);</syntax>
                            <parameters>
                                <parameter>
                                    <name>comment</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Encoding_DomDocumentBuilder_85CA7F73D22C1ED735BEC3E5DEF59BFCC460A36A">
                            <name>Encoding(const String&lt;uchar>&amp; encoding)</name>
                            <syntax>public override void Encoding(const String&lt;uchar>&amp; encoding);</syntax>
                            <parameters>
                                <parameter>
                                    <name>encoding</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_EndDocument_DomDocumentBuilder_88A13847CC99A504B0A26AE398E0A6977F936E65">
                            <name>EndDocument()</name>
                            <syntax>public override void EndDocument();</syntax>
                        </function>
                        <function id="member_function_EndElement_DomDocumentBuilder_531007E1486D7FE0AE0DC2CD67125DE778D19C35">
                            <name>EndElement(const String&lt;uchar>&amp; namespaceUri, const String&lt;uchar>&amp; localName, const String&lt;uchar>&amp; qualifiedName)</name>
                            <syntax>public override void EndElement(const String&lt;uchar>&amp; namespaceUri, const String&lt;uchar>&amp; localName, const String&lt;uchar>&amp; qualifiedName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>namespaceUri</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>localName</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>qualifiedName</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_GetDocument_DomDocumentBuilder_CC246904CFD7CD24AF446EDE668F2F20ADB1F359">
                            <name>GetDocument()</name>
                            <syntax>public UniquePtr&lt;System.Dom.DomDocument> GetDocument();</syntax>
                            <returnType ref="type.7401929"/>
                        </function>
                        <function id="member_function_PI_DomDocumentBuilder_61F51DF9AA353D12FE9AADA6520FEB6BEA5C0593">
                            <name>PI(const String&lt;uchar>&amp; target, const String&lt;uchar>&amp; data)</name>
                            <syntax>public override void PI(const String&lt;uchar>&amp; target, const String&lt;uchar>&amp; data);</syntax>
                            <parameters>
                                <parameter>
                                    <name>target</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>data</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SkippedEntity_DomDocumentBuilder_15657861BA4A18BD4976D5430AF7A427169E9A3F">
                            <name>SkippedEntity(const String&lt;uchar>&amp; entityName)</name>
                            <syntax>public override void SkippedEntity(const String&lt;uchar>&amp; entityName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>entityName</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Standalone_DomDocumentBuilder_B408A87030CEE9CB9B32143D6A469B17F4F9C7D1">
                            <name>Standalone(bool standalone)</name>
                            <syntax>public override void Standalone(bool standalone);</syntax>
                            <parameters>
                                <parameter>
                                    <name>standalone</name>
                                    <type ref="type.7388895"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_StartDocument_DomDocumentBuilder_81609C5E7C8C1F3ABC965847DAFC035EFB6232DD">
                            <name>StartDocument()</name>
                            <syntax>public override void StartDocument();</syntax>
                        </function>
                        <function id="member_function_StartElement_DomDocumentBuilder_0BB68E5B2C1AF454B0DE3D59A0BC8D62F4E3966B">
                            <name>StartElement(const String&lt;uchar>&amp; namespaceUri, const String&lt;uchar>&amp; localName, const String&lt;uchar>&amp; qualifiedName, const Attributes&amp; attributes)</name>
                            <syntax>public override void StartElement(const String&lt;uchar>&amp; namespaceUri, const String&lt;uchar>&amp; localName, const String&lt;uchar>&amp; qualifiedName, const Attributes&amp; attributes);</syntax>
                            <parameters>
                                <parameter>
                                    <name>namespaceUri</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>localName</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>qualifiedName</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>attributes</name>
                                    <type ref="type.7399576"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Text_DomDocumentBuilder_BE076A6CAECBA788FC2003811419E82FFF7D7D84">
                            <name>Text(const String&lt;uchar>&amp; text)</name>
                            <syntax>public override void Text(const String&lt;uchar>&amp; text);</syntax>
                            <parameters>
                                <parameter>
                                    <name>text</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Version_DomDocumentBuilder_2D201C2C5147C07698DD6C449348343BB7BA61B1">
                            <name>Version(const String&lt;uchar>&amp; version)</name>
                            <syntax>public override void Version(const String&lt;uchar>&amp; version);</syntax>
                            <parameters>
                                <parameter>
                                    <name>version</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3">
                    <name>DomDocumentFragment</name>
                    <groupName>DomDocumentFragment</groupName>
                    <syntax> public class DomDocumentFragment;</syntax>
                    <baseClass ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                    <constructors>
                        <constructor id="default_constructor_DomDocumentFragment_93DE42A92D8A94F263414AC46CE66B08C5038967">
                            <name>DomDocumentFragment()</name>
                            <syntax>public nothrow DomDocumentFragment();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CloneNode_DomDocumentFragment_35B846C79961A3025073B5C482B4A40539283892">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.7388895"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B">
                    <name>DomElement</name>
                    <groupName>DomElement</groupName>
                    <syntax> public class DomElement;</syntax>
                    <baseClass ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                    <constructors>
                        <constructor id="constructor_DomElement_186B1B1F0883B010030F370B2A79FE1306D9FFD9">
                            <name>DomElement(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public explicit DomElement(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_DomElement_197296D679BDD963B14CB5BF301229DCBB641F36">
                            <name>DomElement(const String&lt;uchar>&amp; name_, List&lt;UniquePtr&lt;System.Dom.DomAttr>>&amp;&amp; attrs_, Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>&amp;&amp; attrMap_)</name>
                            <syntax>public DomElement(const String&lt;uchar>&amp; name_, List&lt;UniquePtr&lt;System.Dom.DomAttr>>&amp;&amp; attrs_, Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>&amp;&amp; attrMap_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>attrs_</name>
                                    <type ref="type.7401829"/>
                                </parameter>
                                <parameter>
                                    <name>attrMap_</name>
                                    <type ref="type.7401896"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddAttribute_DomElement_35F28C40B3AF25749FFE7E3857BD6A6A71244A96">
                            <name>AddAttribute(UniquePtr&lt;System.Dom.DomAttr>&amp;&amp; attr)</name>
                            <syntax>public void AddAttribute(UniquePtr&lt;System.Dom.DomAttr>&amp;&amp; attr);</syntax>
                            <parameters>
                                <parameter>
                                    <name>attr</name>
                                    <type ref="type.7401808"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomElement_BEA193FB092CFFC0973D2E84DA0205A1CB679EDA">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.7388895"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_GetAttribute_DomElement_E340EFCACFF415B6AE664EAC51245781B895A16D">
                            <name>GetAttribute(const String&lt;uchar>&amp; attrName) const</name>
                            <syntax>public String&lt;uchar> GetAttribute(const String&lt;uchar>&amp; attrName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>attrName</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_GetElementsByTagName_DomElement_7805B6581C1815547E63C325E65F07DD439A84CE">
                            <name>GetElementsByTagName(const String&lt;uchar>&amp; tagName)</name>
                            <syntax>public NodeList GetElementsByTagName(const String&lt;uchar>&amp; tagName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>tagName</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                        </function>
                        <function id="member_function_HasAttributes_DomElement_7849C3B615C07C6DDC4EF43809539FE2798FF326">
                            <name>HasAttributes() const</name>
                            <syntax>public nothrow override bool HasAttributes() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_Prefix_DomElement_A8D720F37E6FD61240CCF1A6C3A835524F125A9B">
                            <name>Prefix() const</name>
                            <syntax>public nothrow override String&lt;uchar> Prefix() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_RemoveAttribute_DomElement_98ABF1EA03C0C539ABA7D5D0004ED9C074CFD5C1">
                            <name>RemoveAttribute(const String&lt;uchar>&amp; attrName)</name>
                            <syntax>public void RemoveAttribute(const String&lt;uchar>&amp; attrName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>attrName</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetAttribute_DomElement_B7062E899FF7C4A47CFD4C689D80F65222ACBB52">
                            <name>SetAttribute(const String&lt;uchar>&amp; attrName, const String&lt;uchar>&amp; attrValue)</name>
                            <syntax>public void SetAttribute(const String&lt;uchar>&amp; attrName, const String&lt;uchar>&amp; attrValue);</syntax>
                            <parameters>
                                <parameter>
                                    <name>attrName</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>attrValue</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetPrefix_DomElement_3908E49BBCD453800503F73891121EB356014C8F">
                            <name>SetPrefix(const String&lt;uchar>&amp; prefix)</name>
                            <syntax>public override void SetPrefix(const String&lt;uchar>&amp; prefix);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prefix</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_TagName_DomElement_7677108EDD12B88BF7E56662293BDB90B3D4C125">
                            <name>TagName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; TagName() const;</syntax>
                            <returnType ref="type.7390129"/>
                        </function>
                        <function id="member_function_WalkAttribute_DomElement_A479D4CEC7BB7E257B51125038E1BA90342C3465">
                            <name>WalkAttribute(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkAttribute(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Write_DomElement_D13A7148F28037033B06BE4350145904F0951B79">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA">
                    <name>DomException</name>
                    <groupName>DomException</groupName>
                    <syntax> public class DomException;</syntax>
                    <baseClass ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                    <constructors>
                        <constructor id="constructor_DomException_B242291ADF40674A01BECFCB5FFC4134A9C08232">
                            <name>DomException(const String&lt;char>&amp; message_)</name>
                            <syntax>public nothrow DomException(const String&lt;char>&amp; message_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509">
                    <name>DomNode</name>
                    <groupName>DomNode</groupName>
                    <syntax>abstract public class DomNode;</syntax>
                    <constructors>
                        <constructor id="constructor_DomNode_DEF6FCBFFA6705BF64FC558B4793E0504D78D924">
                            <name>DomNode(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow explicit DomNode(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomNode_93156422DA9CB0B1C2D63101BBAF37A641684CBA">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public virtual void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7401098"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomNode_80F4FF592368B1019ACFF7973093B65A977546C8">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public abstract UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.7388895"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_HasAttributes_DomNode_54692EAF28A9A74D13108AA969F4DE6282EAD5E2">
                            <name>HasAttributes() const</name>
                            <syntax>public nothrow virtual bool HasAttributes() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_HasChildNodes_DomNode_B54CDA859D4965DDBC948BB3FDF17166ED63D5C3">
                            <name>HasChildNodes() const</name>
                            <syntax>public nothrow virtual bool HasChildNodes() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_InternalLinkAfter_DomNode_E4B161D58A96C09A21C45015A8DB8265EC8C5343">
                            <name>InternalLinkAfter(DomNode* newNode)</name>
                            <syntax>public nothrow void InternalLinkAfter(DomNode* newNode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newNode</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_InternalLinkBefore_DomNode_C6640AB2F340DA5649F3A4A8E88E6DFF893A30E8">
                            <name>InternalLinkBefore(DomNode* newNode)</name>
                            <syntax>public nothrow void InternalLinkBefore(DomNode* newNode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newNode</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_InternalSetNamespaceUri_DomNode_C8A2900D5C2AB1CCFAC3B8518C2697519F8E3F7C">
                            <name>InternalSetNamespaceUri(const String&lt;uchar>&amp; namespaceUri_)</name>
                            <syntax>public nothrow void InternalSetNamespaceUri(const String&lt;uchar>&amp; namespaceUri_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>namespaceUri_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_InternalSetOwnerDocument_DomNode_2C7B4B1F61644BB75869AFF28315BE03BF5D5C3E">
                            <name>InternalSetOwnerDocument(DomDocument* ownerDocument_)</name>
                            <syntax>public nothrow inline void InternalSetOwnerDocument(DomDocument* ownerDocument_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ownerDocument_</name>
                                    <type ref="type.7401048"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_InternalSetParent_DomNode_D22E05A7FBD258419F2399CDD157320F1042ADA1">
                            <name>InternalSetParent(DomParentNode* parent_)</name>
                            <syntax>public nothrow inline void InternalSetParent(DomParentNode* parent_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parent_</name>
                                    <type ref="type.7401091"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_InternalUnlink_DomNode_372BF940A9BCBDD4C88FBA39B4E58A6B956FF862">
                            <name>InternalUnlink()</name>
                            <syntax>public nothrow void InternalUnlink();</syntax>
                        </function>
                        <function id="member_function_LocalName_DomNode_8FCF7CCC9ED964F2F3F18157D385CD15FCA5B8A1">
                            <name>LocalName() const</name>
                            <syntax>public nothrow virtual String&lt;uchar> LocalName() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_Name_DomNode_8CD8D09862447AE4797372A4EDFF89767B901773">
                            <name>Name() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Name() const;</syntax>
                            <returnType ref="type.7390129"/>
                        </function>
                        <function id="member_function_NamespaceUri_DomNode_E5EAFC2221783EA15DBACE764BA8D26A31E7ABDA">
                            <name>NamespaceUri() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; NamespaceUri() const;</syntax>
                            <returnType ref="type.7390129"/>
                        </function>
                        <function id="member_function_NextSibling_DomNode_0F805F8FF3BA2E16BAD6076AD19F39E281F97560">
                            <name>NextSibling() const</name>
                            <syntax>public nothrow inline DomNode* NextSibling() const;</syntax>
                            <returnType ref="type.7401085"/>
                        </function>
                        <function id="member_function_OwnerDocument_DomNode_51DC44DE9EB31C919B8FAF2B2BA58E99DAF00459">
                            <name>OwnerDocument() const</name>
                            <syntax>public nothrow inline DomDocument* OwnerDocument() const;</syntax>
                            <returnType ref="type.7401048"/>
                        </function>
                        <function id="member_function_Parent_DomNode_98114524C537E4DA6BCA22B350EFF8DBC67FDF74">
                            <name>Parent() const</name>
                            <syntax>public nothrow inline DomParentNode* Parent() const;</syntax>
                            <returnType ref="type.7401091"/>
                        </function>
                        <function id="member_function_Prefix_DomNode_40E6CCC46282FA896E243C1DFCC5F7026765F4BC">
                            <name>Prefix() const</name>
                            <syntax>public nothrow virtual String&lt;uchar> Prefix() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_PreviousSibling_DomNode_8D75DC5A9E4CB7CA82FB1CA757CF1BA8BDD85DA5">
                            <name>PreviousSibling() const</name>
                            <syntax>public nothrow inline DomNode* PreviousSibling() const;</syntax>
                            <returnType ref="type.7401085"/>
                        </function>
                        <function id="member_function_SetName_DomNode_91F610996B54D1DF548AF27DFFAB5413120FCF58">
                            <name>SetName(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow inline void SetName(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetPrefix_DomNode_1EF9E6E9F12B9304CBCCE73EF377A7845644752A">
                            <name>SetPrefix(const String&lt;uchar>&amp; prefix)</name>
                            <syntax>public virtual void SetPrefix(const String&lt;uchar>&amp; prefix);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prefix</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ValueContainsNewLine_DomNode_974B7395ED104A9EA1FC118BDC23FB852C72CD01">
                            <name>ValueContainsNewLine() const</name>
                            <syntax>public nothrow virtual bool ValueContainsNewLine() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_Walk_DomNode_01D4B49EA0B27E6999659D9231EAA4CE5F93FA17">
                            <name>Walk(NodeOp&amp; nodeOp, Axis axis)</name>
                            <syntax>public void Walk(NodeOp&amp; nodeOp, Axis axis);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                                <parameter>
                                    <name>axis</name>
                                    <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkAncestor_DomNode_8A1869ED749CAEA7336C50365124ADB13DEE7333">
                            <name>WalkAncestor(NodeOp&amp; nodeOp)</name>
                            <syntax>public void WalkAncestor(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkAncestorOrSelf_DomNode_A604F521EF7C8A9696C620419BEDC0572DB09D3E">
                            <name>WalkAncestorOrSelf(NodeOp&amp; nodeOp)</name>
                            <syntax>public void WalkAncestorOrSelf(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkAttribute_DomNode_8A0665448EE9CE1E9C74FE41BF720F7C86C216A6">
                            <name>WalkAttribute(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkAttribute(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkChildren_DomNode_4DD4F52B40723B3813286AC7E5E3EFFBEF6309E8">
                            <name>WalkChildren(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkChildren(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkDescendant_DomNode_B7C74C6FA6D24AC004677A8BCF260A391793DC03">
                            <name>WalkDescendant(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkDescendant(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkDescendantOrSelf_DomNode_3A057E15ABDDD5FC0174C40D8B192F311787BF6A">
                            <name>WalkDescendantOrSelf(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkDescendantOrSelf(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkFollowing_DomNode_7CFDC8A2014BE7FD32038D0392616893F5834737">
                            <name>WalkFollowing(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkFollowing(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkFollowingSibling_DomNode_81AB8D182C77437313C38ADB960FAE0A12323961">
                            <name>WalkFollowingSibling(NodeOp&amp; nodeOp)</name>
                            <syntax>public void WalkFollowingSibling(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkParent_DomNode_38AAB90381E23F25AEDED3949B52676416064649">
                            <name>WalkParent(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkParent(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkPreceding_DomNode_9555D61B3089AAB5DE2EB57A9BE97A4ABC954760">
                            <name>WalkPreceding(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkPreceding(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkPrecedingOrSelf_DomNode_B139187B8ECA3961CA670800D1459FB50123EFB9">
                            <name>WalkPrecedingOrSelf(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkPrecedingOrSelf(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkPrecedingSibling_DomNode_213F71D6721D3C10C66EDCCA57EA6EFF4A97ED69">
                            <name>WalkPrecedingSibling(NodeOp&amp; nodeOp)</name>
                            <syntax>public void WalkPrecedingSibling(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Write_DomNode_05F285958389E34CA6C2512D954F2AA7FDB24AD0">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public abstract void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2">
                    <name>DomParentNode</name>
                    <groupName>DomParentNode</groupName>
                    <syntax>abstract public class DomParentNode;</syntax>
                    <baseClass ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                    <constructors>
                        <constructor id="constructor_DomParentNode_2EDAC20B45AD0B1A87C3482C3E5B254E7956735E">
                            <name>DomParentNode(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow explicit DomParentNode(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomParentNode_175630373BD383BB3C6E293E38D5E5C53BF34F9A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7401098"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AppendChild_DomParentNode_DF3053D68BC15CAB455F46A051614D39DA1617AA">
                            <name>AppendChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild)</name>
                            <syntax>public virtual DomNode* AppendChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.7401711"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401085"/>
                        </function>
                        <function id="member_function_ChildNodes_DomParentNode_6CB6FF0C8FD2B4262A6BBA7000162F3F1C4D0E4C">
                            <name>ChildNodes() const</name>
                            <syntax>public NodeList ChildNodes() const;</syntax>
                            <returnType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                        </function>
                        <function id="member_function_CloneChildrenTo_DomParentNode_E2459F3C1144E6B9C29FF70D150EA6F05945360B">
                            <name>CloneChildrenTo(DomParentNode* clone)</name>
                            <syntax>public void CloneChildrenTo(DomParentNode* clone);</syntax>
                            <parameters>
                                <parameter>
                                    <name>clone</name>
                                    <type ref="type.7401091"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_FirstChild_DomParentNode_B129A4013D1ECA9D760003712A718B9862B795DA">
                            <name>FirstChild() const</name>
                            <syntax>public nothrow inline DomNode* FirstChild() const;</syntax>
                            <returnType ref="type.7401085"/>
                        </function>
                        <function id="member_function_HasChildNodes_DomParentNode_18200E1E599C509661EB96D824FD8BA6B2EBEC7E">
                            <name>HasChildNodes() const</name>
                            <syntax>public nothrow override bool HasChildNodes() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_InsertBefore_DomParentNode_0CA9971641672C82BAFEA8AB38C97C38E2DAAE45">
                            <name>InsertBefore(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* refChild)</name>
                            <syntax>public virtual DomNode* InsertBefore(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* refChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.7401711"/>
                                </parameter>
                                <parameter>
                                    <name>refChild</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401085"/>
                        </function>
                        <function id="member_function_LastChild_DomParentNode_01D8CE35EB4B754F1A625ABAE597FA0C56CF6371">
                            <name>LastChild() const</name>
                            <syntax>public nothrow inline DomNode* LastChild() const;</syntax>
                            <returnType ref="type.7401085"/>
                        </function>
                        <function id="member_function_RemoveChild_DomParentNode_BC671645753B4144C18087A3B363FC1FF2A50A4F">
                            <name>RemoveChild(DomNode* oldChild)</name>
                            <syntax>public virtual UniquePtr&lt;System.Dom.DomNode> RemoveChild(DomNode* oldChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>oldChild</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_ReplaceChild_DomParentNode_F30E2B35F5C6E879A979D455243DD32E9965E37E">
                            <name>ReplaceChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* oldChild)</name>
                            <syntax>public virtual UniquePtr&lt;System.Dom.DomNode> ReplaceChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* oldChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.7401711"/>
                                </parameter>
                                <parameter>
                                    <name>oldChild</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_WalkChildren_DomParentNode_F71B72A14AC2758A406A828A5686082E4D163532">
                            <name>WalkChildren(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkChildren(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkDescendant_DomParentNode_440D2197E6D78C9AD8B5EE673525FF6A4032C700">
                            <name>WalkDescendant(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkDescendant(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkDescendantOrSelf_DomParentNode_366E0175C363C8A7904AA01D63B4AE6895EB4B97">
                            <name>WalkDescendantOrSelf(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkDescendantOrSelf(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkPreceding_DomParentNode_B0FFC420855EF0F92B933377CF6CCC74820998ED">
                            <name>WalkPreceding(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkPreceding(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkPrecedingOrSelf_DomParentNode_6FE048113B73BFDBABB90BB32AE75681CF7880DA">
                            <name>WalkPrecedingOrSelf(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkPrecedingOrSelf(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.7401083"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Write_DomParentNode_81B62CCF5A83DC3EEA9195BC39D3F1CC22B26A89">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881">
                    <name>DomProcessingInstruction</name>
                    <groupName>DomProcessingInstruction</groupName>
                    <syntax> public class DomProcessingInstruction;</syntax>
                    <baseClass ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                    <constructors>
                        <constructor id="constructor_DomProcessingInstruction_DE21C7B52CDBA1009A84861A78DCDE03CECE4BC7">
                            <name>DomProcessingInstruction(const String&lt;uchar>&amp; target_, const String&lt;uchar>&amp; data_)</name>
                            <syntax>public nothrow DomProcessingInstruction(const String&lt;uchar>&amp; target_, const String&lt;uchar>&amp; data_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>target_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>data_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomProcessingInstruction_F0E91A1A782BC0C775010334643E7FF0817FB99B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7401098"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomProcessingInstruction_D80974BD3509ADF130742C494ABE20283916CEAC">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.7388895"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="function_group_Data_4D2BA8D5B249FFFCE41FD8C890321070827616EC">
                            <name>Data</name>
                            <overloads>
                                <overload id="member_function_Data_DomProcessingInstruction_AB163AA45F23C116BF841417BB9BF40FE0B874D4">
                                    <name>Data()</name>
                                    <syntax>public nothrow inline String&lt;uchar>&amp; Data();</syntax>
                                    <returnType ref="type.7390126"/>
                                </overload>
                                <overload id="member_function_Data_DomProcessingInstruction_8FB02FEF10367B281308D8E28BCE5E6589079D59">
                                    <name>Data() const</name>
                                    <syntax>public nothrow inline const String&lt;uchar>&amp; Data() const;</syntax>
                                    <returnType ref="type.7390129"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Target_5F883D15E62A29E04C1477225F4BFD81303AE764">
                            <name>Target</name>
                            <overloads>
                                <overload id="member_function_Target_DomProcessingInstruction_951942C2E3FDE12B36440A2351C6817A25554AA2">
                                    <name>Target()</name>
                                    <syntax>public nothrow inline String&lt;uchar>&amp; Target();</syntax>
                                    <returnType ref="type.7390126"/>
                                </overload>
                                <overload id="member_function_Target_DomProcessingInstruction_6F380474EBCAF57D61BDD7F12D4D7A3174B5A844">
                                    <name>Target() const</name>
                                    <syntax>public nothrow inline const String&lt;uchar>&amp; Target() const;</syntax>
                                    <returnType ref="type.7390129"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Write_DomProcessingInstruction_C1B17952426F3D4C254F69BD0AF10A60F266D8C8">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D">
                    <name>DomText</name>
                    <groupName>DomText</groupName>
                    <syntax> public class DomText;</syntax>
                    <baseClass ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                    <constructors>
                        <constructor id="default_constructor_DomText_B844151B3EF41E0790D555F06F518F3F7FD16496">
                            <name>DomText()</name>
                            <syntax>public nothrow DomText();</syntax>
                        </constructor>
                        <constructor id="constructor_DomText_B3E3835B94AD0A4CE92A3F8AFA7BFD3D2A5606B0">
                            <name>DomText(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow explicit DomText(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_DomText_F419AA7037823C5D76020FADE3B2C177539CBEB8">
                            <name>DomText(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; data_)</name>
                            <syntax>public nothrow DomText(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; data_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>data_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomText_C20BA958979ABC837784825A7CCACBB950ACF37A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7401098"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomText_437A987BDB56AEBE601A7FF332519456A1FB2E00">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.7388895"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_ElementsByTagNameVisitor_DBE61B07E819E1EB70C9AEFFF9A22069D47BD652">
                    <name>ElementsByTagNameVisitor</name>
                    <groupName>ElementsByTagNameVisitor</groupName>
                    <syntax> public class ElementsByTagNameVisitor;</syntax>
                    <baseClass ref="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC"/>
                    <constructors>
                        <constructor id="constructor_ElementsByTagNameVisitor_A9CC3BAD2BAE97A962E046EB9F5296C1FB00E044">
                            <name>ElementsByTagNameVisitor(NodeList&amp; elements_, const String&lt;uchar>&amp; tagName_)</name>
                            <syntax>public nothrow ElementsByTagNameVisitor(NodeList&amp; elements_, const String&lt;uchar>&amp; tagName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>elements_</name>
                                    <type ref="type.7401104"/>
                                </parameter>
                                <parameter>
                                    <name>tagName_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_BeginVisit_ElementsByTagNameVisitor_1E834A403D412DF90E15C2817BFF05858EBA7ECE">
                            <name>BeginVisit(DomElement* element)</name>
                            <syntax>public override void BeginVisit(DomElement* element);</syntax>
                            <parameters>
                                <parameter>
                                    <name>element</name>
                                    <type ref="type.7401069"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B">
                    <name>NodeList</name>
                    <groupName>NodeList</groupName>
                    <syntax> public class NodeList;</syntax>
                    <functions>
                        <function id="member_function_InternalAddNode_NodeList_AD29C2CD97655C72BC89C20E8785A03E0EE09AA8">
                            <name>InternalAddNode(DomNode* node)</name>
                            <syntax>public void InternalAddNode(DomNode* node);</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Item_NodeList_3A3D59B690B0DBC6AD7459F73805CAA1451D3F3F">
                            <name>Item(long index) const</name>
                            <syntax>public nothrow inline DomNode* Item(long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.7388902"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401085"/>
                        </function>
                        <function id="member_function_Length_NodeList_F2FE1619D547220DDBAEC7BAA5E5C4B6EE9C4DC9">
                            <name>Length() const</name>
                            <syntax>public nothrow inline long Length() const;</syntax>
                            <returnType ref="type.7388902"/>
                        </function>
                        <function id="member_function_op_index_NodeList_1780681D22AE39396942CA34FF753C94B5DEEAED">
                            <name>operator[](long index) const</name>
                            <syntax>public nothrow inline DomNode* operator[](long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.7388902"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401085"/>
                        </function>
                    </functions>
                </class>
                <class id="class_NodeOp_A834E32432E8B9893D49D376C8198B2DA0983A10">
                    <name>NodeOp</name>
                    <groupName>NodeOp</groupName>
                    <syntax> public class NodeOp;</syntax>
                    <functions>
                        <function id="member_function_Apply_NodeOp_9D50791E1E5C94351EFCB6673C31DC266BB61D94">
                            <name>Apply(DomNode* node)</name>
                            <syntax>public virtual void Apply(DomNode* node);</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC">
                    <name>Visitor</name>
                    <groupName>Visitor</groupName>
                    <syntax> public class Visitor;</syntax>
                    <functions>
                        <function id="function_group_BeginVisit_B95139E413B6344EE39468BC12C1EBAA4A84CAAE">
                            <name>BeginVisit</name>
                            <overloads>
                                <overload id="member_function_BeginVisit_Visitor_9932BCCF15E1E576730A17901E60D14F62FADAA1">
                                    <name>BeginVisit(DomDocument* document)</name>
                                    <syntax>public virtual void BeginVisit(DomDocument* document);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>document</name>
                                            <type ref="type.7401048"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_B15AA35A55ED994E7C1E95FEBC0ED7BEA62EC1DD">
                                    <name>BeginVisit(DomElement* element)</name>
                                    <syntax>public virtual void BeginVisit(DomElement* element);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>element</name>
                                            <type ref="type.7401069"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_EndVisit_6794E8B220ADA88A084AE3C6637B0804D14056F1">
                            <name>EndVisit</name>
                            <overloads>
                                <overload id="member_function_EndVisit_Visitor_245CB1C98B54C28A814CC3E39B212FE05015CD6F">
                                    <name>EndVisit(DomDocument* document)</name>
                                    <syntax>public virtual void EndVisit(DomDocument* document);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>document</name>
                                            <type ref="type.7401048"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_9E5C2BB49E3CC3D2AFD84D51EA0B3F8007F5192E">
                                    <name>EndVisit(DomElement* element)</name>
                                    <syntax>public virtual void EndVisit(DomElement* element);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>element</name>
                                            <type ref="type.7401069"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Visit_B12049CF36CAD47850D47714F20E6756604181A6">
                            <name>Visit</name>
                            <overloads>
                                <overload id="member_function_Visit_Visitor_1A27464E9FE736CA7E9E6D09721F4428BE2D250D">
                                    <name>Visit(DomCDataSection* cdataSection)</name>
                                    <syntax>public virtual void Visit(DomCDataSection* cdataSection);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>cdataSection</name>
                                            <type ref="type.7401030"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A0BB6B6195C899ACC084C24EE4AB684FE22F0072">
                                    <name>Visit(DomComment* comment)</name>
                                    <syntax>public virtual void Visit(DomComment* comment);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>comment</name>
                                            <type ref="type.7401036"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_066CDCD711BD2D7F6D6F54485317F141C05F030A">
                                    <name>Visit(DomProcessingInstruction* processingInstruction)</name>
                                    <syntax>public virtual void Visit(DomProcessingInstruction* processingInstruction);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>processingInstruction</name>
                                            <type ref="type.7401042"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_5866A26A863EB49561A5F8CC68AC6CA84D5B94A6">
                                    <name>Visit(DomText* text)</name>
                                    <syntax>public virtual void Visit(DomText* text);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>text</name>
                                            <type ref="type.7401024"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_AttrValueEscape_362208DD2DF9A6171A5AF308A9E079DB7C7E27B0">
                    <name>AttrValueEscape(const String&lt;uchar>&amp; attributeValue, uchar delimiter)</name>
                    <syntax>public nothrow String&lt;uchar> AttrValueEscape(const String&lt;uchar>&amp; attributeValue, uchar delimiter);</syntax>
                    <parameters>
                        <parameter>
                            <name>attributeValue</name>
                            <type ref="type.7390129"/>
                        </parameter>
                        <parameter>
                            <name>delimiter</name>
                            <type ref="type.7388908"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7390124"/>
                </function>
                <function id="function_AxisName_D89A234F6060B307C3C9DADFF0CBDE9BF2CA2312">
                    <name>AxisName(Axis axis)</name>
                    <syntax>public nothrow String&lt;uchar> AxisName(Axis axis);</syntax>
                    <parameters>
                        <parameter>
                            <name>axis</name>
                            <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7390124"/>
                </function>
                <function id="function_MakeXmlAttrValue_EF82DEEB8B524A7E6BE0F669B376D42D9ED4A48A">
                    <name>MakeXmlAttrValue(const String&lt;uchar>&amp; attrValue)</name>
                    <syntax>public nothrow String&lt;uchar> MakeXmlAttrValue(const String&lt;uchar>&amp; attrValue);</syntax>
                    <parameters>
                        <parameter>
                            <name>attrValue</name>
                            <type ref="type.7390129"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7390124"/>
                </function>
                <function id="function_group_ParseXmlContentToDomDocument_3D7C62FBB65FEC9673C2CB0A95BD58D4A0081799">
                    <name>ParseXmlContentToDomDocument</name>
                    <overloads>
                        <overload id="function_ParseXmlContentToDomDocument_908DF5EBE9F27F3A5F117904A2E58021B0EC0AC2">
                            <name>ParseXmlContentToDomDocument(const String&lt;char>&amp; xmlContent, const String&lt;char>&amp; systemId)</name>
                            <syntax>public UniquePtr&lt;System.Dom.DomDocument> ParseXmlContentToDomDocument(const String&lt;char>&amp; xmlContent, const String&lt;char>&amp; systemId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlContent</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                                <parameter>
                                    <name>systemId</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401929"/>
                        </overload>
                        <overload id="function_ParseXmlContentToDomDocument_43FCDABD5857D3B7093B08EE39ABDA8D063B9990">
                            <name>ParseXmlContentToDomDocument(const String&lt;uchar>&amp; xmlContent, const String&lt;char>&amp; systemId)</name>
                            <syntax>public UniquePtr&lt;System.Dom.DomDocument> ParseXmlContentToDomDocument(const String&lt;uchar>&amp; xmlContent, const String&lt;char>&amp; systemId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlContent</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>systemId</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401929"/>
                        </overload>
                        <overload id="function_ParseXmlContentToDomDocument_0BE70E7597FC179FFB38BBE863EB51E81DCF4005">
                            <name>ParseXmlContentToDomDocument(const String&lt;wchar>&amp; xmlContent, const String&lt;char>&amp; systemId)</name>
                            <syntax>public UniquePtr&lt;System.Dom.DomDocument> ParseXmlContentToDomDocument(const String&lt;wchar>&amp; xmlContent, const String&lt;char>&amp; systemId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlContent</name>
                                    <type ref="type.7390084"/>
                                </parameter>
                                <parameter>
                                    <name>systemId</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401929"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ParseXmlFileToDomDocument_CDBEF03097E654DC3609B662FEAF72116D01B7CA">
                    <name>ParseXmlFileToDomDocument(const String&lt;char>&amp; xmlFileName)</name>
                    <syntax>public UniquePtr&lt;System.Dom.DomDocument> ParseXmlFileToDomDocument(const String&lt;char>&amp; xmlFileName);</syntax>
                    <parameters>
                        <parameter>
                            <name>xmlFileName</name>
                            <type ref="type.7390041"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7401929"/>
                </function>
                <function id="function_XmlCharDataEscape_3E37A8F52A656F4295DB0FCACB3F063949966382">
                    <name>XmlCharDataEscape(const String&lt;uchar>&amp; charData)</name>
                    <syntax>public nothrow String&lt;uchar> XmlCharDataEscape(const String&lt;uchar>&amp; charData);</syntax>
                    <parameters>
                        <parameter>
                            <name>charData</name>
                            <type ref="type.7390129"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7390124"/>
                </function>
                <function id="function_op_eq_C18E752F81824F111C84E6AE9A1DA83240CB03B6">
                    <name>operator==(Axis left, Axis right)</name>
                    <syntax>public bool operator==(Axis left, Axis right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7388895"/>
                </function>
            </functions>
            <enumerations>
                <enumeration id="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB">
                    <name>Axis</name>
                    <syntax>public enum Axis;</syntax>
                    <underlyingType ref="type.7388900"/>
                    <enumConstant>
                        <name>child</name>
                        <value>0</value>
                    </enumConstant>
                    <enumConstant>
                        <name>descendant</name>
                        <value>1</value>
                    </enumConstant>
                    <enumConstant>
                        <name>parent</name>
                        <value>2</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ancestor</name>
                        <value>3</value>
                    </enumConstant>
                    <enumConstant>
                        <name>followingSibling</name>
                        <value>4</value>
                    </enumConstant>
                    <enumConstant>
                        <name>precedingSibling</name>
                        <value>5</value>
                    </enumConstant>
                    <enumConstant>
                        <name>following</name>
                        <value>6</value>
                    </enumConstant>
                    <enumConstant>
                        <name>preceding</name>
                        <value>7</value>
                    </enumConstant>
                    <enumConstant>
                        <name>attribute</name>
                        <value>8</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ns</name>
                        <value>9</value>
                    </enumConstant>
                    <enumConstant>
                        <name>self</name>
                        <value>10</value>
                    </enumConstant>
                    <enumConstant>
                        <name>descendantOrSelf</name>
                        <value>11</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ancestorOrSelf</name>
                        <value>12</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
    </namespaces>
    <types>
        <type derived="true" id="type.3569">
            <name>AddressOf&amp;&amp;</name>
            <content>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3641">
            <name>AssertStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB">
            <name>Axis</name>
        </type>
        <type derived="true" id="type.7401898">
            <name>Axis&amp;</name>
            <content>
                <baseType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401899">
            <name>Axis&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401897">
            <name>Axis*</name>
            <content>
                <baseType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390801" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.3156">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7390801"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401751" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.7401725"/>
            </content>
        </type>
        <type derived="true" id="type.7401753">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>&amp;</name>
            <content>
                <baseType ref="type.7401751"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401752">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*</name>
            <content>
                <baseType ref="type.7401751"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401784">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;</name>
            <content>
                <baseType ref="type.7401751"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401794">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7401751"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401785">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**</name>
            <content>
                <baseType ref="type.7401751"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401991">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**&amp;</name>
            <content>
                <baseType ref="type.7401751"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401992">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.7401751"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401990">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>***</name>
            <content>
                <baseType ref="type.7401751"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="7389532"/>
            </content>
        </type>
        <type derived="true" id="type.3164">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="7389553"/>
            </content>
        </type>
        <type derived="true" id="type.3177">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B">
            <name>BuildIndexVisitor</name>
        </type>
        <type derived="true" id="type.7401055">
            <name>BuildIndexVisitor&amp;</name>
            <content>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3677">
            <name>BuildIndexVisitor&amp;&amp;</name>
            <content>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401054">
            <name>BuildIndexVisitor*</name>
            <content>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3665">
            <name>CharParser&amp;&amp;</name>
            <content>
                <baseType ref="class_CharParser_F30B4B7DDC9B8D3CD1476C03049B3C7189028FDA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3648">
            <name>CodeExpandingVisitor&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7389243">
            <name>CodeFormatter&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3547">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3584">
            <name>Complement&amp;&amp;</name>
            <content>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7400977">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3061">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7400977">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7400976">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3060">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7400976">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3642">
            <name>Const&amp;&amp;</name>
            <content>
                <baseType ref="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3602">
            <name>Construct&amp;&amp;</name>
            <content>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390010" specialization="true">
            <name>Counter&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type id="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30" specialization="true">
            <name>Counter&lt;T></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="7389691"/>
            </content>
        </type>
        <type derived="true" id="type.3283">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3268">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3261">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3249">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3290">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3252">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A" specialization="true">
            <name>Counter&lt;U></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="7389693"/>
            </content>
        </type>
        <type derived="true" id="type.3620">
            <name>DeleteStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3566">
            <name>Deref&amp;&amp;</name>
            <content>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3623">
            <name>DestroyStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845">
            <name>DomAttr</name>
        </type>
        <type derived="true" id="type.7401064">
            <name>DomAttr&amp;</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401800">
            <name>DomAttr&amp;&amp;</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401063">
            <name>DomAttr*</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401895">
            <name>DomAttr*&amp;</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402030">
            <name>DomAttr*&amp;&amp;</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402029">
            <name>DomAttr**</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C">
            <name>DomCDataSection</name>
        </type>
        <type derived="true" id="type.7401031">
            <name>DomCDataSection&amp;</name>
            <content>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401714">
            <name>DomCDataSection&amp;&amp;</name>
            <content>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401030">
            <name>DomCDataSection*</name>
            <content>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991">
            <name>DomCharacterData</name>
        </type>
        <type derived="true" id="type.7401019">
            <name>DomCharacterData&amp;</name>
            <content>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401712">
            <name>DomCharacterData&amp;&amp;</name>
            <content>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401018">
            <name>DomCharacterData*</name>
            <content>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38">
            <name>DomComment</name>
        </type>
        <type derived="true" id="type.7401037">
            <name>DomComment&amp;</name>
            <content>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401715">
            <name>DomComment&amp;&amp;</name>
            <content>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401036">
            <name>DomComment*</name>
            <content>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8">
            <name>DomDocument</name>
        </type>
        <type derived="true" id="type.7401049">
            <name>DomDocument&amp;</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401718">
            <name>DomDocument&amp;&amp;</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401048">
            <name>DomDocument*</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402013">
            <name>DomDocument*&amp;</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402012">
            <name>DomDocument**</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomDocumentBuilder_397E94D2EA454117602C5070385DB01C1EFBB45B">
            <name>DomDocumentBuilder</name>
        </type>
        <type derived="true" id="type.7401107">
            <name>DomDocumentBuilder&amp;</name>
            <content>
                <baseType ref="class_DomDocumentBuilder_397E94D2EA454117602C5070385DB01C1EFBB45B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401106">
            <name>DomDocumentBuilder*</name>
            <content>
                <baseType ref="class_DomDocumentBuilder_397E94D2EA454117602C5070385DB01C1EFBB45B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3">
            <name>DomDocumentFragment</name>
        </type>
        <type derived="true" id="type.7401058">
            <name>DomDocumentFragment&amp;</name>
            <content>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401799">
            <name>DomDocumentFragment&amp;&amp;</name>
            <content>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401057">
            <name>DomDocumentFragment*</name>
            <content>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402085">
            <name>DomDocumentFragment*&amp;</name>
            <content>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402084">
            <name>DomDocumentFragment**</name>
            <content>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B">
            <name>DomElement</name>
        </type>
        <type derived="true" id="type.7401070">
            <name>DomElement&amp;</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401801">
            <name>DomElement&amp;&amp;</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401069">
            <name>DomElement*</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401795">
            <name>DomElement*&amp;</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401977">
            <name>DomElement*&amp;&amp;</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401975">
            <name>DomElement**</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA">
            <name>DomException</name>
        </type>
        <type derived="true" id="type.7401080">
            <name>DomException&amp;</name>
            <content>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401902">
            <name>DomException&amp;&amp;</name>
            <content>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401079">
            <name>DomException*</name>
            <content>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509">
            <name>DomNode</name>
        </type>
        <type derived="true" id="type.7401086">
            <name>DomNode&amp;</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401704">
            <name>DomNode&amp;&amp;</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401085">
            <name>DomNode*</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401918">
            <name>DomNode*&amp;</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401928">
            <name>DomNode*&amp;&amp;</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401919">
            <name>DomNode**</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402079">
            <name>DomNode**&amp;</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402078">
            <name>DomNode***</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3059">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7400975">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3560">
            <name>DomObject&amp;&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7400974">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3058">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2">
            <name>DomParentNode</name>
        </type>
        <type derived="true" id="type.7401092">
            <name>DomParentNode&amp;</name>
            <content>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401717">
            <name>DomParentNode&amp;&amp;</name>
            <content>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401091">
            <name>DomParentNode*</name>
            <content>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401994">
            <name>DomParentNode*&amp;</name>
            <content>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401993">
            <name>DomParentNode**</name>
            <content>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881">
            <name>DomProcessingInstruction</name>
        </type>
        <type derived="true" id="type.7401043">
            <name>DomProcessingInstruction&amp;</name>
            <content>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401716">
            <name>DomProcessingInstruction&amp;&amp;</name>
            <content>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401042">
            <name>DomProcessingInstruction*</name>
            <content>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D">
            <name>DomText</name>
        </type>
        <type derived="true" id="type.7401025">
            <name>DomText&amp;</name>
            <content>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401713">
            <name>DomText&amp;&amp;</name>
            <content>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401024">
            <name>DomText*</name>
            <content>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ElementsByTagNameVisitor_DBE61B07E819E1EB70C9AEFFF9A22069D47BD652">
            <name>ElementsByTagNameVisitor</name>
        </type>
        <type derived="true" id="type.7401076">
            <name>ElementsByTagNameVisitor&amp;</name>
            <content>
                <baseType ref="class_ElementsByTagNameVisitor_DBE61B07E819E1EB70C9AEFFF9A22069D47BD652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401075">
            <name>ElementsByTagNameVisitor*</name>
            <content>
                <baseType ref="class_ElementsByTagNameVisitor_DBE61B07E819E1EB70C9AEFFF9A22069D47BD652"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7398068" specialization="true">
            <name>EqualTo&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="type.7390124"/>
            </content>
        </type>
        <type derived="true" id="type.3660">
            <name>ExpectationParser&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3626">
            <name>ExpressionStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <argumentType ref="7389441"/>
            </content>
        </type>
        <type derived="true" id="type.3114">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="7389434"/>
                <argumentType ref="7389435"/>
                <argumentType ref="7389436"/>
            </content>
        </type>
        <type derived="true" id="type.3111">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3110">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="7389442"/>
                <argumentType ref="type.7390338"/>
                <argumentType ref="type.7390340"/>
            </content>
        </type>
        <type derived="true" id="type.3118">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3116">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3113">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="7389443"/>
                <argumentType ref="type.7390355"/>
                <argumentType ref="type.7390356"/>
            </content>
        </type>
        <type derived="true" id="type.3112">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3117">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3115">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3632">
            <name>GotoCaseStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3617">
            <name>GotoStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401719" specialization="true">
            <name>HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7401069"/>
                <argumentType ref="type.7398062"/>
                <argumentType ref="type.7398068"/>
            </content>
        </type>
        <type derived="true" id="type.7401721">
            <name>HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.7401719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401720">
            <name>HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.7401719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402024">
            <name>HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.7401719"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402023">
            <name>HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.7401719"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7398062" specialization="true">
            <name>Hasher&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <argumentType ref="type.7390124"/>
            </content>
        </type>
        <type id="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="7389523"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <argumentType ref="7389525"/>
                <argumentType ref="7389526"/>
            </content>
        </type>
        <type derived="true" id="type.3152">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="7389552"/>
                <argumentType ref="7389553"/>
                <argumentType ref="7389554"/>
                <argumentType ref="7389555"/>
                <argumentType ref="7389556"/>
            </content>
        </type>
        <type derived="true" id="type.3172">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401739" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7401725"/>
                <argumentType ref="type.7401729"/>
                <argumentType ref="type.7398062"/>
                <argumentType ref="type.7398068"/>
            </content>
        </type>
        <type derived="true" id="type.7401741">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.7401739"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401765">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401739"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401740">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.7401739"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402008">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.7401739"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402009">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7401739"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402007">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.7401739"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7398376" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7398367"/>
                <argumentType ref="type.7398062"/>
                <argumentType ref="type.7398068"/>
            </content>
        </type>
        <type id="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="7389532"/>
                <argumentType ref="7389532"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="7389533"/>
                <argumentType ref="7389534"/>
            </content>
        </type>
        <type derived="true" id="type.3160">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401745" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7401725"/>
                <argumentType ref="type.7401727"/>
                <argumentType ref="type.7401726"/>
                <argumentType ref="type.7401739"/>
            </content>
        </type>
        <type derived="true" id="type.7401747">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.7401745"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402016">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401745"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401746">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.7401745"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401759" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7401725"/>
                <argumentType ref="type.7401736"/>
                <argumentType ref="type.7401757"/>
                <argumentType ref="type.7401739"/>
            </content>
        </type>
        <type derived="true" id="type.7401761">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.7401759"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402010">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401759"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401760">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.7401759"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401471" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390126"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398376"/>
            </content>
        </type>
        <type id="type.3428" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390126"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398376"/>
            </content>
        </type>
        <type id="type.7401471" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390126"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398376"/>
            </content>
        </type>
        <type derived="true" id="type.3430">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.3428"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401473">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.7401471"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3429">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.3428"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401472">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.7401471"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401477" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390129"/>
                <argumentType ref="type.7390128"/>
                <argumentType ref="type.7398376"/>
            </content>
        </type>
        <type id="type.3434" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390129"/>
                <argumentType ref="type.7390128"/>
                <argumentType ref="type.7398376"/>
            </content>
        </type>
        <type derived="true" id="type.3436">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.3434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401479">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.7401477"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401478">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.7401477"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3435">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.3434"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3606">
            <name>Identifier&amp;&amp;</name>
            <content>
                <baseType ref="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3674">
            <name>InternalEntity&amp;&amp;</name>
            <content>
                <baseType ref="class_InternalEntity_724D2DA658DF130784EEFD7D00A1AF74339A3CBD"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3587">
            <name>Invoke&amp;&amp;</name>
            <content>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3657">
            <name>KleeneStarParser&amp;&amp;</name>
            <content>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401830" specialization="true">
            <name>Less&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2"/>
                <argumentType ref="type.7390124"/>
            </content>
        </type>
        <type derived="true" id="type.7401835">
            <name>Less&lt;String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.7401830"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402036">
            <name>Less&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401830"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401834">
            <name>Less&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.7401830"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <argumentType ref="7389569"/>
            </content>
        </type>
        <type derived="true" id="type.3181">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3180">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390820" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390802"/>
            </content>
        </type>
        <type derived="true" id="type.3155">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401769" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7401752"/>
            </content>
        </type>
        <type derived="true" id="type.7401771">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*>&amp;</name>
            <content>
                <baseType ref="type.7401769"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401793">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401769"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401770">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*>*</name>
            <content>
                <baseType ref="type.7401769"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390973" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390956"/>
            </content>
        </type>
        <type derived="true" id="type.3163">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390973"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391158" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7391139"/>
            </content>
        </type>
        <type derived="true" id="type.3176">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391158"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401903" specialization="true">
            <name>List&lt;DomNode*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7401085"/>
            </content>
        </type>
        <type derived="true" id="type.7401905">
            <name>List&lt;DomNode*>&amp;</name>
            <content>
                <baseType ref="type.7401903"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401927">
            <name>List&lt;DomNode*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401903"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401904">
            <name>List&lt;DomNode*>*</name>
            <content>
                <baseType ref="type.7401903"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7392525" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.3308">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392525"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401535" specialization="true">
            <name>List&lt;String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390125"/>
            </content>
        </type>
        <type id="type.3492" specialization="true">
            <name>List&lt;String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390125"/>
            </content>
        </type>
        <type id="type.7401535" specialization="true">
            <name>List&lt;String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390125"/>
            </content>
        </type>
        <type derived="true" id="type.7401537">
            <name>List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <baseType ref="type.7401535"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3494">
            <name>List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <baseType ref="type.3492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3512">
            <name>List&lt;String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3523">
            <name>List&lt;String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401535"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3493">
            <name>List&lt;String&lt;uchar>*>*</name>
            <content>
                <baseType ref="type.3492"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401536">
            <name>List&lt;String&lt;uchar>*>*</name>
            <content>
                <baseType ref="type.7401535"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="7389573"/>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="7389619"/>
            </content>
        </type>
        <type derived="true" id="type.3302">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3220">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3184">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401809" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Dom.DomAttr>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7401802"/>
            </content>
        </type>
        <type derived="true" id="type.7401811">
            <name>List&lt;UniquePtr&lt;System.Dom.DomAttr>>&amp;</name>
            <content>
                <baseType ref="type.7401809"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401829">
            <name>List&lt;UniquePtr&lt;System.Dom.DomAttr>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401809"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401810">
            <name>List&lt;UniquePtr&lt;System.Dom.DomAttr>>*</name>
            <content>
                <baseType ref="type.7401809"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401949" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Dom.DomElement>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7401936"/>
            </content>
        </type>
        <type derived="true" id="type.7401951">
            <name>List&lt;UniquePtr&lt;System.Dom.DomElement>>&amp;</name>
            <content>
                <baseType ref="type.7401949"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401969">
            <name>List&lt;UniquePtr&lt;System.Dom.DomElement>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401949"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401950">
            <name>List&lt;UniquePtr&lt;System.Dom.DomElement>>*</name>
            <content>
                <baseType ref="type.7401949"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3610">
            <name>Literal&amp;&amp;</name>
            <content>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1" specialization="true">
            <name>LockGuard&lt;Mtx></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="7389598"/>
            </content>
        </type>
        <type derived="true" id="type.3208">
            <name>LockGuard&lt;Mtx>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394867" specialization="true">
            <name>LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.3395">
            <name>LockGuard&lt;System.Threading.Mutex>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394867"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3643">
            <name>LvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401836" specialization="true">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7401063"/>
                <argumentType ref="type.7401830"/>
            </content>
        </type>
        <type derived="true" id="type.7401838">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.7401836"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401896">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401836"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401837">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.7401836"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402064">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.7401836"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402063">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.7401836"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3205">
            <name>Mtx&amp;</name>
            <content>
                <baseType ref="7389598"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3605">
            <name>New&amp;&amp;</name>
            <content>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B">
            <name>NodeList</name>
        </type>
        <type derived="true" id="type.7401104">
            <name>NodeList&amp;</name>
            <content>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402081">
            <name>NodeList&amp;&amp;</name>
            <content>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401103">
            <name>NodeList*</name>
            <content>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NodeOp_A834E32432E8B9893D49D376C8198B2DA0983A10">
            <name>NodeOp</name>
        </type>
        <type derived="true" id="type.7401083">
            <name>NodeOp&amp;</name>
            <content>
                <baseType ref="class_NodeOp_A834E32432E8B9893D49D376C8198B2DA0983A10"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401082">
            <name>NodeOp*</name>
            <content>
                <baseType ref="class_NodeOp_A834E32432E8B9893D49D376C8198B2DA0983A10"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3563">
            <name>Not&amp;&amp;</name>
            <content>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3651">
            <name>OptionalParser&amp;&amp;</name>
            <content>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401766" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.7401745"/>
                <argumentType ref="type.7388895"/>
            </content>
        </type>
        <type derived="true" id="type.7401768">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.7401766"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402019">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401766"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401767">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.7401766"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3440" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.3428"/>
                <argumentType ref="type.7388895"/>
            </content>
        </type>
        <type id="type.7401483" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.7401471"/>
                <argumentType ref="type.7388895"/>
            </content>
        </type>
        <type derived="true" id="type.3442">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.3440"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401485">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.7401483"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3441">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.3440"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401484">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.7401483"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401885" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.7401877"/>
                <argumentType ref="type.7388895"/>
            </content>
        </type>
        <type derived="true" id="type.7401887">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.7401885"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402060">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401885"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401886">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>, bool>*</name>
            <content>
                <baseType ref="type.7401885"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401842" specialization="true">
            <name>Pair&lt;String&lt;uchar>, DomAttr*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7401063"/>
            </content>
        </type>
        <type derived="true" id="type.7401844">
            <name>Pair&lt;String&lt;uchar>, DomAttr*>&amp;</name>
            <content>
                <baseType ref="type.7401842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402028">
            <name>Pair&lt;String&lt;uchar>, DomAttr*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401842"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401843">
            <name>Pair&lt;String&lt;uchar>, DomAttr*>*</name>
            <content>
                <baseType ref="type.7401842"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401725" specialization="true">
            <name>Pair&lt;String&lt;uchar>, DomElement*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7401069"/>
            </content>
        </type>
        <type derived="true" id="type.7401727">
            <name>Pair&lt;String&lt;uchar>, DomElement*>&amp;</name>
            <content>
                <baseType ref="type.7401725"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401976">
            <name>Pair&lt;String&lt;uchar>, DomElement*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401725"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401726">
            <name>Pair&lt;String&lt;uchar>, DomElement*>*</name>
            <content>
                <baseType ref="type.7401725"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="7389612"/>
                <argumentType ref="7389613"/>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="7389609"/>
                <argumentType ref="7389610"/>
            </content>
        </type>
        <type derived="true" id="type.3063">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7400979">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7400978">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3062">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3664">
            <name>ParsingData&amp;&amp;</name>
            <content>
                <baseType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7400981">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3065">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7400980">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3064">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7400980">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3645">
            <name>Pointer&amp;&amp;</name>
            <content>
                <baseType ref="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3654">
            <name>PositiveParser&amp;&amp;</name>
            <content>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3593">
            <name>PostfixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3590">
            <name>PostfixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3575">
            <name>PrefixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3572">
            <name>PrefixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398795" specialization="true">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396991"/>
                <argumentType ref="type.7398793"/>
                <argumentType ref="type.7398794"/>
            </content>
        </type>
        <type derived="true" id="type.3460">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398795"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393708" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389818"/>
                <argumentType ref="type.7393551"/>
                <argumentType ref="type.7393707"/>
            </content>
        </type>
        <type derived="true" id="type.3352">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393708"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394748" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389889"/>
                <argumentType ref="type.7394591"/>
                <argumentType ref="type.7394747"/>
            </content>
        </type>
        <type derived="true" id="type.3377">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394748"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394332" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389863"/>
                <argumentType ref="type.7394175"/>
                <argumentType ref="type.7394331"/>
            </content>
        </type>
        <type derived="true" id="type.3367">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394332"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394540" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389876"/>
                <argumentType ref="type.7394383"/>
                <argumentType ref="type.7394539"/>
            </content>
        </type>
        <type derived="true" id="type.3372">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394540"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393071" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389788"/>
                <argumentType ref="type.7392900"/>
                <argumentType ref="type.7393070"/>
            </content>
        </type>
        <type derived="true" id="type.3337">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393289" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389798"/>
                <argumentType ref="type.7393132"/>
                <argumentType ref="type.7393288"/>
            </content>
        </type>
        <type derived="true" id="type.3342">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393289"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398337" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398304"/>
                <argumentType ref="type.7398335"/>
                <argumentType ref="type.7398336"/>
            </content>
        </type>
        <type derived="true" id="type.3427">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398337"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398328" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398304"/>
                <argumentType ref="type.7398326"/>
                <argumentType ref="type.7398327"/>
            </content>
        </type>
        <type derived="true" id="type.3426">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398328"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390915" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390881"/>
                <argumentType ref="type.7390913"/>
                <argumentType ref="type.7390914"/>
            </content>
        </type>
        <type id="type.7390837" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390802"/>
                <argumentType ref="type.7390835"/>
                <argumentType ref="type.7390836"/>
            </content>
        </type>
        <type id="type.7390915" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390881"/>
                <argumentType ref="type.7390913"/>
                <argumentType ref="type.7390914"/>
            </content>
        </type>
        <type derived="true" id="type.3159">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390915"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3154">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390837"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390828" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390802"/>
                <argumentType ref="type.7390826"/>
                <argumentType ref="type.7390827"/>
            </content>
        </type>
        <type id="type.7390906" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390881"/>
                <argumentType ref="type.7390904"/>
                <argumentType ref="type.7390905"/>
            </content>
        </type>
        <type id="type.7390828" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390802"/>
                <argumentType ref="type.7390826"/>
                <argumentType ref="type.7390827"/>
            </content>
        </type>
        <type derived="true" id="type.3153">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390828"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3158">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390906"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393685" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393651"/>
                <argumentType ref="type.7393683"/>
                <argumentType ref="type.7393684"/>
            </content>
        </type>
        <type derived="true" id="type.3351">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393685"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393676" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393651"/>
                <argumentType ref="type.7393674"/>
                <argumentType ref="type.7393675"/>
            </content>
        </type>
        <type derived="true" id="type.3350">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393676"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394725" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394691"/>
                <argumentType ref="type.7394723"/>
                <argumentType ref="type.7394724"/>
            </content>
        </type>
        <type derived="true" id="type.3376">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394725"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394716" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394691"/>
                <argumentType ref="type.7394714"/>
                <argumentType ref="type.7394715"/>
            </content>
        </type>
        <type derived="true" id="type.3375">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394716"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394309" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394275"/>
                <argumentType ref="type.7394307"/>
                <argumentType ref="type.7394308"/>
            </content>
        </type>
        <type derived="true" id="type.3366">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394300" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394275"/>
                <argumentType ref="type.7394298"/>
                <argumentType ref="type.7394299"/>
            </content>
        </type>
        <type derived="true" id="type.3365">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394300"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394517" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394483"/>
                <argumentType ref="type.7394515"/>
                <argumentType ref="type.7394516"/>
            </content>
        </type>
        <type derived="true" id="type.3371">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394517"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394508" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394483"/>
                <argumentType ref="type.7394506"/>
                <argumentType ref="type.7394507"/>
            </content>
        </type>
        <type derived="true" id="type.3370">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394508"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393055" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393021"/>
                <argumentType ref="type.7393053"/>
                <argumentType ref="type.7393054"/>
            </content>
        </type>
        <type derived="true" id="type.3336">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393046" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393021"/>
                <argumentType ref="type.7393044"/>
                <argumentType ref="type.7393045"/>
            </content>
        </type>
        <type derived="true" id="type.3335">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393046"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393266" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393232"/>
                <argumentType ref="type.7393264"/>
                <argumentType ref="type.7393265"/>
            </content>
        </type>
        <type derived="true" id="type.3341">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393266"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393257" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393232"/>
                <argumentType ref="type.7393255"/>
                <argumentType ref="type.7393256"/>
            </content>
        </type>
        <type derived="true" id="type.3340">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393257"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393477" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393443"/>
                <argumentType ref="type.7393475"/>
                <argumentType ref="type.7393476"/>
            </content>
        </type>
        <type derived="true" id="type.3346">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393477"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393468" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393443"/>
                <argumentType ref="type.7393466"/>
                <argumentType ref="type.7393467"/>
            </content>
        </type>
        <type derived="true" id="type.3345">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393468"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394101" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394067"/>
                <argumentType ref="type.7394099"/>
                <argumentType ref="type.7394100"/>
            </content>
        </type>
        <type derived="true" id="type.3361">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394101"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394092" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394067"/>
                <argumentType ref="type.7394090"/>
                <argumentType ref="type.7394091"/>
            </content>
        </type>
        <type derived="true" id="type.3360">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394092"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393893" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393859"/>
                <argumentType ref="type.7393891"/>
                <argumentType ref="type.7393892"/>
            </content>
        </type>
        <type derived="true" id="type.3356">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393893"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393884" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393859"/>
                <argumentType ref="type.7393882"/>
                <argumentType ref="type.7393883"/>
            </content>
        </type>
        <type derived="true" id="type.3355">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393884"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401786" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7401752"/>
                <argumentType ref="type.7401784"/>
                <argumentType ref="type.7401785"/>
            </content>
        </type>
        <type derived="true" id="type.7401788">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;</name>
            <content>
                <baseType ref="type.7401786"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3527">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401786"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401787">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>*</name>
            <content>
                <baseType ref="type.7401786"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401777" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7401752"/>
                <argumentType ref="type.7401775"/>
                <argumentType ref="type.7401776"/>
            </content>
        </type>
        <type derived="true" id="type.7401779">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;</name>
            <content>
                <baseType ref="type.7401777"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3526">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401777"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401778">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>*</name>
            <content>
                <baseType ref="type.7401777"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7400557" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7400523"/>
                <argumentType ref="type.7400555"/>
                <argumentType ref="type.7400556"/>
            </content>
        </type>
        <type derived="true" id="type.3491">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400557"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7400548" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7400523"/>
                <argumentType ref="type.7400546"/>
                <argumentType ref="type.7400547"/>
            </content>
        </type>
        <type derived="true" id="type.3490">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400548"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398583" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398549"/>
                <argumentType ref="type.7398581"/>
                <argumentType ref="type.7398582"/>
            </content>
        </type>
        <type derived="true" id="type.3451">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398583"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398574" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398549"/>
                <argumentType ref="type.7398572"/>
                <argumentType ref="type.7398573"/>
            </content>
        </type>
        <type derived="true" id="type.3450">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398574"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398659" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398625"/>
                <argumentType ref="type.7398657"/>
                <argumentType ref="type.7398658"/>
            </content>
        </type>
        <type derived="true" id="type.3453">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398659"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398650" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398625"/>
                <argumentType ref="type.7398648"/>
                <argumentType ref="type.7398649"/>
            </content>
        </type>
        <type derived="true" id="type.3452">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398650"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398906" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398872"/>
                <argumentType ref="type.7398904"/>
                <argumentType ref="type.7398905"/>
            </content>
        </type>
        <type derived="true" id="type.3463">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398906"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398897" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398872"/>
                <argumentType ref="type.7398895"/>
                <argumentType ref="type.7398896"/>
            </content>
        </type>
        <type derived="true" id="type.3462">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398897"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398149" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398115"/>
                <argumentType ref="type.7398147"/>
                <argumentType ref="type.7398148"/>
            </content>
        </type>
        <type derived="true" id="type.3422">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398149"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398140" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398115"/>
                <argumentType ref="type.7398138"/>
                <argumentType ref="type.7398139"/>
            </content>
        </type>
        <type derived="true" id="type.3421">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398140"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393609" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393575"/>
                <argumentType ref="type.7393607"/>
                <argumentType ref="type.7393608"/>
            </content>
        </type>
        <type derived="true" id="type.3349">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393609"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393600" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393575"/>
                <argumentType ref="type.7393598"/>
                <argumentType ref="type.7393599"/>
            </content>
        </type>
        <type derived="true" id="type.3348">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393600"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394649" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394615"/>
                <argumentType ref="type.7394647"/>
                <argumentType ref="type.7394648"/>
            </content>
        </type>
        <type derived="true" id="type.3374">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394649"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394640" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394615"/>
                <argumentType ref="type.7394638"/>
                <argumentType ref="type.7394639"/>
            </content>
        </type>
        <type derived="true" id="type.3373">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394640"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394233" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394199"/>
                <argumentType ref="type.7394231"/>
                <argumentType ref="type.7394232"/>
            </content>
        </type>
        <type derived="true" id="type.3364">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394233"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394224" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394199"/>
                <argumentType ref="type.7394222"/>
                <argumentType ref="type.7394223"/>
            </content>
        </type>
        <type derived="true" id="type.3363">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394224"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394441" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394407"/>
                <argumentType ref="type.7394439"/>
                <argumentType ref="type.7394440"/>
            </content>
        </type>
        <type derived="true" id="type.3369">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394441"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394432" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394407"/>
                <argumentType ref="type.7394430"/>
                <argumentType ref="type.7394431"/>
            </content>
        </type>
        <type derived="true" id="type.3368">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394432"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392958" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7392924"/>
                <argumentType ref="type.7392956"/>
                <argumentType ref="type.7392957"/>
            </content>
        </type>
        <type derived="true" id="type.3334">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392958"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392949" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7392924"/>
                <argumentType ref="type.7392947"/>
                <argumentType ref="type.7392948"/>
            </content>
        </type>
        <type derived="true" id="type.3333">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392949"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393190" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393156"/>
                <argumentType ref="type.7393188"/>
                <argumentType ref="type.7393189"/>
            </content>
        </type>
        <type derived="true" id="type.3339">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393190"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393181" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393156"/>
                <argumentType ref="type.7393179"/>
                <argumentType ref="type.7393180"/>
            </content>
        </type>
        <type derived="true" id="type.3338">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393181"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393401" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393367"/>
                <argumentType ref="type.7393399"/>
                <argumentType ref="type.7393400"/>
            </content>
        </type>
        <type derived="true" id="type.3344">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393401"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393392" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393367"/>
                <argumentType ref="type.7393390"/>
                <argumentType ref="type.7393391"/>
            </content>
        </type>
        <type derived="true" id="type.3343">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394025" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393991"/>
                <argumentType ref="type.7394023"/>
                <argumentType ref="type.7394024"/>
            </content>
        </type>
        <type derived="true" id="type.3359">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394025"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394016" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393991"/>
                <argumentType ref="type.7394014"/>
                <argumentType ref="type.7394015"/>
            </content>
        </type>
        <type derived="true" id="type.3358">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394016"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393817" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393783"/>
                <argumentType ref="type.7393815"/>
                <argumentType ref="type.7393816"/>
            </content>
        </type>
        <type derived="true" id="type.3354">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393817"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393808" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393783"/>
                <argumentType ref="type.7393806"/>
                <argumentType ref="type.7393807"/>
            </content>
        </type>
        <type derived="true" id="type.3353">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393808"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398421" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398389"/>
                <argumentType ref="type.7398419"/>
                <argumentType ref="type.7398420"/>
            </content>
        </type>
        <type derived="true" id="type.3444">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398421"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398412" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398389"/>
                <argumentType ref="type.7398410"/>
                <argumentType ref="type.7398411"/>
            </content>
        </type>
        <type derived="true" id="type.3443">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398412"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391064" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391030"/>
                <argumentType ref="type.7391062"/>
                <argumentType ref="type.7391063"/>
            </content>
        </type>
        <type id="type.7390990" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390956"/>
                <argumentType ref="type.7390988"/>
                <argumentType ref="type.7390989"/>
            </content>
        </type>
        <type id="type.7391064" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391030"/>
                <argumentType ref="type.7391062"/>
                <argumentType ref="type.7391063"/>
            </content>
        </type>
        <type derived="true" id="type.3166">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3162">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391055" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391030"/>
                <argumentType ref="type.7391053"/>
                <argumentType ref="type.7391054"/>
            </content>
        </type>
        <type id="type.7390981" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390956"/>
                <argumentType ref="type.7390979"/>
                <argumentType ref="type.7390980"/>
            </content>
        </type>
        <type derived="true" id="type.3165">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3161">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391175" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391139"/>
                <argumentType ref="type.7391173"/>
                <argumentType ref="type.7391174"/>
            </content>
        </type>
        <type derived="true" id="type.3175">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391175"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391166" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391139"/>
                <argumentType ref="type.7391164"/>
                <argumentType ref="type.7391165"/>
            </content>
        </type>
        <type derived="true" id="type.3174">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391166"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389732"/>
                <argumentType ref="type.7392797"/>
                <argumentType ref="type.7392798"/>
            </content>
        </type>
        <type derived="true" id="type.3330">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3314">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3318">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3322">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3326">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3304">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3310">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389729"/>
                <argumentType ref="type.7392646"/>
                <argumentType ref="type.7392647"/>
            </content>
        </type>
        <type derived="true" id="type.3309">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3325">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3329">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3317">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3313">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3303">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3321">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401920" specialization="true">
            <name>RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7401085"/>
                <argumentType ref="type.7401918"/>
                <argumentType ref="type.7401919"/>
            </content>
        </type>
        <type derived="true" id="type.7401922">
            <name>RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>&amp;</name>
            <content>
                <baseType ref="type.7401920"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3529">
            <name>RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401920"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401921">
            <name>RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>*</name>
            <content>
                <baseType ref="type.7401920"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401911" specialization="true">
            <name>RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7401085"/>
                <argumentType ref="type.7401909"/>
                <argumentType ref="type.7401910"/>
            </content>
        </type>
        <type derived="true" id="type.7401913">
            <name>RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**>&amp;</name>
            <content>
                <baseType ref="type.7401911"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401917">
            <name>RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401911"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401912">
            <name>RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**>*</name>
            <content>
                <baseType ref="type.7401911"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7393500" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389808"/>
                <argumentType ref="type.7393343"/>
                <argumentType ref="type.7393499"/>
            </content>
        </type>
        <type derived="true" id="type.3347">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393500"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398686" specialization="true">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7397096"/>
                <argumentType ref="type.7398601"/>
                <argumentType ref="type.7398682"/>
            </content>
        </type>
        <type derived="true" id="type.3454">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398686"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398821" specialization="true">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7397104"/>
                <argumentType ref="type.7398819"/>
                <argumentType ref="type.7398820"/>
            </content>
        </type>
        <type derived="true" id="type.3461">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398821"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394117" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389850"/>
                <argumentType ref="type.7393967"/>
                <argumentType ref="type.7394116"/>
            </content>
        </type>
        <type derived="true" id="type.3362">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394117"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398234" specialization="true">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7397335"/>
                <argumentType ref="type.7398232"/>
                <argumentType ref="type.7398233"/>
            </content>
        </type>
        <type derived="true" id="type.3425">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398234"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393916" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389831"/>
                <argumentType ref="type.7393759"/>
                <argumentType ref="type.7393915"/>
            </content>
        </type>
        <type derived="true" id="type.3357">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393916"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392773" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392739"/>
                <argumentType ref="type.7392738"/>
            </content>
        </type>
        <type id="type.7392632" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392595"/>
                <argumentType ref="type.7392594"/>
            </content>
        </type>
        <type id="type.7392820" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392783"/>
                <argumentType ref="type.7392782"/>
            </content>
        </type>
        <type id="type.7392538" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392501"/>
                <argumentType ref="type.7392500"/>
            </content>
        </type>
        <type id="type.7392585" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392548"/>
                <argumentType ref="type.7392547"/>
            </content>
        </type>
        <type id="type.7392726" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392689"/>
                <argumentType ref="type.7392688"/>
            </content>
        </type>
        <type id="type.7392679" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392642"/>
                <argumentType ref="type.7392641"/>
            </content>
        </type>
        <type derived="true" id="type.3332">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3324">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392726"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3307">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392538"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3312">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392585"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3320">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392679"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3316">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392632"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3328">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392773"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392766" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392742"/>
                <argumentType ref="type.7392741"/>
            </content>
        </type>
        <type id="type.7392625" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392598"/>
                <argumentType ref="type.7392597"/>
            </content>
        </type>
        <type id="type.7392672" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392645"/>
                <argumentType ref="type.7392644"/>
            </content>
        </type>
        <type id="type.7392719" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392692"/>
                <argumentType ref="type.7392691"/>
            </content>
        </type>
        <type id="type.7392578" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392551"/>
                <argumentType ref="type.7392550"/>
            </content>
        </type>
        <type id="type.7392531" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392504"/>
                <argumentType ref="type.7392503"/>
            </content>
        </type>
        <type id="type.7392813" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392786"/>
                <argumentType ref="type.7392785"/>
            </content>
        </type>
        <type derived="true" id="type.3331">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392813"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3327">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392766"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3323">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392719"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3306">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392531"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3319">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392672"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3311">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392578"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3315">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392625"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390071" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390036"/>
                <argumentType ref="type.7390038"/>
                <argumentType ref="type.7390037"/>
            </content>
        </type>
        <type derived="true" id="type.3076">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390064" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390036"/>
                <argumentType ref="type.7390041"/>
                <argumentType ref="type.7390040"/>
            </content>
        </type>
        <type derived="true" id="type.3075">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401548" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398979"/>
                <argumentType ref="type.7399090"/>
            </content>
        </type>
        <type id="type.3505" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398979"/>
                <argumentType ref="type.7399090"/>
            </content>
        </type>
        <type derived="true" id="type.7401550">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.7401548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3507">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.3505"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401550">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.7401548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3511">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3505"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3525">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401548"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401549">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.7401548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3506">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.3505"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401549">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.7401548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7400586" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398924"/>
                <argumentType ref="type.7399088"/>
            </content>
        </type>
        <type id="type.7401541" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398924"/>
                <argumentType ref="type.7399088"/>
            </content>
        </type>
        <type id="type.3498" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398924"/>
                <argumentType ref="type.7399088"/>
            </content>
        </type>
        <type id="type.7401541" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398924"/>
                <argumentType ref="type.7399088"/>
            </content>
        </type>
        <type derived="true" id="type.7401543">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.7401541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3500">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.3498"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3524">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401541"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3513">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400586"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3504">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3498"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401542">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.7401541"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3499">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.3498"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390161" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390126"/>
                <argumentType ref="type.7390125"/>
            </content>
        </type>
        <type derived="true" id="type.3095">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390161"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390154" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390129"/>
                <argumentType ref="type.7390128"/>
            </content>
        </type>
        <type derived="true" id="type.3094">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390154"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390116" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390079"/>
                <argumentType ref="type.7390081"/>
                <argumentType ref="type.7390080"/>
            </content>
        </type>
        <type derived="true" id="type.3085">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390116"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390109" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390079"/>
                <argumentType ref="type.7390084"/>
                <argumentType ref="type.7390083"/>
            </content>
        </type>
        <type derived="true" id="type.3084">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390109"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398771" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_AttrOrVar_50B6EF23E232C2A406B7F5C94499D4CC0CC6D353"/>
                <argumentType ref="type.7397327"/>
                <argumentType ref="type.7397326"/>
            </content>
        </type>
        <type derived="true" id="type.3459">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398771"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398757" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.7397162"/>
                <argumentType ref="type.7397161"/>
            </content>
        </type>
        <type derived="true" id="type.3458">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398757"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398750" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.7397165"/>
                <argumentType ref="type.7397164"/>
            </content>
        </type>
        <type derived="true" id="type.3457">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398508" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.7398490"/>
                <argumentType ref="type.7398489"/>
            </content>
        </type>
        <type derived="true" id="type.3449">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398508"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398501" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.7398498"/>
                <argumentType ref="type.7398499"/>
            </content>
        </type>
        <type derived="true" id="type.3448">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398501"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394778" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.7389902"/>
                <argumentType ref="type.7389901"/>
            </content>
        </type>
        <type derived="true" id="type.3379">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394778"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394771" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.7389905"/>
                <argumentType ref="type.7389904"/>
            </content>
        </type>
        <type derived="true" id="type.3378">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394771"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389624"/>
                <argumentType ref="7389625"/>
                <argumentType ref="7389626"/>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389639"/>
                <argumentType ref="7389640"/>
                <argumentType ref="7389641"/>
            </content>
        </type>
        <type derived="true" id="type.3224">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3223">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3221">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3222">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3227">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3226">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3225">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389703"/>
                <argumentType ref="type.7392471"/>
                <argumentType ref="type.7392487"/>
            </content>
        </type>
        <type derived="true" id="type.3219">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3301">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3187">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3189">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3183">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389703"/>
                <argumentType ref="type.7392469"/>
                <argumentType ref="type.7392478"/>
            </content>
        </type>
        <type derived="true" id="type.3188">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3182">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3300">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3218">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3186">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401822" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7401802"/>
                <argumentType ref="type.7401804"/>
                <argumentType ref="type.7401803"/>
            </content>
        </type>
        <type derived="true" id="type.7401824">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*>&amp;</name>
            <content>
                <baseType ref="type.7401822"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401828">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401822"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401823">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*>*</name>
            <content>
                <baseType ref="type.7401822"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401815" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7401802"/>
                <argumentType ref="type.7401807"/>
                <argumentType ref="type.7401806"/>
            </content>
        </type>
        <type derived="true" id="type.7401817">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>&amp;</name>
            <content>
                <baseType ref="type.7401815"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3528">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401815"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401816">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>*</name>
            <content>
                <baseType ref="type.7401815"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401962" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7401936"/>
                <argumentType ref="type.7401938"/>
                <argumentType ref="type.7401937"/>
            </content>
        </type>
        <type derived="true" id="type.7401964">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*>&amp;</name>
            <content>
                <baseType ref="type.7401962"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401968">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401962"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401963">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*>*</name>
            <content>
                <baseType ref="type.7401962"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401955" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7401936"/>
                <argumentType ref="type.7401941"/>
                <argumentType ref="type.7401940"/>
            </content>
        </type>
        <type derived="true" id="type.7401957">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>&amp;</name>
            <content>
                <baseType ref="type.7401955"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3530">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401955"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401956">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>*</name>
            <content>
                <baseType ref="type.7401955"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396806" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396790"/>
                <argumentType ref="type.7396795"/>
                <argumentType ref="type.7396794"/>
            </content>
        </type>
        <type derived="true" id="type.3410">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396806"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396866" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396850"/>
                <argumentType ref="type.7396855"/>
                <argumentType ref="type.7396854"/>
            </content>
        </type>
        <type derived="true" id="type.3411">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396866"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396705" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396665"/>
                <argumentType ref="type.7396670"/>
                <argumentType ref="type.7396669"/>
            </content>
        </type>
        <type derived="true" id="type.3408">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396705"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396757" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396744"/>
                <argumentType ref="type.7396749"/>
                <argumentType ref="type.7396748"/>
            </content>
        </type>
        <type derived="true" id="type.3409">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396757"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398474" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398452"/>
                <argumentType ref="type.7398457"/>
                <argumentType ref="type.7398456"/>
            </content>
        </type>
        <type derived="true" id="type.3447">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398474"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398047" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398025"/>
                <argumentType ref="type.7398030"/>
                <argumentType ref="type.7398029"/>
            </content>
        </type>
        <type derived="true" id="type.3420">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398732" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398712"/>
                <argumentType ref="type.7398714"/>
                <argumentType ref="type.7398713"/>
            </content>
        </type>
        <type derived="true" id="type.3456">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398732"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398725" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398712"/>
                <argumentType ref="type.7398717"/>
                <argumentType ref="type.7398716"/>
            </content>
        </type>
        <type derived="true" id="type.3455">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398725"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398017" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7397997"/>
                <argumentType ref="type.7397999"/>
                <argumentType ref="type.7397998"/>
            </content>
        </type>
        <type derived="true" id="type.3419">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398017"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398010" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7397997"/>
                <argumentType ref="type.7398002"/>
                <argumentType ref="type.7398001"/>
            </content>
        </type>
        <type derived="true" id="type.3418">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398010"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394807" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394787"/>
                <argumentType ref="type.7394789"/>
                <argumentType ref="type.7394788"/>
            </content>
        </type>
        <type derived="true" id="type.3381">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394807"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394800" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394787"/>
                <argumentType ref="type.7394792"/>
                <argumentType ref="type.7394791"/>
            </content>
        </type>
        <type derived="true" id="type.3380">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394800"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394903" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394883"/>
                <argumentType ref="type.7394885"/>
                <argumentType ref="type.7394884"/>
            </content>
        </type>
        <type derived="true" id="type.3397">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394903"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394896" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394883"/>
                <argumentType ref="type.7394888"/>
                <argumentType ref="type.7394887"/>
            </content>
        </type>
        <type derived="true" id="type.3396">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394896"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394835" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394815"/>
                <argumentType ref="type.7394817"/>
                <argumentType ref="type.7394816"/>
            </content>
        </type>
        <type derived="true" id="type.3383">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394835"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394828" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394815"/>
                <argumentType ref="type.7394820"/>
                <argumentType ref="type.7394819"/>
            </content>
        </type>
        <type derived="true" id="type.3382">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394828"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394938" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394918"/>
                <argumentType ref="type.7394920"/>
                <argumentType ref="type.7394919"/>
            </content>
        </type>
        <type derived="true" id="type.3399">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394938"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394931" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394918"/>
                <argumentType ref="type.7394923"/>
                <argumentType ref="type.7394922"/>
            </content>
        </type>
        <type derived="true" id="type.3398">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394931"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7400624" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, UniquePtr&lt;System.Xml.Entity>&amp;, UniquePtr&lt;System.Xml.Entity>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7400601"/>
                <argumentType ref="type.7400603"/>
                <argumentType ref="type.7400602"/>
            </content>
        </type>
        <type derived="true" id="type.3515">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, UniquePtr&lt;System.Xml.Entity>&amp;, UniquePtr&lt;System.Xml.Entity>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400624"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7400617" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, const UniquePtr&lt;System.Xml.Entity>&amp;, const UniquePtr&lt;System.Xml.Entity>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7400601"/>
                <argumentType ref="type.7400606"/>
                <argumentType ref="type.7400605"/>
            </content>
        </type>
        <type derived="true" id="type.3514">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, const UniquePtr&lt;System.Xml.Entity>&amp;, const UniquePtr&lt;System.Xml.Entity>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400617"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396426" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7391524" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7401239" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7400025" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.3197" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7397651" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7400025" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type derived="true" id="type.7401241">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.7401239"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3199">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.3197"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3204">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391524"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3406">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396426"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3203">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3197"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3416">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397651"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3521">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401239"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3488">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400025"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3198">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.3197"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401240">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.7401239"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3068" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.7396297" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.7401110" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.7397522" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.7399896" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.7401110" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type derived="true" id="type.7401112">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.7401110"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3070">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.3068"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3074">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3068"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3402">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396297"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3412">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397522"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3484">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399896"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3517">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401110"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401111">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.7401110"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3069">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.3068"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401129" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7390140" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7396316" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7399915" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7401129" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.3087" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7397541" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type derived="true" id="type.3089">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.3087"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401131">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.7401129"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3486">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399915"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3414">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397541"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3096">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390140"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3519">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401129"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3093">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3087"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3404">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396316"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3088">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.3087"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401130">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.7401129"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7394852" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7394849"/>
                <argumentType ref="type.7394850"/>
            </content>
        </type>
        <type derived="true" id="type.3384">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394852"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394859" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7400214" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7396615" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7400214" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7401428" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.3385" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7397840" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type derived="true" id="type.7401430">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.7401428"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3387">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.3385"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3522">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401428"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3489">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400214"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3392">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394859"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3391">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3385"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3407">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396615"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3417">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397840"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401429">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.7401428"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3386">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.3385"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401429">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.7401428"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390183" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7390180"/>
                <argumentType ref="type.7390181"/>
            </content>
        </type>
        <type derived="true" id="type.3097">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390183"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396327" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7397552" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.3098" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7401140" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7399926" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7390190" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7401140" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type derived="true" id="type.7401142">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.7401140"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3100">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.3098"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3415">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397552"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3520">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401140"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3405">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396327"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3104">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3098"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3105">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390190"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3487">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399926"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401141">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.7401140"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3099">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.3098"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396306" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7399905" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7401119" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7397531" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.3077" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7390095" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type derived="true" id="type.7401121">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.7401119"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3079">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.3077"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401121">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.7401119"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3403">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396306"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3485">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399905"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3413">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397531"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3518">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401119"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3086">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390095"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3083">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3077"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401120">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.7401119"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3078">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.3077"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389580"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <argumentType ref="7389582"/>
            </content>
        </type>
        <type derived="true" id="type.3194">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389659"/>
                <argumentType ref="7389660"/>
                <argumentType ref="7389661"/>
                <argumentType ref="7389662"/>
            </content>
        </type>
        <type derived="true" id="type.3236">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401856" specialization="true">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7401842"/>
                <argumentType ref="type.7401846"/>
                <argumentType ref="type.7401830"/>
            </content>
        </type>
        <type derived="true" id="type.7401858">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.7401856"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401884">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401856"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401857">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.7401856"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389665"/>
                <argumentType ref="7389665"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="7389666"/>
            </content>
        </type>
        <type derived="true" id="type.3241">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401870" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.7401842"/>
            </content>
        </type>
        <type derived="true" id="type.7401872">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>&amp;</name>
            <content>
                <baseType ref="type.7401870"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401871">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>*</name>
            <content>
                <baseType ref="type.7401870"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402038">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>*&amp;</name>
            <content>
                <baseType ref="type.7401870"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402039">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7401870"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402037">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>**</name>
            <content>
                <baseType ref="type.7401870"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7400973">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3057">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7400973">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3546">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7400972">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3056">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7391488" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.7391449"/>
                <argumentType ref="type.7391448"/>
            </content>
        </type>
        <type derived="true" id="type.3193">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391488"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391470" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.7391459"/>
                <argumentType ref="type.7391468"/>
            </content>
        </type>
        <type derived="true" id="type.3192">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391470"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401877" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.7401842"/>
                <argumentType ref="type.7401844"/>
                <argumentType ref="type.7401843"/>
            </content>
        </type>
        <type derived="true" id="type.7401879">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;</name>
            <content>
                <baseType ref="type.7401877"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401883">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401877"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401878">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>*</name>
            <content>
                <baseType ref="type.7401877"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401864" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.7401842"/>
                <argumentType ref="type.7401853"/>
                <argumentType ref="type.7401862"/>
            </content>
        </type>
        <type derived="true" id="type.7401866">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;</name>
            <content>
                <baseType ref="type.7401864"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401876">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401864"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401865">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*>*</name>
            <content>
                <baseType ref="type.7401864"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389655"/>
                <argumentType ref="7389656"/>
                <argumentType ref="7389657"/>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389652"/>
                <argumentType ref="7389653"/>
                <argumentType ref="7389654"/>
            </content>
        </type>
        <type derived="true" id="type.3232">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3233">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389665"/>
                <argumentType ref="type.7391800"/>
                <argumentType ref="type.7391802"/>
            </content>
        </type>
        <type derived="true" id="type.3246">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3244">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3240">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389665"/>
                <argumentType ref="type.7391777"/>
                <argumentType ref="type.7391786"/>
            </content>
        </type>
        <type derived="true" id="type.3239">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3243">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3245">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389660"/>
                <argumentType ref="type.7391741"/>
                <argumentType ref="type.7391743"/>
            </content>
        </type>
        <type derived="true" id="type.3235">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389660"/>
                <argumentType ref="type.7391726"/>
                <argumentType ref="type.7391727"/>
            </content>
        </type>
        <type derived="true" id="type.3234">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3614">
            <name>ReturnStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3644">
            <name>RvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401846" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7401063"/>
            </content>
        </type>
        <type derived="true" id="type.7401855">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*>&amp;</name>
            <content>
                <baseType ref="type.7401846"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402032">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401846"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401854">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*>*</name>
            <content>
                <baseType ref="type.7401846"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402050">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*>*&amp;</name>
            <content>
                <baseType ref="type.7401846"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402049">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*>**</name>
            <content>
                <baseType ref="type.7401846"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401729" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7401069"/>
            </content>
        </type>
        <type derived="true" id="type.7401738">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*>&amp;</name>
            <content>
                <baseType ref="type.7401729"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401981">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401729"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401737">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*>*</name>
            <content>
                <baseType ref="type.7401729"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401999">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*>*&amp;</name>
            <content>
                <baseType ref="type.7401729"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401998">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*>**</name>
            <content>
                <baseType ref="type.7401729"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076" specialization="true">
            <name>SharedCount&lt;T></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="7389696"/>
            </content>
        </type>
        <type derived="true" id="type.3253">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3263">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3291">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3285">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3269">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F" specialization="true">
            <name>SharedPtr&lt;T></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="7389698"/>
            </content>
        </type>
        <type derived="true" id="type.3271">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3293">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3286">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3596">
            <name>SizeOf&amp;&amp;</name>
            <content>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401943" specialization="true">
            <name>Stack&lt;UniquePtr&lt;System.Dom.DomElement>></name>
            <content>
                <primaryType ref="class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963"/>
                <argumentType ref="type.7401936"/>
            </content>
        </type>
        <type derived="true" id="type.7401948">
            <name>Stack&lt;UniquePtr&lt;System.Dom.DomElement>>&amp;</name>
            <content>
                <baseType ref="type.7401943"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401947">
            <name>Stack&lt;UniquePtr&lt;System.Dom.DomElement>>*</name>
            <content>
                <baseType ref="type.7401943"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3611">
            <name>Statement&amp;&amp;</name>
            <content>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3533">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="7389726"/>
            </content>
        </type>
        <type derived="true" id="type.3305">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390124" specialization="true">
            <name>String&lt;uchar></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7388908"/>
            </content>
        </type>
        <type derived="true" id="type.7390126">
            <name>String&lt;uchar>&amp;</name>
            <content>
                <baseType ref="type.7390124"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7390125">
            <name>String&lt;uchar>*</name>
            <content>
                <baseType ref="type.7390124"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7398979">
            <name>String&lt;uchar>*&amp;</name>
            <content>
                <baseType ref="type.7390124"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7399090">
            <name>String&lt;uchar>**</name>
            <content>
                <baseType ref="type.7390124"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3629">
            <name>SwitchStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3179">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389560"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3157">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3229">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3109">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3169">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3231">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3171">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389543"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3107">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389432"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3185">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="7389573"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3299">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="7389703"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3217">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="7389619"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3607">
            <name>TemplateId&amp;&amp;</name>
            <content>
                <baseType ref="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3635">
            <name>ThrowStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3663">
            <name>TokenParser&amp;&amp;</name>
            <content>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3638">
            <name>TryStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3559">
            <name>Type&amp;&amp;</name>
            <content>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3599">
            <name>TypeName&amp;&amp;</name>
            <content>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401850" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomAttr*>, String&lt;uchar>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.7401842"/>
                <argumentType ref="type.7390124"/>
            </content>
        </type>
        <type derived="true" id="type.7401852">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomAttr*>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.7401850"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402033">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomAttr*>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401850"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401851">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomAttr*>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.7401850"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401733" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomElement*>, String&lt;uchar>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.7401725"/>
                <argumentType ref="type.7390124"/>
            </content>
        </type>
        <type derived="true" id="type.7401735">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomElement*>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.7401733"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401982">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomElement*>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401733"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401734">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomElement*>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.7401733"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3581">
            <name>UnaryMinus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3578">
            <name>UnaryPlus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391499" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.7391476"/>
            </content>
        </type>
        <type derived="true" id="type.3195">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391499"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401888" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.7401870"/>
            </content>
        </type>
        <type derived="true" id="type.7401890">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>>&amp;</name>
            <content>
                <baseType ref="type.7401888"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401894">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401888"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401889">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>>*</name>
            <content>
                <baseType ref="type.7401888"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7391814" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.3242">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391814"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391756" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
            </content>
        </type>
        <type derived="true" id="type.3238">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391756"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401802" specialization="true">
            <name>UniquePtr&lt;System.Dom.DomAttr></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
            </content>
        </type>
        <type derived="true" id="type.7401804">
            <name>UniquePtr&lt;System.Dom.DomAttr>&amp;</name>
            <content>
                <baseType ref="type.7401802"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401808">
            <name>UniquePtr&lt;System.Dom.DomAttr>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401802"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401803">
            <name>UniquePtr&lt;System.Dom.DomAttr>*</name>
            <content>
                <baseType ref="type.7401802"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402026">
            <name>UniquePtr&lt;System.Dom.DomAttr>*&amp;</name>
            <content>
                <baseType ref="type.7401802"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402027">
            <name>UniquePtr&lt;System.Dom.DomAttr>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7401802"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402025">
            <name>UniquePtr&lt;System.Dom.DomAttr>**</name>
            <content>
                <baseType ref="type.7401802"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401929" specialization="true">
            <name>UniquePtr&lt;System.Dom.DomDocument></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
            </content>
        </type>
        <type derived="true" id="type.7401931">
            <name>UniquePtr&lt;System.Dom.DomDocument>&amp;</name>
            <content>
                <baseType ref="type.7401929"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401935">
            <name>UniquePtr&lt;System.Dom.DomDocument>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401929"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401930">
            <name>UniquePtr&lt;System.Dom.DomDocument>*</name>
            <content>
                <baseType ref="type.7401929"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401936" specialization="true">
            <name>UniquePtr&lt;System.Dom.DomElement></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
            </content>
        </type>
        <type derived="true" id="type.7401938">
            <name>UniquePtr&lt;System.Dom.DomElement>&amp;</name>
            <content>
                <baseType ref="type.7401936"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401942">
            <name>UniquePtr&lt;System.Dom.DomElement>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401936"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401937">
            <name>UniquePtr&lt;System.Dom.DomElement>*</name>
            <content>
                <baseType ref="type.7401936"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402098">
            <name>UniquePtr&lt;System.Dom.DomElement>*&amp;</name>
            <content>
                <baseType ref="type.7401936"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402099">
            <name>UniquePtr&lt;System.Dom.DomElement>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7401936"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402097">
            <name>UniquePtr&lt;System.Dom.DomElement>**</name>
            <content>
                <baseType ref="type.7401936"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401705" specialization="true">
            <name>UniquePtr&lt;System.Dom.DomNode></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
            </content>
        </type>
        <type derived="true" id="type.7401707">
            <name>UniquePtr&lt;System.Dom.DomNode>&amp;</name>
            <content>
                <baseType ref="type.7401705"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401711">
            <name>UniquePtr&lt;System.Dom.DomNode>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401705"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401706">
            <name>UniquePtr&lt;System.Dom.DomNode>*</name>
            <content>
                <baseType ref="type.7401705"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7395012" specialization="true">
            <name>UniquePtr&lt;System.Exception></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
            </content>
        </type>
        <type derived="true" id="type.3401">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.7395012"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398983" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ExpectationFailure_EBDBB0FC1DDED5BE7E15008622BB34AFCA7E9A8C"/>
            </content>
        </type>
        <type derived="true" id="type.3464">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398983"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398186" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
            </content>
        </type>
        <type derived="true" id="type.3423">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398186"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399109" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingException_71361E1F1BFEB5E7F55F5F6E472A696283973396"/>
            </content>
        </type>
        <type derived="true" id="type.3465">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399109"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398193" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XmlLog_8F1C6843100321A56502C0710D6A400B6E4C7704"/>
            </content>
        </type>
        <type derived="true" id="type.3424">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398193"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="7389934"/>
            </content>
        </type>
        <type derived="true" id="type.3400">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3196">
            <name>Value&amp;</name>
            <content>
                <baseType ref="7389581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399484" specialization="true">
            <name>ValueObject&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7390124"/>
            </content>
        </type>
        <type derived="true" id="type.3482">
            <name>ValueObject&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79" specialization="true">
            <name>ValueObject&lt;ValueType></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="7397113"/>
            </content>
        </type>
        <type derived="true" id="type.3446">
            <name>ValueObject&lt;ValueType>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7400654" specialization="true">
            <name>ValueObject&lt;XmlProcessor*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7399889"/>
            </content>
        </type>
        <type derived="true" id="type.3516">
            <name>ValueObject&lt;XmlProcessor*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400654"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399472" specialization="true">
            <name>ValueObject&lt;bool></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388895"/>
            </content>
        </type>
        <type derived="true" id="type.3481">
            <name>ValueObject&lt;bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399472"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399309" specialization="true">
            <name>ValueObject&lt;byte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388897"/>
            </content>
        </type>
        <type derived="true" id="type.3468">
            <name>ValueObject&lt;byte>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399448" specialization="true">
            <name>ValueObject&lt;double></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388905"/>
            </content>
        </type>
        <type derived="true" id="type.3480">
            <name>ValueObject&lt;double>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399448"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399434" specialization="true">
            <name>ValueObject&lt;float></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388904"/>
            </content>
        </type>
        <type derived="true" id="type.3478">
            <name>ValueObject&lt;float>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399434"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399350" specialization="true">
            <name>ValueObject&lt;int></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388900"/>
            </content>
        </type>
        <type derived="true" id="type.3473">
            <name>ValueObject&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399350"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399375" specialization="true">
            <name>ValueObject&lt;long></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388902"/>
            </content>
        </type>
        <type derived="true" id="type.3475">
            <name>ValueObject&lt;long>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399375"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399292" specialization="true">
            <name>ValueObject&lt;sbyte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388896"/>
            </content>
        </type>
        <type derived="true" id="type.3467">
            <name>ValueObject&lt;sbyte>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399292"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399322" specialization="true">
            <name>ValueObject&lt;short></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388898"/>
            </content>
        </type>
        <type derived="true" id="type.3470">
            <name>ValueObject&lt;short>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399322"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399501" specialization="true">
            <name>ValueObject&lt;uchar></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388908"/>
            </content>
        </type>
        <type derived="true" id="type.3483">
            <name>ValueObject&lt;uchar>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399501"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399362" specialization="true">
            <name>ValueObject&lt;uint></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388901"/>
            </content>
        </type>
        <type derived="true" id="type.3474">
            <name>ValueObject&lt;uint>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399362"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399387" specialization="true">
            <name>ValueObject&lt;ulong></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388903"/>
            </content>
        </type>
        <type derived="true" id="type.3476">
            <name>ValueObject&lt;ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399387"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399336" specialization="true">
            <name>ValueObject&lt;ushort></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388899"/>
            </content>
        </type>
        <type derived="true" id="type.3472">
            <name>ValueObject&lt;ushort>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399336"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC">
            <name>Visitor</name>
        </type>
        <type derived="true" id="type.7401098">
            <name>Visitor&amp;</name>
            <content>
                <baseType ref="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401097">
            <name>Visitor*</name>
            <content>
                <baseType ref="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F" specialization="true">
            <name>WeakCount&lt;T></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="7389698"/>
            </content>
        </type>
        <type derived="true" id="type.3254">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3270">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3292">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3262">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3284">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390026" specialization="true">
            <name>WeakPtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.3067">
            <name>WeakPtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390026"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC" specialization="true">
            <name>WeakPtr&lt;T></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="7389698"/>
            </content>
        </type>
        <type derived="true" id="type.3297">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3278">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3276">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3287">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3274">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3272">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3294">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021" specialization="true">
            <name>WeakPtr&lt;U></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="7389693"/>
            </content>
        </type>
        <type derived="true" id="type.3280">
            <name>WeakPtr&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3671">
            <name>XmlGrammar&amp;&amp;</name>
            <content>
                <baseType ref="class_XmlGrammar_514387B50789C8E470155317F17349CFC3DF6E94"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388895">
            <name>bool</name>
        </type>
        <type basic="true" id="type.7388897">
            <name>byte</name>
        </type>
        <type derived="true" id="type.7388918">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.7388897"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388917">
            <name>byte*</name>
            <content>
                <baseType ref="type.7388897"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388906">
            <name>char</name>
        </type>
        <type derived="true" id="type.7388945">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.7388906"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388944">
            <name>char*</name>
            <content>
                <baseType ref="type.7388906"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3567">
            <name>const AddressOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
            </content>
        </type>
        <type derived="true" id="type.3568">
            <name>const AddressOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3639">
            <name>const AssertStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
            </content>
        </type>
        <type derived="true" id="type.3640">
            <name>const AssertStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7399576">
            <name>const Attributes&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Attributes_C4B2B129CAB6BB03A5BC75E44A8C3E96E227069A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3534">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
            </content>
        </type>
        <type derived="true" id="type.3535">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3536">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
            </content>
        </type>
        <type derived="true" id="type.3537">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401754">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401751"/>
            </content>
        </type>
        <type derived="true" id="type.7401756">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401751"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401755">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401751"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401775">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401751"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401776">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401751"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3538">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
            </content>
        </type>
        <type derived="true" id="type.3675">
            <name>const BuildIndexVisitor</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
            </content>
        </type>
        <type derived="true" id="type.3676">
            <name>const BuildIndexVisitor&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3539">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.3646">
            <name>const CodeExpandingVisitor</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
            </content>
        </type>
        <type derived="true" id="type.3647">
            <name>const CodeExpandingVisitor&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3582">
            <name>const Complement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
            </content>
        </type>
        <type derived="true" id="type.3583">
            <name>const Complement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3548">
            <name>const ConditionVariable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
            </content>
        </type>
        <type derived="true" id="type.3600">
            <name>const Construct</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
            </content>
        </type>
        <type derived="true" id="type.3601">
            <name>const Construct&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3553">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
            </content>
        </type>
        <type derived="true" id="type.3554">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3066">
            <name>const Counter&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390010"/>
            </content>
        </type>
        <type derived="true" id="type.3257">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3259">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3264">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3265">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3266">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3273">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3275">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3277">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3281">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3295">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3296">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3288">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3247">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3250">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3255">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3256">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3267">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3251">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3260">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3248">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3282">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3289">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3258">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.3298">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.3279">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.3618">
            <name>const DeleteStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
            </content>
        </type>
        <type derived="true" id="type.3619">
            <name>const DeleteStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3564">
            <name>const Deref</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
            </content>
        </type>
        <type derived="true" id="type.3565">
            <name>const Deref&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3621">
            <name>const DestroyStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
            </content>
        </type>
        <type derived="true" id="type.3622">
            <name>const DestroyStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401065">
            <name>const DomAttr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
            </content>
        </type>
        <type derived="true" id="type.7401067">
            <name>const DomAttr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401066">
            <name>const DomAttr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401845">
            <name>const DomAttr*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401032">
            <name>const DomCDataSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
            </content>
        </type>
        <type derived="true" id="type.7401034">
            <name>const DomCDataSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401033">
            <name>const DomCDataSection*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401020">
            <name>const DomCharacterData</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
            </content>
        </type>
        <type derived="true" id="type.7401022">
            <name>const DomCharacterData&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401021">
            <name>const DomCharacterData*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401038">
            <name>const DomComment</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
            </content>
        </type>
        <type derived="true" id="type.7401040">
            <name>const DomComment&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401039">
            <name>const DomComment*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401050">
            <name>const DomDocument</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
            </content>
        </type>
        <type derived="true" id="type.7401052">
            <name>const DomDocument&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401051">
            <name>const DomDocument*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401059">
            <name>const DomDocumentFragment</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
            </content>
        </type>
        <type derived="true" id="type.7401061">
            <name>const DomDocumentFragment&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401060">
            <name>const DomDocumentFragment*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401071">
            <name>const DomElement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
            </content>
        </type>
        <type derived="true" id="type.7401073">
            <name>const DomElement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401072">
            <name>const DomElement*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401728">
            <name>const DomElement*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402046">
            <name>const DomElement**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3678">
            <name>const DomException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
            </content>
        </type>
        <type derived="true" id="type.3679">
            <name>const DomException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401087">
            <name>const DomNode</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
            </content>
        </type>
        <type derived="true" id="type.7401089">
            <name>const DomNode&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401088">
            <name>const DomNode*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401909">
            <name>const DomNode*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401910">
            <name>const DomNode**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402088">
            <name>const DomNode**&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402089">
            <name>const DomNode**&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402087">
            <name>const DomNode***</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401093">
            <name>const DomParentNode</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
            </content>
        </type>
        <type derived="true" id="type.7401095">
            <name>const DomParentNode&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401094">
            <name>const DomParentNode*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401044">
            <name>const DomProcessingInstruction</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
            </content>
        </type>
        <type derived="true" id="type.7401046">
            <name>const DomProcessingInstruction&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401045">
            <name>const DomProcessingInstruction*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401026">
            <name>const DomText</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
            </content>
        </type>
        <type derived="true" id="type.7401028">
            <name>const DomText&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401027">
            <name>const DomText*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3658">
            <name>const ExpectationParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
            </content>
        </type>
        <type derived="true" id="type.3659">
            <name>const ExpectationParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3624">
            <name>const ExpressionStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
            </content>
        </type>
        <type derived="true" id="type.3625">
            <name>const ExpressionStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3540">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
            </content>
        </type>
        <type derived="true" id="type.3541">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3630">
            <name>const GotoCaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
            </content>
        </type>
        <type derived="true" id="type.3631">
            <name>const GotoCaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3615">
            <name>const GotoStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
            </content>
        </type>
        <type derived="true" id="type.3616">
            <name>const GotoStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401722">
            <name>const HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401719"/>
            </content>
        </type>
        <type derived="true" id="type.7401724">
            <name>const HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401723">
            <name>const HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401742">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401739"/>
            </content>
        </type>
        <type derived="true" id="type.7401744">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401739"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401743">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401739"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401748">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401745"/>
            </content>
        </type>
        <type derived="true" id="type.7401750">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401745"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401749">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401745"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401762">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401759"/>
            </content>
        </type>
        <type derived="true" id="type.7401764">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401759"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401763">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401759"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401474">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401471"/>
            </content>
        </type>
        <type derived="true" id="type.3431">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3428"/>
            </content>
        </type>
        <type derived="true" id="type.7401476">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401471"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3433">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3428"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401475">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401471"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3432">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3428"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401480">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401477"/>
            </content>
        </type>
        <type derived="true" id="type.3437">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3434"/>
            </content>
        </type>
        <type derived="true" id="type.7401482">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401477"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3439">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3438">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3434"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401481">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401477"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3542">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
            </content>
        </type>
        <type derived="true" id="type.3543">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3585">
            <name>const Invoke</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
            </content>
        </type>
        <type derived="true" id="type.3586">
            <name>const Invoke&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3150">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3190">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3173">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389552"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3237">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389659"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3655">
            <name>const KleeneStarParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
            </content>
        </type>
        <type derived="true" id="type.3656">
            <name>const KleeneStarParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401831">
            <name>const Less&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401830"/>
            </content>
        </type>
        <type derived="true" id="type.7401833">
            <name>const Less&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401830"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401832">
            <name>const Less&lt;String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401830"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401772">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401769"/>
            </content>
        </type>
        <type derived="true" id="type.7401774">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401769"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401773">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401769"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401906">
            <name>const List&lt;DomNode*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401903"/>
            </content>
        </type>
        <type derived="true" id="type.7401908">
            <name>const List&lt;DomNode*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401903"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401907">
            <name>const List&lt;DomNode*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401903"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401538">
            <name>const List&lt;String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401535"/>
            </content>
        </type>
        <type derived="true" id="type.3495">
            <name>const List&lt;String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3492"/>
            </content>
        </type>
        <type derived="true" id="type.7401540">
            <name>const List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401535"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3497">
            <name>const List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401539">
            <name>const List&lt;String&lt;uchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401535"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3496">
            <name>const List&lt;String&lt;uchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3492"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401812">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomAttr>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401809"/>
            </content>
        </type>
        <type derived="true" id="type.7401814">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomAttr>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401809"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401813">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomAttr>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401809"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401952">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomElement>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401949"/>
            </content>
        </type>
        <type derived="true" id="type.7401954">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomElement>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401949"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401953">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomElement>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401949"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3608">
            <name>const Literal</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
            </content>
        </type>
        <type derived="true" id="type.3609">
            <name>const Literal&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3206">
            <name>const LockGuard&lt;Mtx></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
            </content>
        </type>
        <type derived="true" id="type.3207">
            <name>const LockGuard&lt;Mtx>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3393">
            <name>const LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7394867"/>
            </content>
        </type>
        <type derived="true" id="type.3394">
            <name>const LockGuard&lt;System.Threading.Mutex>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7394867"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401839">
            <name>const Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401836"/>
            </content>
        </type>
        <type derived="true" id="type.7401841">
            <name>const Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401836"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401840">
            <name>const Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401836"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3549">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.3603">
            <name>const New</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
            </content>
        </type>
        <type derived="true" id="type.3604">
            <name>const New&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401100">
            <name>const NodeList</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
            </content>
        </type>
        <type derived="true" id="type.7401102">
            <name>const NodeList&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401101">
            <name>const NodeList*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3561">
            <name>const Not</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
            </content>
        </type>
        <type derived="true" id="type.3562">
            <name>const Not&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3649">
            <name>const OptionalParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
            </content>
        </type>
        <type derived="true" id="type.3650">
            <name>const OptionalParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3544">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
            </content>
        </type>
        <type derived="true" id="type.7401863">
            <name>const Pair&lt;String&lt;uchar>, DomAttr*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401842"/>
            </content>
        </type>
        <type derived="true" id="type.7401853">
            <name>const Pair&lt;String&lt;uchar>, DomAttr*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401862">
            <name>const Pair&lt;String&lt;uchar>, DomAttr*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401842"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401758">
            <name>const Pair&lt;String&lt;uchar>, DomElement*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401725"/>
            </content>
        </type>
        <type derived="true" id="type.7401736">
            <name>const Pair&lt;String&lt;uchar>, DomElement*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401725"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401757">
            <name>const Pair&lt;String&lt;uchar>, DomElement*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401725"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3216">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3213">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3652">
            <name>const PositiveParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
            </content>
        </type>
        <type derived="true" id="type.3653">
            <name>const PositiveParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3591">
            <name>const PostfixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
            </content>
        </type>
        <type derived="true" id="type.3592">
            <name>const PostfixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3588">
            <name>const PostfixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
            </content>
        </type>
        <type derived="true" id="type.3589">
            <name>const PostfixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3573">
            <name>const PrefixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
            </content>
        </type>
        <type derived="true" id="type.3574">
            <name>const PrefixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3570">
            <name>const PrefixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
            </content>
        </type>
        <type derived="true" id="type.3571">
            <name>const PrefixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401789">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401786"/>
            </content>
        </type>
        <type derived="true" id="type.7401791">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401786"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401790">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401786"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401780">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401777"/>
            </content>
        </type>
        <type derived="true" id="type.7401782">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401777"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401781">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401777"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401923">
            <name>const RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401920"/>
            </content>
        </type>
        <type derived="true" id="type.7401925">
            <name>const RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401920"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401924">
            <name>const RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401920"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401914">
            <name>const RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401911"/>
            </content>
        </type>
        <type derived="true" id="type.7401916">
            <name>const RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401911"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401915">
            <name>const RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401911"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401551">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401548"/>
            </content>
        </type>
        <type derived="true" id="type.3508">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3505"/>
            </content>
        </type>
        <type derived="true" id="type.7401553">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3510">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3505"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401552">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3509">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3505"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401552">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401544">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401541"/>
            </content>
        </type>
        <type derived="true" id="type.3501">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3498"/>
            </content>
        </type>
        <type derived="true" id="type.7401546">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3503">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3498"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401545">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401541"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3502">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3498"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401545">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401541"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401825">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401822"/>
            </content>
        </type>
        <type derived="true" id="type.7401827">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401822"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401826">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401822"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401818">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401815"/>
            </content>
        </type>
        <type derived="true" id="type.7401820">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401815"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401819">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401815"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401965">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401962"/>
            </content>
        </type>
        <type derived="true" id="type.7401967">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401962"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401966">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401962"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401958">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401955"/>
            </content>
        </type>
        <type derived="true" id="type.7401960">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401955"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401959">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401955"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3200">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3197"/>
            </content>
        </type>
        <type derived="true" id="type.7401242">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401239"/>
            </content>
        </type>
        <type derived="true" id="type.7401244">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401239"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3202">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3197"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401243">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401239"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3201">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3197"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401113">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401110"/>
            </content>
        </type>
        <type derived="true" id="type.3071">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3068"/>
            </content>
        </type>
        <type derived="true" id="type.7401113">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401110"/>
            </content>
        </type>
        <type derived="true" id="type.7401115">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401110"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3073">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3068"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401114">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401110"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3072">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3068"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3090">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3087"/>
            </content>
        </type>
        <type derived="true" id="type.7401132">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401129"/>
            </content>
        </type>
        <type derived="true" id="type.7401134">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401129"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3092">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3087"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3091">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3087"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401133">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401129"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3388">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3385"/>
            </content>
        </type>
        <type derived="true" id="type.7401431">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401428"/>
            </content>
        </type>
        <type derived="true" id="type.3390">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3385"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401433">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401428"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3389">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3385"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401432">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401428"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401143">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401140"/>
            </content>
        </type>
        <type derived="true" id="type.3101">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3098"/>
            </content>
        </type>
        <type derived="true" id="type.7401143">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401140"/>
            </content>
        </type>
        <type derived="true" id="type.3103">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3098"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401145">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401140"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3102">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3098"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401144">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401140"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401122">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401119"/>
            </content>
        </type>
        <type derived="true" id="type.3080">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3077"/>
            </content>
        </type>
        <type derived="true" id="type.7401124">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401119"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3082">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3077"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401123">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401119"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3081">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3077"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3550">
            <name>const RecursiveMutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
            </content>
        </type>
        <type derived="true" id="type.7401859">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401856"/>
            </content>
        </type>
        <type derived="true" id="type.7401861">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401856"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401860">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401856"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401873">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401870"/>
            </content>
        </type>
        <type derived="true" id="type.7401875">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401870"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401874">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401870"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401880">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401877"/>
            </content>
        </type>
        <type derived="true" id="type.7401882">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401877"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401881">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401877"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401867">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401864"/>
            </content>
        </type>
        <type derived="true" id="type.7401869">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401864"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401868">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401864"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3612">
            <name>const ReturnStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
            </content>
        </type>
        <type derived="true" id="type.3613">
            <name>const ReturnStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401847">
            <name>const SelectFirst&lt;String&lt;uchar>, DomAttr*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401846"/>
            </content>
        </type>
        <type derived="true" id="type.7401849">
            <name>const SelectFirst&lt;String&lt;uchar>, DomAttr*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401846"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401848">
            <name>const SelectFirst&lt;String&lt;uchar>, DomAttr*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401846"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402048">
            <name>const SelectFirst&lt;String&lt;uchar>, DomAttr*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401846"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402047">
            <name>const SelectFirst&lt;String&lt;uchar>, DomAttr*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401846"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401730">
            <name>const SelectFirst&lt;String&lt;uchar>, DomElement*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401729"/>
            </content>
        </type>
        <type derived="true" id="type.7401732">
            <name>const SelectFirst&lt;String&lt;uchar>, DomElement*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401729"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401731">
            <name>const SelectFirst&lt;String&lt;uchar>, DomElement*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401729"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401997">
            <name>const SelectFirst&lt;String&lt;uchar>, DomElement*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401729"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401996">
            <name>const SelectFirst&lt;String&lt;uchar>, DomElement*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401729"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3594">
            <name>const SizeOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
            </content>
        </type>
        <type derived="true" id="type.3595">
            <name>const SizeOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401944">
            <name>const Stack&lt;UniquePtr&lt;System.Dom.DomElement>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401943"/>
            </content>
        </type>
        <type derived="true" id="type.7401946">
            <name>const Stack&lt;UniquePtr&lt;System.Dom.DomElement>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401943"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401945">
            <name>const Stack&lt;UniquePtr&lt;System.Dom.DomElement>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401943"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3531">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
            </content>
        </type>
        <type derived="true" id="type.3532">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3545">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
            </content>
        </type>
        <type derived="true" id="type.7390041">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390036"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7390129">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390124"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7390128">
            <name>const String&lt;uchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390124"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7398924">
            <name>const String&lt;uchar>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390124"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7399088">
            <name>const String&lt;uchar>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390124"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7390084">
            <name>const String&lt;wchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3627">
            <name>const SwitchStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
            </content>
        </type>
        <type derived="true" id="type.3628">
            <name>const SwitchStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3145">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389513"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3144">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389511"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3142">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3141">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389500"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3139">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389497"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3138">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389495"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3136">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3135">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389490"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3133">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389487"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3132">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3130">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389482"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3129">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3127">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389477"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3126">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389475"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3125">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389473"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3124">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389464"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3123">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389462"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3122">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389459"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3121">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389457"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3120">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389455"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3119">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3108">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3106">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389432"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3228">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3214">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389612"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3211">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389609"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3209">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3178">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389560"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3170">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389543"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3168">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3167">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389539"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3151">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3149">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389521"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3148">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3147">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389517"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3146">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389515"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3230">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3551">
            <name>const ThreadingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
            </content>
        </type>
        <type derived="true" id="type.3552">
            <name>const ThreadingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3633">
            <name>const ThrowStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
            </content>
        </type>
        <type derived="true" id="type.3634">
            <name>const ThrowStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3661">
            <name>const TokenParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
            </content>
        </type>
        <type derived="true" id="type.3662">
            <name>const TokenParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3636">
            <name>const TryStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
            </content>
        </type>
        <type derived="true" id="type.3637">
            <name>const TryStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3557">
            <name>const Type</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
            </content>
        </type>
        <type derived="true" id="type.3558">
            <name>const Type&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3597">
            <name>const TypeName</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
            </content>
        </type>
        <type derived="true" id="type.3598">
            <name>const TypeName&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3131">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389483"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3137">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389493"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3140">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389498"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3210">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389601"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3215">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389613"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3134">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389488"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3212">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389610"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3128">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389478"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3143">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389503"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402035">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, DomAttr*>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401850"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401984">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, DomElement*>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401733"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3579">
            <name>const UnaryMinus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
            </content>
        </type>
        <type derived="true" id="type.3580">
            <name>const UnaryMinus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3576">
            <name>const UnaryPlus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
            </content>
        </type>
        <type derived="true" id="type.3577">
            <name>const UnaryPlus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3555">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
            </content>
        </type>
        <type derived="true" id="type.3556">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401891">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401888"/>
            </content>
        </type>
        <type derived="true" id="type.7401893">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401888"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401892">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401888"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401805">
            <name>const UniquePtr&lt;System.Dom.DomAttr></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401802"/>
            </content>
        </type>
        <type derived="true" id="type.7401807">
            <name>const UniquePtr&lt;System.Dom.DomAttr>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401802"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401806">
            <name>const UniquePtr&lt;System.Dom.DomAttr>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401802"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401932">
            <name>const UniquePtr&lt;System.Dom.DomDocument></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401929"/>
            </content>
        </type>
        <type derived="true" id="type.7401934">
            <name>const UniquePtr&lt;System.Dom.DomDocument>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401929"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401933">
            <name>const UniquePtr&lt;System.Dom.DomDocument>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401929"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401939">
            <name>const UniquePtr&lt;System.Dom.DomElement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401936"/>
            </content>
        </type>
        <type derived="true" id="type.7401941">
            <name>const UniquePtr&lt;System.Dom.DomElement>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401936"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401940">
            <name>const UniquePtr&lt;System.Dom.DomElement>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401936"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401708">
            <name>const UniquePtr&lt;System.Dom.DomNode></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401705"/>
            </content>
        </type>
        <type derived="true" id="type.7401710">
            <name>const UniquePtr&lt;System.Dom.DomNode>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401705"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401709">
            <name>const UniquePtr&lt;System.Dom.DomNode>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7401705"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3191">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3445">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7397113"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3669">
            <name>const XmlGrammar</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlGrammar_514387B50789C8E470155317F17349CFC3DF6E94"/>
            </content>
        </type>
        <type derived="true" id="type.3670">
            <name>const XmlGrammar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlGrammar_514387B50789C8E470155317F17349CFC3DF6E94"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3672">
            <name>const XmlProcessingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlProcessingException_38961E809BD4812FD6BEA01B8DDA08229100E6F5"/>
            </content>
        </type>
        <type derived="true" id="type.3673">
            <name>const XmlProcessingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlProcessingException_38961E809BD4812FD6BEA01B8DDA08229100E6F5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3479">
            <name>const double&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388905"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3477">
            <name>const float&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388904"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3466">
            <name>const sbyte&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388896"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3469">
            <name>const short&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3666">
            <name>const stdlib</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
            </content>
        </type>
        <type derived="true" id="type.3667">
            <name>const stdlib&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3471">
            <name>const ushort&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388899"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388905">
            <name>double</name>
        </type>
        <type basic="true" id="type.7388904">
            <name>float</name>
        </type>
        <type basic="true" id="type.7388900">
            <name>int</name>
        </type>
        <type basic="true" id="type.7388902">
            <name>long</name>
        </type>
        <type basic="true" id="type.7388896">
            <name>sbyte</name>
        </type>
        <type basic="true" id="type.7388898">
            <name>short</name>
        </type>
        <type derived="true" id="type.3668">
            <name>stdlib&amp;&amp;</name>
            <content>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388908">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.7388951">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.7388908"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388950">
            <name>uchar*</name>
            <content>
                <baseType ref="type.7388908"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388901">
            <name>uint</name>
        </type>
        <type derived="true" id="type.7388930">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.7388901"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388929">
            <name>uint*</name>
            <content>
                <baseType ref="type.7388901"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388903">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.7388936">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.7388903"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388935">
            <name>ulong*</name>
            <content>
                <baseType ref="type.7388903"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388899">
            <name>ushort</name>
        </type>
        <type basic="true" id="type.7388907">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.7388948">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.7388907"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388947">
            <name>wchar*</name>
            <content>
                <baseType ref="type.7388907"/>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
