<library>
    <name>System.XPath</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.XPath">
            <name>System.XPath</name>
            <classes>
                <class id="class_AxisMap_439D4C04BC3B186AB056547E5B4D4A5D10D00A5E">
                    <name>AxisMap</name>
                    <groupName>AxisMap</groupName>
                    <syntax> public class AxisMap;</syntax>
                    <functions>
                        <function id="member_function_GetAxis_AxisMap_9C596A279785803793F685B28C06D3FC9E8C1777">
                            <name>GetAxis(const String&lt;uchar>&amp; axis) const</name>
                            <syntax>public Axis GetAxis(const String&lt;uchar>&amp; axis) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>axis</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                            <returnType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_AxisMap_E2D8D1B02E16EEF38B92A21A5950744A90B71AE0">
                            <name>Instance()</name>
                            <syntax>public static AxisMap&amp; Instance();</syntax>
                            <returnType ref="type.7407317"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_ElementAndDocumentStringValueComputer_FECFC54D00B43DD7FFD455FAAAC9A1505830D3B5">
                    <name>ElementAndDocumentStringValueComputer</name>
                    <groupName>ElementAndDocumentStringValueComputer</groupName>
                    <syntax> public class ElementAndDocumentStringValueComputer;</syntax>
                    <baseClass ref="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC"/>
                    <functions>
                        <function id="member_function_GetStringValue_ElementAndDocumentStringValueComputer_5FA63A25AA4405AB3742FA6F2F1DFA359274F66F">
                            <name>GetStringValue()</name>
                            <syntax>public String&lt;uchar> GetStringValue();</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="function_group_Visit_81B997D242284AAD5D323504681B04331B2183B2">
                            <name>Visit</name>
                            <overloads>
                                <overload id="member_function_Visit_ElementAndDocumentStringValueComputer_6500D94EFC71B875BB10B5B6326C0CD0E1AE7D8E">
                                    <name>Visit(DomCDataSection* cdataSection)</name>
                                    <syntax>public override void Visit(DomCDataSection* cdataSection);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>cdataSection</name>
                                            <type ref="type.7401030"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_ElementAndDocumentStringValueComputer_AE1A5293BA92524B88C107ADBE7076410DFDB5E4">
                                    <name>Visit(DomText* text)</name>
                                    <syntax>public override void Visit(DomText* text);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>text</name>
                                            <type ref="type.7401024"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_NodeSelectionOp_BA86575766CE874A9DB1412EDFDB5641EC97F25A">
                    <name>NodeSelectionOp</name>
                    <groupName>NodeSelectionOp</groupName>
                    <syntax> public class NodeSelectionOp;</syntax>
                    <baseClass ref="class_NodeOp_A834E32432E8B9893D49D376C8198B2DA0983A10"/>
                    <constructors>
                        <constructor id="constructor_NodeSelectionOp_FE6DE61D629A93B6B08D98F96CBF30CC47C62B8F">
                            <name>NodeSelectionOp(XPathNodeTestExpr* nodeTest_, XPathNodeSet&amp; nodeSet_, System.Dom.Axis axis_)</name>
                            <syntax>public nothrow NodeSelectionOp(XPathNodeTestExpr* nodeTest_, XPathNodeSet&amp; nodeSet_, System.Dom.Axis axis_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeTest_</name>
                                    <type ref="type.7408361"/>
                                </parameter>
                                <parameter>
                                    <name>nodeSet_</name>
                                    <type ref="type.7407652"/>
                                </parameter>
                                <parameter>
                                    <name>axis_</name>
                                    <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Apply_NodeSelectionOp_D90F4FDFF36BDD302E7F8E3C2BD1823223119CAC">
                            <name>Apply(DomNode* node)</name>
                            <syntax>public override void Apply(DomNode* node);</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathAddExpr_64D5E0CDC0D9A75C10B3433A367150D0A5B7ED6F">
                    <name>XPathAddExpr</name>
                    <groupName>XPathAddExpr</groupName>
                    <syntax> public class XPathAddExpr;</syntax>
                    <baseClass ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                    <constructors>
                        <constructor id="constructor_XPathAddExpr_2F2D39F4A1CFC93C2394CFD55C08D0E9797BD16F">
                            <name>XPathAddExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathAddExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathAddExpr_BB83A3D2501609BFC26E9A8546315F3874ECF49B">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathAddExpr_7186457925E7F14E371E84A87FD20FAF6B59891F">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathAndExpr_6BE495B589C8902EFF40B7D143B7C2D2931BD4F3">
                    <name>XPathAndExpr</name>
                    <groupName>XPathAndExpr</groupName>
                    <syntax> public class XPathAndExpr;</syntax>
                    <baseClass ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                    <constructors>
                        <constructor id="constructor_XPathAndExpr_9AB203E059880C5795635C326F93F251949B3BE5">
                            <name>XPathAndExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathAndExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathAndExpr_68DAB4CD15F8C5C0F07A8AE97BE4CB8658529170">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathAndExpr_532A3951C2398BD2F5AFE2875384A3477A88B5E1">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathAnyNodeTest_1653BD12B7022917E52975C2AB2EFC101974D53E">
                    <name>XPathAnyNodeTest</name>
                    <groupName>XPathAnyNodeTest</groupName>
                    <syntax> public class XPathAnyNodeTest;</syntax>
                    <baseClass ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
                    <functions>
                        <function id="member_function_Select_XPathAnyNodeTest_768453DEF3DC7B676F2E54E662DD75A94BB5B5F6">
                            <name>Select(DomNode* node, System.Dom.Axis axis) const</name>
                            <syntax>public override bool Select(DomNode* node, System.Dom.Axis axis) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                                <parameter>
                                    <name>axis</name>
                                    <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_ToDom_XPathAnyNodeTest_A6BF6D7639489D44D124CF931B09E03EEB6718DF">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD">
                    <name>XPathBinaryExpr</name>
                    <groupName>XPathBinaryExpr</groupName>
                    <syntax>abstract public class XPathBinaryExpr;</syntax>
                    <baseClass ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                    <constructors>
                        <constructor id="constructor_XPathBinaryExpr_A8339B53E4F7B3FA4ED8403C9E254F985E0B3386">
                            <name>XPathBinaryExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathBinaryExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Left_XPathBinaryExpr_501CAC987A61F07F7638F1CE4F1C87AAA48CE726">
                            <name>Left() const</name>
                            <syntax>public nothrow inline XPathExpr* Left() const;</syntax>
                            <returnType ref="type.7407174"/>
                        </function>
                        <function id="member_function_Right_XPathBinaryExpr_139385F123CAA483C6297C9F878A4B116BEB52DB">
                            <name>Right() const</name>
                            <syntax>public nothrow inline XPathExpr* Right() const;</syntax>
                            <returnType ref="type.7407174"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathBoolean_62EBEB870905B1B981080A7A18EBBBD98ADD5C4A">
                    <name>XPathBoolean</name>
                    <groupName>XPathBoolean</groupName>
                    <syntax> public class XPathBoolean;</syntax>
                    <baseClass ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                    <constructors>
                        <constructor id="constructor_XPathBoolean_EE5746BAAAFD3FD0A7E30FB74278E332E15E5F47">
                            <name>XPathBoolean(bool value_)</name>
                            <syntax>public nothrow XPathBoolean(bool value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.7388895"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ToBool_XPathBoolean_3472286425EE1C20B19CAF89D8B86C8B3592347C">
                            <name>ToBool() const</name>
                            <syntax>public nothrow override bool ToBool() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_ToDom_XPathBoolean_1AE23C668702E49DA5EAD7426A27F03C4EAC86F3">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_ToDouble_XPathBoolean_388CA5F3078DC0859836656FA123F4AE0378DF65">
                            <name>ToDouble(XPathContext&amp; context) const</name>
                            <syntax>public override double ToDouble(XPathContext&amp; context) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388905"/>
                        </function>
                        <function id="member_function_ToString_XPathBoolean_E1E17E8010054AB0ED27A15A5EBE884A3A7B13DE">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;uchar> ToString() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_Value_XPathBoolean_BDCC01EF2E7125F453EE2227F75C497E9894075A">
                            <name>Value() const</name>
                            <syntax>public nothrow inline bool Value() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathBooleanFunction_436037BD58AFA8408E3A2FB305BBBE107362B516">
                    <name>XPathBooleanFunction</name>
                    <groupName>XPathBooleanFunction</groupName>
                    <syntax> public class XPathBooleanFunction;</syntax>
                    <baseClass ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
                    <constructors>
                        <constructor id="default_constructor_XPathBooleanFunction_D1C868700398DD3CCE7FF33318A012A11E00A7E3">
                            <name>XPathBooleanFunction()</name>
                            <syntax>public nothrow XPathBooleanFunction();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathBooleanFunction_53DE53830C270A8DBCDF0903ED6B174213A28B4E">
                            <name>Evaluate(XPathContext&amp; context, List&lt;XPathObject*>&amp; arguments)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context, List&lt;XPathObject*>&amp; arguments);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                                <parameter>
                                    <name>arguments</name>
                                    <type ref="type.7408329"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathCombineStepExpr_1E1819F1735CC284A8A4A12D8028573B7028D63A">
                    <name>XPathCombineStepExpr</name>
                    <groupName>XPathCombineStepExpr</groupName>
                    <syntax> public class XPathCombineStepExpr;</syntax>
                    <baseClass ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                    <constructors>
                        <constructor id="constructor_XPathCombineStepExpr_1E5A24DEA64E0E4EFD9453D99F0EA65EBC517047">
                            <name>XPathCombineStepExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathCombineStepExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathCombineStepExpr_7DAB04321CB5B463B73D5BE322883C12BB165F93">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathCombineStepExpr_D435E231F04258D8083B6A0C9890D34BC16B0E38">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathCommentNodeTest_8E388602C7FD6F18286CE97DC687F1196E059DDC">
                    <name>XPathCommentNodeTest</name>
                    <groupName>XPathCommentNodeTest</groupName>
                    <syntax> public class XPathCommentNodeTest;</syntax>
                    <baseClass ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
                    <functions>
                        <function id="member_function_Select_XPathCommentNodeTest_DC649A164CB4C487E12BFE388C0D56F5F1A63A1B">
                            <name>Select(DomNode* node, System.Dom.Axis axis) const</name>
                            <syntax>public override bool Select(DomNode* node, System.Dom.Axis axis) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                                <parameter>
                                    <name>axis</name>
                                    <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_ToDom_XPathCommentNodeTest_C5BD832D8C0F21E385B865F3D024FC7FC15A8C16">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathContext_54EB2271A3739C07EC41BC345CC60F436CFAB6BB">
                    <name>XPathContext</name>
                    <groupName>XPathContext</groupName>
                    <syntax> public class XPathContext;</syntax>
                    <constructors>
                        <constructor id="constructor_XPathContext_36EE530653C31DC9B5AC2EA18288F95FD54D19ED">
                            <name>XPathContext(DomNode* node_, long position_, long size_)</name>
                            <syntax>public nothrow XPathContext(DomNode* node_, long position_, long size_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>node_</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                                <parameter>
                                    <name>position_</name>
                                    <type ref="type.7388902"/>
                                </parameter>
                                <parameter>
                                    <name>size_</name>
                                    <type ref="type.7388902"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Node_XPathContext_844F00FEFDB1F56D79DC5D4CB1BE039ED7C68257">
                            <name>Node() const</name>
                            <syntax>public nothrow inline DomNode* Node() const;</syntax>
                            <returnType ref="type.7401085"/>
                        </function>
                        <function id="member_function_Position_XPathContext_E83827D01DC1F190BE279AC871445F7D9F4B7E07">
                            <name>Position() const</name>
                            <syntax>public nothrow inline long Position() const;</syntax>
                            <returnType ref="type.7388902"/>
                        </function>
                        <function id="member_function_Size_XPathContext_707B9043CCFAD4045BFBCE7885AD22FE28B4FC6A">
                            <name>Size() const</name>
                            <syntax>public nothrow inline long Size() const;</syntax>
                            <returnType ref="type.7388902"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathCountFunction_2296BBD53FA4F0D57A2C327CD82EB2E7B5FE38CF">
                    <name>XPathCountFunction</name>
                    <groupName>XPathCountFunction</groupName>
                    <syntax> public class XPathCountFunction;</syntax>
                    <baseClass ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
                    <constructors>
                        <constructor id="default_constructor_XPathCountFunction_CC61944852577378C3DCF3F8E9726E4C6F3EF363">
                            <name>XPathCountFunction()</name>
                            <syntax>public nothrow XPathCountFunction();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathCountFunction_916A3F71E88A657E49EDF3179FC9CE85642B22C8">
                            <name>Evaluate(XPathContext&amp; context, List&lt;XPathObject*>&amp; arguments)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context, List&lt;XPathObject*>&amp; arguments);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                                <parameter>
                                    <name>arguments</name>
                                    <type ref="type.7408329"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathDebug_1C2BEF2B9EA73DDB3A8B4AFA3612DB04B949B963">
                    <name>XPathDebug</name>
                    <groupName>XPathDebug</groupName>
                    <syntax> public class XPathDebug;</syntax>
                    <functions>
                        <function id="member_function_DebugParsing_XPathDebug_6610855EA014542316B3B2DD8A4169D974E43B7A">
                            <name>DebugParsing() const</name>
                            <syntax>public nothrow inline bool DebugParsing() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_DebugQuery_XPathDebug_8F6DE1E09C58094AC8AD21F2528A25A818E51BF6">
                            <name>DebugQuery() const</name>
                            <syntax>public nothrow inline bool DebugQuery() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_GetExecutionDuration_XPathDebug_B2306ED440ACBED7C6A7012DE35960A884E8BEA0">
                            <name>GetExecutionDuration()</name>
                            <syntax>public nothrow Duration GetExecutionDuration();</syntax>
                            <returnType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                        </function>
                        <function id="member_function_GetQueryDom_XPathDebug_1299CA43E22103CF1308D864EBE7A3F062E1F7C4">
                            <name>GetQueryDom()</name>
                            <syntax>public nothrow UniquePtr&lt;System.Dom.DomNode> GetQueryDom();</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_GetQueryDuration_XPathDebug_F92232E3B73AD91942A8AB5E104ED0AB5CBEC0F4">
                            <name>GetQueryDuration()</name>
                            <syntax>public nothrow Duration GetQueryDuration();</syntax>
                            <returnType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                        </function>
                        <function id="member_function_SetDebugParsing_XPathDebug_50090D5684AA3C4282DC169585EB397A9A6D2A74">
                            <name>SetDebugParsing()</name>
                            <syntax>public nothrow inline void SetDebugParsing();</syntax>
                        </function>
                        <function id="member_function_SetDebugQuery_XPathDebug_9E944D7E826E53B80ED2FA9690A6ECD6EFFC259B">
                            <name>SetDebugQuery()</name>
                            <syntax>public nothrow inline void SetDebugQuery();</syntax>
                        </function>
                        <function id="member_function_SetExecutionDuration_XPathDebug_E4468E13F8546CA3336CCABAE3B8761E85C1EDAA">
                            <name>SetExecutionDuration(System.Duration executionDuration_)</name>
                            <syntax>public nothrow void SetExecutionDuration(System.Duration executionDuration_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>executionDuration_</name>
                                    <type ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetQueryDom_XPathDebug_48F19735BBC53B4CED9A918FB3D1A2164AF7C0C1">
                            <name>SetQueryDom(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; queryDom_)</name>
                            <syntax>public nothrow void SetQueryDom(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; queryDom_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>queryDom_</name>
                                    <type ref="type.7401711"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetQueryDuration_XPathDebug_4831751EE6FE8A8C7DFE9C166726313B6AE99E41">
                            <name>SetQueryDuration(System.Duration queryDuration_)</name>
                            <syntax>public nothrow void SetQueryDuration(System.Duration queryDuration_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>queryDuration_</name>
                                    <type ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_XPathDebug_0E907E962D85590B4687361989E08FC2F9FB1DF2">
                            <name>Instance()</name>
                            <syntax>public static nothrow XPathDebug&amp; Instance();</syntax>
                            <returnType ref="type.7407165"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_XPathDivExpr_DC2257E71CE47BD3F13502B631A85953A6CCCF2F">
                    <name>XPathDivExpr</name>
                    <groupName>XPathDivExpr</groupName>
                    <syntax> public class XPathDivExpr;</syntax>
                    <baseClass ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                    <constructors>
                        <constructor id="constructor_XPathDivExpr_37744802D20708F3C84CD655E612D8F4CA7EF3CA">
                            <name>XPathDivExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathDivExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathDivExpr_F3D5D535D750A926721F615F7B500A209B53D27C">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathDivExpr_2E5E3A2A2B72396D06AA35D6D6C5AE77F7FBA4F1">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathEqualExpr_CC0741F4FE017F177A8AA8CEE613CAAA6F130568">
                    <name>XPathEqualExpr</name>
                    <groupName>XPathEqualExpr</groupName>
                    <syntax> public class XPathEqualExpr;</syntax>
                    <baseClass ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                    <constructors>
                        <constructor id="constructor_XPathEqualExpr_5C4F4AB4B145A7387F0DD243411CEB0BC4B04667">
                            <name>XPathEqualExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathEqualExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathEqualExpr_A0C39235BDA9ABE4E9EC8E4207E68C9777EC9B73">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathEqualExpr_2E7C701810294F80643019A714D17CAFE25891C4">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathException_5F5973D81A22230252D5069223C1877CBFBA755A">
                    <name>XPathException</name>
                    <groupName>XPathException</groupName>
                    <syntax> public class XPathException;</syntax>
                    <baseClass ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                    <constructors>
                        <constructor id="constructor_XPathException_0F00505BD3125AF85F32FA12C567F741F86759A4">
                            <name>XPathException(const String&lt;char>&amp; message_)</name>
                            <syntax>public nothrow XPathException(const String&lt;char>&amp; message_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480">
                    <name>XPathExpr</name>
                    <groupName>XPathExpr</groupName>
                    <syntax>abstract public class XPathExpr;</syntax>
                    <functions>
                        <function id="member_function_Evaluate_XPathExpr_4128AB9F9087DF5FEDBC15553516F418B3545CAF">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public virtual UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_TextValue_XPathExpr_10D0B9381513063A941F37E6A875352B9FBD062C">
                            <name>TextValue() const</name>
                            <syntax>public virtual String&lt;uchar> TextValue() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_ToDom_XPathExpr_FF1EE74E69BE5ABAB5F4EA9215D63E2621EE4F06">
                            <name>ToDom() const</name>
                            <syntax>public abstract UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathExpressionGrammar_D3F93E9C453CF512F7EEFBB47E0459A564D21DCE">
                    <name>XPathExpressionGrammar</name>
                    <groupName>XPathExpressionGrammar</groupName>
                    <syntax> public class XPathExpressionGrammar;</syntax>
                    <baseClass ref="class_Grammar_2180D00808E7A786B21C35D11B36E77EC171A6C6"/>
                    <constructors>
                        <constructor id="default_constructor_XPathExpressionGrammar_7FE4E155AAC9648425B13012E511A903D9D15812">
                            <name>XPathExpressionGrammar()</name>
                            <syntax>public XPathExpressionGrammar();</syntax>
                        </constructor>
                        <constructor id="constructor_XPathExpressionGrammar_A1868EA723A91AEF03AA8BF3522D08CB3E7C4EC3">
                            <name>XPathExpressionGrammar(ParsingDomain* parsingDomain)</name>
                            <syntax>public XPathExpressionGrammar(ParsingDomain* parsingDomain);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parsingDomain</name>
                                    <type ref="type.7397134"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CreateRules_XPathExpressionGrammar_E11A724C8E9CF8DE9B9D8126D76701CCB85F4BA0">
                            <name>CreateRules()</name>
                            <syntax>public override void CreateRules();</syntax>
                        </function>
                        <function id="member_function_GetReferencedGrammars_XPathExpressionGrammar_C5D2DDC85C02D7170127CEC672C8136A17DDDC41">
                            <name>GetReferencedGrammars()</name>
                            <syntax>public override void GetReferencedGrammars();</syntax>
                        </function>
                        <function id="member_function_Parse_XPathExpressionGrammar_2AE7DEB7937BC2EB0C4F82F09B9438D9BE03FF6E">
                            <name>Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName)</name>
                            <syntax>public XPathExpr* Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start</name>
                                    <type ref="type.7390131"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="type.7390131"/>
                                </parameter>
                                <parameter>
                                    <name>fileIndex</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                                <parameter>
                                    <name>fileName</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7407174"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathExpressionParser_F078FB4A0E8588AEF4683A48C55651DE936AED9B">
                    <name>XPathExpressionParser</name>
                    <groupName>XPathExpressionParser</groupName>
                    <syntax> public class XPathExpressionParser;</syntax>
                    <functions>
                        <function id="member_function_Parse_XPathExpressionParser_237BDB8AB56F42668789424C419BA5E8A5B3BF87">
                            <name>Parse(const String&lt;uchar>&amp; xpathExpression)</name>
                            <syntax>public UniquePtr&lt;System.XPath.XPathExpr> Parse(const String&lt;uchar>&amp; xpathExpression);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xpathExpression</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408296"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_XPathExpressionParser_65EFDFF46A12F42FDE5F4DA015DD1A9306530BC3">
                            <name>Instance()</name>
                            <syntax>public static XPathExpressionParser&amp; Instance();</syntax>
                            <returnType ref="type.7407168"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_XPathFilterExpr_C70744E20146504EF089A77257ED4D36041A468A">
                    <name>XPathFilterExpr</name>
                    <groupName>XPathFilterExpr</groupName>
                    <syntax> public class XPathFilterExpr;</syntax>
                    <baseClass ref="class_XPathUnaryExpr_86009132751C9E3CD64BE15301415EF8A1979F72"/>
                    <constructors>
                        <constructor id="constructor_XPathFilterExpr_5EE89CD12F606742D190C5803F0A75CD55839A5A">
                            <name>XPathFilterExpr(XPathExpr* operand_, XPathExpr* predicate_)</name>
                            <syntax>public nothrow XPathFilterExpr(XPathExpr* operand_, XPathExpr* predicate_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>operand_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>predicate_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathFilterExpr_2ECCE644B0E92E76F960963C809C349F4A76C99B">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathFilterExpr_6139926925AE38CFA996441023BB06228C01C105">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408">
                    <name>XPathFunction</name>
                    <groupName>XPathFunction</groupName>
                    <syntax>abstract public class XPathFunction;</syntax>
                    <constructors>
                        <constructor id="constructor_XPathFunction_97F50B51B146C2481426AEAF68CFF5E69AD08B52">
                            <name>XPathFunction(const String&lt;uchar>&amp; name_, int minArity_, int maxArity_)</name>
                            <syntax>public nothrow XPathFunction(const String&lt;uchar>&amp; name_, int minArity_, int maxArity_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>minArity_</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                                <parameter>
                                    <name>maxArity_</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathFunction_64CC041C06ACA33A927CE60F3104FD42D7961EB4">
                            <name>Evaluate(XPathContext&amp; context, List&lt;XPathObject*>&amp; arguments)</name>
                            <syntax>public abstract UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context, List&lt;XPathObject*>&amp; arguments);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                                <parameter>
                                    <name>arguments</name>
                                    <type ref="type.7408329"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_MaxArity_XPathFunction_E909862549C1B3B44050B258546EEFE55C1274A3">
                            <name>MaxArity() const</name>
                            <syntax>public nothrow inline int MaxArity() const;</syntax>
                            <returnType ref="type.7388900"/>
                        </function>
                        <function id="member_function_MinArity_XPathFunction_EBCC039CCB7A21F05D020F5335ADB316E441EDE7">
                            <name>MinArity() const</name>
                            <syntax>public nothrow inline int MinArity() const;</syntax>
                            <returnType ref="type.7388900"/>
                        </function>
                        <function id="member_function_Name_XPathFunction_E77777A8F8F3216D35773B7034548C36F5E02D94">
                            <name>Name() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Name() const;</syntax>
                            <returnType ref="type.7390129"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathFunctionCall_C5BB4DC232BD6346E04957475A9C86B8F8521E16">
                    <name>XPathFunctionCall</name>
                    <groupName>XPathFunctionCall</groupName>
                    <syntax> public class XPathFunctionCall;</syntax>
                    <baseClass ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                    <constructors>
                        <constructor id="constructor_XPathFunctionCall_E87CFF942936B079D751E7CEBD0F8892724782E6">
                            <name>XPathFunctionCall(const String&lt;uchar>&amp; functionName_)</name>
                            <syntax>public nothrow XPathFunctionCall(const String&lt;uchar>&amp; functionName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>functionName_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddArgument_XPathFunctionCall_2ADA265B18F99E053D5E34797522F4B1E09FCC45">
                            <name>AddArgument(XPathExpr* argument)</name>
                            <syntax>public void AddArgument(XPathExpr* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Evaluate_XPathFunctionCall_0391915012D1ABCFC453D6B73F59837C7BAC6C97">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathFunctionCall_B1D5ED672FFD1B655D915869D000B5CDAE02B088">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathFunctionLibrary_5044787DDFDAF4AF5701F92F8775A709B4496547">
                    <name>XPathFunctionLibrary</name>
                    <groupName>XPathFunctionLibrary</groupName>
                    <syntax> public class XPathFunctionLibrary;</syntax>
                    <functions>
                        <function id="member_function_GetFunction_XPathFunctionLibrary_9729240A5E1031B1C79D04C82638F5BA482F4E94">
                            <name>GetFunction(const String&lt;uchar>&amp; functionName) const</name>
                            <syntax>public XPathFunction* GetFunction(const String&lt;uchar>&amp; functionName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>functionName</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7407612"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_XPathFunctionLibrary_054CE4B1023BB303BE8007ABB9656E390A454105">
                            <name>Instance()</name>
                            <syntax>public static XPathFunctionLibrary&amp; Instance();</syntax>
                            <returnType ref="type.7407622"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_XPathGreaterExpr_41B33DD4B2A08AFD60C521F68E2BE22044CCA315">
                    <name>XPathGreaterExpr</name>
                    <groupName>XPathGreaterExpr</groupName>
                    <syntax> public class XPathGreaterExpr;</syntax>
                    <baseClass ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                    <constructors>
                        <constructor id="constructor_XPathGreaterExpr_44529786A559305E2169A99967953B3387F7BA97">
                            <name>XPathGreaterExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathGreaterExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathGreaterExpr_05C666317578F754FE3A8BED91A0515BCF7363AE">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathGreaterExpr_46EF5C1539CC1210E4FCB74B60250FE69F30A40D">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathGreaterOrEqualExpr_D23CE14AC5AADA96029DF5B4EF07289DD172803B">
                    <name>XPathGreaterOrEqualExpr</name>
                    <groupName>XPathGreaterOrEqualExpr</groupName>
                    <syntax> public class XPathGreaterOrEqualExpr;</syntax>
                    <baseClass ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                    <constructors>
                        <constructor id="constructor_XPathGreaterOrEqualExpr_BFDD2472DC6543F7455DFE16FA98BE798AE4CCC9">
                            <name>XPathGreaterOrEqualExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathGreaterOrEqualExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathGreaterOrEqualExpr_60913A7F1B03B9AE098E0D7096A9774BDB6BC5E2">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathGreaterOrEqualExpr_42EE600A080EE28A42BB3BD1EBFF12BCBF116E6F">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathLastFunction_470D2B0434975293AB9C5EEA6266A1B38E7C6E95">
                    <name>XPathLastFunction</name>
                    <groupName>XPathLastFunction</groupName>
                    <syntax> public class XPathLastFunction;</syntax>
                    <baseClass ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
                    <constructors>
                        <constructor id="default_constructor_XPathLastFunction_6232E7A055E1FD808EF3642A37A1329332F5B3DE">
                            <name>XPathLastFunction()</name>
                            <syntax>public nothrow XPathLastFunction();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathLastFunction_99E9E2A74529322180B0FDFD4982AF668EE07789">
                            <name>Evaluate(XPathContext&amp; context, List&lt;XPathObject*>&amp; arguments)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context, List&lt;XPathObject*>&amp; arguments);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                                <parameter>
                                    <name>arguments</name>
                                    <type ref="type.7408329"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathLessExpr_B701BDBB55711A0AB3EF413A2A9D1CC9BC2B1511">
                    <name>XPathLessExpr</name>
                    <groupName>XPathLessExpr</groupName>
                    <syntax> public class XPathLessExpr;</syntax>
                    <baseClass ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                    <constructors>
                        <constructor id="constructor_XPathLessExpr_31023EDF361EB9244DDA4ADBF7B366E161D942A7">
                            <name>XPathLessExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathLessExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathLessExpr_4D437EF9429A4A34065762E73D968B4C68105DFB">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathLessExpr_7FFC46378FAAE3A7B62C3CE553C26D8412D0E6B4">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathLessOrEqualExpr_1C653B955EC20419DAFC98236046E34770D41F6D">
                    <name>XPathLessOrEqualExpr</name>
                    <groupName>XPathLessOrEqualExpr</groupName>
                    <syntax> public class XPathLessOrEqualExpr;</syntax>
                    <baseClass ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                    <constructors>
                        <constructor id="constructor_XPathLessOrEqualExpr_D8D5F3A296D0AA3406FB726EF9401528F84A5A4B">
                            <name>XPathLessOrEqualExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathLessOrEqualExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathLessOrEqualExpr_D4A3D2989FB76DA28167846638D8837C4546BAD8">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathLessOrEqualExpr_740B0B7152E1B2116AD38DC6C20A877A18E34B56">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathLiteral_97BC2333DDDF6EABF7DA5FD272541734687A14E8">
                    <name>XPathLiteral</name>
                    <groupName>XPathLiteral</groupName>
                    <syntax> public class XPathLiteral;</syntax>
                    <baseClass ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                    <constructors>
                        <constructor id="constructor_XPathLiteral_88524B45B37DB80292F9C520B6CF6CBD4EF7866D">
                            <name>XPathLiteral(const String&lt;uchar>&amp; value_)</name>
                            <syntax>public nothrow XPathLiteral(const String&lt;uchar>&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathLiteral_E1EDA8FC73BE43E16A3FEAD9D33D67A5AA0A205A">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_TextValue_XPathLiteral_37D28FACE7E7B7F75317B10CE03D00C24B0FD079">
                            <name>TextValue() const</name>
                            <syntax>public override String&lt;uchar> TextValue() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_ToDom_XPathLiteral_ECE1D494F332F90FE82FF2CB82886FC8656DA144">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathLocationStepExpr_9B4616EA86D04D07EC9E1FA3C0C129DFEC975494">
                    <name>XPathLocationStepExpr</name>
                    <groupName>XPathLocationStepExpr</groupName>
                    <syntax> public class XPathLocationStepExpr;</syntax>
                    <baseClass ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                    <constructors>
                        <constructor id="constructor_XPathLocationStepExpr_DF02D20456A0DD518E8DE15D8126A1E11A73A0CA">
                            <name>XPathLocationStepExpr(System.Dom.Axis axis_, XPathNodeTestExpr* nodeTest_)</name>
                            <syntax>public nothrow XPathLocationStepExpr(System.Dom.Axis axis_, XPathNodeTestExpr* nodeTest_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>axis_</name>
                                    <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                                </parameter>
                                <parameter>
                                    <name>nodeTest_</name>
                                    <type ref="type.7408361"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddPredicate_XPathLocationStepExpr_92571365AF21D6D41DAFF57A6EE845D95C1D2205">
                            <name>AddPredicate(XPathExpr* predicate)</name>
                            <syntax>public void AddPredicate(XPathExpr* predicate);</syntax>
                            <parameters>
                                <parameter>
                                    <name>predicate</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Evaluate_XPathLocationStepExpr_12E7F20F063F6AED32A31E55FDB3A5673D541B6E">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathLocationStepExpr_0EAC477FA90A46E646E49332465A615A45956C6D">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathModExpr_7DB9EBB1DF4E3D4EE87B5DBC20E76007C53963F5">
                    <name>XPathModExpr</name>
                    <groupName>XPathModExpr</groupName>
                    <syntax> public class XPathModExpr;</syntax>
                    <baseClass ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                    <constructors>
                        <constructor id="constructor_XPathModExpr_5DF0A696626768CCBFEAFCFE7C40A2E9BC86C1A1">
                            <name>XPathModExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathModExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathModExpr_4248E806CFB85014DC222579C5BEEE918BE47CA5">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathModExpr_F39E447E04FC943038002E50C4ABB7808BD9D966">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathMulExpr_3999187027305818E384D1FCB2308929E48BDFEB">
                    <name>XPathMulExpr</name>
                    <groupName>XPathMulExpr</groupName>
                    <syntax> public class XPathMulExpr;</syntax>
                    <baseClass ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                    <constructors>
                        <constructor id="constructor_XPathMulExpr_F2DD3D7917098185E32DF1CEBF6A0D2FFE043BC7">
                            <name>XPathMulExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathMulExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathMulExpr_161DBDFC03240097EC14F46B695B148B4286932D">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathMulExpr_B134DEA1735DCFA8A130AE85916BB02BAFFB763A">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathNameTest_1BB9325BB075144D167439A70658B1743BE5F322">
                    <name>XPathNameTest</name>
                    <groupName>XPathNameTest</groupName>
                    <syntax> public class XPathNameTest;</syntax>
                    <baseClass ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
                    <constructors>
                        <constructor id="constructor_XPathNameTest_3E18D0D23C66BE8E470103DD23DB31F470F911B6">
                            <name>XPathNameTest(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow XPathNameTest(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Select_XPathNameTest_E2F766361E643958215E1725EBE7EFD4B5C66C9E">
                            <name>Select(DomNode* node, System.Dom.Axis axis) const</name>
                            <syntax>public override bool Select(DomNode* node, System.Dom.Axis axis) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                                <parameter>
                                    <name>axis</name>
                                    <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_ToDom_XPathNameTest_522628D008BC16D54D744EB0FAD879343D987B5A">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathNodeSet_70D9F2F055A2EAFCF3988BC033AE454E204F643A">
                    <name>XPathNodeSet</name>
                    <groupName>XPathNodeSet</groupName>
                    <syntax> public class XPathNodeSet;</syntax>
                    <baseClass ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                    <functions>
                        <function id="member_function_Add_XPathNodeSet_CA7F8BF80B5AD9D91D16478DA19054B684DE746F">
                            <name>Add(DomNode* node)</name>
                            <syntax>public void Add(DomNode* node);</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Length_XPathNodeSet_621030023AF1296A11C26A9E9E9228EA9C3FFB23">
                            <name>Length() const</name>
                            <syntax>public nothrow inline long Length() const;</syntax>
                            <returnType ref="type.7388902"/>
                        </function>
                        <function id="member_function_ToBool_XPathNodeSet_45CB7C3A85B6C3C4870BF63D21EDD23905E0E0BF">
                            <name>ToBool() const</name>
                            <syntax>public nothrow override bool ToBool() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_ToDom_XPathNodeSet_90B9FC84DC04C27CA74A5DAD39614AB2417A8610">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_ToDouble_XPathNodeSet_352F412C6A1B3FC4C775BA4F1F56DC1A7B067886">
                            <name>ToDouble(XPathContext&amp; context) const</name>
                            <syntax>public override double ToDouble(XPathContext&amp; context) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388905"/>
                        </function>
                        <function id="member_function_ToString_XPathNodeSet_2C7FD0FBDD95DA73E822C50A002F5863C29F3928">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;uchar> ToString() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_op_index_XPathNodeSet_A5FF49F632E294B2F9FE72DC7808583D401C74FE">
                            <name>operator[](long index) const</name>
                            <syntax>public nothrow inline DomNode* operator[](long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.7388902"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7401085"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE">
                    <name>XPathNodeTestExpr</name>
                    <groupName>XPathNodeTestExpr</groupName>
                    <syntax>abstract public class XPathNodeTestExpr;</syntax>
                    <baseClass ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                    <functions>
                        <function id="member_function_Select_XPathNodeTestExpr_E533D649E07A7FD1B5C8289005208408C18FB9E4">
                            <name>Select(DomNode* node, System.Dom.Axis axis) const</name>
                            <syntax>public virtual bool Select(DomNode* node, System.Dom.Axis axis) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                                <parameter>
                                    <name>axis</name>
                                    <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathNotEqualExpr_8332C1622B73ED060248380F14625509104DF080">
                    <name>XPathNotEqualExpr</name>
                    <groupName>XPathNotEqualExpr</groupName>
                    <syntax> public class XPathNotEqualExpr;</syntax>
                    <baseClass ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                    <constructors>
                        <constructor id="constructor_XPathNotEqualExpr_7A9C03CAC7C420C895C99832D305686038D4C321">
                            <name>XPathNotEqualExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathNotEqualExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathNotEqualExpr_5611AD7328272CB6F3539D7321F797C41F3E5B2F">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathNotEqualExpr_C1ABFC2A8F72668FD8E9F3AB1D8B1F4EF5C6AB96">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathNumber_030E4A77BFA393ABC52B71D17310DFB36384486F">
                    <name>XPathNumber</name>
                    <groupName>XPathNumber</groupName>
                    <syntax> public class XPathNumber;</syntax>
                    <baseClass ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                    <constructors>
                        <constructor id="constructor_XPathNumber_66934AC9F52509513300791C8F402EAE495D4CB9">
                            <name>XPathNumber(double value_)</name>
                            <syntax>public nothrow XPathNumber(double value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.7388905"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ToBool_XPathNumber_93B7C5B5A595F5D36509C5F90504AD6A8C3362F7">
                            <name>ToBool() const</name>
                            <syntax>public nothrow override bool ToBool() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_ToDom_XPathNumber_6C379495658ED82D1B3DA7D17DCB997FD4735C96">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_ToDouble_XPathNumber_D0653A4F854E0648CE96A46ED1BE44AD80981AB5">
                            <name>ToDouble(XPathContext&amp; context) const</name>
                            <syntax>public override double ToDouble(XPathContext&amp; context) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388905"/>
                        </function>
                        <function id="member_function_ToString_XPathNumber_530B8C79601FC7A8A951158238C27C52DE671E4F">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;uchar> ToString() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_Value_XPathNumber_86BB6A606DDFC572AA4ECA862C68B9ECA91720A2">
                            <name>Value() const</name>
                            <syntax>public nothrow inline double Value() const;</syntax>
                            <returnType ref="type.7388905"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathNumberExpr_CB62E9D51F1A4F9AA7E3937722FE3487F75F3D27">
                    <name>XPathNumberExpr</name>
                    <groupName>XPathNumberExpr</groupName>
                    <syntax> public class XPathNumberExpr;</syntax>
                    <baseClass ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                    <constructors>
                        <constructor id="constructor_XPathNumberExpr_EAFA22CB90EEE892E25944C75EF953438F519F87">
                            <name>XPathNumberExpr(const String&lt;uchar>&amp; value_)</name>
                            <syntax>public XPathNumberExpr(const String&lt;uchar>&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_XPathNumberExpr_6E92D9EDF234A1D3E1AF2215116C01D545521278">
                            <name>XPathNumberExpr(double value_)</name>
                            <syntax>public nothrow XPathNumberExpr(double value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.7388905"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathNumberExpr_98FDF15CF64CED084DE9B7E57806854271105860">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_TextValue_XPathNumberExpr_A0C2D4C0A8E39415BB5E9DCBF9B536494B96BC89">
                            <name>TextValue() const</name>
                            <syntax>public override String&lt;uchar> TextValue() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_ToDom_XPathNumberExpr_B410900411BC0D64231E81AA053C692716D339BE">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathNumberFunction_3CD349E443E9F9856C593054B85BA4FEFECC42C7">
                    <name>XPathNumberFunction</name>
                    <groupName>XPathNumberFunction</groupName>
                    <syntax> public class XPathNumberFunction;</syntax>
                    <baseClass ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
                    <constructors>
                        <constructor id="default_constructor_XPathNumberFunction_95ADA6FA09D4A735077C9DB27135F005D1FD0CDE">
                            <name>XPathNumberFunction()</name>
                            <syntax>public nothrow XPathNumberFunction();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathNumberFunction_0A8DD67FBA6C310C91381EB550E35131E8BDC22D">
                            <name>Evaluate(XPathContext&amp; context, List&lt;XPathObject*>&amp; arguments)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context, List&lt;XPathObject*>&amp; arguments);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                                <parameter>
                                    <name>arguments</name>
                                    <type ref="type.7408329"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E">
                    <name>XPathObject</name>
                    <groupName>XPathObject</groupName>
                    <syntax>abstract public class XPathObject;</syntax>
                    <functions>
                        <function id="member_function_ToBool_XPathObject_3B76C7108647E808227733F50DDB8769645C5DF2">
                            <name>ToBool() const</name>
                            <syntax>public nothrow abstract bool ToBool() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_ToDom_XPathObject_DC0C1BB26C5018C80710BAF5C3375004C1C7D2CF">
                            <name>ToDom() const</name>
                            <syntax>public abstract UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_ToDouble_XPathObject_C89CCF06A7F5A75A1846535C05EDB6D219F91F4D">
                            <name>ToDouble(XPathContext&amp; context) const</name>
                            <syntax>public abstract double ToDouble(XPathContext&amp; context) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388905"/>
                        </function>
                        <function id="member_function_ToString_XPathObject_1D8739621FD95FBA72E8A20F112B56866B563838">
                            <name>ToString() const</name>
                            <syntax>public abstract String&lt;uchar> ToString() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathOrExpr_EBB1FF34863F294BF41D4497F5DB49E26CC99F32">
                    <name>XPathOrExpr</name>
                    <groupName>XPathOrExpr</groupName>
                    <syntax> public class XPathOrExpr;</syntax>
                    <baseClass ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                    <constructors>
                        <constructor id="constructor_XPathOrExpr_599E601D2D31009B46C24755BC50C537DC5EF376">
                            <name>XPathOrExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathOrExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathOrExpr_60FECC512B48FE4DED437A76051930B0BD09C8A9">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathOrExpr_21FD514CB7A116C12E050A58119DD799F5D3AA1B">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathPILiteralTest_3F86EF025B928E10BDB8373B7B25849DD41E16C9">
                    <name>XPathPILiteralTest</name>
                    <groupName>XPathPILiteralTest</groupName>
                    <syntax> public class XPathPILiteralTest;</syntax>
                    <baseClass ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
                    <constructors>
                        <constructor id="constructor_XPathPILiteralTest_41C24E7D9E0E626AB965F04006B737F1810176B6">
                            <name>XPathPILiteralTest(XPathExpr* literal_)</name>
                            <syntax>public nothrow XPathPILiteralTest(XPathExpr* literal_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>literal_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Select_XPathPILiteralTest_A5465B33CA886551F11B0F0C048262472FE16AD9">
                            <name>Select(DomNode* node, System.Dom.Axis axis) const</name>
                            <syntax>public override bool Select(DomNode* node, System.Dom.Axis axis) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                                <parameter>
                                    <name>axis</name>
                                    <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_ToDom_XPathPILiteralTest_2EC05F80413BFF81A9B988D8E575B45B5331865F">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathPINodeTest_3C6062E8681A250F424D8059EE5DD0803B3BFF00">
                    <name>XPathPINodeTest</name>
                    <groupName>XPathPINodeTest</groupName>
                    <syntax> public class XPathPINodeTest;</syntax>
                    <baseClass ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
                    <functions>
                        <function id="member_function_Select_XPathPINodeTest_11DEA3AAB314527CBBE4A57112615A911E40F88B">
                            <name>Select(DomNode* node, System.Dom.Axis axis) const</name>
                            <syntax>public override bool Select(DomNode* node, System.Dom.Axis axis) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                                <parameter>
                                    <name>axis</name>
                                    <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_ToDom_XPathPINodeTest_9AA821F53275C6817A34C68F373E2B13C714465E">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathPositionFunction_CD239B9D33A34AB01D2239F7A7FF3B1F0646ED05">
                    <name>XPathPositionFunction</name>
                    <groupName>XPathPositionFunction</groupName>
                    <syntax> public class XPathPositionFunction;</syntax>
                    <baseClass ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
                    <constructors>
                        <constructor id="default_constructor_XPathPositionFunction_33BC7199FD68ED9B7384F0C5D7059322CDA2D4E4">
                            <name>XPathPositionFunction()</name>
                            <syntax>public nothrow XPathPositionFunction();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathPositionFunction_D7D02C0864BC7BD73E21ADB4FA375D6F67590E28">
                            <name>Evaluate(XPathContext&amp; context, List&lt;XPathObject*>&amp; arguments)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context, List&lt;XPathObject*>&amp; arguments);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                                <parameter>
                                    <name>arguments</name>
                                    <type ref="type.7408329"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathPrefixTest_7D0E6C8BFF9C298E4E7B339F475D675FA9161187">
                    <name>XPathPrefixTest</name>
                    <groupName>XPathPrefixTest</groupName>
                    <syntax> public class XPathPrefixTest;</syntax>
                    <baseClass ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
                    <constructors>
                        <constructor id="constructor_XPathPrefixTest_284708024CE8F6E6BBB0F2FA67C4445723CCDEB0">
                            <name>XPathPrefixTest(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow XPathPrefixTest(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Select_XPathPrefixTest_407FC65C87F118F3169BD7CD5FA97C8F6A5C9329">
                            <name>Select(DomNode* node, System.Dom.Axis axis) const</name>
                            <syntax>public override bool Select(DomNode* node, System.Dom.Axis axis) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                                <parameter>
                                    <name>axis</name>
                                    <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_ToDom_XPathPrefixTest_17FC60686BBFF3490C303B46C6F0292502FF3C08">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathPrincipalNodeTest_95934E4A6771EAB845EC93002DCFD0E63193516F">
                    <name>XPathPrincipalNodeTest</name>
                    <groupName>XPathPrincipalNodeTest</groupName>
                    <syntax> public class XPathPrincipalNodeTest;</syntax>
                    <baseClass ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
                    <functions>
                        <function id="member_function_Select_XPathPrincipalNodeTest_A64711EB0CDD72B3E11A0A4FE3EA517669B08A49">
                            <name>Select(DomNode* node, System.Dom.Axis axis) const</name>
                            <syntax>public override bool Select(DomNode* node, System.Dom.Axis axis) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                                <parameter>
                                    <name>axis</name>
                                    <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_ToDom_XPathPrincipalNodeTest_CD4B8461B81499784D1142D4D9A087E5EE5F6AAD">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathRootNodeExpr_80F36A5C737D3E6D91496D2F168E801F8D3AF7F9">
                    <name>XPathRootNodeExpr</name>
                    <groupName>XPathRootNodeExpr</groupName>
                    <syntax> public class XPathRootNodeExpr;</syntax>
                    <baseClass ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                    <functions>
                        <function id="member_function_Evaluate_XPathRootNodeExpr_ACEBD3DF8AF532E3E998E8743DC8389F61BDCBCF">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathRootNodeExpr_DB4C01FA2B942E490459F1124995C9BA6181F56A">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathString_A53CB226777116E5435EF7B51EABFD704B80F682">
                    <name>XPathString</name>
                    <groupName>XPathString</groupName>
                    <syntax> public class XPathString;</syntax>
                    <baseClass ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                    <constructors>
                        <constructor id="constructor_XPathString_04BC0B7FE62404F7B6026996FC1C1EBFE4DF7A07">
                            <name>XPathString(const String&lt;uchar>&amp; value_)</name>
                            <syntax>public nothrow XPathString(const String&lt;uchar>&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ToBool_XPathString_9E68AC34B1F367AD7DBECBE30F787C6D91B15C69">
                            <name>ToBool() const</name>
                            <syntax>public nothrow override bool ToBool() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_ToDom_XPathString_D2554D8AAF4E6AD9BEDA7244A7D4E0D1069B38E7">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                        <function id="member_function_ToDouble_XPathString_EF9395E5BECC60EA077FFF0AA35A63B8291D11BA">
                            <name>ToDouble(XPathContext&amp; context) const</name>
                            <syntax>public override double ToDouble(XPathContext&amp; context) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388905"/>
                        </function>
                        <function id="member_function_ToString_XPathString_AB6AD1CE561841B8A86E6A343390DEBF8C2D938F">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;uchar> ToString() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_Value_XPathString_F481AD14BC90443FFAAF5328D8FDB0E1D2944E7A">
                            <name>Value() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Value() const;</syntax>
                            <returnType ref="type.7390129"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathStringFunction_7B03242259C3ABC0C5FDCBC3F3A3791DAB1E9862">
                    <name>XPathStringFunction</name>
                    <groupName>XPathStringFunction</groupName>
                    <syntax> public class XPathStringFunction;</syntax>
                    <baseClass ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
                    <constructors>
                        <constructor id="default_constructor_XPathStringFunction_0A21895BE2C57474920EFA0A866A2B903A0AF997">
                            <name>XPathStringFunction()</name>
                            <syntax>public nothrow XPathStringFunction();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathStringFunction_6C0095D827CA0EC9803A3BA33B2943973355BB9D">
                            <name>Evaluate(XPathContext&amp; context, List&lt;XPathObject*>&amp; arguments)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context, List&lt;XPathObject*>&amp; arguments);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                                <parameter>
                                    <name>arguments</name>
                                    <type ref="type.7408329"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathSubExpr_69FED22A13C6C7B2368B46347B4CAEE97468576A">
                    <name>XPathSubExpr</name>
                    <groupName>XPathSubExpr</groupName>
                    <syntax> public class XPathSubExpr;</syntax>
                    <baseClass ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                    <constructors>
                        <constructor id="constructor_XPathSubExpr_217C2794D2EE3A3337892771A899A3314EE96157">
                            <name>XPathSubExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathSubExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathSubExpr_E725E8B72ACE67519DAC4BE3466F0D096F26F3FD">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathSubExpr_EC2F95B4CBEA40B5BBADBCBC53B38E97E15C5140">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathTextNodeTest_F61C5D2B1A43AC9CF9EF724B603C0B62AFAFC24E">
                    <name>XPathTextNodeTest</name>
                    <groupName>XPathTextNodeTest</groupName>
                    <syntax> public class XPathTextNodeTest;</syntax>
                    <baseClass ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
                    <functions>
                        <function id="member_function_Select_XPathTextNodeTest_1B2CDEB119819A58120554ACEBEF82670AF5F9AC">
                            <name>Select(DomNode* node, System.Dom.Axis axis) const</name>
                            <syntax>public override bool Select(DomNode* node, System.Dom.Axis axis) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                                <parameter>
                                    <name>axis</name>
                                    <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_ToDom_XPathTextNodeTest_3AAD8AB0694F094B9C78E035FADAC9D5C4818F27">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathUnaryExpr_86009132751C9E3CD64BE15301415EF8A1979F72">
                    <name>XPathUnaryExpr</name>
                    <groupName>XPathUnaryExpr</groupName>
                    <syntax>abstract public class XPathUnaryExpr;</syntax>
                    <baseClass ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                    <constructors>
                        <constructor id="constructor_XPathUnaryExpr_2810DF4F8E05C26DBCCD23E23F513D13B85DE337">
                            <name>XPathUnaryExpr(XPathExpr* operand_)</name>
                            <syntax>public nothrow XPathUnaryExpr(XPathExpr* operand_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>operand_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Operand_XPathUnaryExpr_96DFABC0588B6AC626EAA60CE956754F0FF4A2EB">
                            <name>Operand() const</name>
                            <syntax>public nothrow inline XPathExpr* Operand() const;</syntax>
                            <returnType ref="type.7407174"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathUnaryMinusExpr_AF3C43FA8F0EDE3BC21F7EE19995FC56E6C75626">
                    <name>XPathUnaryMinusExpr</name>
                    <groupName>XPathUnaryMinusExpr</groupName>
                    <syntax> public class XPathUnaryMinusExpr;</syntax>
                    <baseClass ref="class_XPathUnaryExpr_86009132751C9E3CD64BE15301415EF8A1979F72"/>
                    <constructors>
                        <constructor id="constructor_XPathUnaryMinusExpr_7118F725A2A6A52E4996D18EC2484BDC4FDBF377">
                            <name>XPathUnaryMinusExpr(XPathExpr* operand_)</name>
                            <syntax>public nothrow XPathUnaryMinusExpr(XPathExpr* operand_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>operand_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathUnaryMinusExpr_6E81338E07A60BE24E683A813B4FC58944B02FDD">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathUnaryMinusExpr_9FAB64E4038BDFD4A0BC7BCD27EB8404A10C1ED1">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathUnionExpr_7AF61B483D2A2CBC8E988375E936460948104FD6">
                    <name>XPathUnionExpr</name>
                    <groupName>XPathUnionExpr</groupName>
                    <syntax> public class XPathUnionExpr;</syntax>
                    <baseClass ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                    <constructors>
                        <constructor id="constructor_XPathUnionExpr_6A2C9888529334400E62F1026D0C7616372F585C">
                            <name>XPathUnionExpr(XPathExpr* left_, XPathExpr* right_)</name>
                            <syntax>public nothrow XPathUnionExpr(XPathExpr* left_, XPathExpr* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7407174"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Evaluate_XPathUnionExpr_70B18A2C939FC8D4236B443D2BA2F4DFBACEFF61">
                            <name>Evaluate(XPathContext&amp; context)</name>
                            <syntax>public override UniquePtr&lt;System.XPath.XPathObject> Evaluate(XPathContext&amp; context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7407156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </function>
                        <function id="member_function_ToDom_XPathUnionExpr_287E61587547EE14B33C09EF1E126DD2DB887EF5">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
                <class id="class_XPathVariableReference_73ACE515A08D085D024DDFA8B32D529F578FDFAD">
                    <name>XPathVariableReference</name>
                    <groupName>XPathVariableReference</groupName>
                    <syntax> public class XPathVariableReference;</syntax>
                    <baseClass ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                    <constructors>
                        <constructor id="constructor_XPathVariableReference_A69A6407092612D4B0BBFB7136DDA6689F4BE46F">
                            <name>XPathVariableReference(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow XPathVariableReference(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ToDom_XPathVariableReference_B304E166FAA92679D41A5250877BEED0D6632DAF">
                            <name>ToDom() const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ToDom() const;</syntax>
                            <returnType ref="type.7401705"/>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_Compare_9E5DD2B70FDB395CF993BAECF5A089FC463240AB">
                    <name>Compare(XPathContext&amp; context, XPathObject* left, XPathObject* right, Operator comparisonOp)</name>
                    <syntax>public UniquePtr&lt;System.XPath.XPathObject> Compare(XPathContext&amp; context, XPathObject* left, XPathObject* right, Operator comparisonOp);</syntax>
                    <parameters>
                        <parameter>
                            <name>context</name>
                            <type ref="type.7407156"/>
                        </parameter>
                        <parameter>
                            <name>left</name>
                            <type ref="type.7407645"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.7407645"/>
                        </parameter>
                        <parameter>
                            <name>comparisonOp</name>
                            <type ref="enumerated_type_Operator_70B4E9510AF8D8320A81B0066C9BD6BBC5BA8173"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7408313"/>
                </function>
                <function id="function_CompareNodeSets_6686FDFEA2030539A374A945F4A4BC3B6DF7C741">
                    <name>CompareNodeSets(XPathContext&amp; context, XPathObject* left, XPathObject* right, Operator comparisonOp)</name>
                    <syntax>public UniquePtr&lt;System.XPath.XPathObject> CompareNodeSets(XPathContext&amp; context, XPathObject* left, XPathObject* right, Operator comparisonOp);</syntax>
                    <parameters>
                        <parameter>
                            <name>context</name>
                            <type ref="type.7407156"/>
                        </parameter>
                        <parameter>
                            <name>left</name>
                            <type ref="type.7407645"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.7407645"/>
                        </parameter>
                        <parameter>
                            <name>comparisonOp</name>
                            <type ref="enumerated_type_Operator_70B4E9510AF8D8320A81B0066C9BD6BBC5BA8173"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7408313"/>
                </function>
                <function id="function_DebugParsing_127992BF29D2037C02619D446B8763B482EB975A">
                    <name>DebugParsing()</name>
                    <syntax>public nothrow bool DebugParsing();</syntax>
                    <returnType ref="type.7388895"/>
                </function>
                <function id="function_DebugQuery_49550C4D8ECCEDA4037BA09CBCE165C74644EB22">
                    <name>DebugQuery()</name>
                    <syntax>public nothrow bool DebugQuery();</syntax>
                    <returnType ref="type.7388895"/>
                </function>
                <function id="function_group_Evaluate_2E85821996EB2DF1CA3BF5575484B1065478D3B0">
                    <name>Evaluate</name>
                    <overloads>
                        <overload id="function_Evaluate_BAADC9F9757ECDA2C151920B9C3805CAD33229D9">
                            <name>Evaluate(const String&lt;uchar>&amp; xpathExpression, DomDocument* document)</name>
                            <syntax>public UniquePtr&lt;System.XPath.XPathObject> Evaluate(const String&lt;uchar>&amp; xpathExpression, DomDocument* document);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xpathExpression</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>document</name>
                                    <type ref="type.7401048"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </overload>
                        <overload id="function_Evaluate_7744D75060A34CA07FEAF119B483BB6EC1226786">
                            <name>Evaluate(const String&lt;uchar>&amp; xpathExpression, DomNode* node)</name>
                            <syntax>public UniquePtr&lt;System.XPath.XPathObject> Evaluate(const String&lt;uchar>&amp; xpathExpression, DomNode* node);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xpathExpression</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.7401085"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7408313"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_GetAxis_FAF9CA1A975345D0065CB4AC484EA5D57D621254">
                    <name>GetAxis(const String&lt;uchar>&amp; axisName)</name>
                    <syntax>public Axis GetAxis(const String&lt;uchar>&amp; axisName);</syntax>
                    <parameters>
                        <parameter>
                            <name>axisName</name>
                            <type ref="type.7390129"/>
                        </parameter>
                    </parameters>
                    <returnType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                </function>
                <function id="function_GetXPathLibraryFunction_2D48D048C03624F8FA1D251D418A4ABE72180D9D">
                    <name>GetXPathLibraryFunction(const String&lt;uchar>&amp; functionName)</name>
                    <syntax>public XPathFunction* GetXPathLibraryFunction(const String&lt;uchar>&amp; functionName);</syntax>
                    <parameters>
                        <parameter>
                            <name>functionName</name>
                            <type ref="type.7390129"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7407612"/>
                </function>
                <function id="function_SetExecutionDuration_9193F8D37B059196E54282B1C6B6D04D28C8EC88">
                    <name>SetExecutionDuration(System.Duration executionDuration)</name>
                    <syntax>public nothrow void SetExecutionDuration(System.Duration executionDuration);</syntax>
                    <parameters>
                        <parameter>
                            <name>executionDuration</name>
                            <type ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_SetQueryDom_65414D52C7CA20B0E09E74874ED91D1960B0E64F">
                    <name>SetQueryDom(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; queryDom)</name>
                    <syntax>public nothrow void SetQueryDom(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; queryDom);</syntax>
                    <parameters>
                        <parameter>
                            <name>queryDom</name>
                            <type ref="type.7401711"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_SetQueryDuration_45B8CBD3E42A6777F912720EC2C381F649991541">
                    <name>SetQueryDuration(System.Duration queryDuration)</name>
                    <syntax>public nothrow void SetQueryDuration(System.Duration queryDuration);</syntax>
                    <parameters>
                        <parameter>
                            <name>queryDuration</name>
                            <type ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_StringValue_CA5B9D94D1D3F30404D0145C8213D07440CA21C2">
                    <name>StringValue(DomNode* node)</name>
                    <syntax>public String&lt;uchar> StringValue(DomNode* node);</syntax>
                    <parameters>
                        <parameter>
                            <name>node</name>
                            <type ref="type.7401085"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7390124"/>
                </function>
                <function id="function_op_eq_904A36523959EBE76E826463BB07C28BD29B01D3">
                    <name>operator==(Operator left, Operator right)</name>
                    <syntax>public bool operator==(Operator left, Operator right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="enumerated_type_Operator_70B4E9510AF8D8320A81B0066C9BD6BBC5BA8173"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="enumerated_type_Operator_70B4E9510AF8D8320A81B0066C9BD6BBC5BA8173"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7388895"/>
                </function>
            </functions>
            <enumerations>
                <enumeration id="enumerated_type_Operator_70B4E9510AF8D8320A81B0066C9BD6BBC5BA8173">
                    <name>Operator</name>
                    <syntax>public enum Operator;</syntax>
                    <underlyingType ref="type.7388900"/>
                    <enumConstant>
                        <name>equal</name>
                        <value>0</value>
                    </enumConstant>
                    <enumConstant>
                        <name>notEqual</name>
                        <value>1</value>
                    </enumConstant>
                    <enumConstant>
                        <name>less</name>
                        <value>2</value>
                    </enumConstant>
                    <enumConstant>
                        <name>greater</name>
                        <value>3</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lessOrEqual</name>
                        <value>4</value>
                    </enumConstant>
                    <enumConstant>
                        <name>greaterOrEqual</name>
                        <value>5</value>
                    </enumConstant>
                    <enumConstant>
                        <name>plus</name>
                        <value>6</value>
                    </enumConstant>
                    <enumConstant>
                        <name>minus</name>
                        <value>7</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mul</name>
                        <value>8</value>
                    </enumConstant>
                    <enumConstant>
                        <name>div</name>
                        <value>9</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mod</name>
                        <value>10</value>
                    </enumConstant>
                    <enumConstant>
                        <name>slash</name>
                        <value>11</value>
                    </enumConstant>
                    <enumConstant>
                        <name>slashSlash</name>
                        <value>12</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
    </namespaces>
    <types>
        <type id="class_AbbreviatedAbsoluteLocationPathRule_92A3992049E4F0845A5145599EFA4C9D40347AED">
            <name>AbbreviatedAbsoluteLocationPathRule</name>
        </type>
        <type derived="true" id="type.7407469">
            <name>AbbreviatedAbsoluteLocationPathRule&amp;</name>
            <content>
                <baseType ref="class_AbbreviatedAbsoluteLocationPathRule_92A3992049E4F0845A5145599EFA4C9D40347AED"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407468">
            <name>AbbreviatedAbsoluteLocationPathRule*</name>
            <content>
                <baseType ref="class_AbbreviatedAbsoluteLocationPathRule_92A3992049E4F0845A5145599EFA4C9D40347AED"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408804">
            <name>AbbreviatedAbsoluteLocationPathRule*&amp;</name>
            <content>
                <baseType ref="class_AbbreviatedAbsoluteLocationPathRule_92A3992049E4F0845A5145599EFA4C9D40347AED"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408803">
            <name>AbbreviatedAbsoluteLocationPathRule**</name>
            <content>
                <baseType ref="class_AbbreviatedAbsoluteLocationPathRule_92A3992049E4F0845A5145599EFA4C9D40347AED"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_AbbreviatedAxisSpecifierRule_9985C45C1D68D55A812152A85CF54EAC86E5A180">
            <name>AbbreviatedAxisSpecifierRule</name>
        </type>
        <type derived="true" id="type.7407499">
            <name>AbbreviatedAxisSpecifierRule&amp;</name>
            <content>
                <baseType ref="class_AbbreviatedAxisSpecifierRule_9985C45C1D68D55A812152A85CF54EAC86E5A180"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407498">
            <name>AbbreviatedAxisSpecifierRule*</name>
            <content>
                <baseType ref="class_AbbreviatedAxisSpecifierRule_9985C45C1D68D55A812152A85CF54EAC86E5A180"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408844">
            <name>AbbreviatedAxisSpecifierRule*&amp;</name>
            <content>
                <baseType ref="class_AbbreviatedAxisSpecifierRule_9985C45C1D68D55A812152A85CF54EAC86E5A180"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408843">
            <name>AbbreviatedAxisSpecifierRule**</name>
            <content>
                <baseType ref="class_AbbreviatedAxisSpecifierRule_9985C45C1D68D55A812152A85CF54EAC86E5A180"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_AbbreviatedStepRule_8C951CF1E06BCD3DB939C6AE8AA03F6A879C4A84">
            <name>AbbreviatedStepRule</name>
        </type>
        <type derived="true" id="type.7407481">
            <name>AbbreviatedStepRule&amp;</name>
            <content>
                <baseType ref="class_AbbreviatedStepRule_8C951CF1E06BCD3DB939C6AE8AA03F6A879C4A84"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407480">
            <name>AbbreviatedStepRule*</name>
            <content>
                <baseType ref="class_AbbreviatedStepRule_8C951CF1E06BCD3DB939C6AE8AA03F6A879C4A84"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408829">
            <name>AbbreviatedStepRule*&amp;</name>
            <content>
                <baseType ref="class_AbbreviatedStepRule_8C951CF1E06BCD3DB939C6AE8AA03F6A879C4A84"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408828">
            <name>AbbreviatedStepRule**</name>
            <content>
                <baseType ref="class_AbbreviatedStepRule_8C951CF1E06BCD3DB939C6AE8AA03F6A879C4A84"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_AbsoluteLocationPathRule_EFDB7A5EC1A9715BB775BEF5C0B5F624A3CCD5DC">
            <name>AbsoluteLocationPathRule</name>
        </type>
        <type derived="true" id="type.7407457">
            <name>AbsoluteLocationPathRule&amp;</name>
            <content>
                <baseType ref="class_AbsoluteLocationPathRule_EFDB7A5EC1A9715BB775BEF5C0B5F624A3CCD5DC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407456">
            <name>AbsoluteLocationPathRule*</name>
            <content>
                <baseType ref="class_AbsoluteLocationPathRule_EFDB7A5EC1A9715BB775BEF5C0B5F624A3CCD5DC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408783">
            <name>AbsoluteLocationPathRule*&amp;</name>
            <content>
                <baseType ref="class_AbsoluteLocationPathRule_EFDB7A5EC1A9715BB775BEF5C0B5F624A3CCD5DC"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408782">
            <name>AbsoluteLocationPathRule**</name>
            <content>
                <baseType ref="class_AbsoluteLocationPathRule_EFDB7A5EC1A9715BB775BEF5C0B5F624A3CCD5DC"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_AdditiveExprRule_FBAA8379B3BC2847B1E1AD8285018BC2F9B8182C">
            <name>AdditiveExprRule</name>
        </type>
        <type derived="true" id="type.7407415">
            <name>AdditiveExprRule&amp;</name>
            <content>
                <baseType ref="class_AdditiveExprRule_FBAA8379B3BC2847B1E1AD8285018BC2F9B8182C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407414">
            <name>AdditiveExprRule*</name>
            <content>
                <baseType ref="class_AdditiveExprRule_FBAA8379B3BC2847B1E1AD8285018BC2F9B8182C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408737">
            <name>AdditiveExprRule*&amp;</name>
            <content>
                <baseType ref="class_AdditiveExprRule_FBAA8379B3BC2847B1E1AD8285018BC2F9B8182C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408736">
            <name>AdditiveExprRule**</name>
            <content>
                <baseType ref="class_AdditiveExprRule_FBAA8379B3BC2847B1E1AD8285018BC2F9B8182C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4220">
            <name>AddressOf&amp;&amp;</name>
            <content>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_AndExprRule_8C9782E265C2753098150E085FD2D48E957EE778">
            <name>AndExprRule</name>
        </type>
        <type derived="true" id="type.7407397">
            <name>AndExprRule&amp;</name>
            <content>
                <baseType ref="class_AndExprRule_8C9782E265C2753098150E085FD2D48E957EE778"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407396">
            <name>AndExprRule*</name>
            <content>
                <baseType ref="class_AndExprRule_8C9782E265C2753098150E085FD2D48E957EE778"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408722">
            <name>AndExprRule*&amp;</name>
            <content>
                <baseType ref="class_AndExprRule_8C9782E265C2753098150E085FD2D48E957EE778"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408721">
            <name>AndExprRule**</name>
            <content>
                <baseType ref="class_AndExprRule_8C9782E265C2753098150E085FD2D48E957EE778"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ArgumentRule_922C0C6E7BC540A38535A5AF48D825404A27C9E2">
            <name>ArgumentRule</name>
        </type>
        <type derived="true" id="type.7407565">
            <name>ArgumentRule&amp;</name>
            <content>
                <baseType ref="class_ArgumentRule_922C0C6E7BC540A38535A5AF48D825404A27C9E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407564">
            <name>ArgumentRule*</name>
            <content>
                <baseType ref="class_ArgumentRule_922C0C6E7BC540A38535A5AF48D825404A27C9E2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408900">
            <name>ArgumentRule*&amp;</name>
            <content>
                <baseType ref="class_ArgumentRule_922C0C6E7BC540A38535A5AF48D825404A27C9E2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408899">
            <name>ArgumentRule**</name>
            <content>
                <baseType ref="class_ArgumentRule_922C0C6E7BC540A38535A5AF48D825404A27C9E2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4292">
            <name>AssertStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_AxisMap_439D4C04BC3B186AB056547E5B4D4A5D10D00A5E">
            <name>AxisMap</name>
        </type>
        <type derived="true" id="type.7407317">
            <name>AxisMap&amp;</name>
            <content>
                <baseType ref="class_AxisMap_439D4C04BC3B186AB056547E5B4D4A5D10D00A5E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407316">
            <name>AxisMap*</name>
            <content>
                <baseType ref="class_AxisMap_439D4C04BC3B186AB056547E5B4D4A5D10D00A5E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408651">
            <name>AxisMap*&amp;</name>
            <content>
                <baseType ref="class_AxisMap_439D4C04BC3B186AB056547E5B4D4A5D10D00A5E"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408650">
            <name>AxisMap**</name>
            <content>
                <baseType ref="class_AxisMap_439D4C04BC3B186AB056547E5B4D4A5D10D00A5E"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_AxisNameRule_4158FDC6F513104F8292679B7B386A1C5ED82535">
            <name>AxisNameRule</name>
        </type>
        <type derived="true" id="type.7407493">
            <name>AxisNameRule&amp;</name>
            <content>
                <baseType ref="class_AxisNameRule_4158FDC6F513104F8292679B7B386A1C5ED82535"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407492">
            <name>AxisNameRule*</name>
            <content>
                <baseType ref="class_AxisNameRule_4158FDC6F513104F8292679B7B386A1C5ED82535"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408839">
            <name>AxisNameRule*&amp;</name>
            <content>
                <baseType ref="class_AxisNameRule_4158FDC6F513104F8292679B7B386A1C5ED82535"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408838">
            <name>AxisNameRule**</name>
            <content>
                <baseType ref="class_AxisNameRule_4158FDC6F513104F8292679B7B386A1C5ED82535"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_AxisSpecifierRule_8E311F6CA55AE1DE4BE1D479AF023EAA8BE03C82">
            <name>AxisSpecifierRule</name>
        </type>
        <type derived="true" id="type.7407487">
            <name>AxisSpecifierRule&amp;</name>
            <content>
                <baseType ref="class_AxisSpecifierRule_8E311F6CA55AE1DE4BE1D479AF023EAA8BE03C82"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407486">
            <name>AxisSpecifierRule*</name>
            <content>
                <baseType ref="class_AxisSpecifierRule_8E311F6CA55AE1DE4BE1D479AF023EAA8BE03C82"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408834">
            <name>AxisSpecifierRule*&amp;</name>
            <content>
                <baseType ref="class_AxisSpecifierRule_8E311F6CA55AE1DE4BE1D479AF023EAA8BE03C82"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408833">
            <name>AxisSpecifierRule**</name>
            <content>
                <baseType ref="class_AxisSpecifierRule_8E311F6CA55AE1DE4BE1D479AF023EAA8BE03C82"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390801" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.3782">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7390801"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="7389532"/>
            </content>
        </type>
        <type derived="true" id="type.3790">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="7389553"/>
            </content>
        </type>
        <type derived="true" id="type.3803">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4328">
            <name>BuildIndexVisitor&amp;&amp;</name>
            <content>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4316">
            <name>CharParser&amp;&amp;</name>
            <content>
                <baseType ref="class_CharParser_F30B4B7DDC9B8D3CD1476C03049B3C7189028FDA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4299">
            <name>CodeExpandingVisitor&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4198">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4235">
            <name>Complement&amp;&amp;</name>
            <content>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407114">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3685">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407113">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3684">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4293">
            <name>Const&amp;&amp;</name>
            <content>
                <baseType ref="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4253">
            <name>Construct&amp;&amp;</name>
            <content>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Context_4B52889388B81759717F7A56542EFB699C4ED763">
            <name>Context</name>
        </type>
        <type id="class_Context_5F81F6ABC400125701FB7AF54F3F0A5CFFEACAE2">
            <name>Context</name>
        </type>
        <type id="class_Context_411D44FAB8E8E99A2D4E8FDD13DAAEA4BF0874E9">
            <name>Context</name>
        </type>
        <type id="class_Context_3B0DE0CB752A3EB0834B64DC34533AA91CD4D026">
            <name>Context</name>
        </type>
        <type id="class_Context_EA2D2185CD320E0489A0555539B3E301AB96E7BA">
            <name>Context</name>
        </type>
        <type id="class_Context_B453286DCF7FD24C50BBBE558831227D735C0BF0">
            <name>Context</name>
        </type>
        <type id="class_Context_09B218341C6EF989B44891A3ABB700053546616A">
            <name>Context</name>
        </type>
        <type id="class_Context_0696CCAD44EE94C35FAF17044D8674D005CFAF53">
            <name>Context</name>
        </type>
        <type id="class_Context_33C29259A66DB599520BA2BCFC60747287DE1E05">
            <name>Context</name>
        </type>
        <type id="class_Context_F59A44DA40DE61A821DA6FC17B4FE3A380548E64">
            <name>Context</name>
        </type>
        <type id="class_Context_92E374EFC7697F3DA34B303B1289948934043732">
            <name>Context</name>
        </type>
        <type id="class_Context_E0BFAB3CF8493F6C3EC9873DA9A2AFD18769D657">
            <name>Context</name>
        </type>
        <type id="class_Context_24BAF8A11778D2640B939B3C113339E6EE1B8C93">
            <name>Context</name>
        </type>
        <type id="class_Context_735AF91F79BA92A06AFD998BF1F0F1CD66012E54">
            <name>Context</name>
        </type>
        <type id="class_Context_6C2B2778632044472FF996C78892E8FC9544CD21">
            <name>Context</name>
        </type>
        <type id="class_Context_67B1C694634226C0E37D3B3E0BB627AA0D012CB7">
            <name>Context</name>
        </type>
        <type id="class_Context_21D5F2E27BCD89F40CB159A87186F9909784F654">
            <name>Context</name>
        </type>
        <type id="class_Context_BBB0C5B6E4063E3766DB9ECB062A8CCDF8B47C32">
            <name>Context</name>
        </type>
        <type id="class_Context_C79FCF8BEA2118E3246991B1967A8CB33D61142E">
            <name>Context</name>
        </type>
        <type id="class_Context_4EFD973534F9193F9E5B011141F89048513B64AC">
            <name>Context</name>
        </type>
        <type id="class_Context_7B16DCE9151AEAFA7E4FBC0574682427E9671DA8">
            <name>Context</name>
        </type>
        <type id="class_Context_75FC2F2D6E93F894E52B9DFBB0F18197C9FD0DDC">
            <name>Context</name>
        </type>
        <type id="class_Context_02F31FF96E053A3DF820D8E4B971CCFB6A9A4B57">
            <name>Context</name>
        </type>
        <type id="class_Context_841A56DE41DD0AB7B25A8BCB8D9F5A83BCB2DE37">
            <name>Context</name>
        </type>
        <type id="class_Context_F0DC261DD6D7E3A5ED2569FFA8D2F14833EDED9F">
            <name>Context</name>
        </type>
        <type id="class_Context_652D7781151768F5F5858457503C406ABB2819CB">
            <name>Context</name>
        </type>
        <type id="class_Context_C25C44171B437A0A32F7C194770BDDAF7F1CA82B">
            <name>Context</name>
        </type>
        <type id="class_Context_0D38EBFA3B8CE5DE4C688CDBE9265EE0B385E318">
            <name>Context</name>
        </type>
        <type id="class_Context_28760DA6A191C0F87BEF1686160509C94DD3EFA3">
            <name>Context</name>
        </type>
        <type id="class_Context_BC3BB8F444784615345F4C890273023EB2A14E3D">
            <name>Context</name>
        </type>
        <type id="class_Context_4115E868A61003AF125A59354B4CFF76A4EB19EE">
            <name>Context</name>
        </type>
        <type id="class_Context_89EDFA550517CD67E7B25BB4F62DD042CFA7A3CF">
            <name>Context</name>
        </type>
        <type id="class_Context_8C8C5CC402BB573C90A4B318CAF2F3AF31FF8B23">
            <name>Context</name>
        </type>
        <type id="class_Context_81B3610077D7320CAD07FB69B83E98F11D58A8D2">
            <name>Context</name>
        </type>
        <type id="class_Context_DDF30A823AA8886AC67B2F371CA166A4D9204E75">
            <name>Context</name>
        </type>
        <type id="class_Context_D02C60F9EDCB39E71F63066878EC97015989E375">
            <name>Context</name>
        </type>
        <type id="class_Context_1C3B19DDCB03C13B3EB10B98A5E52D4D9E8403FF">
            <name>Context</name>
        </type>
        <type id="class_Context_9BCDFCA05B297A30FD0CAD2F1D39B35A5AFCEF9C">
            <name>Context</name>
        </type>
        <type derived="true" id="type.7407610">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_67B1C694634226C0E37D3B3E0BB627AA0D012CB7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407400">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_4EFD973534F9193F9E5B011141F89048513B64AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407394">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_BBB0C5B6E4063E3766DB9ECB062A8CCDF8B47C32"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407388">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_33C29259A66DB599520BA2BCFC60747287DE1E05"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407556">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_28760DA6A191C0F87BEF1686160509C94DD3EFA3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407562">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_841A56DE41DD0AB7B25A8BCB8D9F5A83BCB2DE37"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407568">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_75FC2F2D6E93F894E52B9DFBB0F18197C9FD0DDC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407574">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_02F31FF96E053A3DF820D8E4B971CCFB6A9A4B57"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407580">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_6C2B2778632044472FF996C78892E8FC9544CD21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407592">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_C25C44171B437A0A32F7C194770BDDAF7F1CA82B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407598">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_BC3BB8F444784615345F4C890273023EB2A14E3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407604">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_3B0DE0CB752A3EB0834B64DC34533AA91CD4D026"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407490">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_F59A44DA40DE61A821DA6FC17B4FE3A380548E64"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407610">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_67B1C694634226C0E37D3B3E0BB627AA0D012CB7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407496">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_81B3610077D7320CAD07FB69B83E98F11D58A8D2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407586">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_735AF91F79BA92A06AFD998BF1F0F1CD66012E54"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407502">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_8C8C5CC402BB573C90A4B318CAF2F3AF31FF8B23"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407460">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_DDF30A823AA8886AC67B2F371CA166A4D9204E75"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407550">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_4115E868A61003AF125A59354B4CFF76A4EB19EE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407472">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_89EDFA550517CD67E7B25BB4F62DD042CFA7A3CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407544">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_21D5F2E27BCD89F40CB159A87186F9909784F654"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407538">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_1C3B19DDCB03C13B3EB10B98A5E52D4D9E8403FF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407508">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_7B16DCE9151AEAFA7E4FBC0574682427E9671DA8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407532">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_E0BFAB3CF8493F6C3EC9873DA9A2AFD18769D657"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407526">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_0696CCAD44EE94C35FAF17044D8674D005CFAF53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407514">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_EA2D2185CD320E0489A0555539B3E301AB96E7BA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407520">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_09B218341C6EF989B44891A3ABB700053546616A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407478">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_24BAF8A11778D2640B939B3C113339E6EE1B8C93"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407454">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_D02C60F9EDCB39E71F63066878EC97015989E375"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407466">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_B453286DCF7FD24C50BBBE558831227D735C0BF0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407448">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_0D38EBFA3B8CE5DE4C688CDBE9265EE0B385E318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407442">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_C79FCF8BEA2118E3246991B1967A8CB33D61142E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407436">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_9BCDFCA05B297A30FD0CAD2F1D39B35A5AFCEF9C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407430">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_4B52889388B81759717F7A56542EFB699C4ED763"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407424">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_92E374EFC7697F3DA34B303B1289948934043732"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407418">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_5F81F6ABC400125701FB7AF54F3F0A5CFFEACAE2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407484">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_411D44FAB8E8E99A2D4E8FDD13DAAEA4BF0874E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407412">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_652D7781151768F5F5858457503C406ABB2819CB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407406">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_F0DC261DD6D7E3A5ED2569FFA8D2F14833EDED9F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407417">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_5F81F6ABC400125701FB7AF54F3F0A5CFFEACAE2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407471">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_89EDFA550517CD67E7B25BB4F62DD042CFA7A3CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407603">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_3B0DE0CB752A3EB0834B64DC34533AA91CD4D026"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407597">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_BC3BB8F444784615345F4C890273023EB2A14E3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407585">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_735AF91F79BA92A06AFD998BF1F0F1CD66012E54"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407507">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_7B16DCE9151AEAFA7E4FBC0574682427E9671DA8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407531">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_E0BFAB3CF8493F6C3EC9873DA9A2AFD18769D657"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407429">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_4B52889388B81759717F7A56542EFB699C4ED763"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407579">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_6C2B2778632044472FF996C78892E8FC9544CD21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407423">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_92E374EFC7697F3DA34B303B1289948934043732"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407501">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_8C8C5CC402BB573C90A4B318CAF2F3AF31FF8B23"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407513">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_EA2D2185CD320E0489A0555539B3E301AB96E7BA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407573">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_02F31FF96E053A3DF820D8E4B971CCFB6A9A4B57"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407609">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_67B1C694634226C0E37D3B3E0BB627AA0D012CB7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407459">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_DDF30A823AA8886AC67B2F371CA166A4D9204E75"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407525">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_0696CCAD44EE94C35FAF17044D8674D005CFAF53"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407567">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_75FC2F2D6E93F894E52B9DFBB0F18197C9FD0DDC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407477">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_24BAF8A11778D2640B939B3C113339E6EE1B8C93"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407561">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_841A56DE41DD0AB7B25A8BCB8D9F5A83BCB2DE37"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407537">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_1C3B19DDCB03C13B3EB10B98A5E52D4D9E8403FF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407555">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_28760DA6A191C0F87BEF1686160509C94DD3EFA3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407387">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_33C29259A66DB599520BA2BCFC60747287DE1E05"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407495">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_81B3610077D7320CAD07FB69B83E98F11D58A8D2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407465">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_B453286DCF7FD24C50BBBE558831227D735C0BF0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407519">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_09B218341C6EF989B44891A3ABB700053546616A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407483">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_411D44FAB8E8E99A2D4E8FDD13DAAEA4BF0874E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407393">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_BBB0C5B6E4063E3766DB9ECB062A8CCDF8B47C32"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407543">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_21D5F2E27BCD89F40CB159A87186F9909784F654"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407453">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_D02C60F9EDCB39E71F63066878EC97015989E375"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407399">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_4EFD973534F9193F9E5B011141F89048513B64AC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407447">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_0D38EBFA3B8CE5DE4C688CDBE9265EE0B385E318"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407405">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_F0DC261DD6D7E3A5ED2569FFA8D2F14833EDED9F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407489">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_F59A44DA40DE61A821DA6FC17B4FE3A380548E64"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407591">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_C25C44171B437A0A32F7C194770BDDAF7F1CA82B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407441">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_C79FCF8BEA2118E3246991B1967A8CB33D61142E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407411">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_652D7781151768F5F5858457503C406ABB2819CB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407549">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_4115E868A61003AF125A59354B4CFF76A4EB19EE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407435">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_9BCDFCA05B297A30FD0CAD2F1D39B35A5AFCEF9C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407609">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_67B1C694634226C0E37D3B3E0BB627AA0D012CB7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408856">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_09B218341C6EF989B44891A3ABB700053546616A"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408861">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_0696CCAD44EE94C35FAF17044D8674D005CFAF53"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408831">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_F59A44DA40DE61A821DA6FC17B4FE3A380548E64"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408846">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_7B16DCE9151AEAFA7E4FBC0574682427E9671DA8"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408841">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_8C8C5CC402BB573C90A4B318CAF2F3AF31FF8B23"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408785">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_B453286DCF7FD24C50BBBE558831227D735C0BF0"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408907">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_6C2B2778632044472FF996C78892E8FC9544CD21"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408709">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_33C29259A66DB599520BA2BCFC60747287DE1E05"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408927">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_3B0DE0CB752A3EB0834B64DC34533AA91CD4D026"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408749">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_9BCDFCA05B297A30FD0CAD2F1D39B35A5AFCEF9C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408744">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_4B52889388B81759717F7A56542EFB699C4ED763"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408892">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_841A56DE41DD0AB7B25A8BCB8D9F5A83BCB2DE37"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408775">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_D02C60F9EDCB39E71F63066878EC97015989E375"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408734">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_5F81F6ABC400125701FB7AF54F3F0A5CFFEACAE2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408922">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_BC3BB8F444784615345F4C890273023EB2A14E3D"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408714">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_BBB0C5B6E4063E3766DB9ECB062A8CCDF8B47C32"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408780">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_DDF30A823AA8886AC67B2F371CA166A4D9204E75"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408801">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_89EDFA550517CD67E7B25BB4F62DD042CFA7A3CF"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408887">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_28760DA6A191C0F87BEF1686160509C94DD3EFA3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408724">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_F0DC261DD6D7E3A5ED2569FFA8D2F14833EDED9F"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408739">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_92E374EFC7697F3DA34B303B1289948934043732"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408912">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_735AF91F79BA92A06AFD998BF1F0F1CD66012E54"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408754">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_C79FCF8BEA2118E3246991B1967A8CB33D61142E"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408836">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_81B3610077D7320CAD07FB69B83E98F11D58A8D2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408881">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_4115E868A61003AF125A59354B4CFF76A4EB19EE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408770">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_0D38EBFA3B8CE5DE4C688CDBE9265EE0B385E318"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408806">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_24BAF8A11778D2640B939B3C113339E6EE1B8C93"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408917">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_C25C44171B437A0A32F7C194770BDDAF7F1CA82B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408927">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_3B0DE0CB752A3EB0834B64DC34533AA91CD4D026"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408876">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_21D5F2E27BCD89F40CB159A87186F9909784F654"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408897">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_75FC2F2D6E93F894E52B9DFBB0F18197C9FD0DDC"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408871">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_1C3B19DDCB03C13B3EB10B98A5E52D4D9E8403FF"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408902">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_02F31FF96E053A3DF820D8E4B971CCFB6A9A4B57"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408826">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_411D44FAB8E8E99A2D4E8FDD13DAAEA4BF0874E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408866">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_E0BFAB3CF8493F6C3EC9873DA9A2AFD18769D657"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408729">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_652D7781151768F5F5858457503C406ABB2819CB"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408851">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_EA2D2185CD320E0489A0555539B3E301AB96E7BA"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408932">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_67B1C694634226C0E37D3B3E0BB627AA0D012CB7"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408719">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_4EFD973534F9193F9E5B011141F89048513B64AC"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408906">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_6C2B2778632044472FF996C78892E8FC9544CD21"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408800">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_89EDFA550517CD67E7B25BB4F62DD042CFA7A3CF"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408784">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_B453286DCF7FD24C50BBBE558831227D735C0BF0"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408860">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_0696CCAD44EE94C35FAF17044D8674D005CFAF53"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408774">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_D02C60F9EDCB39E71F63066878EC97015989E375"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408779">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_DDF30A823AA8886AC67B2F371CA166A4D9204E75"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408896">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_75FC2F2D6E93F894E52B9DFBB0F18197C9FD0DDC"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408835">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_81B3610077D7320CAD07FB69B83E98F11D58A8D2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408753">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_C79FCF8BEA2118E3246991B1967A8CB33D61142E"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408748">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_9BCDFCA05B297A30FD0CAD2F1D39B35A5AFCEF9C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408713">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_BBB0C5B6E4063E3766DB9ECB062A8CCDF8B47C32"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408830">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_F59A44DA40DE61A821DA6FC17B4FE3A380548E64"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408891">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_841A56DE41DD0AB7B25A8BCB8D9F5A83BCB2DE37"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408911">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_735AF91F79BA92A06AFD998BF1F0F1CD66012E54"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408931">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_67B1C694634226C0E37D3B3E0BB627AA0D012CB7"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408743">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_4B52889388B81759717F7A56542EFB699C4ED763"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408926">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_3B0DE0CB752A3EB0834B64DC34533AA91CD4D026"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408880">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_4115E868A61003AF125A59354B4CFF76A4EB19EE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408916">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_C25C44171B437A0A32F7C194770BDDAF7F1CA82B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408921">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_BC3BB8F444784615345F4C890273023EB2A14E3D"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408875">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_21D5F2E27BCD89F40CB159A87186F9909784F654"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408870">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_1C3B19DDCB03C13B3EB10B98A5E52D4D9E8403FF"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408718">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_4EFD973534F9193F9E5B011141F89048513B64AC"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408865">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_E0BFAB3CF8493F6C3EC9873DA9A2AFD18769D657"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408901">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_02F31FF96E053A3DF820D8E4B971CCFB6A9A4B57"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408825">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_411D44FAB8E8E99A2D4E8FDD13DAAEA4BF0874E9"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408921">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_BC3BB8F444784615345F4C890273023EB2A14E3D"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408723">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_F0DC261DD6D7E3A5ED2569FFA8D2F14833EDED9F"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408708">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_33C29259A66DB599520BA2BCFC60747287DE1E05"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408738">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_92E374EFC7697F3DA34B303B1289948934043732"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408733">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_5F81F6ABC400125701FB7AF54F3F0A5CFFEACAE2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408886">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_28760DA6A191C0F87BEF1686160509C94DD3EFA3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408845">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_7B16DCE9151AEAFA7E4FBC0574682427E9671DA8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408855">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_09B218341C6EF989B44891A3ABB700053546616A"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408728">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_652D7781151768F5F5858457503C406ABB2819CB"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408850">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_EA2D2185CD320E0489A0555539B3E301AB96E7BA"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408769">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_0D38EBFA3B8CE5DE4C688CDBE9265EE0B385E318"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408805">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_24BAF8A11778D2640B939B3C113339E6EE1B8C93"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408840">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_8C8C5CC402BB573C90A4B318CAF2F3AF31FF8B23"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390010" specialization="true">
            <name>Counter&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type id="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30" specialization="true">
            <name>Counter&lt;T></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="7389691"/>
            </content>
        </type>
        <type derived="true" id="type.3909">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3894">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3887">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3878">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3916">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3875">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A" specialization="true">
            <name>Counter&lt;U></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="7389701"/>
            </content>
        </type>
        <type derived="true" id="type.4271">
            <name>DeleteStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4217">
            <name>Deref&amp;&amp;</name>
            <content>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4274">
            <name>DestroyStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401030">
            <name>DomCDataSection*</name>
            <content>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408985">
            <name>DomCDataSection*&amp;</name>
            <content>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408984">
            <name>DomCDataSection**</name>
            <content>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401018">
            <name>DomCharacterData*</name>
            <content>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408987">
            <name>DomCharacterData*&amp;</name>
            <content>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408986">
            <name>DomCharacterData**</name>
            <content>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401048">
            <name>DomDocument*</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401085">
            <name>DomNode*</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407112">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3683">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407112">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4211">
            <name>DomObject&amp;&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3682">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407111">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401042">
            <name>DomProcessingInstruction*</name>
            <content>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408690">
            <name>DomProcessingInstruction*&amp;</name>
            <content>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408689">
            <name>DomProcessingInstruction**</name>
            <content>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7401024">
            <name>DomText*</name>
            <content>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408983">
            <name>DomText*&amp;</name>
            <content>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408982">
            <name>DomText**</name>
            <content>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ElementAndDocumentStringValueComputer_FECFC54D00B43DD7FFD455FAAAC9A1505830D3B5">
            <name>ElementAndDocumentStringValueComputer</name>
        </type>
        <type derived="true" id="type.7407643">
            <name>ElementAndDocumentStringValueComputer&amp;</name>
            <content>
                <baseType ref="class_ElementAndDocumentStringValueComputer_FECFC54D00B43DD7FFD455FAAAC9A1505830D3B5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407642">
            <name>ElementAndDocumentStringValueComputer*</name>
            <content>
                <baseType ref="class_ElementAndDocumentStringValueComputer_FECFC54D00B43DD7FFD455FAAAC9A1505830D3B5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_EqualityExprRule_C9D2203CE2ACA32C341339978A3B903F7EE1B9A7">
            <name>EqualityExprRule</name>
        </type>
        <type derived="true" id="type.7407403">
            <name>EqualityExprRule&amp;</name>
            <content>
                <baseType ref="class_EqualityExprRule_C9D2203CE2ACA32C341339978A3B903F7EE1B9A7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407402">
            <name>EqualityExprRule*</name>
            <content>
                <baseType ref="class_EqualityExprRule_C9D2203CE2ACA32C341339978A3B903F7EE1B9A7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408727">
            <name>EqualityExprRule*&amp;</name>
            <content>
                <baseType ref="class_EqualityExprRule_C9D2203CE2ACA32C341339978A3B903F7EE1B9A7"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408726">
            <name>EqualityExprRule**</name>
            <content>
                <baseType ref="class_EqualityExprRule_C9D2203CE2ACA32C341339978A3B903F7EE1B9A7"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4311">
            <name>ExpectationParser&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_ExprRule_B39E147CE8B00C11B8B9D67892EADA772A163CF2">
            <name>ExprRule</name>
        </type>
        <type derived="true" id="type.7407385">
            <name>ExprRule&amp;</name>
            <content>
                <baseType ref="class_ExprRule_B39E147CE8B00C11B8B9D67892EADA772A163CF2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407384">
            <name>ExprRule*</name>
            <content>
                <baseType ref="class_ExprRule_B39E147CE8B00C11B8B9D67892EADA772A163CF2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408712">
            <name>ExprRule*&amp;</name>
            <content>
                <baseType ref="class_ExprRule_B39E147CE8B00C11B8B9D67892EADA772A163CF2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408711">
            <name>ExprRule**</name>
            <content>
                <baseType ref="class_ExprRule_B39E147CE8B00C11B8B9D67892EADA772A163CF2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4277">
            <name>ExpressionStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_FilterExprRule_C3D86FA5F3E018C8377E73008405B05CA00C721E">
            <name>FilterExprRule</name>
        </type>
        <type derived="true" id="type.7407445">
            <name>FilterExprRule&amp;</name>
            <content>
                <baseType ref="class_FilterExprRule_C3D86FA5F3E018C8377E73008405B05CA00C721E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407444">
            <name>FilterExprRule*</name>
            <content>
                <baseType ref="class_FilterExprRule_C3D86FA5F3E018C8377E73008405B05CA00C721E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408773">
            <name>FilterExprRule*&amp;</name>
            <content>
                <baseType ref="class_FilterExprRule_C3D86FA5F3E018C8377E73008405B05CA00C721E"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408772">
            <name>FilterExprRule**</name>
            <content>
                <baseType ref="class_FilterExprRule_C3D86FA5F3E018C8377E73008405B05CA00C721E"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <argumentType ref="7389441"/>
            </content>
        </type>
        <type derived="true" id="type.3740">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="7389434"/>
                <argumentType ref="7389435"/>
                <argumentType ref="7389436"/>
            </content>
        </type>
        <type derived="true" id="type.3737">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3736">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="7389442"/>
                <argumentType ref="type.7390338"/>
                <argumentType ref="type.7390340"/>
            </content>
        </type>
        <type derived="true" id="type.3744">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3739">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3742">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="7389441"/>
                <argumentType ref="type.7390291"/>
                <argumentType ref="type.7390292"/>
            </content>
        </type>
        <type derived="true" id="type.3738">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3741">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3743">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_FunctionCallRule_C2C18B6D02B02E5EC30F2EFAB8B617A72FB13E14">
            <name>FunctionCallRule</name>
        </type>
        <type derived="true" id="type.7407559">
            <name>FunctionCallRule&amp;</name>
            <content>
                <baseType ref="class_FunctionCallRule_C2C18B6D02B02E5EC30F2EFAB8B617A72FB13E14"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407558">
            <name>FunctionCallRule*</name>
            <content>
                <baseType ref="class_FunctionCallRule_C2C18B6D02B02E5EC30F2EFAB8B617A72FB13E14"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408895">
            <name>FunctionCallRule*&amp;</name>
            <content>
                <baseType ref="class_FunctionCallRule_C2C18B6D02B02E5EC30F2EFAB8B617A72FB13E14"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408894">
            <name>FunctionCallRule**</name>
            <content>
                <baseType ref="class_FunctionCallRule_C2C18B6D02B02E5EC30F2EFAB8B617A72FB13E14"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_FunctionNameRule_F678CF02EC227955E978D21F32A58E37FB448B83">
            <name>FunctionNameRule</name>
        </type>
        <type derived="true" id="type.7407571">
            <name>FunctionNameRule&amp;</name>
            <content>
                <baseType ref="class_FunctionNameRule_F678CF02EC227955E978D21F32A58E37FB448B83"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407570">
            <name>FunctionNameRule*</name>
            <content>
                <baseType ref="class_FunctionNameRule_F678CF02EC227955E978D21F32A58E37FB448B83"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408905">
            <name>FunctionNameRule*&amp;</name>
            <content>
                <baseType ref="class_FunctionNameRule_F678CF02EC227955E978D21F32A58E37FB448B83"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408904">
            <name>FunctionNameRule**</name>
            <content>
                <baseType ref="class_FunctionNameRule_F678CF02EC227955E978D21F32A58E37FB448B83"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4283">
            <name>GotoCaseStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4268">
            <name>GotoStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="7389523"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <argumentType ref="7389525"/>
                <argumentType ref="7389526"/>
            </content>
        </type>
        <type derived="true" id="type.3778">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="7389552"/>
                <argumentType ref="7389553"/>
                <argumentType ref="7389554"/>
                <argumentType ref="7389555"/>
                <argumentType ref="7389556"/>
            </content>
        </type>
        <type derived="true" id="type.3798">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398376" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7398367"/>
                <argumentType ref="type.7398062"/>
                <argumentType ref="type.7398068"/>
            </content>
        </type>
        <type id="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="7389532"/>
                <argumentType ref="7389532"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="7389533"/>
                <argumentType ref="7389534"/>
            </content>
        </type>
        <type derived="true" id="type.3786">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7408037" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390126"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398376"/>
            </content>
        </type>
        <type id="type.4054" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390126"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398376"/>
            </content>
        </type>
        <type id="type.7408037" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390126"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398376"/>
            </content>
        </type>
        <type derived="true" id="type.7408039">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.7408037"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4056">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.4054"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408039">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.7408037"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408038">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.7408037"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4055">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.4054"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408038">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.7408037"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408043" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390129"/>
                <argumentType ref="type.7390128"/>
                <argumentType ref="type.7398376"/>
            </content>
        </type>
        <type id="type.4060" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390129"/>
                <argumentType ref="type.7390128"/>
                <argumentType ref="type.7398376"/>
            </content>
        </type>
        <type derived="true" id="type.4062">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.4060"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408045">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.7408043"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4061">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.4060"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408044">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.7408043"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4257">
            <name>Identifier&amp;&amp;</name>
            <content>
                <baseType ref="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4325">
            <name>InternalEntity&amp;&amp;</name>
            <content>
                <baseType ref="class_InternalEntity_724D2DA658DF130784EEFD7D00A1AF74339A3CBD"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4238">
            <name>Invoke&amp;&amp;</name>
            <content>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4308">
            <name>KleeneStarParser&amp;&amp;</name>
            <content>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401830" specialization="true">
            <name>Less&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2"/>
                <argumentType ref="type.7390124"/>
            </content>
        </type>
        <type id="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <argumentType ref="7389562"/>
            </content>
        </type>
        <type derived="true" id="type.3806">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3807">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390820" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390802"/>
            </content>
        </type>
        <type derived="true" id="type.3781">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390973" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390956"/>
            </content>
        </type>
        <type derived="true" id="type.3789">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390973"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391158" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7391139"/>
            </content>
        </type>
        <type derived="true" id="type.3802">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391158"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392525" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.3934">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392525"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7408101" specialization="true">
            <name>List&lt;String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390125"/>
            </content>
        </type>
        <type id="type.7401535" specialization="true">
            <name>List&lt;String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390125"/>
            </content>
        </type>
        <type id="type.4118" specialization="true">
            <name>List&lt;String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390125"/>
            </content>
        </type>
        <type id="type.7401535" specialization="true">
            <name>List&lt;String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390125"/>
            </content>
        </type>
        <type derived="true" id="type.7408103">
            <name>List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <baseType ref="type.7408101"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4120">
            <name>List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <baseType ref="type.4118"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4138">
            <name>List&lt;String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4118"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4149">
            <name>List&lt;String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401535"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4163">
            <name>List&lt;String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408101"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4119">
            <name>List&lt;String&lt;uchar>*>*</name>
            <content>
                <baseType ref="type.4118"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408102">
            <name>List&lt;String&lt;uchar>*>*</name>
            <content>
                <baseType ref="type.7408101"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="7389619"/>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="7389703"/>
            </content>
        </type>
        <type derived="true" id="type.3810">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3928">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3846">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7408370" specialization="true">
            <name>List&lt;UniquePtr&lt;System.XPath.XPathExpr>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7408296"/>
            </content>
        </type>
        <type derived="true" id="type.7408372">
            <name>List&lt;UniquePtr&lt;System.XPath.XPathExpr>>&amp;</name>
            <content>
                <baseType ref="type.7408370"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408390">
            <name>List&lt;UniquePtr&lt;System.XPath.XPathExpr>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408370"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408371">
            <name>List&lt;UniquePtr&lt;System.XPath.XPathExpr>>*</name>
            <content>
                <baseType ref="type.7408370"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408572" specialization="true">
            <name>List&lt;UniquePtr&lt;System.XPath.XPathFunction>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7408565"/>
            </content>
        </type>
        <type derived="true" id="type.7408574">
            <name>List&lt;UniquePtr&lt;System.XPath.XPathFunction>>&amp;</name>
            <content>
                <baseType ref="type.7408572"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408592">
            <name>List&lt;UniquePtr&lt;System.XPath.XPathFunction>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408572"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408573">
            <name>List&lt;UniquePtr&lt;System.XPath.XPathFunction>>*</name>
            <content>
                <baseType ref="type.7408572"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408474" specialization="true">
            <name>List&lt;UniquePtr&lt;System.XPath.XPathObject>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7408313"/>
            </content>
        </type>
        <type derived="true" id="type.7408476">
            <name>List&lt;UniquePtr&lt;System.XPath.XPathObject>>&amp;</name>
            <content>
                <baseType ref="type.7408474"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4171">
            <name>List&lt;UniquePtr&lt;System.XPath.XPathObject>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408474"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408475">
            <name>List&lt;UniquePtr&lt;System.XPath.XPathObject>>*</name>
            <content>
                <baseType ref="type.7408474"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408327" specialization="true">
            <name>List&lt;XPathObject*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7407645"/>
            </content>
        </type>
        <type derived="true" id="type.7408329">
            <name>List&lt;XPathObject*>&amp;</name>
            <content>
                <baseType ref="type.7408327"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408351">
            <name>List&lt;XPathObject*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408327"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408328">
            <name>List&lt;XPathObject*>*</name>
            <content>
                <baseType ref="type.7408327"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4261">
            <name>Literal&amp;&amp;</name>
            <content>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_LiteralRule_26A36860041AFA15A8244907908832D3BA1F8B2F">
            <name>LiteralRule</name>
        </type>
        <type derived="true" id="type.7407547">
            <name>LiteralRule&amp;</name>
            <content>
                <baseType ref="class_LiteralRule_26A36860041AFA15A8244907908832D3BA1F8B2F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407546">
            <name>LiteralRule*</name>
            <content>
                <baseType ref="class_LiteralRule_26A36860041AFA15A8244907908832D3BA1F8B2F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408884">
            <name>LiteralRule*&amp;</name>
            <content>
                <baseType ref="class_LiteralRule_26A36860041AFA15A8244907908832D3BA1F8B2F"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408883">
            <name>LiteralRule**</name>
            <content>
                <baseType ref="class_LiteralRule_26A36860041AFA15A8244907908832D3BA1F8B2F"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_LocalPartRule_E01DFD7415928B9FB50801B172F58E1F4AF80E13">
            <name>LocalPartRule</name>
        </type>
        <type derived="true" id="type.7407601">
            <name>LocalPartRule&amp;</name>
            <content>
                <baseType ref="class_LocalPartRule_E01DFD7415928B9FB50801B172F58E1F4AF80E13"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407600">
            <name>LocalPartRule*</name>
            <content>
                <baseType ref="class_LocalPartRule_E01DFD7415928B9FB50801B172F58E1F4AF80E13"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408930">
            <name>LocalPartRule*&amp;</name>
            <content>
                <baseType ref="class_LocalPartRule_E01DFD7415928B9FB50801B172F58E1F4AF80E13"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408929">
            <name>LocalPartRule**</name>
            <content>
                <baseType ref="class_LocalPartRule_E01DFD7415928B9FB50801B172F58E1F4AF80E13"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_LocationPathRule_09BA19EF54835D5B812935ACEFC622A4D287D581">
            <name>LocationPathRule</name>
        </type>
        <type derived="true" id="type.7407451">
            <name>LocationPathRule&amp;</name>
            <content>
                <baseType ref="class_LocationPathRule_09BA19EF54835D5B812935ACEFC622A4D287D581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407450">
            <name>LocationPathRule*</name>
            <content>
                <baseType ref="class_LocationPathRule_09BA19EF54835D5B812935ACEFC622A4D287D581"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408778">
            <name>LocationPathRule*&amp;</name>
            <content>
                <baseType ref="class_LocationPathRule_09BA19EF54835D5B812935ACEFC622A4D287D581"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408777">
            <name>LocationPathRule**</name>
            <content>
                <baseType ref="class_LocationPathRule_09BA19EF54835D5B812935ACEFC622A4D287D581"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1" specialization="true">
            <name>LockGuard&lt;Mtx></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="7389598"/>
            </content>
        </type>
        <type derived="true" id="type.3834">
            <name>LockGuard&lt;Mtx>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394867" specialization="true">
            <name>LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.4021">
            <name>LockGuard&lt;System.Threading.Mutex>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394867"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4294">
            <name>LvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7408391" specialization="true">
            <name>Map&lt;String&lt;uchar>, System.Dom.Axis, Less&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                <argumentType ref="type.7401830"/>
            </content>
        </type>
        <type derived="true" id="type.7408393">
            <name>Map&lt;String&lt;uchar>, System.Dom.Axis, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.7408391"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408392">
            <name>Map&lt;String&lt;uchar>, System.Dom.Axis, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.7408391"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408688">
            <name>Map&lt;String&lt;uchar>, System.Dom.Axis, Less&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.7408391"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408687">
            <name>Map&lt;String&lt;uchar>, System.Dom.Axis, Less&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.7408391"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408498" specialization="true">
            <name>Map&lt;String&lt;uchar>, XPathFunction*, Less&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7407612"/>
                <argumentType ref="type.7401830"/>
            </content>
        </type>
        <type derived="true" id="type.7408500">
            <name>Map&lt;String&lt;uchar>, XPathFunction*, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.7408498"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408499">
            <name>Map&lt;String&lt;uchar>, XPathFunction*, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.7408498"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408981">
            <name>Map&lt;String&lt;uchar>, XPathFunction*, Less&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.7408498"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408980">
            <name>Map&lt;String&lt;uchar>, XPathFunction*, Less&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.7408498"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3831">
            <name>Mtx&amp;</name>
            <content>
                <baseType ref="7389598"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="class_MultiplicativeExprRule_5FC379F0C8BAB78BB3B8FD2625054CDF9D2F9AEC">
            <name>MultiplicativeExprRule</name>
        </type>
        <type derived="true" id="type.7407421">
            <name>MultiplicativeExprRule&amp;</name>
            <content>
                <baseType ref="class_MultiplicativeExprRule_5FC379F0C8BAB78BB3B8FD2625054CDF9D2F9AEC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407420">
            <name>MultiplicativeExprRule*</name>
            <content>
                <baseType ref="class_MultiplicativeExprRule_5FC379F0C8BAB78BB3B8FD2625054CDF9D2F9AEC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408742">
            <name>MultiplicativeExprRule*&amp;</name>
            <content>
                <baseType ref="class_MultiplicativeExprRule_5FC379F0C8BAB78BB3B8FD2625054CDF9D2F9AEC"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408741">
            <name>MultiplicativeExprRule**</name>
            <content>
                <baseType ref="class_MultiplicativeExprRule_5FC379F0C8BAB78BB3B8FD2625054CDF9D2F9AEC"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NCNameRule_DC9F77010BA94F33F91C62E9D903BAEADC1E3237">
            <name>NCNameRule</name>
        </type>
        <type derived="true" id="type.7407607">
            <name>NCNameRule&amp;</name>
            <content>
                <baseType ref="class_NCNameRule_DC9F77010BA94F33F91C62E9D903BAEADC1E3237"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407606">
            <name>NCNameRule*</name>
            <content>
                <baseType ref="class_NCNameRule_DC9F77010BA94F33F91C62E9D903BAEADC1E3237"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408935">
            <name>NCNameRule*&amp;</name>
            <content>
                <baseType ref="class_NCNameRule_DC9F77010BA94F33F91C62E9D903BAEADC1E3237"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408934">
            <name>NCNameRule**</name>
            <content>
                <baseType ref="class_NCNameRule_DC9F77010BA94F33F91C62E9D903BAEADC1E3237"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NameTestRule_8BE8AE5731967CE07959D9B964A3B8E3FAF1C196">
            <name>NameTestRule</name>
        </type>
        <type derived="true" id="type.7407523">
            <name>NameTestRule&amp;</name>
            <content>
                <baseType ref="class_NameTestRule_8BE8AE5731967CE07959D9B964A3B8E3FAF1C196"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407522">
            <name>NameTestRule*</name>
            <content>
                <baseType ref="class_NameTestRule_8BE8AE5731967CE07959D9B964A3B8E3FAF1C196"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408864">
            <name>NameTestRule*&amp;</name>
            <content>
                <baseType ref="class_NameTestRule_8BE8AE5731967CE07959D9B964A3B8E3FAF1C196"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408863">
            <name>NameTestRule**</name>
            <content>
                <baseType ref="class_NameTestRule_8BE8AE5731967CE07959D9B964A3B8E3FAF1C196"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4256">
            <name>New&amp;&amp;</name>
            <content>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_NodeSelectionOp_BA86575766CE874A9DB1412EDFDB5641EC97F25A">
            <name>NodeSelectionOp</name>
        </type>
        <type derived="true" id="type.7407305">
            <name>NodeSelectionOp&amp;</name>
            <content>
                <baseType ref="class_NodeSelectionOp_BA86575766CE874A9DB1412EDFDB5641EC97F25A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407304">
            <name>NodeSelectionOp*</name>
            <content>
                <baseType ref="class_NodeSelectionOp_BA86575766CE874A9DB1412EDFDB5641EC97F25A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NodeTestRule_76AA79613231678B6EB292D2D66E9535BEAECDF4">
            <name>NodeTestRule</name>
        </type>
        <type derived="true" id="type.7407517">
            <name>NodeTestRule&amp;</name>
            <content>
                <baseType ref="class_NodeTestRule_76AA79613231678B6EB292D2D66E9535BEAECDF4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407516">
            <name>NodeTestRule*</name>
            <content>
                <baseType ref="class_NodeTestRule_76AA79613231678B6EB292D2D66E9535BEAECDF4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408859">
            <name>NodeTestRule*&amp;</name>
            <content>
                <baseType ref="class_NodeTestRule_76AA79613231678B6EB292D2D66E9535BEAECDF4"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408858">
            <name>NodeTestRule**</name>
            <content>
                <baseType ref="class_NodeTestRule_76AA79613231678B6EB292D2D66E9535BEAECDF4"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NodeTypeRule_4FB740942C98EFDFC5867D12F5436BFF7838F712">
            <name>NodeTypeRule</name>
        </type>
        <type derived="true" id="type.7407529">
            <name>NodeTypeRule&amp;</name>
            <content>
                <baseType ref="class_NodeTypeRule_4FB740942C98EFDFC5867D12F5436BFF7838F712"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407528">
            <name>NodeTypeRule*</name>
            <content>
                <baseType ref="class_NodeTypeRule_4FB740942C98EFDFC5867D12F5436BFF7838F712"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408869">
            <name>NodeTypeRule*&amp;</name>
            <content>
                <baseType ref="class_NodeTypeRule_4FB740942C98EFDFC5867D12F5436BFF7838F712"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408868">
            <name>NodeTypeRule**</name>
            <content>
                <baseType ref="class_NodeTypeRule_4FB740942C98EFDFC5867D12F5436BFF7838F712"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4214">
            <name>Not&amp;&amp;</name>
            <content>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_NumberRule_C2D91546E547388A7C1569EC48D773EFB161BC9A">
            <name>NumberRule</name>
        </type>
        <type derived="true" id="type.7407553">
            <name>NumberRule&amp;</name>
            <content>
                <baseType ref="class_NumberRule_C2D91546E547388A7C1569EC48D773EFB161BC9A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407552">
            <name>NumberRule*</name>
            <content>
                <baseType ref="class_NumberRule_C2D91546E547388A7C1569EC48D773EFB161BC9A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408890">
            <name>NumberRule*&amp;</name>
            <content>
                <baseType ref="class_NumberRule_C2D91546E547388A7C1569EC48D773EFB161BC9A"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408889">
            <name>NumberRule**</name>
            <content>
                <baseType ref="class_NumberRule_C2D91546E547388A7C1569EC48D773EFB161BC9A"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_Operator_70B4E9510AF8D8320A81B0066C9BD6BBC5BA8173">
            <name>Operator</name>
        </type>
        <type derived="true" id="type.7408324">
            <name>Operator&amp;</name>
            <content>
                <baseType ref="enumerated_type_Operator_70B4E9510AF8D8320A81B0066C9BD6BBC5BA8173"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408325">
            <name>Operator&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_Operator_70B4E9510AF8D8320A81B0066C9BD6BBC5BA8173"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408323">
            <name>Operator*</name>
            <content>
                <baseType ref="enumerated_type_Operator_70B4E9510AF8D8320A81B0066C9BD6BBC5BA8173"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4302">
            <name>OptionalParser&amp;&amp;</name>
            <content>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_OrExprRule_5EAC07BE4733481CB9B04507055279FC7CA2B683">
            <name>OrExprRule</name>
        </type>
        <type derived="true" id="type.7407391">
            <name>OrExprRule&amp;</name>
            <content>
                <baseType ref="class_OrExprRule_5EAC07BE4733481CB9B04507055279FC7CA2B683"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407390">
            <name>OrExprRule*</name>
            <content>
                <baseType ref="class_OrExprRule_5EAC07BE4733481CB9B04507055279FC7CA2B683"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408717">
            <name>OrExprRule*&amp;</name>
            <content>
                <baseType ref="class_OrExprRule_5EAC07BE4733481CB9B04507055279FC7CA2B683"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408716">
            <name>OrExprRule**</name>
            <content>
                <baseType ref="class_OrExprRule_5EAC07BE4733481CB9B04507055279FC7CA2B683"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4066" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4054"/>
                <argumentType ref="type.7388895"/>
            </content>
        </type>
        <type id="type.7408049" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.7408037"/>
                <argumentType ref="type.7388895"/>
            </content>
        </type>
        <type derived="true" id="type.4068">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.4066"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408051">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.7408049"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4067">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.4066"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408050">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.7408049"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408440" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, Pair&lt;String&lt;uchar>, System.Dom.Axis>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.7408432"/>
                <argumentType ref="type.7388895"/>
            </content>
        </type>
        <type derived="true" id="type.7408442">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, Pair&lt;String&lt;uchar>, System.Dom.Axis>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.7408440"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408684">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, Pair&lt;String&lt;uchar>, System.Dom.Axis>*>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408440"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408441">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, Pair&lt;String&lt;uchar>, System.Dom.Axis>*>, bool>*</name>
            <content>
                <baseType ref="type.7408440"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408547" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, Pair&lt;String&lt;uchar>, XPathFunction*>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.7408539"/>
                <argumentType ref="type.7388895"/>
            </content>
        </type>
        <type derived="true" id="type.7408549">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, Pair&lt;String&lt;uchar>, XPathFunction*>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.7408547"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408977">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, Pair&lt;String&lt;uchar>, XPathFunction*>*>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408547"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408548">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, Pair&lt;String&lt;uchar>, XPathFunction*>*>, bool>*</name>
            <content>
                <baseType ref="type.7408547"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408397" specialization="true">
            <name>Pair&lt;String&lt;uchar>, System.Dom.Axis></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
            </content>
        </type>
        <type derived="true" id="type.7408399">
            <name>Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;</name>
            <content>
                <baseType ref="type.7408397"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408653">
            <name>Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408397"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408398">
            <name>Pair&lt;String&lt;uchar>, System.Dom.Axis>*</name>
            <content>
                <baseType ref="type.7408397"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408504" specialization="true">
            <name>Pair&lt;String&lt;uchar>, XPathFunction*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7407612"/>
            </content>
        </type>
        <type derived="true" id="type.7408506">
            <name>Pair&lt;String&lt;uchar>, XPathFunction*>&amp;</name>
            <content>
                <baseType ref="type.7408504"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408945">
            <name>Pair&lt;String&lt;uchar>, XPathFunction*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408504"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408505">
            <name>Pair&lt;String&lt;uchar>, XPathFunction*>*</name>
            <content>
                <baseType ref="type.7408504"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="7389612"/>
                <argumentType ref="7389613"/>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="7389609"/>
                <argumentType ref="7389610"/>
            </content>
        </type>
        <type derived="true" id="type.7407116">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3687">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407116">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407115">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3686">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407115">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4315">
            <name>ParsingData&amp;&amp;</name>
            <content>
                <baseType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407118">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3689">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407118">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407117">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7397134">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407117">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3688">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PathExprRule_819DCCC1021E02B0E8E95C6D9431690474E94968">
            <name>PathExprRule</name>
        </type>
        <type derived="true" id="type.7407439">
            <name>PathExprRule&amp;</name>
            <content>
                <baseType ref="class_PathExprRule_819DCCC1021E02B0E8E95C6D9431690474E94968"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407438">
            <name>PathExprRule*</name>
            <content>
                <baseType ref="class_PathExprRule_819DCCC1021E02B0E8E95C6D9431690474E94968"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408757">
            <name>PathExprRule*&amp;</name>
            <content>
                <baseType ref="class_PathExprRule_819DCCC1021E02B0E8E95C6D9431690474E94968"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408756">
            <name>PathExprRule**</name>
            <content>
                <baseType ref="class_PathExprRule_819DCCC1021E02B0E8E95C6D9431690474E94968"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4296">
            <name>Pointer&amp;&amp;</name>
            <content>
                <baseType ref="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4305">
            <name>PositiveParser&amp;&amp;</name>
            <content>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4244">
            <name>PostfixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4241">
            <name>PostfixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_PredicateExprRule_15307B6535E39EDD4A594B0E9EE3B6E151526770">
            <name>PredicateExprRule</name>
        </type>
        <type derived="true" id="type.7407511">
            <name>PredicateExprRule&amp;</name>
            <content>
                <baseType ref="class_PredicateExprRule_15307B6535E39EDD4A594B0E9EE3B6E151526770"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407510">
            <name>PredicateExprRule*</name>
            <content>
                <baseType ref="class_PredicateExprRule_15307B6535E39EDD4A594B0E9EE3B6E151526770"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408854">
            <name>PredicateExprRule*&amp;</name>
            <content>
                <baseType ref="class_PredicateExprRule_15307B6535E39EDD4A594B0E9EE3B6E151526770"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408853">
            <name>PredicateExprRule**</name>
            <content>
                <baseType ref="class_PredicateExprRule_15307B6535E39EDD4A594B0E9EE3B6E151526770"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PredicateRule_1F145DFA11804C2F71FE14EA67FCF3A6030C2755">
            <name>PredicateRule</name>
        </type>
        <type derived="true" id="type.7407505">
            <name>PredicateRule&amp;</name>
            <content>
                <baseType ref="class_PredicateRule_1F145DFA11804C2F71FE14EA67FCF3A6030C2755"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407504">
            <name>PredicateRule*</name>
            <content>
                <baseType ref="class_PredicateRule_1F145DFA11804C2F71FE14EA67FCF3A6030C2755"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408849">
            <name>PredicateRule*&amp;</name>
            <content>
                <baseType ref="class_PredicateRule_1F145DFA11804C2F71FE14EA67FCF3A6030C2755"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408848">
            <name>PredicateRule**</name>
            <content>
                <baseType ref="class_PredicateRule_1F145DFA11804C2F71FE14EA67FCF3A6030C2755"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4226">
            <name>PrefixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4223">
            <name>PrefixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_PrefixRule_8CD8CFC8E3A42F82214431F7CCFAA22992F9B2C5">
            <name>PrefixRule</name>
        </type>
        <type derived="true" id="type.7407595">
            <name>PrefixRule&amp;</name>
            <content>
                <baseType ref="class_PrefixRule_8CD8CFC8E3A42F82214431F7CCFAA22992F9B2C5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407594">
            <name>PrefixRule*</name>
            <content>
                <baseType ref="class_PrefixRule_8CD8CFC8E3A42F82214431F7CCFAA22992F9B2C5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408925">
            <name>PrefixRule*&amp;</name>
            <content>
                <baseType ref="class_PrefixRule_8CD8CFC8E3A42F82214431F7CCFAA22992F9B2C5"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408924">
            <name>PrefixRule**</name>
            <content>
                <baseType ref="class_PrefixRule_8CD8CFC8E3A42F82214431F7CCFAA22992F9B2C5"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PrefixedNameRule_F36D92EAFE428A2CC71591E168F8AFE99FE5CC3D">
            <name>PrefixedNameRule</name>
        </type>
        <type derived="true" id="type.7407583">
            <name>PrefixedNameRule&amp;</name>
            <content>
                <baseType ref="class_PrefixedNameRule_F36D92EAFE428A2CC71591E168F8AFE99FE5CC3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407582">
            <name>PrefixedNameRule*</name>
            <content>
                <baseType ref="class_PrefixedNameRule_F36D92EAFE428A2CC71591E168F8AFE99FE5CC3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408915">
            <name>PrefixedNameRule*&amp;</name>
            <content>
                <baseType ref="class_PrefixedNameRule_F36D92EAFE428A2CC71591E168F8AFE99FE5CC3D"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408914">
            <name>PrefixedNameRule**</name>
            <content>
                <baseType ref="class_PrefixedNameRule_F36D92EAFE428A2CC71591E168F8AFE99FE5CC3D"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PrimaryExprRule_646630053F6708812B83FAD6EA18D29CF8D7491F">
            <name>PrimaryExprRule</name>
        </type>
        <type derived="true" id="type.7407535">
            <name>PrimaryExprRule&amp;</name>
            <content>
                <baseType ref="class_PrimaryExprRule_646630053F6708812B83FAD6EA18D29CF8D7491F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407534">
            <name>PrimaryExprRule*</name>
            <content>
                <baseType ref="class_PrimaryExprRule_646630053F6708812B83FAD6EA18D29CF8D7491F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408874">
            <name>PrimaryExprRule*&amp;</name>
            <content>
                <baseType ref="class_PrimaryExprRule_646630053F6708812B83FAD6EA18D29CF8D7491F"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408873">
            <name>PrimaryExprRule**</name>
            <content>
                <baseType ref="class_PrimaryExprRule_646630053F6708812B83FAD6EA18D29CF8D7491F"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_QNameRule_7456D8A47FD17D9938BDF3A56C6BD4248347E64F">
            <name>QNameRule</name>
        </type>
        <type derived="true" id="type.7407577">
            <name>QNameRule&amp;</name>
            <content>
                <baseType ref="class_QNameRule_7456D8A47FD17D9938BDF3A56C6BD4248347E64F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407576">
            <name>QNameRule*</name>
            <content>
                <baseType ref="class_QNameRule_7456D8A47FD17D9938BDF3A56C6BD4248347E64F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408910">
            <name>QNameRule*&amp;</name>
            <content>
                <baseType ref="class_QNameRule_7456D8A47FD17D9938BDF3A56C6BD4248347E64F"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408909">
            <name>QNameRule**</name>
            <content>
                <baseType ref="class_QNameRule_7456D8A47FD17D9938BDF3A56C6BD4248347E64F"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7398795" specialization="true">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396991"/>
                <argumentType ref="type.7398793"/>
                <argumentType ref="type.7398794"/>
            </content>
        </type>
        <type derived="true" id="type.4086">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398795"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393708" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389818"/>
                <argumentType ref="type.7393551"/>
                <argumentType ref="type.7393707"/>
            </content>
        </type>
        <type derived="true" id="type.3978">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393708"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394748" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389889"/>
                <argumentType ref="type.7394591"/>
                <argumentType ref="type.7394747"/>
            </content>
        </type>
        <type derived="true" id="type.4003">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394748"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394332" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389863"/>
                <argumentType ref="type.7394175"/>
                <argumentType ref="type.7394331"/>
            </content>
        </type>
        <type derived="true" id="type.3993">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394332"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394540" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389876"/>
                <argumentType ref="type.7394383"/>
                <argumentType ref="type.7394539"/>
            </content>
        </type>
        <type derived="true" id="type.3998">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394540"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393071" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389788"/>
                <argumentType ref="type.7392900"/>
                <argumentType ref="type.7393070"/>
            </content>
        </type>
        <type derived="true" id="type.3963">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393289" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389798"/>
                <argumentType ref="type.7393132"/>
                <argumentType ref="type.7393288"/>
            </content>
        </type>
        <type derived="true" id="type.3968">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393289"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398337" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398304"/>
                <argumentType ref="type.7398335"/>
                <argumentType ref="type.7398336"/>
            </content>
        </type>
        <type derived="true" id="type.4053">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398337"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398328" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398304"/>
                <argumentType ref="type.7398326"/>
                <argumentType ref="type.7398327"/>
            </content>
        </type>
        <type derived="true" id="type.4052">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398328"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390915" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390881"/>
                <argumentType ref="type.7390913"/>
                <argumentType ref="type.7390914"/>
            </content>
        </type>
        <type id="type.7390837" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390802"/>
                <argumentType ref="type.7390835"/>
                <argumentType ref="type.7390836"/>
            </content>
        </type>
        <type derived="true" id="type.3780">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390837"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3785">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390915"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390828" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390802"/>
                <argumentType ref="type.7390826"/>
                <argumentType ref="type.7390827"/>
            </content>
        </type>
        <type id="type.7390906" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390881"/>
                <argumentType ref="type.7390904"/>
                <argumentType ref="type.7390905"/>
            </content>
        </type>
        <type derived="true" id="type.3784">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390906"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3779">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390828"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393685" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393651"/>
                <argumentType ref="type.7393683"/>
                <argumentType ref="type.7393684"/>
            </content>
        </type>
        <type derived="true" id="type.3977">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393685"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393676" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393651"/>
                <argumentType ref="type.7393674"/>
                <argumentType ref="type.7393675"/>
            </content>
        </type>
        <type derived="true" id="type.3976">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393676"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394725" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394691"/>
                <argumentType ref="type.7394723"/>
                <argumentType ref="type.7394724"/>
            </content>
        </type>
        <type derived="true" id="type.4002">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394725"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394716" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394691"/>
                <argumentType ref="type.7394714"/>
                <argumentType ref="type.7394715"/>
            </content>
        </type>
        <type derived="true" id="type.4001">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394716"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394309" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394275"/>
                <argumentType ref="type.7394307"/>
                <argumentType ref="type.7394308"/>
            </content>
        </type>
        <type derived="true" id="type.3992">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394300" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394275"/>
                <argumentType ref="type.7394298"/>
                <argumentType ref="type.7394299"/>
            </content>
        </type>
        <type derived="true" id="type.3991">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394300"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394517" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394483"/>
                <argumentType ref="type.7394515"/>
                <argumentType ref="type.7394516"/>
            </content>
        </type>
        <type derived="true" id="type.3997">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394517"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394508" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394483"/>
                <argumentType ref="type.7394506"/>
                <argumentType ref="type.7394507"/>
            </content>
        </type>
        <type derived="true" id="type.3996">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394508"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393055" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393021"/>
                <argumentType ref="type.7393053"/>
                <argumentType ref="type.7393054"/>
            </content>
        </type>
        <type derived="true" id="type.3962">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393046" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393021"/>
                <argumentType ref="type.7393044"/>
                <argumentType ref="type.7393045"/>
            </content>
        </type>
        <type derived="true" id="type.3961">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393046"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393266" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393232"/>
                <argumentType ref="type.7393264"/>
                <argumentType ref="type.7393265"/>
            </content>
        </type>
        <type derived="true" id="type.3967">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393266"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393257" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393232"/>
                <argumentType ref="type.7393255"/>
                <argumentType ref="type.7393256"/>
            </content>
        </type>
        <type derived="true" id="type.3966">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393257"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393477" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393443"/>
                <argumentType ref="type.7393475"/>
                <argumentType ref="type.7393476"/>
            </content>
        </type>
        <type derived="true" id="type.3972">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393477"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393468" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393443"/>
                <argumentType ref="type.7393466"/>
                <argumentType ref="type.7393467"/>
            </content>
        </type>
        <type derived="true" id="type.3971">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393468"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394101" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394067"/>
                <argumentType ref="type.7394099"/>
                <argumentType ref="type.7394100"/>
            </content>
        </type>
        <type derived="true" id="type.3987">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394101"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394092" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394067"/>
                <argumentType ref="type.7394090"/>
                <argumentType ref="type.7394091"/>
            </content>
        </type>
        <type derived="true" id="type.3986">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394092"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393893" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393859"/>
                <argumentType ref="type.7393891"/>
                <argumentType ref="type.7393892"/>
            </content>
        </type>
        <type derived="true" id="type.3982">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393893"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393884" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393859"/>
                <argumentType ref="type.7393882"/>
                <argumentType ref="type.7393883"/>
            </content>
        </type>
        <type derived="true" id="type.3981">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393884"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401786" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7401752"/>
                <argumentType ref="type.7401784"/>
                <argumentType ref="type.7401785"/>
            </content>
        </type>
        <type derived="true" id="type.4153">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401786"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401777" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7401752"/>
                <argumentType ref="type.7401775"/>
                <argumentType ref="type.7401776"/>
            </content>
        </type>
        <type derived="true" id="type.4152">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401777"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7400557" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7400523"/>
                <argumentType ref="type.7400555"/>
                <argumentType ref="type.7400556"/>
            </content>
        </type>
        <type derived="true" id="type.4117">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400557"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7400548" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7400523"/>
                <argumentType ref="type.7400546"/>
                <argumentType ref="type.7400547"/>
            </content>
        </type>
        <type derived="true" id="type.4116">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400548"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398583" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398549"/>
                <argumentType ref="type.7398581"/>
                <argumentType ref="type.7398582"/>
            </content>
        </type>
        <type derived="true" id="type.4077">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398583"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398574" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398549"/>
                <argumentType ref="type.7398572"/>
                <argumentType ref="type.7398573"/>
            </content>
        </type>
        <type derived="true" id="type.4076">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398574"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398659" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398625"/>
                <argumentType ref="type.7398657"/>
                <argumentType ref="type.7398658"/>
            </content>
        </type>
        <type derived="true" id="type.4079">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398659"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398650" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398625"/>
                <argumentType ref="type.7398648"/>
                <argumentType ref="type.7398649"/>
            </content>
        </type>
        <type derived="true" id="type.4078">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398650"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398906" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398872"/>
                <argumentType ref="type.7398904"/>
                <argumentType ref="type.7398905"/>
            </content>
        </type>
        <type derived="true" id="type.4089">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398906"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398897" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398872"/>
                <argumentType ref="type.7398895"/>
                <argumentType ref="type.7398896"/>
            </content>
        </type>
        <type derived="true" id="type.4088">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398897"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398149" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398115"/>
                <argumentType ref="type.7398147"/>
                <argumentType ref="type.7398148"/>
            </content>
        </type>
        <type derived="true" id="type.4048">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398149"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398140" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398115"/>
                <argumentType ref="type.7398138"/>
                <argumentType ref="type.7398139"/>
            </content>
        </type>
        <type derived="true" id="type.4047">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398140"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393609" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393575"/>
                <argumentType ref="type.7393607"/>
                <argumentType ref="type.7393608"/>
            </content>
        </type>
        <type derived="true" id="type.3975">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393609"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393600" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393575"/>
                <argumentType ref="type.7393598"/>
                <argumentType ref="type.7393599"/>
            </content>
        </type>
        <type derived="true" id="type.3974">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393600"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394649" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394615"/>
                <argumentType ref="type.7394647"/>
                <argumentType ref="type.7394648"/>
            </content>
        </type>
        <type derived="true" id="type.4000">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394649"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394640" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394615"/>
                <argumentType ref="type.7394638"/>
                <argumentType ref="type.7394639"/>
            </content>
        </type>
        <type derived="true" id="type.3999">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394640"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394233" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394199"/>
                <argumentType ref="type.7394231"/>
                <argumentType ref="type.7394232"/>
            </content>
        </type>
        <type derived="true" id="type.3990">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394233"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394224" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394199"/>
                <argumentType ref="type.7394222"/>
                <argumentType ref="type.7394223"/>
            </content>
        </type>
        <type derived="true" id="type.3989">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394224"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394441" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394407"/>
                <argumentType ref="type.7394439"/>
                <argumentType ref="type.7394440"/>
            </content>
        </type>
        <type derived="true" id="type.3995">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394441"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394432" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394407"/>
                <argumentType ref="type.7394430"/>
                <argumentType ref="type.7394431"/>
            </content>
        </type>
        <type derived="true" id="type.3994">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394432"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392958" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7392924"/>
                <argumentType ref="type.7392956"/>
                <argumentType ref="type.7392957"/>
            </content>
        </type>
        <type derived="true" id="type.3960">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392958"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392949" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7392924"/>
                <argumentType ref="type.7392947"/>
                <argumentType ref="type.7392948"/>
            </content>
        </type>
        <type derived="true" id="type.3959">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392949"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393190" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393156"/>
                <argumentType ref="type.7393188"/>
                <argumentType ref="type.7393189"/>
            </content>
        </type>
        <type derived="true" id="type.3965">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393190"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393181" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393156"/>
                <argumentType ref="type.7393179"/>
                <argumentType ref="type.7393180"/>
            </content>
        </type>
        <type derived="true" id="type.3964">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393181"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393401" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393367"/>
                <argumentType ref="type.7393399"/>
                <argumentType ref="type.7393400"/>
            </content>
        </type>
        <type derived="true" id="type.3970">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393401"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393392" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393367"/>
                <argumentType ref="type.7393390"/>
                <argumentType ref="type.7393391"/>
            </content>
        </type>
        <type derived="true" id="type.3969">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394025" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393991"/>
                <argumentType ref="type.7394023"/>
                <argumentType ref="type.7394024"/>
            </content>
        </type>
        <type derived="true" id="type.3985">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394025"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394016" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393991"/>
                <argumentType ref="type.7394014"/>
                <argumentType ref="type.7394015"/>
            </content>
        </type>
        <type derived="true" id="type.3984">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394016"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393817" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393783"/>
                <argumentType ref="type.7393815"/>
                <argumentType ref="type.7393816"/>
            </content>
        </type>
        <type derived="true" id="type.3980">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393817"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393808" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393783"/>
                <argumentType ref="type.7393806"/>
                <argumentType ref="type.7393807"/>
            </content>
        </type>
        <type derived="true" id="type.3979">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393808"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398421" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398389"/>
                <argumentType ref="type.7398419"/>
                <argumentType ref="type.7398420"/>
            </content>
        </type>
        <type derived="true" id="type.4070">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398421"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398412" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398389"/>
                <argumentType ref="type.7398410"/>
                <argumentType ref="type.7398411"/>
            </content>
        </type>
        <type derived="true" id="type.4069">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398412"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391064" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391030"/>
                <argumentType ref="type.7391062"/>
                <argumentType ref="type.7391063"/>
            </content>
        </type>
        <type id="type.7390990" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390956"/>
                <argumentType ref="type.7390988"/>
                <argumentType ref="type.7390989"/>
            </content>
        </type>
        <type derived="true" id="type.3788">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3792">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391055" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391030"/>
                <argumentType ref="type.7391053"/>
                <argumentType ref="type.7391054"/>
            </content>
        </type>
        <type id="type.7390981" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390956"/>
                <argumentType ref="type.7390979"/>
                <argumentType ref="type.7390980"/>
            </content>
        </type>
        <type derived="true" id="type.3791">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3787">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391175" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391139"/>
                <argumentType ref="type.7391173"/>
                <argumentType ref="type.7391174"/>
            </content>
        </type>
        <type derived="true" id="type.3801">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391175"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391166" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391139"/>
                <argumentType ref="type.7391164"/>
                <argumentType ref="type.7391165"/>
            </content>
        </type>
        <type derived="true" id="type.3800">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391166"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389731"/>
                <argumentType ref="type.7392750"/>
                <argumentType ref="type.7392751"/>
            </content>
        </type>
        <type derived="true" id="type.3948">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3930">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3940">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3936">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3952">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3956">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3944">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389726"/>
                <argumentType ref="type.7392505"/>
                <argumentType ref="type.7392506"/>
            </content>
        </type>
        <type derived="true" id="type.3935">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3939">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3947">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3955">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3951">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3943">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3929">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401920" specialization="true">
            <name>RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7401085"/>
                <argumentType ref="type.7401918"/>
                <argumentType ref="type.7401919"/>
            </content>
        </type>
        <type derived="true" id="type.4155">
            <name>RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401920"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393500" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389808"/>
                <argumentType ref="type.7393343"/>
                <argumentType ref="type.7393499"/>
            </content>
        </type>
        <type derived="true" id="type.3973">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393500"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398686" specialization="true">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7397096"/>
                <argumentType ref="type.7398601"/>
                <argumentType ref="type.7398682"/>
            </content>
        </type>
        <type derived="true" id="type.4080">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398686"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398821" specialization="true">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7397104"/>
                <argumentType ref="type.7398819"/>
                <argumentType ref="type.7398820"/>
            </content>
        </type>
        <type derived="true" id="type.4087">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398821"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394117" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389850"/>
                <argumentType ref="type.7393967"/>
                <argumentType ref="type.7394116"/>
            </content>
        </type>
        <type derived="true" id="type.3988">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394117"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398234" specialization="true">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7397335"/>
                <argumentType ref="type.7398232"/>
                <argumentType ref="type.7398233"/>
            </content>
        </type>
        <type derived="true" id="type.4051">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398234"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393916" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389831"/>
                <argumentType ref="type.7393759"/>
                <argumentType ref="type.7393915"/>
            </content>
        </type>
        <type derived="true" id="type.3983">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393916"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392538" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392501"/>
                <argumentType ref="type.7392500"/>
            </content>
        </type>
        <type id="type.7392632" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392595"/>
                <argumentType ref="type.7392594"/>
            </content>
        </type>
        <type id="type.7392726" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392689"/>
                <argumentType ref="type.7392688"/>
            </content>
        </type>
        <type id="type.7392820" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392783"/>
                <argumentType ref="type.7392782"/>
            </content>
        </type>
        <type id="type.7392679" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392642"/>
                <argumentType ref="type.7392641"/>
            </content>
        </type>
        <type id="type.7392585" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392548"/>
                <argumentType ref="type.7392547"/>
            </content>
        </type>
        <type id="type.7392773" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392739"/>
                <argumentType ref="type.7392738"/>
            </content>
        </type>
        <type id="type.7392538" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392501"/>
                <argumentType ref="type.7392500"/>
            </content>
        </type>
        <type derived="true" id="type.3950">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392726"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3942">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392632"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3946">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392679"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3938">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392585"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3958">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3954">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392773"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3933">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392538"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392813" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392786"/>
                <argumentType ref="type.7392785"/>
            </content>
        </type>
        <type id="type.7392531" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392504"/>
                <argumentType ref="type.7392503"/>
            </content>
        </type>
        <type id="type.7392719" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392692"/>
                <argumentType ref="type.7392691"/>
            </content>
        </type>
        <type id="type.7392766" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392742"/>
                <argumentType ref="type.7392741"/>
            </content>
        </type>
        <type id="type.7392578" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392551"/>
                <argumentType ref="type.7392550"/>
            </content>
        </type>
        <type id="type.7392625" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392598"/>
                <argumentType ref="type.7392597"/>
            </content>
        </type>
        <type id="type.7392672" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392645"/>
                <argumentType ref="type.7392644"/>
            </content>
        </type>
        <type id="type.7392766" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392742"/>
                <argumentType ref="type.7392741"/>
            </content>
        </type>
        <type derived="true" id="type.3957">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392813"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3937">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392578"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3941">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392625"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3953">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392766"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3932">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392531"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3949">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392719"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3945">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392672"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390071" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390036"/>
                <argumentType ref="type.7390038"/>
                <argumentType ref="type.7390037"/>
            </content>
        </type>
        <type derived="true" id="type.3702">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390064" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390036"/>
                <argumentType ref="type.7390041"/>
                <argumentType ref="type.7390040"/>
            </content>
        </type>
        <type derived="true" id="type.3701">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4131" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398979"/>
                <argumentType ref="type.7399090"/>
            </content>
        </type>
        <type id="type.7401548" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398979"/>
                <argumentType ref="type.7399090"/>
            </content>
        </type>
        <type id="type.7408114" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398979"/>
                <argumentType ref="type.7399090"/>
            </content>
        </type>
        <type derived="true" id="type.7408116">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.7408114"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4133">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.4131"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4151">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401548"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4137">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4131"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4165">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408114"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4132">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.4131"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408115">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.7408114"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408107" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398924"/>
                <argumentType ref="type.7399088"/>
            </content>
        </type>
        <type id="type.7401541" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398924"/>
                <argumentType ref="type.7399088"/>
            </content>
        </type>
        <type id="type.7400586" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398924"/>
                <argumentType ref="type.7399088"/>
            </content>
        </type>
        <type id="type.4124" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398924"/>
                <argumentType ref="type.7399088"/>
            </content>
        </type>
        <type id="type.7408107" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398924"/>
                <argumentType ref="type.7399088"/>
            </content>
        </type>
        <type derived="true" id="type.7408109">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.7408107"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4126">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.4124"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4164">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408107"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4150">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401541"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4139">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400586"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4130">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4124"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4125">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.4124"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408108">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.7408107"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390161" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390126"/>
                <argumentType ref="type.7390125"/>
            </content>
        </type>
        <type derived="true" id="type.3721">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390161"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390154" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390129"/>
                <argumentType ref="type.7390128"/>
            </content>
        </type>
        <type derived="true" id="type.3720">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390154"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390116" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390079"/>
                <argumentType ref="type.7390081"/>
                <argumentType ref="type.7390080"/>
            </content>
        </type>
        <type derived="true" id="type.3711">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390116"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390109" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390079"/>
                <argumentType ref="type.7390084"/>
                <argumentType ref="type.7390083"/>
            </content>
        </type>
        <type derived="true" id="type.3710">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390109"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398771" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_AttrOrVar_50B6EF23E232C2A406B7F5C94499D4CC0CC6D353"/>
                <argumentType ref="type.7397327"/>
                <argumentType ref="type.7397326"/>
            </content>
        </type>
        <type derived="true" id="type.4085">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398771"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398757" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.7397162"/>
                <argumentType ref="type.7397161"/>
            </content>
        </type>
        <type derived="true" id="type.4084">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398757"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398750" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.7397165"/>
                <argumentType ref="type.7397164"/>
            </content>
        </type>
        <type derived="true" id="type.4083">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398508" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.7398490"/>
                <argumentType ref="type.7398489"/>
            </content>
        </type>
        <type derived="true" id="type.4075">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398508"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398501" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.7398498"/>
                <argumentType ref="type.7398499"/>
            </content>
        </type>
        <type derived="true" id="type.4074">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398501"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394778" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.7389902"/>
                <argumentType ref="type.7389901"/>
            </content>
        </type>
        <type derived="true" id="type.4005">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394778"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394771" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.7389905"/>
                <argumentType ref="type.7389904"/>
            </content>
        </type>
        <type derived="true" id="type.4004">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394771"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389624"/>
                <argumentType ref="7389625"/>
                <argumentType ref="7389626"/>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389621"/>
                <argumentType ref="7389622"/>
                <argumentType ref="7389623"/>
            </content>
        </type>
        <type derived="true" id="type.3850">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3848">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3847">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3849">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3851">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3852">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3853">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389575"/>
                <argumentType ref="type.7391424"/>
                <argumentType ref="type.7391425"/>
            </content>
        </type>
        <type derived="true" id="type.3845">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3809">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3813">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3927">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3815">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389575"/>
                <argumentType ref="type.7391414"/>
                <argumentType ref="type.7391415"/>
            </content>
        </type>
        <type derived="true" id="type.3814">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3812">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3808">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3844">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3926">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401815" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7401802"/>
                <argumentType ref="type.7401807"/>
                <argumentType ref="type.7401806"/>
            </content>
        </type>
        <type derived="true" id="type.4154">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401815"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401955" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7401936"/>
                <argumentType ref="type.7401941"/>
                <argumentType ref="type.7401940"/>
            </content>
        </type>
        <type derived="true" id="type.4156">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401955"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396806" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396790"/>
                <argumentType ref="type.7396795"/>
                <argumentType ref="type.7396794"/>
            </content>
        </type>
        <type derived="true" id="type.4036">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396806"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396866" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396850"/>
                <argumentType ref="type.7396855"/>
                <argumentType ref="type.7396854"/>
            </content>
        </type>
        <type derived="true" id="type.4037">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396866"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396705" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396665"/>
                <argumentType ref="type.7396670"/>
                <argumentType ref="type.7396669"/>
            </content>
        </type>
        <type derived="true" id="type.4034">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396705"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396757" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396744"/>
                <argumentType ref="type.7396749"/>
                <argumentType ref="type.7396748"/>
            </content>
        </type>
        <type derived="true" id="type.4035">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396757"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398474" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398452"/>
                <argumentType ref="type.7398457"/>
                <argumentType ref="type.7398456"/>
            </content>
        </type>
        <type derived="true" id="type.4073">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398474"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398047" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398025"/>
                <argumentType ref="type.7398030"/>
                <argumentType ref="type.7398029"/>
            </content>
        </type>
        <type derived="true" id="type.4046">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398732" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398712"/>
                <argumentType ref="type.7398714"/>
                <argumentType ref="type.7398713"/>
            </content>
        </type>
        <type derived="true" id="type.4082">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398732"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398725" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398712"/>
                <argumentType ref="type.7398717"/>
                <argumentType ref="type.7398716"/>
            </content>
        </type>
        <type derived="true" id="type.4081">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398725"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398017" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7397997"/>
                <argumentType ref="type.7397999"/>
                <argumentType ref="type.7397998"/>
            </content>
        </type>
        <type derived="true" id="type.4045">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398017"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398010" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7397997"/>
                <argumentType ref="type.7398002"/>
                <argumentType ref="type.7398001"/>
            </content>
        </type>
        <type derived="true" id="type.4044">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398010"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394807" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394787"/>
                <argumentType ref="type.7394789"/>
                <argumentType ref="type.7394788"/>
            </content>
        </type>
        <type derived="true" id="type.4007">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394807"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394800" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394787"/>
                <argumentType ref="type.7394792"/>
                <argumentType ref="type.7394791"/>
            </content>
        </type>
        <type derived="true" id="type.4006">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394800"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394903" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394883"/>
                <argumentType ref="type.7394885"/>
                <argumentType ref="type.7394884"/>
            </content>
        </type>
        <type derived="true" id="type.4023">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394903"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394896" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394883"/>
                <argumentType ref="type.7394888"/>
                <argumentType ref="type.7394887"/>
            </content>
        </type>
        <type derived="true" id="type.4022">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394896"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394835" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394815"/>
                <argumentType ref="type.7394817"/>
                <argumentType ref="type.7394816"/>
            </content>
        </type>
        <type derived="true" id="type.4009">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394835"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394828" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394815"/>
                <argumentType ref="type.7394820"/>
                <argumentType ref="type.7394819"/>
            </content>
        </type>
        <type derived="true" id="type.4008">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394828"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394938" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394918"/>
                <argumentType ref="type.7394920"/>
                <argumentType ref="type.7394919"/>
            </content>
        </type>
        <type derived="true" id="type.4025">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394938"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394931" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394918"/>
                <argumentType ref="type.7394923"/>
                <argumentType ref="type.7394922"/>
            </content>
        </type>
        <type derived="true" id="type.4024">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394931"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7408383" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathExpr>, UniquePtr&lt;System.XPath.XPathExpr>&amp;, UniquePtr&lt;System.XPath.XPathExpr>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7408296"/>
                <argumentType ref="type.7408298"/>
                <argumentType ref="type.7408297"/>
            </content>
        </type>
        <type derived="true" id="type.7408385">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathExpr>, UniquePtr&lt;System.XPath.XPathExpr>&amp;, UniquePtr&lt;System.XPath.XPathExpr>*>&amp;</name>
            <content>
                <baseType ref="type.7408383"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408389">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathExpr>, UniquePtr&lt;System.XPath.XPathExpr>&amp;, UniquePtr&lt;System.XPath.XPathExpr>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408383"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408384">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathExpr>, UniquePtr&lt;System.XPath.XPathExpr>&amp;, UniquePtr&lt;System.XPath.XPathExpr>*>*</name>
            <content>
                <baseType ref="type.7408383"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408376" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathExpr>, const UniquePtr&lt;System.XPath.XPathExpr>&amp;, const UniquePtr&lt;System.XPath.XPathExpr>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7408296"/>
                <argumentType ref="type.7408301"/>
                <argumentType ref="type.7408300"/>
            </content>
        </type>
        <type derived="true" id="type.7408378">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathExpr>, const UniquePtr&lt;System.XPath.XPathExpr>&amp;, const UniquePtr&lt;System.XPath.XPathExpr>*>&amp;</name>
            <content>
                <baseType ref="type.7408376"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4168">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathExpr>, const UniquePtr&lt;System.XPath.XPathExpr>&amp;, const UniquePtr&lt;System.XPath.XPathExpr>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408376"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408377">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathExpr>, const UniquePtr&lt;System.XPath.XPathExpr>&amp;, const UniquePtr&lt;System.XPath.XPathExpr>*>*</name>
            <content>
                <baseType ref="type.7408376"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408585" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathFunction>, UniquePtr&lt;System.XPath.XPathFunction>&amp;, UniquePtr&lt;System.XPath.XPathFunction>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7408565"/>
                <argumentType ref="type.7408567"/>
                <argumentType ref="type.7408566"/>
            </content>
        </type>
        <type derived="true" id="type.7408587">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathFunction>, UniquePtr&lt;System.XPath.XPathFunction>&amp;, UniquePtr&lt;System.XPath.XPathFunction>*>&amp;</name>
            <content>
                <baseType ref="type.7408585"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408591">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathFunction>, UniquePtr&lt;System.XPath.XPathFunction>&amp;, UniquePtr&lt;System.XPath.XPathFunction>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408585"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408586">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathFunction>, UniquePtr&lt;System.XPath.XPathFunction>&amp;, UniquePtr&lt;System.XPath.XPathFunction>*>*</name>
            <content>
                <baseType ref="type.7408585"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408578" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathFunction>, const UniquePtr&lt;System.XPath.XPathFunction>&amp;, const UniquePtr&lt;System.XPath.XPathFunction>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7408565"/>
                <argumentType ref="type.7408570"/>
                <argumentType ref="type.7408569"/>
            </content>
        </type>
        <type derived="true" id="type.7408580">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathFunction>, const UniquePtr&lt;System.XPath.XPathFunction>&amp;, const UniquePtr&lt;System.XPath.XPathFunction>*>&amp;</name>
            <content>
                <baseType ref="type.7408578"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4172">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathFunction>, const UniquePtr&lt;System.XPath.XPathFunction>&amp;, const UniquePtr&lt;System.XPath.XPathFunction>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408578"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408579">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathFunction>, const UniquePtr&lt;System.XPath.XPathFunction>&amp;, const UniquePtr&lt;System.XPath.XPathFunction>*>*</name>
            <content>
                <baseType ref="type.7408578"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408487" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathObject>, UniquePtr&lt;System.XPath.XPathObject>&amp;, UniquePtr&lt;System.XPath.XPathObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7408313"/>
                <argumentType ref="type.7408315"/>
                <argumentType ref="type.7408314"/>
            </content>
        </type>
        <type derived="true" id="type.7408489">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathObject>, UniquePtr&lt;System.XPath.XPathObject>&amp;, UniquePtr&lt;System.XPath.XPathObject>*>&amp;</name>
            <content>
                <baseType ref="type.7408487"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4170">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathObject>, UniquePtr&lt;System.XPath.XPathObject>&amp;, UniquePtr&lt;System.XPath.XPathObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408487"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408488">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathObject>, UniquePtr&lt;System.XPath.XPathObject>&amp;, UniquePtr&lt;System.XPath.XPathObject>*>*</name>
            <content>
                <baseType ref="type.7408487"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408480" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathObject>, const UniquePtr&lt;System.XPath.XPathObject>&amp;, const UniquePtr&lt;System.XPath.XPathObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7408313"/>
                <argumentType ref="type.7408318"/>
                <argumentType ref="type.7408317"/>
            </content>
        </type>
        <type derived="true" id="type.7408482">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathObject>, const UniquePtr&lt;System.XPath.XPathObject>&amp;, const UniquePtr&lt;System.XPath.XPathObject>*>&amp;</name>
            <content>
                <baseType ref="type.7408480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4169">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathObject>, const UniquePtr&lt;System.XPath.XPathObject>&amp;, const UniquePtr&lt;System.XPath.XPathObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408480"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408481">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathObject>, const UniquePtr&lt;System.XPath.XPathObject>&amp;, const UniquePtr&lt;System.XPath.XPathObject>*>*</name>
            <content>
                <baseType ref="type.7408480"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7400624" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, UniquePtr&lt;System.Xml.Entity>&amp;, UniquePtr&lt;System.Xml.Entity>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7400601"/>
                <argumentType ref="type.7400603"/>
                <argumentType ref="type.7400602"/>
            </content>
        </type>
        <type derived="true" id="type.4141">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, UniquePtr&lt;System.Xml.Entity>&amp;, UniquePtr&lt;System.Xml.Entity>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400624"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7400617" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, const UniquePtr&lt;System.Xml.Entity>&amp;, const UniquePtr&lt;System.Xml.Entity>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7400601"/>
                <argumentType ref="type.7400606"/>
                <argumentType ref="type.7400605"/>
            </content>
        </type>
        <type derived="true" id="type.4140">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, const UniquePtr&lt;System.Xml.Entity>&amp;, const UniquePtr&lt;System.Xml.Entity>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400617"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7408344" specialization="true">
            <name>RandomAccessIter&lt;XPathObject*, XPathObject*&amp;, XPathObject**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7407645"/>
                <argumentType ref="type.7408342"/>
                <argumentType ref="type.7408343"/>
            </content>
        </type>
        <type derived="true" id="type.7408346">
            <name>RandomAccessIter&lt;XPathObject*, XPathObject*&amp;, XPathObject**>&amp;</name>
            <content>
                <baseType ref="type.7408344"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4167">
            <name>RandomAccessIter&lt;XPathObject*, XPathObject*&amp;, XPathObject**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408344"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408345">
            <name>RandomAccessIter&lt;XPathObject*, XPathObject*&amp;, XPathObject**>*</name>
            <content>
                <baseType ref="type.7408344"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408335" specialization="true">
            <name>RandomAccessIter&lt;XPathObject*, const XPathObject*&amp;, const XPathObject**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7407645"/>
                <argumentType ref="type.7408333"/>
                <argumentType ref="type.7408334"/>
            </content>
        </type>
        <type derived="true" id="type.7408337">
            <name>RandomAccessIter&lt;XPathObject*, const XPathObject*&amp;, const XPathObject**>&amp;</name>
            <content>
                <baseType ref="type.7408335"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4166">
            <name>RandomAccessIter&lt;XPathObject*, const XPathObject*&amp;, const XPathObject**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408335"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408336">
            <name>RandomAccessIter&lt;XPathObject*, const XPathObject*&amp;, const XPathObject**>*</name>
            <content>
                <baseType ref="type.7408335"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396426" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7397651" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.3823" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7401239" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7400025" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7407805" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7391524" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7407805" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type derived="true" id="type.7407807">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.7407805"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3825">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.3823"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3830">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391524"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4114">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400025"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3829">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3823"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4147">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401239"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4032">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396426"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4042">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397651"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4161">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7407805"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407806">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.7407805"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3824">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.3823"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407806">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.7407805"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3694" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.7407676" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.7397522" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.7399896" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.7407676" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.7401110" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.7396297" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type derived="true" id="type.3696">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.3694"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407678">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.7407676"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3700">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3694"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4028">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396297"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4143">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401110"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4157">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7407676"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4110">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399896"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4038">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397522"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3695">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.3694"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407677">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.7407676"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7399915" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7397541" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7401129" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7390140" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.3713" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7407695" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7396316" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7407695" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type derived="true" id="type.3715">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.3713"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407697">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.7407695"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3722">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390140"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3719">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3713"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4030">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396316"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4145">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401129"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4040">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397541"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4159">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7407695"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4112">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399915"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3714">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.3713"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407696">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.7407695"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7394852" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7394849"/>
                <argumentType ref="type.7394850"/>
            </content>
        </type>
        <type derived="true" id="type.4010">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394852"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7407994" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.4011" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7397840" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7400214" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7394859" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7400214" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7396615" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7401428" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type derived="true" id="type.4013">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.4011"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407996">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.7407994"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4115">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400214"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4033">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396615"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4018">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394859"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4017">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4011"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4148">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401428"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4043">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397840"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4162">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7407994"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4012">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.4011"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407995">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.7407994"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390183" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7390180"/>
                <argumentType ref="type.7390181"/>
            </content>
        </type>
        <type derived="true" id="type.3723">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390183"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7407706" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7390190" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7396327" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7399926" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7407706" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.3724" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7397552" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7401140" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type derived="true" id="type.3726">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.3724"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407708">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.7407706"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3731">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390190"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4160">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7407706"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4113">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399926"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4031">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396327"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4146">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401140"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3730">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3724"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4041">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397552"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407707">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.7407706"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3725">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.3724"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407707">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.7407706"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7401119" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7407685" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.3703" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7407685" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7396306" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7399905" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7397531" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7390095" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type derived="true" id="type.7407687">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.7407685"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3705">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.3703"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4039">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397531"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4029">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396306"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3709">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3703"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3712">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390095"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4111">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399905"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4144">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401119"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4158">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7407685"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407686">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.7407685"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3704">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.3703"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407686">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.7407685"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389580"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <argumentType ref="7389582"/>
            </content>
        </type>
        <type derived="true" id="type.3820">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389659"/>
                <argumentType ref="7389660"/>
                <argumentType ref="7389661"/>
                <argumentType ref="7389662"/>
            </content>
        </type>
        <type id="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389659"/>
                <argumentType ref="7389660"/>
                <argumentType ref="7389661"/>
                <argumentType ref="7389662"/>
            </content>
        </type>
        <type derived="true" id="type.3862">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7408411" specialization="true">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Dom.Axis>, SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>, Less&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7408397"/>
                <argumentType ref="type.7408401"/>
                <argumentType ref="type.7401830"/>
            </content>
        </type>
        <type derived="true" id="type.7408413">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Dom.Axis>, SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.7408411"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408439">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Dom.Axis>, SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>, Less&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408411"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408412">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Dom.Axis>, SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.7408411"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408518" specialization="true">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, XPathFunction*>, SelectFirst&lt;String&lt;uchar>, XPathFunction*>, Less&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7408504"/>
                <argumentType ref="type.7408508"/>
                <argumentType ref="type.7401830"/>
            </content>
        </type>
        <type derived="true" id="type.7408520">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, XPathFunction*>, SelectFirst&lt;String&lt;uchar>, XPathFunction*>, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.7408518"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408546">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, XPathFunction*>, SelectFirst&lt;String&lt;uchar>, XPathFunction*>, Less&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408518"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408519">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, XPathFunction*>, SelectFirst&lt;String&lt;uchar>, XPathFunction*>, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.7408518"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389665"/>
                <argumentType ref="7389665"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="7389666"/>
            </content>
        </type>
        <type derived="true" id="type.3867">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7408425" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.7408397"/>
            </content>
        </type>
        <type derived="true" id="type.7408427">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>>&amp;</name>
            <content>
                <baseType ref="type.7408425"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408426">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>>*</name>
            <content>
                <baseType ref="type.7408425"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408665">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>>*&amp;</name>
            <content>
                <baseType ref="type.7408425"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408666">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7408425"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408664">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>>**</name>
            <content>
                <baseType ref="type.7408425"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408532" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.7408504"/>
            </content>
        </type>
        <type derived="true" id="type.7408534">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>>&amp;</name>
            <content>
                <baseType ref="type.7408532"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408533">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>>*</name>
            <content>
                <baseType ref="type.7408532"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408952">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>>*&amp;</name>
            <content>
                <baseType ref="type.7408532"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408953">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7408532"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408951">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>>**</name>
            <content>
                <baseType ref="type.7408532"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407110">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3681">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407110">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4197">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407109">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3680">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407109">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7391488" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.7391449"/>
                <argumentType ref="type.7391448"/>
            </content>
        </type>
        <type derived="true" id="type.3819">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391488"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391470" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.7391459"/>
                <argumentType ref="type.7391468"/>
            </content>
        </type>
        <type derived="true" id="type.3818">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391470"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7408432" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, Pair&lt;String&lt;uchar>, System.Dom.Axis>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.7408397"/>
                <argumentType ref="type.7408399"/>
                <argumentType ref="type.7408398"/>
            </content>
        </type>
        <type derived="true" id="type.7408434">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, Pair&lt;String&lt;uchar>, System.Dom.Axis>*>&amp;</name>
            <content>
                <baseType ref="type.7408432"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408438">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, Pair&lt;String&lt;uchar>, System.Dom.Axis>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408432"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408433">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, Pair&lt;String&lt;uchar>, System.Dom.Axis>*>*</name>
            <content>
                <baseType ref="type.7408432"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408419" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, const Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, const Pair&lt;String&lt;uchar>, System.Dom.Axis>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.7408397"/>
                <argumentType ref="type.7408408"/>
                <argumentType ref="type.7408417"/>
            </content>
        </type>
        <type derived="true" id="type.7408421">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, const Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, const Pair&lt;String&lt;uchar>, System.Dom.Axis>*>&amp;</name>
            <content>
                <baseType ref="type.7408419"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408431">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, const Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, const Pair&lt;String&lt;uchar>, System.Dom.Axis>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408419"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408420">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, const Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, const Pair&lt;String&lt;uchar>, System.Dom.Axis>*>*</name>
            <content>
                <baseType ref="type.7408419"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408539" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, Pair&lt;String&lt;uchar>, XPathFunction*>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.7408504"/>
                <argumentType ref="type.7408506"/>
                <argumentType ref="type.7408505"/>
            </content>
        </type>
        <type derived="true" id="type.7408541">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, Pair&lt;String&lt;uchar>, XPathFunction*>*>&amp;</name>
            <content>
                <baseType ref="type.7408539"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408545">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, Pair&lt;String&lt;uchar>, XPathFunction*>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408539"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408540">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, Pair&lt;String&lt;uchar>, XPathFunction*>*>*</name>
            <content>
                <baseType ref="type.7408539"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408526" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, const Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, const Pair&lt;String&lt;uchar>, XPathFunction*>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.7408504"/>
                <argumentType ref="type.7408515"/>
                <argumentType ref="type.7408524"/>
            </content>
        </type>
        <type derived="true" id="type.7408528">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, const Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, const Pair&lt;String&lt;uchar>, XPathFunction*>*>&amp;</name>
            <content>
                <baseType ref="type.7408526"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408538">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, const Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, const Pair&lt;String&lt;uchar>, XPathFunction*>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408526"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408527">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, const Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, const Pair&lt;String&lt;uchar>, XPathFunction*>*>*</name>
            <content>
                <baseType ref="type.7408526"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389655"/>
                <argumentType ref="7389656"/>
                <argumentType ref="7389657"/>
            </content>
        </type>
        <type derived="true" id="type.3859">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3858">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389667"/>
                <argumentType ref="type.7391857"/>
                <argumentType ref="type.7391859"/>
            </content>
        </type>
        <type derived="true" id="type.3866">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3872">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3870">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389667"/>
                <argumentType ref="type.7391834"/>
                <argumentType ref="type.7391843"/>
            </content>
        </type>
        <type derived="true" id="type.3865">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3871">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3869">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389660"/>
                <argumentType ref="type.7391741"/>
                <argumentType ref="type.7391743"/>
            </content>
        </type>
        <type derived="true" id="type.3861">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389660"/>
                <argumentType ref="type.7391726"/>
                <argumentType ref="type.7391727"/>
            </content>
        </type>
        <type derived="true" id="type.3860">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_RelationalExprRule_D039970BAB735CF62E2238483338F33F6640B258">
            <name>RelationalExprRule</name>
        </type>
        <type derived="true" id="type.7407409">
            <name>RelationalExprRule&amp;</name>
            <content>
                <baseType ref="class_RelationalExprRule_D039970BAB735CF62E2238483338F33F6640B258"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407408">
            <name>RelationalExprRule*</name>
            <content>
                <baseType ref="class_RelationalExprRule_D039970BAB735CF62E2238483338F33F6640B258"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408732">
            <name>RelationalExprRule*&amp;</name>
            <content>
                <baseType ref="class_RelationalExprRule_D039970BAB735CF62E2238483338F33F6640B258"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408731">
            <name>RelationalExprRule**</name>
            <content>
                <baseType ref="class_RelationalExprRule_D039970BAB735CF62E2238483338F33F6640B258"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_RelativeLocationPathRule_A071B0DEE34F2AB67921F9EA18C4A81B1B8515BA">
            <name>RelativeLocationPathRule</name>
        </type>
        <type derived="true" id="type.7407463">
            <name>RelativeLocationPathRule&amp;</name>
            <content>
                <baseType ref="class_RelativeLocationPathRule_A071B0DEE34F2AB67921F9EA18C4A81B1B8515BA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407462">
            <name>RelativeLocationPathRule*</name>
            <content>
                <baseType ref="class_RelativeLocationPathRule_A071B0DEE34F2AB67921F9EA18C4A81B1B8515BA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408788">
            <name>RelativeLocationPathRule*&amp;</name>
            <content>
                <baseType ref="class_RelativeLocationPathRule_A071B0DEE34F2AB67921F9EA18C4A81B1B8515BA"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408787">
            <name>RelativeLocationPathRule**</name>
            <content>
                <baseType ref="class_RelativeLocationPathRule_A071B0DEE34F2AB67921F9EA18C4A81B1B8515BA"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4265">
            <name>ReturnStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4295">
            <name>RvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7408401" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, System.Dom.Axis></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
            </content>
        </type>
        <type derived="true" id="type.7408410">
            <name>SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>&amp;</name>
            <content>
                <baseType ref="type.7408401"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408657">
            <name>SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408401"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408409">
            <name>SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>*</name>
            <content>
                <baseType ref="type.7408401"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408671">
            <name>SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>*&amp;</name>
            <content>
                <baseType ref="type.7408401"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408670">
            <name>SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>**</name>
            <content>
                <baseType ref="type.7408401"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408508" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, XPathFunction*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7407612"/>
            </content>
        </type>
        <type derived="true" id="type.7408517">
            <name>SelectFirst&lt;String&lt;uchar>, XPathFunction*>&amp;</name>
            <content>
                <baseType ref="type.7408508"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408947">
            <name>SelectFirst&lt;String&lt;uchar>, XPathFunction*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408508"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408516">
            <name>SelectFirst&lt;String&lt;uchar>, XPathFunction*>*</name>
            <content>
                <baseType ref="type.7408508"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408957">
            <name>SelectFirst&lt;String&lt;uchar>, XPathFunction*>*&amp;</name>
            <content>
                <baseType ref="type.7408508"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408956">
            <name>SelectFirst&lt;String&lt;uchar>, XPathFunction*>**</name>
            <content>
                <baseType ref="type.7408508"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076" specialization="true">
            <name>SharedCount&lt;T></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="7389680"/>
            </content>
        </type>
        <type derived="true" id="type.3917">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3895">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3889">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3911">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3879">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F" specialization="true">
            <name>SharedPtr&lt;T></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="7389698"/>
            </content>
        </type>
        <type derived="true" id="type.3919">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3897">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3912">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4247">
            <name>SizeOf&amp;&amp;</name>
            <content>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4262">
            <name>Statement&amp;&amp;</name>
            <content>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4184">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_StepRule_82328C83BEE878DC4C65A7550C7A146E293A6F00">
            <name>StepRule</name>
        </type>
        <type derived="true" id="type.7407475">
            <name>StepRule&amp;</name>
            <content>
                <baseType ref="class_StepRule_82328C83BEE878DC4C65A7550C7A146E293A6F00"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407474">
            <name>StepRule*</name>
            <content>
                <baseType ref="class_StepRule_82328C83BEE878DC4C65A7550C7A146E293A6F00"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408809">
            <name>StepRule*&amp;</name>
            <content>
                <baseType ref="class_StepRule_82328C83BEE878DC4C65A7550C7A146E293A6F00"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408808">
            <name>StepRule**</name>
            <content>
                <baseType ref="class_StepRule_82328C83BEE878DC4C65A7550C7A146E293A6F00"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="7389726"/>
            </content>
        </type>
        <type derived="true" id="type.3931">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390124" specialization="true">
            <name>String&lt;uchar></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7388908"/>
            </content>
        </type>
        <type derived="true" id="type.7390126">
            <name>String&lt;uchar>&amp;</name>
            <content>
                <baseType ref="type.7390124"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7390125">
            <name>String&lt;uchar>*</name>
            <content>
                <baseType ref="type.7390124"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7398979">
            <name>String&lt;uchar>*&amp;</name>
            <content>
                <baseType ref="type.7390124"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7399090">
            <name>String&lt;uchar>**</name>
            <content>
                <baseType ref="type.7390124"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4280">
            <name>SwitchStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3783">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3795">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3797">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389543"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3805">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389560"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3733">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389432"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3735">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3857">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3855">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3843">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="7389619"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3925">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="7389703"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3811">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="7389573"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4258">
            <name>TemplateId&amp;&amp;</name>
            <content>
                <baseType ref="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4286">
            <name>ThrowStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4314">
            <name>TokenParser&amp;&amp;</name>
            <content>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4289">
            <name>TryStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4210">
            <name>Type&amp;&amp;</name>
            <content>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4250">
            <name>TypeName&amp;&amp;</name>
            <content>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_UnaryExprRule_41C649CE059D371A482CEA38ECD548C9E33ACFBD">
            <name>UnaryExprRule</name>
        </type>
        <type derived="true" id="type.7407427">
            <name>UnaryExprRule&amp;</name>
            <content>
                <baseType ref="class_UnaryExprRule_41C649CE059D371A482CEA38ECD548C9E33ACFBD"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407426">
            <name>UnaryExprRule*</name>
            <content>
                <baseType ref="class_UnaryExprRule_41C649CE059D371A482CEA38ECD548C9E33ACFBD"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408747">
            <name>UnaryExprRule*&amp;</name>
            <content>
                <baseType ref="class_UnaryExprRule_41C649CE059D371A482CEA38ECD548C9E33ACFBD"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408746">
            <name>UnaryExprRule**</name>
            <content>
                <baseType ref="class_UnaryExprRule_41C649CE059D371A482CEA38ECD548C9E33ACFBD"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408405" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, String&lt;uchar>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.7408397"/>
                <argumentType ref="type.7390124"/>
            </content>
        </type>
        <type derived="true" id="type.7408407">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.7408405"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408658">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408405"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408406">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.7408405"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408512" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, String&lt;uchar>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.7408504"/>
                <argumentType ref="type.7390124"/>
            </content>
        </type>
        <type derived="true" id="type.7408514">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.7408512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408948">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408512"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408513">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.7408512"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4232">
            <name>UnaryMinus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4229">
            <name>UnaryPlus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_UnionExprRule_B99ACB846B247BE79CEA6903F36837E8000C32EF">
            <name>UnionExprRule</name>
        </type>
        <type derived="true" id="type.7407433">
            <name>UnionExprRule&amp;</name>
            <content>
                <baseType ref="class_UnionExprRule_B99ACB846B247BE79CEA6903F36837E8000C32EF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407432">
            <name>UnionExprRule*</name>
            <content>
                <baseType ref="class_UnionExprRule_B99ACB846B247BE79CEA6903F36837E8000C32EF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408752">
            <name>UnionExprRule*&amp;</name>
            <content>
                <baseType ref="class_UnionExprRule_B99ACB846B247BE79CEA6903F36837E8000C32EF"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408751">
            <name>UnionExprRule**</name>
            <content>
                <baseType ref="class_UnionExprRule_B99ACB846B247BE79CEA6903F36837E8000C32EF"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7391499" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.7391476"/>
            </content>
        </type>
        <type derived="true" id="type.3821">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391499"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7408443" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.7408425"/>
            </content>
        </type>
        <type derived="true" id="type.7408445">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>>>&amp;</name>
            <content>
                <baseType ref="type.7408443"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408449">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408443"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408444">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>>>*</name>
            <content>
                <baseType ref="type.7408443"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408550" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.7408532"/>
            </content>
        </type>
        <type derived="true" id="type.7408552">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>>>&amp;</name>
            <content>
                <baseType ref="type.7408550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408556">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408551">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>>>*</name>
            <content>
                <baseType ref="type.7408550"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7391814" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.3868">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391814"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391756" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
            </content>
        </type>
        <type derived="true" id="type.3864">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391756"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7401705" specialization="true">
            <name>UniquePtr&lt;System.Dom.DomNode></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
            </content>
        </type>
        <type derived="true" id="type.7401711">
            <name>UniquePtr&lt;System.Dom.DomNode>&amp;&amp;</name>
            <content>
                <baseType ref="type.7401705"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7395012" specialization="true">
            <name>UniquePtr&lt;System.Exception></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
            </content>
        </type>
        <type derived="true" id="type.4027">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.7395012"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398983" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ExpectationFailure_EBDBB0FC1DDED5BE7E15008622BB34AFCA7E9A8C"/>
            </content>
        </type>
        <type derived="true" id="type.4090">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398983"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398186" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
            </content>
        </type>
        <type derived="true" id="type.4049">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398186"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399109" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingException_71361E1F1BFEB5E7F55F5F6E472A696283973396"/>
            </content>
        </type>
        <type derived="true" id="type.4091">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399109"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398193" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XmlLog_8F1C6843100321A56502C0710D6A400B6E4C7704"/>
            </content>
        </type>
        <type derived="true" id="type.4050">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398193"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7408450" specialization="true">
            <name>UniquePtr&lt;System.XPath.AxisMap></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_AxisMap_439D4C04BC3B186AB056547E5B4D4A5D10D00A5E"/>
            </content>
        </type>
        <type derived="true" id="type.7408452">
            <name>UniquePtr&lt;System.XPath.AxisMap>&amp;</name>
            <content>
                <baseType ref="type.7408450"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408456">
            <name>UniquePtr&lt;System.XPath.AxisMap>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408450"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408451">
            <name>UniquePtr&lt;System.XPath.AxisMap>*</name>
            <content>
                <baseType ref="type.7408450"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408289" specialization="true">
            <name>UniquePtr&lt;System.XPath.XPathDebug></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XPathDebug_1C2BEF2B9EA73DDB3A8B4AFA3612DB04B949B963"/>
            </content>
        </type>
        <type derived="true" id="type.7408291">
            <name>UniquePtr&lt;System.XPath.XPathDebug>&amp;</name>
            <content>
                <baseType ref="type.7408289"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408295">
            <name>UniquePtr&lt;System.XPath.XPathDebug>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408289"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408290">
            <name>UniquePtr&lt;System.XPath.XPathDebug>*</name>
            <content>
                <baseType ref="type.7408289"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408296" specialization="true">
            <name>UniquePtr&lt;System.XPath.XPathExpr></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
            </content>
        </type>
        <type derived="true" id="type.7408298">
            <name>UniquePtr&lt;System.XPath.XPathExpr>&amp;</name>
            <content>
                <baseType ref="type.7408296"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408302">
            <name>UniquePtr&lt;System.XPath.XPathExpr>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408296"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408297">
            <name>UniquePtr&lt;System.XPath.XPathExpr>*</name>
            <content>
                <baseType ref="type.7408296"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408643">
            <name>UniquePtr&lt;System.XPath.XPathExpr>*&amp;</name>
            <content>
                <baseType ref="type.7408296"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408644">
            <name>UniquePtr&lt;System.XPath.XPathExpr>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7408296"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408642">
            <name>UniquePtr&lt;System.XPath.XPathExpr>**</name>
            <content>
                <baseType ref="type.7408296"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408303" specialization="true">
            <name>UniquePtr&lt;System.XPath.XPathExpressionParser></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XPathExpressionParser_F078FB4A0E8588AEF4683A48C55651DE936AED9B"/>
            </content>
        </type>
        <type derived="true" id="type.7408305">
            <name>UniquePtr&lt;System.XPath.XPathExpressionParser>&amp;</name>
            <content>
                <baseType ref="type.7408303"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408309">
            <name>UniquePtr&lt;System.XPath.XPathExpressionParser>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408303"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408304">
            <name>UniquePtr&lt;System.XPath.XPathExpressionParser>*</name>
            <content>
                <baseType ref="type.7408303"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408565" specialization="true">
            <name>UniquePtr&lt;System.XPath.XPathFunction></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
            </content>
        </type>
        <type derived="true" id="type.7408567">
            <name>UniquePtr&lt;System.XPath.XPathFunction>&amp;</name>
            <content>
                <baseType ref="type.7408565"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408571">
            <name>UniquePtr&lt;System.XPath.XPathFunction>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408565"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408566">
            <name>UniquePtr&lt;System.XPath.XPathFunction>*</name>
            <content>
                <baseType ref="type.7408565"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408965">
            <name>UniquePtr&lt;System.XPath.XPathFunction>*&amp;</name>
            <content>
                <baseType ref="type.7408565"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408966">
            <name>UniquePtr&lt;System.XPath.XPathFunction>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7408565"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408964">
            <name>UniquePtr&lt;System.XPath.XPathFunction>**</name>
            <content>
                <baseType ref="type.7408565"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408558" specialization="true">
            <name>UniquePtr&lt;System.XPath.XPathFunctionLibrary></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XPathFunctionLibrary_5044787DDFDAF4AF5701F92F8775A709B4496547"/>
            </content>
        </type>
        <type derived="true" id="type.7408560">
            <name>UniquePtr&lt;System.XPath.XPathFunctionLibrary>&amp;</name>
            <content>
                <baseType ref="type.7408558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408564">
            <name>UniquePtr&lt;System.XPath.XPathFunctionLibrary>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408558"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408559">
            <name>UniquePtr&lt;System.XPath.XPathFunctionLibrary>*</name>
            <content>
                <baseType ref="type.7408558"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408354" specialization="true">
            <name>UniquePtr&lt;System.XPath.XPathNodeSet></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XPathNodeSet_70D9F2F055A2EAFCF3988BC033AE454E204F643A"/>
            </content>
        </type>
        <type derived="true" id="type.7408356">
            <name>UniquePtr&lt;System.XPath.XPathNodeSet>&amp;</name>
            <content>
                <baseType ref="type.7408354"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408360">
            <name>UniquePtr&lt;System.XPath.XPathNodeSet>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408354"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408355">
            <name>UniquePtr&lt;System.XPath.XPathNodeSet>*</name>
            <content>
                <baseType ref="type.7408354"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408363" specialization="true">
            <name>UniquePtr&lt;System.XPath.XPathNodeTestExpr></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
            </content>
        </type>
        <type derived="true" id="type.7408365">
            <name>UniquePtr&lt;System.XPath.XPathNodeTestExpr>&amp;</name>
            <content>
                <baseType ref="type.7408363"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408369">
            <name>UniquePtr&lt;System.XPath.XPathNodeTestExpr>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408363"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408364">
            <name>UniquePtr&lt;System.XPath.XPathNodeTestExpr>*</name>
            <content>
                <baseType ref="type.7408363"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408313" specialization="true">
            <name>UniquePtr&lt;System.XPath.XPathObject></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
            </content>
        </type>
        <type derived="true" id="type.7408315">
            <name>UniquePtr&lt;System.XPath.XPathObject>&amp;</name>
            <content>
                <baseType ref="type.7408313"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408319">
            <name>UniquePtr&lt;System.XPath.XPathObject>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408313"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408314">
            <name>UniquePtr&lt;System.XPath.XPathObject>*</name>
            <content>
                <baseType ref="type.7408313"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408695">
            <name>UniquePtr&lt;System.XPath.XPathObject>*&amp;</name>
            <content>
                <baseType ref="type.7408313"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408694">
            <name>UniquePtr&lt;System.XPath.XPathObject>**</name>
            <content>
                <baseType ref="type.7408313"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="7389934"/>
            </content>
        </type>
        <type derived="true" id="type.4026">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_UnprefixedNameRule_66945B89A94958C04F087B66D254788103B93F3F">
            <name>UnprefixedNameRule</name>
        </type>
        <type derived="true" id="type.7407589">
            <name>UnprefixedNameRule&amp;</name>
            <content>
                <baseType ref="class_UnprefixedNameRule_66945B89A94958C04F087B66D254788103B93F3F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407588">
            <name>UnprefixedNameRule*</name>
            <content>
                <baseType ref="class_UnprefixedNameRule_66945B89A94958C04F087B66D254788103B93F3F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408920">
            <name>UnprefixedNameRule*&amp;</name>
            <content>
                <baseType ref="class_UnprefixedNameRule_66945B89A94958C04F087B66D254788103B93F3F"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408919">
            <name>UnprefixedNameRule**</name>
            <content>
                <baseType ref="class_UnprefixedNameRule_66945B89A94958C04F087B66D254788103B93F3F"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3822">
            <name>Value&amp;</name>
            <content>
                <baseType ref="7389581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399484" specialization="true">
            <name>ValueObject&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7390124"/>
            </content>
        </type>
        <type derived="true" id="type.4108">
            <name>ValueObject&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7408810" specialization="true">
            <name>ValueObject&lt;System.Dom.Axis></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
            </content>
        </type>
        <type derived="true" id="type.7408812">
            <name>ValueObject&lt;System.Dom.Axis>&amp;</name>
            <content>
                <baseType ref="type.7408810"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4179">
            <name>ValueObject&lt;System.Dom.Axis>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408810"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408811">
            <name>ValueObject&lt;System.Dom.Axis>*</name>
            <content>
                <baseType ref="type.7408810"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79" specialization="true">
            <name>ValueObject&lt;ValueType></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="7397113"/>
            </content>
        </type>
        <type id="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79" specialization="true">
            <name>ValueObject&lt;ValueType></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="7397113"/>
            </content>
        </type>
        <type derived="true" id="type.4072">
            <name>ValueObject&lt;ValueType>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7408700" specialization="true">
            <name>ValueObject&lt;XPathExpr*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7407174"/>
            </content>
        </type>
        <type derived="true" id="type.7408702">
            <name>ValueObject&lt;XPathExpr*>&amp;</name>
            <content>
                <baseType ref="type.7408700"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4174">
            <name>ValueObject&lt;XPathExpr*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408700"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408701">
            <name>ValueObject&lt;XPathExpr*>*</name>
            <content>
                <baseType ref="type.7408700"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408760" specialization="true">
            <name>ValueObject&lt;XPathFunctionCall*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7407375"/>
            </content>
        </type>
        <type derived="true" id="type.7408762">
            <name>ValueObject&lt;XPathFunctionCall*>&amp;</name>
            <content>
                <baseType ref="type.7408760"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4176">
            <name>ValueObject&lt;XPathFunctionCall*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408760"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408761">
            <name>ValueObject&lt;XPathFunctionCall*>*</name>
            <content>
                <baseType ref="type.7408760"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408791" specialization="true">
            <name>ValueObject&lt;XPathLocationStepExpr*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7407307"/>
            </content>
        </type>
        <type derived="true" id="type.7408793">
            <name>ValueObject&lt;XPathLocationStepExpr*>&amp;</name>
            <content>
                <baseType ref="type.7408791"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4178">
            <name>ValueObject&lt;XPathLocationStepExpr*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408791"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408792">
            <name>ValueObject&lt;XPathLocationStepExpr*>*</name>
            <content>
                <baseType ref="type.7408791"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7408817" specialization="true">
            <name>ValueObject&lt;XPathNodeTestExpr*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7408361"/>
            </content>
        </type>
        <type derived="true" id="type.7408819">
            <name>ValueObject&lt;XPathNodeTestExpr*>&amp;</name>
            <content>
                <baseType ref="type.7408817"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4181">
            <name>ValueObject&lt;XPathNodeTestExpr*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7408817"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408818">
            <name>ValueObject&lt;XPathNodeTestExpr*>*</name>
            <content>
                <baseType ref="type.7408817"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7400654" specialization="true">
            <name>ValueObject&lt;XmlProcessor*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7399889"/>
            </content>
        </type>
        <type derived="true" id="type.4142">
            <name>ValueObject&lt;XmlProcessor*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7400654"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399472" specialization="true">
            <name>ValueObject&lt;bool></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388895"/>
            </content>
        </type>
        <type derived="true" id="type.4107">
            <name>ValueObject&lt;bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399472"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399309" specialization="true">
            <name>ValueObject&lt;byte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388897"/>
            </content>
        </type>
        <type derived="true" id="type.4094">
            <name>ValueObject&lt;byte>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399448" specialization="true">
            <name>ValueObject&lt;double></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388905"/>
            </content>
        </type>
        <type derived="true" id="type.4106">
            <name>ValueObject&lt;double>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399448"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399434" specialization="true">
            <name>ValueObject&lt;float></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388904"/>
            </content>
        </type>
        <type derived="true" id="type.4104">
            <name>ValueObject&lt;float>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399434"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399350" specialization="true">
            <name>ValueObject&lt;int></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388900"/>
            </content>
        </type>
        <type derived="true" id="type.4099">
            <name>ValueObject&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399350"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399375" specialization="true">
            <name>ValueObject&lt;long></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388902"/>
            </content>
        </type>
        <type derived="true" id="type.4101">
            <name>ValueObject&lt;long>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399375"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399292" specialization="true">
            <name>ValueObject&lt;sbyte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388896"/>
            </content>
        </type>
        <type derived="true" id="type.4093">
            <name>ValueObject&lt;sbyte>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399292"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399322" specialization="true">
            <name>ValueObject&lt;short></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388898"/>
            </content>
        </type>
        <type derived="true" id="type.4096">
            <name>ValueObject&lt;short>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399322"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399501" specialization="true">
            <name>ValueObject&lt;uchar></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388908"/>
            </content>
        </type>
        <type derived="true" id="type.4109">
            <name>ValueObject&lt;uchar>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399501"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399362" specialization="true">
            <name>ValueObject&lt;uint></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388901"/>
            </content>
        </type>
        <type derived="true" id="type.4100">
            <name>ValueObject&lt;uint>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399362"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399387" specialization="true">
            <name>ValueObject&lt;ulong></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388903"/>
            </content>
        </type>
        <type derived="true" id="type.4102">
            <name>ValueObject&lt;ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399387"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399336" specialization="true">
            <name>ValueObject&lt;ushort></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388899"/>
            </content>
        </type>
        <type derived="true" id="type.4098">
            <name>ValueObject&lt;ushort>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399336"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_VariableReferenceRule_0D66322A95BEA8667B0A280D3397FE989C59896B">
            <name>VariableReferenceRule</name>
        </type>
        <type derived="true" id="type.7407541">
            <name>VariableReferenceRule&amp;</name>
            <content>
                <baseType ref="class_VariableReferenceRule_0D66322A95BEA8667B0A280D3397FE989C59896B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407540">
            <name>VariableReferenceRule*</name>
            <content>
                <baseType ref="class_VariableReferenceRule_0D66322A95BEA8667B0A280D3397FE989C59896B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408879">
            <name>VariableReferenceRule*&amp;</name>
            <content>
                <baseType ref="class_VariableReferenceRule_0D66322A95BEA8667B0A280D3397FE989C59896B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408878">
            <name>VariableReferenceRule**</name>
            <content>
                <baseType ref="class_VariableReferenceRule_0D66322A95BEA8667B0A280D3397FE989C59896B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F" specialization="true">
            <name>WeakCount&lt;T></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="7389680"/>
            </content>
        </type>
        <type derived="true" id="type.3880">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3888">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3896">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3910">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3918">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390026" specialization="true">
            <name>WeakPtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.3693">
            <name>WeakPtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390026"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC" specialization="true">
            <name>WeakPtr&lt;T></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="7389694"/>
            </content>
        </type>
        <type derived="true" id="type.3902">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3920">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3898">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3900">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3923">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3913">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3904">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021" specialization="true">
            <name>WeakPtr&lt;U></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="7389693"/>
            </content>
        </type>
        <type derived="true" id="type.3906">
            <name>WeakPtr&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_XPathAddExpr_64D5E0CDC0D9A75C10B3433A367150D0A5B7ED6F">
            <name>XPathAddExpr</name>
        </type>
        <type derived="true" id="type.7407241">
            <name>XPathAddExpr&amp;</name>
            <content>
                <baseType ref="class_XPathAddExpr_64D5E0CDC0D9A75C10B3433A367150D0A5B7ED6F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407240">
            <name>XPathAddExpr*</name>
            <content>
                <baseType ref="class_XPathAddExpr_64D5E0CDC0D9A75C10B3433A367150D0A5B7ED6F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathAndExpr_6BE495B589C8902EFF40B7D143B7C2D2931BD4F3">
            <name>XPathAndExpr</name>
        </type>
        <type derived="true" id="type.7407199">
            <name>XPathAndExpr&amp;</name>
            <content>
                <baseType ref="class_XPathAndExpr_6BE495B589C8902EFF40B7D143B7C2D2931BD4F3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407198">
            <name>XPathAndExpr*</name>
            <content>
                <baseType ref="class_XPathAndExpr_6BE495B589C8902EFF40B7D143B7C2D2931BD4F3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathAnyNodeTest_1653BD12B7022917E52975C2AB2EFC101974D53E">
            <name>XPathAnyNodeTest</name>
        </type>
        <type derived="true" id="type.7408465">
            <name>XPathAnyNodeTest&amp;</name>
            <content>
                <baseType ref="class_XPathAnyNodeTest_1653BD12B7022917E52975C2AB2EFC101974D53E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408464">
            <name>XPathAnyNodeTest*</name>
            <content>
                <baseType ref="class_XPathAnyNodeTest_1653BD12B7022917E52975C2AB2EFC101974D53E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD">
            <name>XPathBinaryExpr</name>
        </type>
        <type derived="true" id="type.7407187">
            <name>XPathBinaryExpr&amp;</name>
            <content>
                <baseType ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407186">
            <name>XPathBinaryExpr*</name>
            <content>
                <baseType ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathBoolean_62EBEB870905B1B981080A7A18EBBBD98ADD5C4A">
            <name>XPathBoolean</name>
        </type>
        <type derived="true" id="type.7407658">
            <name>XPathBoolean&amp;</name>
            <content>
                <baseType ref="class_XPathBoolean_62EBEB870905B1B981080A7A18EBBBD98ADD5C4A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4343">
            <name>XPathBoolean&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathBoolean_62EBEB870905B1B981080A7A18EBBBD98ADD5C4A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407657">
            <name>XPathBoolean*</name>
            <content>
                <baseType ref="class_XPathBoolean_62EBEB870905B1B981080A7A18EBBBD98ADD5C4A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408615">
            <name>XPathBoolean*&amp;</name>
            <content>
                <baseType ref="class_XPathBoolean_62EBEB870905B1B981080A7A18EBBBD98ADD5C4A"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408614">
            <name>XPathBoolean**</name>
            <content>
                <baseType ref="class_XPathBoolean_62EBEB870905B1B981080A7A18EBBBD98ADD5C4A"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathBooleanFunction_436037BD58AFA8408E3A2FB305BBBE107362B516">
            <name>XPathBooleanFunction</name>
        </type>
        <type derived="true" id="type.7407625">
            <name>XPathBooleanFunction&amp;</name>
            <content>
                <baseType ref="class_XPathBooleanFunction_436037BD58AFA8408E3A2FB305BBBE107362B516"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407624">
            <name>XPathBooleanFunction*</name>
            <content>
                <baseType ref="class_XPathBooleanFunction_436037BD58AFA8408E3A2FB305BBBE107362B516"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathCombineStepExpr_1E1819F1735CC284A8A4A12D8028573B7028D63A">
            <name>XPathCombineStepExpr</name>
        </type>
        <type derived="true" id="type.7407283">
            <name>XPathCombineStepExpr&amp;</name>
            <content>
                <baseType ref="class_XPathCombineStepExpr_1E1819F1735CC284A8A4A12D8028573B7028D63A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407282">
            <name>XPathCombineStepExpr*</name>
            <content>
                <baseType ref="class_XPathCombineStepExpr_1E1819F1735CC284A8A4A12D8028573B7028D63A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathCommentNodeTest_8E388602C7FD6F18286CE97DC687F1196E059DDC">
            <name>XPathCommentNodeTest</name>
        </type>
        <type derived="true" id="type.7408459">
            <name>XPathCommentNodeTest&amp;</name>
            <content>
                <baseType ref="class_XPathCommentNodeTest_8E388602C7FD6F18286CE97DC687F1196E059DDC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408458">
            <name>XPathCommentNodeTest*</name>
            <content>
                <baseType ref="class_XPathCommentNodeTest_8E388602C7FD6F18286CE97DC687F1196E059DDC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathContext_54EB2271A3739C07EC41BC345CC60F436CFAB6BB">
            <name>XPathContext</name>
        </type>
        <type derived="true" id="type.7407156">
            <name>XPathContext&amp;</name>
            <content>
                <baseType ref="class_XPathContext_54EB2271A3739C07EC41BC345CC60F436CFAB6BB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407155">
            <name>XPathContext*</name>
            <content>
                <baseType ref="class_XPathContext_54EB2271A3739C07EC41BC345CC60F436CFAB6BB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathCountFunction_2296BBD53FA4F0D57A2C327CD82EB2E7B5FE38CF">
            <name>XPathCountFunction</name>
        </type>
        <type derived="true" id="type.7407640">
            <name>XPathCountFunction&amp;</name>
            <content>
                <baseType ref="class_XPathCountFunction_2296BBD53FA4F0D57A2C327CD82EB2E7B5FE38CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407639">
            <name>XPathCountFunction*</name>
            <content>
                <baseType ref="class_XPathCountFunction_2296BBD53FA4F0D57A2C327CD82EB2E7B5FE38CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathDebug_1C2BEF2B9EA73DDB3A8B4AFA3612DB04B949B963">
            <name>XPathDebug</name>
        </type>
        <type derived="true" id="type.7407165">
            <name>XPathDebug&amp;</name>
            <content>
                <baseType ref="class_XPathDebug_1C2BEF2B9EA73DDB3A8B4AFA3612DB04B949B963"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407164">
            <name>XPathDebug*</name>
            <content>
                <baseType ref="class_XPathDebug_1C2BEF2B9EA73DDB3A8B4AFA3612DB04B949B963"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408597">
            <name>XPathDebug*&amp;</name>
            <content>
                <baseType ref="class_XPathDebug_1C2BEF2B9EA73DDB3A8B4AFA3612DB04B949B963"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408596">
            <name>XPathDebug**</name>
            <content>
                <baseType ref="class_XPathDebug_1C2BEF2B9EA73DDB3A8B4AFA3612DB04B949B963"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathDivExpr_DC2257E71CE47BD3F13502B631A85953A6CCCF2F">
            <name>XPathDivExpr</name>
        </type>
        <type derived="true" id="type.7407259">
            <name>XPathDivExpr&amp;</name>
            <content>
                <baseType ref="class_XPathDivExpr_DC2257E71CE47BD3F13502B631A85953A6CCCF2F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407258">
            <name>XPathDivExpr*</name>
            <content>
                <baseType ref="class_XPathDivExpr_DC2257E71CE47BD3F13502B631A85953A6CCCF2F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathEqualExpr_CC0741F4FE017F177A8AA8CEE613CAAA6F130568">
            <name>XPathEqualExpr</name>
        </type>
        <type derived="true" id="type.7407205">
            <name>XPathEqualExpr&amp;</name>
            <content>
                <baseType ref="class_XPathEqualExpr_CC0741F4FE017F177A8AA8CEE613CAAA6F130568"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407204">
            <name>XPathEqualExpr*</name>
            <content>
                <baseType ref="class_XPathEqualExpr_CC0741F4FE017F177A8AA8CEE613CAAA6F130568"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathException_5F5973D81A22230252D5069223C1877CBFBA755A">
            <name>XPathException</name>
        </type>
        <type derived="true" id="type.7407171">
            <name>XPathException&amp;</name>
            <content>
                <baseType ref="class_XPathException_5F5973D81A22230252D5069223C1877CBFBA755A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408322">
            <name>XPathException&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathException_5F5973D81A22230252D5069223C1877CBFBA755A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407170">
            <name>XPathException*</name>
            <content>
                <baseType ref="class_XPathException_5F5973D81A22230252D5069223C1877CBFBA755A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480">
            <name>XPathExpr</name>
        </type>
        <type derived="true" id="type.7407175">
            <name>XPathExpr&amp;</name>
            <content>
                <baseType ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3691">
            <name>XPathExpr&amp;</name>
            <content>
                <baseType ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408885">
            <name>XPathExpr&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407174">
            <name>XPathExpr*</name>
            <content>
                <baseType ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3690">
            <name>XPathExpr*</name>
            <content>
                <baseType ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408605">
            <name>XPathExpr*&amp;</name>
            <content>
                <baseType ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408604">
            <name>XPathExpr**</name>
            <content>
                <baseType ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathExpressionGrammar_D3F93E9C453CF512F7EEFBB47E0459A564D21DCE">
            <name>XPathExpressionGrammar</name>
        </type>
        <type derived="true" id="type.7407382">
            <name>XPathExpressionGrammar&amp;</name>
            <content>
                <baseType ref="class_XPathExpressionGrammar_D3F93E9C453CF512F7EEFBB47E0459A564D21DCE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4342">
            <name>XPathExpressionGrammar&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathExpressionGrammar_D3F93E9C453CF512F7EEFBB47E0459A564D21DCE"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407381">
            <name>XPathExpressionGrammar*</name>
            <content>
                <baseType ref="class_XPathExpressionGrammar_D3F93E9C453CF512F7EEFBB47E0459A564D21DCE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408603">
            <name>XPathExpressionGrammar*&amp;</name>
            <content>
                <baseType ref="class_XPathExpressionGrammar_D3F93E9C453CF512F7EEFBB47E0459A564D21DCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408602">
            <name>XPathExpressionGrammar**</name>
            <content>
                <baseType ref="class_XPathExpressionGrammar_D3F93E9C453CF512F7EEFBB47E0459A564D21DCE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathExpressionParser_F078FB4A0E8588AEF4683A48C55651DE936AED9B">
            <name>XPathExpressionParser</name>
        </type>
        <type derived="true" id="type.7407168">
            <name>XPathExpressionParser&amp;</name>
            <content>
                <baseType ref="class_XPathExpressionParser_F078FB4A0E8588AEF4683A48C55651DE936AED9B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407167">
            <name>XPathExpressionParser*</name>
            <content>
                <baseType ref="class_XPathExpressionParser_F078FB4A0E8588AEF4683A48C55651DE936AED9B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408600">
            <name>XPathExpressionParser*&amp;</name>
            <content>
                <baseType ref="class_XPathExpressionParser_F078FB4A0E8588AEF4683A48C55651DE936AED9B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408599">
            <name>XPathExpressionParser**</name>
            <content>
                <baseType ref="class_XPathExpressionParser_F078FB4A0E8588AEF4683A48C55651DE936AED9B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathFilterExpr_C70744E20146504EF089A77257ED4D36041A468A">
            <name>XPathFilterExpr</name>
        </type>
        <type derived="true" id="type.7407295">
            <name>XPathFilterExpr&amp;</name>
            <content>
                <baseType ref="class_XPathFilterExpr_C70744E20146504EF089A77257ED4D36041A468A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407294">
            <name>XPathFilterExpr*</name>
            <content>
                <baseType ref="class_XPathFilterExpr_C70744E20146504EF089A77257ED4D36041A468A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408">
            <name>XPathFunction</name>
        </type>
        <type derived="true" id="type.7407613">
            <name>XPathFunction&amp;</name>
            <content>
                <baseType ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407612">
            <name>XPathFunction*</name>
            <content>
                <baseType ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408557">
            <name>XPathFunction*&amp;</name>
            <content>
                <baseType ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408610">
            <name>XPathFunction*&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408608">
            <name>XPathFunction**</name>
            <content>
                <baseType ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathFunctionCall_C5BB4DC232BD6346E04957475A9C86B8F8521E16">
            <name>XPathFunctionCall</name>
        </type>
        <type derived="true" id="type.7407376">
            <name>XPathFunctionCall&amp;</name>
            <content>
                <baseType ref="class_XPathFunctionCall_C5BB4DC232BD6346E04957475A9C86B8F8521E16"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4339">
            <name>XPathFunctionCall&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathFunctionCall_C5BB4DC232BD6346E04957475A9C86B8F8521E16"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407375">
            <name>XPathFunctionCall*</name>
            <content>
                <baseType ref="class_XPathFunctionCall_C5BB4DC232BD6346E04957475A9C86B8F8521E16"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408759">
            <name>XPathFunctionCall*&amp;</name>
            <content>
                <baseType ref="class_XPathFunctionCall_C5BB4DC232BD6346E04957475A9C86B8F8521E16"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408758">
            <name>XPathFunctionCall**</name>
            <content>
                <baseType ref="class_XPathFunctionCall_C5BB4DC232BD6346E04957475A9C86B8F8521E16"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathFunctionLibrary_5044787DDFDAF4AF5701F92F8775A709B4496547">
            <name>XPathFunctionLibrary</name>
        </type>
        <type derived="true" id="type.7407622">
            <name>XPathFunctionLibrary&amp;</name>
            <content>
                <baseType ref="class_XPathFunctionLibrary_5044787DDFDAF4AF5701F92F8775A709B4496547"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407621">
            <name>XPathFunctionLibrary*</name>
            <content>
                <baseType ref="class_XPathFunctionLibrary_5044787DDFDAF4AF5701F92F8775A709B4496547"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408943">
            <name>XPathFunctionLibrary*&amp;</name>
            <content>
                <baseType ref="class_XPathFunctionLibrary_5044787DDFDAF4AF5701F92F8775A709B4496547"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408942">
            <name>XPathFunctionLibrary**</name>
            <content>
                <baseType ref="class_XPathFunctionLibrary_5044787DDFDAF4AF5701F92F8775A709B4496547"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathGreaterExpr_41B33DD4B2A08AFD60C521F68E2BE22044CCA315">
            <name>XPathGreaterExpr</name>
        </type>
        <type derived="true" id="type.7407223">
            <name>XPathGreaterExpr&amp;</name>
            <content>
                <baseType ref="class_XPathGreaterExpr_41B33DD4B2A08AFD60C521F68E2BE22044CCA315"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407222">
            <name>XPathGreaterExpr*</name>
            <content>
                <baseType ref="class_XPathGreaterExpr_41B33DD4B2A08AFD60C521F68E2BE22044CCA315"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathGreaterOrEqualExpr_D23CE14AC5AADA96029DF5B4EF07289DD172803B">
            <name>XPathGreaterOrEqualExpr</name>
        </type>
        <type derived="true" id="type.7407235">
            <name>XPathGreaterOrEqualExpr&amp;</name>
            <content>
                <baseType ref="class_XPathGreaterOrEqualExpr_D23CE14AC5AADA96029DF5B4EF07289DD172803B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407234">
            <name>XPathGreaterOrEqualExpr*</name>
            <content>
                <baseType ref="class_XPathGreaterOrEqualExpr_D23CE14AC5AADA96029DF5B4EF07289DD172803B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathLastFunction_470D2B0434975293AB9C5EEA6266A1B38E7C6E95">
            <name>XPathLastFunction</name>
        </type>
        <type derived="true" id="type.7407634">
            <name>XPathLastFunction&amp;</name>
            <content>
                <baseType ref="class_XPathLastFunction_470D2B0434975293AB9C5EEA6266A1B38E7C6E95"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407633">
            <name>XPathLastFunction*</name>
            <content>
                <baseType ref="class_XPathLastFunction_470D2B0434975293AB9C5EEA6266A1B38E7C6E95"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathLessExpr_B701BDBB55711A0AB3EF413A2A9D1CC9BC2B1511">
            <name>XPathLessExpr</name>
        </type>
        <type derived="true" id="type.7407217">
            <name>XPathLessExpr&amp;</name>
            <content>
                <baseType ref="class_XPathLessExpr_B701BDBB55711A0AB3EF413A2A9D1CC9BC2B1511"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407216">
            <name>XPathLessExpr*</name>
            <content>
                <baseType ref="class_XPathLessExpr_B701BDBB55711A0AB3EF413A2A9D1CC9BC2B1511"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathLessOrEqualExpr_1C653B955EC20419DAFC98236046E34770D41F6D">
            <name>XPathLessOrEqualExpr</name>
        </type>
        <type derived="true" id="type.7407229">
            <name>XPathLessOrEqualExpr&amp;</name>
            <content>
                <baseType ref="class_XPathLessOrEqualExpr_1C653B955EC20419DAFC98236046E34770D41F6D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407228">
            <name>XPathLessOrEqualExpr*</name>
            <content>
                <baseType ref="class_XPathLessOrEqualExpr_1C653B955EC20419DAFC98236046E34770D41F6D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathLiteral_97BC2333DDDF6EABF7DA5FD272541734687A14E8">
            <name>XPathLiteral</name>
        </type>
        <type derived="true" id="type.7407364">
            <name>XPathLiteral&amp;</name>
            <content>
                <baseType ref="class_XPathLiteral_97BC2333DDDF6EABF7DA5FD272541734687A14E8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408471">
            <name>XPathLiteral&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathLiteral_97BC2333DDDF6EABF7DA5FD272541734687A14E8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407363">
            <name>XPathLiteral*</name>
            <content>
                <baseType ref="class_XPathLiteral_97BC2333DDDF6EABF7DA5FD272541734687A14E8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathLocationStepExpr_9B4616EA86D04D07EC9E1FA3C0C129DFEC975494">
            <name>XPathLocationStepExpr</name>
        </type>
        <type derived="true" id="type.7407308">
            <name>XPathLocationStepExpr&amp;</name>
            <content>
                <baseType ref="class_XPathLocationStepExpr_9B4616EA86D04D07EC9E1FA3C0C129DFEC975494"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407307">
            <name>XPathLocationStepExpr*</name>
            <content>
                <baseType ref="class_XPathLocationStepExpr_9B4616EA86D04D07EC9E1FA3C0C129DFEC975494"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408790">
            <name>XPathLocationStepExpr*&amp;</name>
            <content>
                <baseType ref="class_XPathLocationStepExpr_9B4616EA86D04D07EC9E1FA3C0C129DFEC975494"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408789">
            <name>XPathLocationStepExpr**</name>
            <content>
                <baseType ref="class_XPathLocationStepExpr_9B4616EA86D04D07EC9E1FA3C0C129DFEC975494"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathModExpr_7DB9EBB1DF4E3D4EE87B5DBC20E76007C53963F5">
            <name>XPathModExpr</name>
        </type>
        <type derived="true" id="type.7407265">
            <name>XPathModExpr&amp;</name>
            <content>
                <baseType ref="class_XPathModExpr_7DB9EBB1DF4E3D4EE87B5DBC20E76007C53963F5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407264">
            <name>XPathModExpr*</name>
            <content>
                <baseType ref="class_XPathModExpr_7DB9EBB1DF4E3D4EE87B5DBC20E76007C53963F5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathMulExpr_3999187027305818E384D1FCB2308929E48BDFEB">
            <name>XPathMulExpr</name>
        </type>
        <type derived="true" id="type.7407253">
            <name>XPathMulExpr&amp;</name>
            <content>
                <baseType ref="class_XPathMulExpr_3999187027305818E384D1FCB2308929E48BDFEB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407252">
            <name>XPathMulExpr*</name>
            <content>
                <baseType ref="class_XPathMulExpr_3999187027305818E384D1FCB2308929E48BDFEB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathNameTest_1BB9325BB075144D167439A70658B1743BE5F322">
            <name>XPathNameTest</name>
        </type>
        <type derived="true" id="type.7407352">
            <name>XPathNameTest&amp;</name>
            <content>
                <baseType ref="class_XPathNameTest_1BB9325BB075144D167439A70658B1743BE5F322"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4337">
            <name>XPathNameTest&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathNameTest_1BB9325BB075144D167439A70658B1743BE5F322"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407351">
            <name>XPathNameTest*</name>
            <content>
                <baseType ref="class_XPathNameTest_1BB9325BB075144D167439A70658B1743BE5F322"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathNodeSet_70D9F2F055A2EAFCF3988BC033AE454E204F643A">
            <name>XPathNodeSet</name>
        </type>
        <type derived="true" id="type.7407652">
            <name>XPathNodeSet&amp;</name>
            <content>
                <baseType ref="class_XPathNodeSet_70D9F2F055A2EAFCF3988BC033AE454E204F643A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407651">
            <name>XPathNodeSet*</name>
            <content>
                <baseType ref="class_XPathNodeSet_70D9F2F055A2EAFCF3988BC033AE454E204F643A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408618">
            <name>XPathNodeSet*&amp;</name>
            <content>
                <baseType ref="class_XPathNodeSet_70D9F2F055A2EAFCF3988BC033AE454E204F643A"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408617">
            <name>XPathNodeSet**</name>
            <content>
                <baseType ref="class_XPathNodeSet_70D9F2F055A2EAFCF3988BC033AE454E204F643A"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE">
            <name>XPathNodeTestExpr</name>
        </type>
        <type derived="true" id="type.7408362">
            <name>XPathNodeTestExpr&amp;</name>
            <content>
                <baseType ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408361">
            <name>XPathNodeTestExpr*</name>
            <content>
                <baseType ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408638">
            <name>XPathNodeTestExpr*&amp;</name>
            <content>
                <baseType ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408637">
            <name>XPathNodeTestExpr**</name>
            <content>
                <baseType ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathNotEqualExpr_8332C1622B73ED060248380F14625509104DF080">
            <name>XPathNotEqualExpr</name>
        </type>
        <type derived="true" id="type.7407211">
            <name>XPathNotEqualExpr&amp;</name>
            <content>
                <baseType ref="class_XPathNotEqualExpr_8332C1622B73ED060248380F14625509104DF080"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407210">
            <name>XPathNotEqualExpr*</name>
            <content>
                <baseType ref="class_XPathNotEqualExpr_8332C1622B73ED060248380F14625509104DF080"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathNumber_030E4A77BFA393ABC52B71D17310DFB36384486F">
            <name>XPathNumber</name>
        </type>
        <type derived="true" id="type.7407664">
            <name>XPathNumber&amp;</name>
            <content>
                <baseType ref="class_XPathNumber_030E4A77BFA393ABC52B71D17310DFB36384486F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4344">
            <name>XPathNumber&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathNumber_030E4A77BFA393ABC52B71D17310DFB36384486F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407663">
            <name>XPathNumber*</name>
            <content>
                <baseType ref="class_XPathNumber_030E4A77BFA393ABC52B71D17310DFB36384486F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408629">
            <name>XPathNumber*&amp;</name>
            <content>
                <baseType ref="class_XPathNumber_030E4A77BFA393ABC52B71D17310DFB36384486F"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408628">
            <name>XPathNumber**</name>
            <content>
                <baseType ref="class_XPathNumber_030E4A77BFA393ABC52B71D17310DFB36384486F"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathNumberExpr_CB62E9D51F1A4F9AA7E3937722FE3487F75F3D27">
            <name>XPathNumberExpr</name>
        </type>
        <type derived="true" id="type.7407370">
            <name>XPathNumberExpr&amp;</name>
            <content>
                <baseType ref="class_XPathNumberExpr_CB62E9D51F1A4F9AA7E3937722FE3487F75F3D27"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408472">
            <name>XPathNumberExpr&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathNumberExpr_CB62E9D51F1A4F9AA7E3937722FE3487F75F3D27"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407369">
            <name>XPathNumberExpr*</name>
            <content>
                <baseType ref="class_XPathNumberExpr_CB62E9D51F1A4F9AA7E3937722FE3487F75F3D27"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathNumberFunction_3CD349E443E9F9856C593054B85BA4FEFECC42C7">
            <name>XPathNumberFunction</name>
        </type>
        <type derived="true" id="type.7407628">
            <name>XPathNumberFunction&amp;</name>
            <content>
                <baseType ref="class_XPathNumberFunction_3CD349E443E9F9856C593054B85BA4FEFECC42C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407627">
            <name>XPathNumberFunction*</name>
            <content>
                <baseType ref="class_XPathNumberFunction_3CD349E443E9F9856C593054B85BA4FEFECC42C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E">
            <name>XPathObject</name>
        </type>
        <type derived="true" id="type.7407646">
            <name>XPathObject&amp;</name>
            <content>
                <baseType ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408631">
            <name>XPathObject&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407645">
            <name>XPathObject*</name>
            <content>
                <baseType ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408342">
            <name>XPathObject*&amp;</name>
            <content>
                <baseType ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408352">
            <name>XPathObject*&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408343">
            <name>XPathObject**</name>
            <content>
                <baseType ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408612">
            <name>XPathObject**&amp;</name>
            <content>
                <baseType ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408611">
            <name>XPathObject***</name>
            <content>
                <baseType ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathOrExpr_EBB1FF34863F294BF41D4497F5DB49E26CC99F32">
            <name>XPathOrExpr</name>
        </type>
        <type derived="true" id="type.7407193">
            <name>XPathOrExpr&amp;</name>
            <content>
                <baseType ref="class_XPathOrExpr_EBB1FF34863F294BF41D4497F5DB49E26CC99F32"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407192">
            <name>XPathOrExpr*</name>
            <content>
                <baseType ref="class_XPathOrExpr_EBB1FF34863F294BF41D4497F5DB49E26CC99F32"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathPILiteralTest_3F86EF025B928E10BDB8373B7B25849DD41E16C9">
            <name>XPathPILiteralTest</name>
        </type>
        <type derived="true" id="type.7407320">
            <name>XPathPILiteralTest&amp;</name>
            <content>
                <baseType ref="class_XPathPILiteralTest_3F86EF025B928E10BDB8373B7B25849DD41E16C9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4335">
            <name>XPathPILiteralTest&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathPILiteralTest_3F86EF025B928E10BDB8373B7B25849DD41E16C9"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407319">
            <name>XPathPILiteralTest*</name>
            <content>
                <baseType ref="class_XPathPILiteralTest_3F86EF025B928E10BDB8373B7B25849DD41E16C9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathPINodeTest_3C6062E8681A250F424D8059EE5DD0803B3BFF00">
            <name>XPathPINodeTest</name>
        </type>
        <type derived="true" id="type.7408463">
            <name>XPathPINodeTest&amp;</name>
            <content>
                <baseType ref="class_XPathPINodeTest_3C6062E8681A250F424D8059EE5DD0803B3BFF00"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408462">
            <name>XPathPINodeTest*</name>
            <content>
                <baseType ref="class_XPathPINodeTest_3C6062E8681A250F424D8059EE5DD0803B3BFF00"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathPositionFunction_CD239B9D33A34AB01D2239F7A7FF3B1F0646ED05">
            <name>XPathPositionFunction</name>
        </type>
        <type derived="true" id="type.7407637">
            <name>XPathPositionFunction&amp;</name>
            <content>
                <baseType ref="class_XPathPositionFunction_CD239B9D33A34AB01D2239F7A7FF3B1F0646ED05"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407636">
            <name>XPathPositionFunction*</name>
            <content>
                <baseType ref="class_XPathPositionFunction_CD239B9D33A34AB01D2239F7A7FF3B1F0646ED05"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathPrefixTest_7D0E6C8BFF9C298E4E7B339F475D675FA9161187">
            <name>XPathPrefixTest</name>
        </type>
        <type derived="true" id="type.7407346">
            <name>XPathPrefixTest&amp;</name>
            <content>
                <baseType ref="class_XPathPrefixTest_7D0E6C8BFF9C298E4E7B339F475D675FA9161187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4336">
            <name>XPathPrefixTest&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathPrefixTest_7D0E6C8BFF9C298E4E7B339F475D675FA9161187"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407345">
            <name>XPathPrefixTest*</name>
            <content>
                <baseType ref="class_XPathPrefixTest_7D0E6C8BFF9C298E4E7B339F475D675FA9161187"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathPrincipalNodeTest_95934E4A6771EAB845EC93002DCFD0E63193516F">
            <name>XPathPrincipalNodeTest</name>
        </type>
        <type derived="true" id="type.7408467">
            <name>XPathPrincipalNodeTest&amp;</name>
            <content>
                <baseType ref="class_XPathPrincipalNodeTest_95934E4A6771EAB845EC93002DCFD0E63193516F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408466">
            <name>XPathPrincipalNodeTest*</name>
            <content>
                <baseType ref="class_XPathPrincipalNodeTest_95934E4A6771EAB845EC93002DCFD0E63193516F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathRootNodeExpr_80F36A5C737D3E6D91496D2F168E801F8D3AF7F9">
            <name>XPathRootNodeExpr</name>
        </type>
        <type derived="true" id="type.7407289">
            <name>XPathRootNodeExpr&amp;</name>
            <content>
                <baseType ref="class_XPathRootNodeExpr_80F36A5C737D3E6D91496D2F168E801F8D3AF7F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407288">
            <name>XPathRootNodeExpr*</name>
            <content>
                <baseType ref="class_XPathRootNodeExpr_80F36A5C737D3E6D91496D2F168E801F8D3AF7F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathString_A53CB226777116E5435EF7B51EABFD704B80F682">
            <name>XPathString</name>
        </type>
        <type derived="true" id="type.7407670">
            <name>XPathString&amp;</name>
            <content>
                <baseType ref="class_XPathString_A53CB226777116E5435EF7B51EABFD704B80F682"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408595">
            <name>XPathString&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathString_A53CB226777116E5435EF7B51EABFD704B80F682"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407669">
            <name>XPathString*</name>
            <content>
                <baseType ref="class_XPathString_A53CB226777116E5435EF7B51EABFD704B80F682"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408632">
            <name>XPathString*&amp;</name>
            <content>
                <baseType ref="class_XPathString_A53CB226777116E5435EF7B51EABFD704B80F682"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408634">
            <name>XPathString**</name>
            <content>
                <baseType ref="class_XPathString_A53CB226777116E5435EF7B51EABFD704B80F682"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathStringFunction_7B03242259C3ABC0C5FDCBC3F3A3791DAB1E9862">
            <name>XPathStringFunction</name>
        </type>
        <type derived="true" id="type.7407631">
            <name>XPathStringFunction&amp;</name>
            <content>
                <baseType ref="class_XPathStringFunction_7B03242259C3ABC0C5FDCBC3F3A3791DAB1E9862"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407630">
            <name>XPathStringFunction*</name>
            <content>
                <baseType ref="class_XPathStringFunction_7B03242259C3ABC0C5FDCBC3F3A3791DAB1E9862"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathSubExpr_69FED22A13C6C7B2368B46347B4CAEE97468576A">
            <name>XPathSubExpr</name>
        </type>
        <type derived="true" id="type.7407247">
            <name>XPathSubExpr&amp;</name>
            <content>
                <baseType ref="class_XPathSubExpr_69FED22A13C6C7B2368B46347B4CAEE97468576A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407246">
            <name>XPathSubExpr*</name>
            <content>
                <baseType ref="class_XPathSubExpr_69FED22A13C6C7B2368B46347B4CAEE97468576A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathTextNodeTest_F61C5D2B1A43AC9CF9EF724B603C0B62AFAFC24E">
            <name>XPathTextNodeTest</name>
        </type>
        <type derived="true" id="type.7408461">
            <name>XPathTextNodeTest&amp;</name>
            <content>
                <baseType ref="class_XPathTextNodeTest_F61C5D2B1A43AC9CF9EF724B603C0B62AFAFC24E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408460">
            <name>XPathTextNodeTest*</name>
            <content>
                <baseType ref="class_XPathTextNodeTest_F61C5D2B1A43AC9CF9EF724B603C0B62AFAFC24E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathUnaryExpr_86009132751C9E3CD64BE15301415EF8A1979F72">
            <name>XPathUnaryExpr</name>
        </type>
        <type derived="true" id="type.7407181">
            <name>XPathUnaryExpr&amp;</name>
            <content>
                <baseType ref="class_XPathUnaryExpr_86009132751C9E3CD64BE15301415EF8A1979F72"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4333">
            <name>XPathUnaryExpr&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathUnaryExpr_86009132751C9E3CD64BE15301415EF8A1979F72"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407180">
            <name>XPathUnaryExpr*</name>
            <content>
                <baseType ref="class_XPathUnaryExpr_86009132751C9E3CD64BE15301415EF8A1979F72"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathUnaryMinusExpr_AF3C43FA8F0EDE3BC21F7EE19995FC56E6C75626">
            <name>XPathUnaryMinusExpr</name>
        </type>
        <type derived="true" id="type.7407271">
            <name>XPathUnaryMinusExpr&amp;</name>
            <content>
                <baseType ref="class_XPathUnaryMinusExpr_AF3C43FA8F0EDE3BC21F7EE19995FC56E6C75626"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4334">
            <name>XPathUnaryMinusExpr&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathUnaryMinusExpr_AF3C43FA8F0EDE3BC21F7EE19995FC56E6C75626"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407270">
            <name>XPathUnaryMinusExpr*</name>
            <content>
                <baseType ref="class_XPathUnaryMinusExpr_AF3C43FA8F0EDE3BC21F7EE19995FC56E6C75626"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathUnionExpr_7AF61B483D2A2CBC8E988375E936460948104FD6">
            <name>XPathUnionExpr</name>
        </type>
        <type derived="true" id="type.7407277">
            <name>XPathUnionExpr&amp;</name>
            <content>
                <baseType ref="class_XPathUnionExpr_7AF61B483D2A2CBC8E988375E936460948104FD6"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407276">
            <name>XPathUnionExpr*</name>
            <content>
                <baseType ref="class_XPathUnionExpr_7AF61B483D2A2CBC8E988375E936460948104FD6"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_XPathVariableReference_73ACE515A08D085D024DDFA8B32D529F578FDFAD">
            <name>XPathVariableReference</name>
        </type>
        <type derived="true" id="type.7407358">
            <name>XPathVariableReference&amp;</name>
            <content>
                <baseType ref="class_XPathVariableReference_73ACE515A08D085D024DDFA8B32D529F578FDFAD"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4338">
            <name>XPathVariableReference&amp;&amp;</name>
            <content>
                <baseType ref="class_XPathVariableReference_73ACE515A08D085D024DDFA8B32D529F578FDFAD"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407357">
            <name>XPathVariableReference*</name>
            <content>
                <baseType ref="class_XPathVariableReference_73ACE515A08D085D024DDFA8B32D529F578FDFAD"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4322">
            <name>XmlGrammar&amp;&amp;</name>
            <content>
                <baseType ref="class_XmlGrammar_514387B50789C8E470155317F17349CFC3DF6E94"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388895">
            <name>bool</name>
        </type>
        <type basic="true" id="type.7388897">
            <name>byte</name>
        </type>
        <type derived="true" id="type.7388918">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.7388897"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388917">
            <name>byte*</name>
            <content>
                <baseType ref="type.7388897"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388906">
            <name>char</name>
        </type>
        <type derived="true" id="type.7388945">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.7388906"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388944">
            <name>char*</name>
            <content>
                <baseType ref="type.7388906"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4218">
            <name>const AddressOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
            </content>
        </type>
        <type derived="true" id="type.4219">
            <name>const AddressOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4290">
            <name>const AssertStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
            </content>
        </type>
        <type derived="true" id="type.4291">
            <name>const AssertStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408400">
            <name>const Axis&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407313">
            <name>const AxisMap</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AxisMap_439D4C04BC3B186AB056547E5B4D4A5D10D00A5E"/>
            </content>
        </type>
        <type derived="true" id="type.7407315">
            <name>const AxisMap&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AxisMap_439D4C04BC3B186AB056547E5B4D4A5D10D00A5E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407314">
            <name>const AxisMap*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AxisMap_439D4C04BC3B186AB056547E5B4D4A5D10D00A5E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408677">
            <name>const AxisMap*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AxisMap_439D4C04BC3B186AB056547E5B4D4A5D10D00A5E"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408676">
            <name>const AxisMap**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AxisMap_439D4C04BC3B186AB056547E5B4D4A5D10D00A5E"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4185">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
            </content>
        </type>
        <type derived="true" id="type.4186">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4187">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
            </content>
        </type>
        <type derived="true" id="type.4188">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4189">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
            </content>
        </type>
        <type derived="true" id="type.4326">
            <name>const BuildIndexVisitor</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
            </content>
        </type>
        <type derived="true" id="type.4327">
            <name>const BuildIndexVisitor&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4190">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.4297">
            <name>const CodeExpandingVisitor</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
            </content>
        </type>
        <type derived="true" id="type.4298">
            <name>const CodeExpandingVisitor&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4233">
            <name>const Complement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
            </content>
        </type>
        <type derived="true" id="type.4234">
            <name>const Complement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4199">
            <name>const ConditionVariable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
            </content>
        </type>
        <type derived="true" id="type.4251">
            <name>const Construct</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
            </content>
        </type>
        <type derived="true" id="type.4252">
            <name>const Construct&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4204">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
            </content>
        </type>
        <type derived="true" id="type.4205">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3692">
            <name>const Counter&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390010"/>
            </content>
        </type>
        <type derived="true" id="type.3885">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3903">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3907">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3892">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3873">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3891">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3876">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3890">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3921">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3922">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3914">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3881">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3882">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3901">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3883">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3899">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3886">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3915">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3908">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3877">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3893">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3874">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3924">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.3905">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.3884">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.4269">
            <name>const DeleteStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
            </content>
        </type>
        <type derived="true" id="type.4270">
            <name>const DeleteStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4215">
            <name>const Deref</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
            </content>
        </type>
        <type derived="true" id="type.4216">
            <name>const Deref&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4272">
            <name>const DestroyStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
            </content>
        </type>
        <type derived="true" id="type.4273">
            <name>const DestroyStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4329">
            <name>const DomException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
            </content>
        </type>
        <type derived="true" id="type.4330">
            <name>const DomException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4309">
            <name>const ExpectationParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
            </content>
        </type>
        <type derived="true" id="type.4310">
            <name>const ExpectationParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4275">
            <name>const ExpressionStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
            </content>
        </type>
        <type derived="true" id="type.4276">
            <name>const ExpressionStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4191">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
            </content>
        </type>
        <type derived="true" id="type.4192">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4281">
            <name>const GotoCaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
            </content>
        </type>
        <type derived="true" id="type.4282">
            <name>const GotoCaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4266">
            <name>const GotoStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
            </content>
        </type>
        <type derived="true" id="type.4267">
            <name>const GotoStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408040">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408037"/>
            </content>
        </type>
        <type derived="true" id="type.4057">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4054"/>
            </content>
        </type>
        <type derived="true" id="type.7408040">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408037"/>
            </content>
        </type>
        <type derived="true" id="type.7408042">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408037"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4059">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4054"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4058">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4054"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408041">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408037"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408046">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408043"/>
            </content>
        </type>
        <type derived="true" id="type.4063">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4060"/>
            </content>
        </type>
        <type derived="true" id="type.7408048">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408043"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4065">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4060"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408048">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408043"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408047">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408043"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4064">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4060"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408047">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408043"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4193">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
            </content>
        </type>
        <type derived="true" id="type.4194">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4236">
            <name>const Invoke</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
            </content>
        </type>
        <type derived="true" id="type.4237">
            <name>const Invoke&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3776">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3816">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3863">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389659"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3799">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389552"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4306">
            <name>const KleeneStarParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
            </content>
        </type>
        <type derived="true" id="type.4307">
            <name>const KleeneStarParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4121">
            <name>const List&lt;String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4118"/>
            </content>
        </type>
        <type derived="true" id="type.7408104">
            <name>const List&lt;String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408101"/>
            </content>
        </type>
        <type derived="true" id="type.7408106">
            <name>const List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408101"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4123">
            <name>const List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4118"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4122">
            <name>const List&lt;String&lt;uchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4118"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408105">
            <name>const List&lt;String&lt;uchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408101"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408373">
            <name>const List&lt;UniquePtr&lt;System.XPath.XPathExpr>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408370"/>
            </content>
        </type>
        <type derived="true" id="type.7408375">
            <name>const List&lt;UniquePtr&lt;System.XPath.XPathExpr>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408370"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408374">
            <name>const List&lt;UniquePtr&lt;System.XPath.XPathExpr>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408370"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408575">
            <name>const List&lt;UniquePtr&lt;System.XPath.XPathFunction>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408572"/>
            </content>
        </type>
        <type derived="true" id="type.7408577">
            <name>const List&lt;UniquePtr&lt;System.XPath.XPathFunction>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408572"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408576">
            <name>const List&lt;UniquePtr&lt;System.XPath.XPathFunction>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408572"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408477">
            <name>const List&lt;UniquePtr&lt;System.XPath.XPathObject>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408474"/>
            </content>
        </type>
        <type derived="true" id="type.7408479">
            <name>const List&lt;UniquePtr&lt;System.XPath.XPathObject>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408474"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408478">
            <name>const List&lt;UniquePtr&lt;System.XPath.XPathObject>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408474"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408330">
            <name>const List&lt;XPathObject*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408327"/>
            </content>
        </type>
        <type derived="true" id="type.7408332">
            <name>const List&lt;XPathObject*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408327"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408331">
            <name>const List&lt;XPathObject*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408327"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4259">
            <name>const Literal</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
            </content>
        </type>
        <type derived="true" id="type.4260">
            <name>const Literal&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3832">
            <name>const LockGuard&lt;Mtx></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
            </content>
        </type>
        <type derived="true" id="type.3833">
            <name>const LockGuard&lt;Mtx>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4019">
            <name>const LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7394867"/>
            </content>
        </type>
        <type derived="true" id="type.4020">
            <name>const LockGuard&lt;System.Threading.Mutex>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7394867"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408394">
            <name>const Map&lt;String&lt;uchar>, System.Dom.Axis, Less&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408391"/>
            </content>
        </type>
        <type derived="true" id="type.7408396">
            <name>const Map&lt;String&lt;uchar>, System.Dom.Axis, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408391"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408395">
            <name>const Map&lt;String&lt;uchar>, System.Dom.Axis, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408391"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408501">
            <name>const Map&lt;String&lt;uchar>, XPathFunction*, Less&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408498"/>
            </content>
        </type>
        <type derived="true" id="type.7408503">
            <name>const Map&lt;String&lt;uchar>, XPathFunction*, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408498"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408502">
            <name>const Map&lt;String&lt;uchar>, XPathFunction*, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408498"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4200">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.4254">
            <name>const New</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
            </content>
        </type>
        <type derived="true" id="type.4255">
            <name>const New&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4212">
            <name>const Not</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
            </content>
        </type>
        <type derived="true" id="type.4213">
            <name>const Not&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4300">
            <name>const OptionalParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
            </content>
        </type>
        <type derived="true" id="type.4301">
            <name>const OptionalParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4195">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
            </content>
        </type>
        <type derived="true" id="type.7408418">
            <name>const Pair&lt;String&lt;uchar>, System.Dom.Axis></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408397"/>
            </content>
        </type>
        <type derived="true" id="type.7408408">
            <name>const Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408397"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408417">
            <name>const Pair&lt;String&lt;uchar>, System.Dom.Axis>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408397"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408525">
            <name>const Pair&lt;String&lt;uchar>, XPathFunction*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408504"/>
            </content>
        </type>
        <type derived="true" id="type.7408515">
            <name>const Pair&lt;String&lt;uchar>, XPathFunction*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408504"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408524">
            <name>const Pair&lt;String&lt;uchar>, XPathFunction*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408504"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3839">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3842">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4303">
            <name>const PositiveParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
            </content>
        </type>
        <type derived="true" id="type.4304">
            <name>const PositiveParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4242">
            <name>const PostfixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
            </content>
        </type>
        <type derived="true" id="type.4243">
            <name>const PostfixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4239">
            <name>const PostfixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
            </content>
        </type>
        <type derived="true" id="type.4240">
            <name>const PostfixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4224">
            <name>const PrefixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
            </content>
        </type>
        <type derived="true" id="type.4225">
            <name>const PrefixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4221">
            <name>const PrefixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
            </content>
        </type>
        <type derived="true" id="type.4222">
            <name>const PrefixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408117">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408114"/>
            </content>
        </type>
        <type derived="true" id="type.4134">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4131"/>
            </content>
        </type>
        <type derived="true" id="type.7408117">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408114"/>
            </content>
        </type>
        <type derived="true" id="type.7408119">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408114"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4136">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4131"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408118">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408114"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4135">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4131"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408118">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408114"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4127">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4124"/>
            </content>
        </type>
        <type derived="true" id="type.7408110">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408107"/>
            </content>
        </type>
        <type derived="true" id="type.7408112">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408107"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4129">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4124"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408111">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408107"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4128">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4124"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408111">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408107"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408386">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathExpr>, UniquePtr&lt;System.XPath.XPathExpr>&amp;, UniquePtr&lt;System.XPath.XPathExpr>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408383"/>
            </content>
        </type>
        <type derived="true" id="type.7408388">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathExpr>, UniquePtr&lt;System.XPath.XPathExpr>&amp;, UniquePtr&lt;System.XPath.XPathExpr>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408383"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408387">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathExpr>, UniquePtr&lt;System.XPath.XPathExpr>&amp;, UniquePtr&lt;System.XPath.XPathExpr>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408383"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408379">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathExpr>, const UniquePtr&lt;System.XPath.XPathExpr>&amp;, const UniquePtr&lt;System.XPath.XPathExpr>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408376"/>
            </content>
        </type>
        <type derived="true" id="type.7408381">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathExpr>, const UniquePtr&lt;System.XPath.XPathExpr>&amp;, const UniquePtr&lt;System.XPath.XPathExpr>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408376"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408380">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathExpr>, const UniquePtr&lt;System.XPath.XPathExpr>&amp;, const UniquePtr&lt;System.XPath.XPathExpr>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408376"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408588">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathFunction>, UniquePtr&lt;System.XPath.XPathFunction>&amp;, UniquePtr&lt;System.XPath.XPathFunction>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408585"/>
            </content>
        </type>
        <type derived="true" id="type.7408590">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathFunction>, UniquePtr&lt;System.XPath.XPathFunction>&amp;, UniquePtr&lt;System.XPath.XPathFunction>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408585"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408589">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathFunction>, UniquePtr&lt;System.XPath.XPathFunction>&amp;, UniquePtr&lt;System.XPath.XPathFunction>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408585"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408581">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathFunction>, const UniquePtr&lt;System.XPath.XPathFunction>&amp;, const UniquePtr&lt;System.XPath.XPathFunction>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408578"/>
            </content>
        </type>
        <type derived="true" id="type.7408583">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathFunction>, const UniquePtr&lt;System.XPath.XPathFunction>&amp;, const UniquePtr&lt;System.XPath.XPathFunction>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408578"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408582">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathFunction>, const UniquePtr&lt;System.XPath.XPathFunction>&amp;, const UniquePtr&lt;System.XPath.XPathFunction>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408578"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408490">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathObject>, UniquePtr&lt;System.XPath.XPathObject>&amp;, UniquePtr&lt;System.XPath.XPathObject>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408487"/>
            </content>
        </type>
        <type derived="true" id="type.7408492">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathObject>, UniquePtr&lt;System.XPath.XPathObject>&amp;, UniquePtr&lt;System.XPath.XPathObject>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408487"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408491">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathObject>, UniquePtr&lt;System.XPath.XPathObject>&amp;, UniquePtr&lt;System.XPath.XPathObject>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408487"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408483">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathObject>, const UniquePtr&lt;System.XPath.XPathObject>&amp;, const UniquePtr&lt;System.XPath.XPathObject>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408480"/>
            </content>
        </type>
        <type derived="true" id="type.7408485">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathObject>, const UniquePtr&lt;System.XPath.XPathObject>&amp;, const UniquePtr&lt;System.XPath.XPathObject>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408484">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.XPath.XPathObject>, const UniquePtr&lt;System.XPath.XPathObject>&amp;, const UniquePtr&lt;System.XPath.XPathObject>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408480"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408347">
            <name>const RandomAccessIter&lt;XPathObject*, XPathObject*&amp;, XPathObject**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408344"/>
            </content>
        </type>
        <type derived="true" id="type.7408349">
            <name>const RandomAccessIter&lt;XPathObject*, XPathObject*&amp;, XPathObject**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408344"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408348">
            <name>const RandomAccessIter&lt;XPathObject*, XPathObject*&amp;, XPathObject**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408344"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408338">
            <name>const RandomAccessIter&lt;XPathObject*, const XPathObject*&amp;, const XPathObject**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408335"/>
            </content>
        </type>
        <type derived="true" id="type.7408340">
            <name>const RandomAccessIter&lt;XPathObject*, const XPathObject*&amp;, const XPathObject**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408335"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408339">
            <name>const RandomAccessIter&lt;XPathObject*, const XPathObject*&amp;, const XPathObject**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408335"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407808">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407805"/>
            </content>
        </type>
        <type derived="true" id="type.3826">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3823"/>
            </content>
        </type>
        <type derived="true" id="type.7407808">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407805"/>
            </content>
        </type>
        <type derived="true" id="type.7407810">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407805"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3828">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3823"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407809">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407805"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3827">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3823"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407809">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407805"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3697">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3694"/>
            </content>
        </type>
        <type derived="true" id="type.7407679">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407676"/>
            </content>
        </type>
        <type derived="true" id="type.7407681">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407676"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3699">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3694"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407681">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407676"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407680">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407676"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3698">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3694"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407698">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407695"/>
            </content>
        </type>
        <type derived="true" id="type.3716">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3713"/>
            </content>
        </type>
        <type derived="true" id="type.3718">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3713"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407700">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407695"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407699">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407695"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3717">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3713"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407699">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407695"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407997">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407994"/>
            </content>
        </type>
        <type derived="true" id="type.4014">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4011"/>
            </content>
        </type>
        <type derived="true" id="type.7407997">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407994"/>
            </content>
        </type>
        <type derived="true" id="type.7407999">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407994"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4016">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4011"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407999">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407994"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407998">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407994"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4015">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4011"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407998">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407994"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3727">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3724"/>
            </content>
        </type>
        <type derived="true" id="type.7407709">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407706"/>
            </content>
        </type>
        <type derived="true" id="type.7407711">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407706"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3729">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3724"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407710">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407706"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3728">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3724"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407710">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407706"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3706">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3703"/>
            </content>
        </type>
        <type derived="true" id="type.7407688">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407685"/>
            </content>
        </type>
        <type derived="true" id="type.7407690">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407685"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3708">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3703"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407690">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407685"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407689">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407685"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3707">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3703"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407689">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407685"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4201">
            <name>const RecursiveMutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
            </content>
        </type>
        <type derived="true" id="type.7408414">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Dom.Axis>, SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>, Less&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408411"/>
            </content>
        </type>
        <type derived="true" id="type.7408416">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Dom.Axis>, SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408411"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408415">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Dom.Axis>, SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408411"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408521">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, XPathFunction*>, SelectFirst&lt;String&lt;uchar>, XPathFunction*>, Less&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408518"/>
            </content>
        </type>
        <type derived="true" id="type.7408523">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, XPathFunction*>, SelectFirst&lt;String&lt;uchar>, XPathFunction*>, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408518"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408522">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, XPathFunction*>, SelectFirst&lt;String&lt;uchar>, XPathFunction*>, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408518"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408428">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408425"/>
            </content>
        </type>
        <type derived="true" id="type.7408430">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408425"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408429">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408425"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408535">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408532"/>
            </content>
        </type>
        <type derived="true" id="type.7408537">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408532"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408536">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408532"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408435">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, Pair&lt;String&lt;uchar>, System.Dom.Axis>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408432"/>
            </content>
        </type>
        <type derived="true" id="type.7408437">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, Pair&lt;String&lt;uchar>, System.Dom.Axis>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408432"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408436">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, Pair&lt;String&lt;uchar>, System.Dom.Axis>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408432"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408422">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, const Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, const Pair&lt;String&lt;uchar>, System.Dom.Axis>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408419"/>
            </content>
        </type>
        <type derived="true" id="type.7408424">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, const Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, const Pair&lt;String&lt;uchar>, System.Dom.Axis>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408419"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408423">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, const Pair&lt;String&lt;uchar>, System.Dom.Axis>&amp;, const Pair&lt;String&lt;uchar>, System.Dom.Axis>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408419"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408542">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, Pair&lt;String&lt;uchar>, XPathFunction*>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408539"/>
            </content>
        </type>
        <type derived="true" id="type.7408544">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, Pair&lt;String&lt;uchar>, XPathFunction*>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408539"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408543">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, Pair&lt;String&lt;uchar>, XPathFunction*>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408539"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408529">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, const Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, const Pair&lt;String&lt;uchar>, XPathFunction*>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408526"/>
            </content>
        </type>
        <type derived="true" id="type.7408531">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, const Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, const Pair&lt;String&lt;uchar>, XPathFunction*>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408526"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408530">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, const Pair&lt;String&lt;uchar>, XPathFunction*>&amp;, const Pair&lt;String&lt;uchar>, XPathFunction*>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408526"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4263">
            <name>const ReturnStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
            </content>
        </type>
        <type derived="true" id="type.4264">
            <name>const ReturnStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408402">
            <name>const SelectFirst&lt;String&lt;uchar>, System.Dom.Axis></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408401"/>
            </content>
        </type>
        <type derived="true" id="type.7408404">
            <name>const SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408401"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408403">
            <name>const SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408401"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408669">
            <name>const SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408401"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408668">
            <name>const SelectFirst&lt;String&lt;uchar>, System.Dom.Axis>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408401"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408509">
            <name>const SelectFirst&lt;String&lt;uchar>, XPathFunction*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408508"/>
            </content>
        </type>
        <type derived="true" id="type.7408511">
            <name>const SelectFirst&lt;String&lt;uchar>, XPathFunction*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408508"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408510">
            <name>const SelectFirst&lt;String&lt;uchar>, XPathFunction*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408508"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408955">
            <name>const SelectFirst&lt;String&lt;uchar>, XPathFunction*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408508"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408954">
            <name>const SelectFirst&lt;String&lt;uchar>, XPathFunction*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408508"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4245">
            <name>const SizeOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
            </content>
        </type>
        <type derived="true" id="type.4246">
            <name>const SizeOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4182">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
            </content>
        </type>
        <type derived="true" id="type.4183">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4196">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
            </content>
        </type>
        <type derived="true" id="type.7390041">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390036"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7390129">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390124"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7390128">
            <name>const String&lt;uchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390124"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7398924">
            <name>const String&lt;uchar>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390124"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7399088">
            <name>const String&lt;uchar>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390124"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4278">
            <name>const SwitchStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
            </content>
        </type>
        <type derived="true" id="type.4279">
            <name>const SwitchStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3840">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389612"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3746">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389455"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3745">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3759">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389487"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3768">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3772">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389515"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3767">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389500"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3747">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389457"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3761">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389490"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3762">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3835">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3764">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389495"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3752">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389475"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3765">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389497"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3751">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389473"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3837">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389609"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3750">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389464"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3856">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3773">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389517"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3854">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3749">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389462"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3753">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389477"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3771">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389513"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3748">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389459"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3804">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389560"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3755">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3775">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389521"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3732">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389432"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3756">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389482"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3774">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3734">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3777">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3796">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389543"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3794">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3793">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389539"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3758">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3770">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389511"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4202">
            <name>const ThreadingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
            </content>
        </type>
        <type derived="true" id="type.4203">
            <name>const ThreadingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4284">
            <name>const ThrowStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
            </content>
        </type>
        <type derived="true" id="type.4285">
            <name>const ThrowStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4312">
            <name>const TokenParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
            </content>
        </type>
        <type derived="true" id="type.4313">
            <name>const TokenParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4287">
            <name>const TryStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
            </content>
        </type>
        <type derived="true" id="type.4288">
            <name>const TryStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4208">
            <name>const Type</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
            </content>
        </type>
        <type derived="true" id="type.4209">
            <name>const Type&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4248">
            <name>const TypeName</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
            </content>
        </type>
        <type derived="true" id="type.4249">
            <name>const TypeName&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3757">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389483"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3769">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389503"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3836">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389601"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3841">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389613"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3838">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389610"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3760">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389488"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3754">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389478"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3766">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389498"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3763">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389493"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408660">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408405"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408950">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, XPathFunction*>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4230">
            <name>const UnaryMinus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
            </content>
        </type>
        <type derived="true" id="type.4231">
            <name>const UnaryMinus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4227">
            <name>const UnaryPlus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
            </content>
        </type>
        <type derived="true" id="type.4228">
            <name>const UnaryPlus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4206">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
            </content>
        </type>
        <type derived="true" id="type.4207">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408446">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408443"/>
            </content>
        </type>
        <type derived="true" id="type.7408448">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408443"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408447">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, System.Dom.Axis>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408443"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408553">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408550"/>
            </content>
        </type>
        <type derived="true" id="type.7408555">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408554">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, XPathFunction*>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408550"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408453">
            <name>const UniquePtr&lt;System.XPath.AxisMap></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408450"/>
            </content>
        </type>
        <type derived="true" id="type.7408455">
            <name>const UniquePtr&lt;System.XPath.AxisMap>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408450"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408454">
            <name>const UniquePtr&lt;System.XPath.AxisMap>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408450"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408292">
            <name>const UniquePtr&lt;System.XPath.XPathDebug></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408289"/>
            </content>
        </type>
        <type derived="true" id="type.7408294">
            <name>const UniquePtr&lt;System.XPath.XPathDebug>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408289"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408293">
            <name>const UniquePtr&lt;System.XPath.XPathDebug>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408289"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408299">
            <name>const UniquePtr&lt;System.XPath.XPathExpr></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408296"/>
            </content>
        </type>
        <type derived="true" id="type.7408301">
            <name>const UniquePtr&lt;System.XPath.XPathExpr>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408296"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408300">
            <name>const UniquePtr&lt;System.XPath.XPathExpr>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408296"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408306">
            <name>const UniquePtr&lt;System.XPath.XPathExpressionParser></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408303"/>
            </content>
        </type>
        <type derived="true" id="type.7408308">
            <name>const UniquePtr&lt;System.XPath.XPathExpressionParser>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408303"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408307">
            <name>const UniquePtr&lt;System.XPath.XPathExpressionParser>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408303"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408568">
            <name>const UniquePtr&lt;System.XPath.XPathFunction></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408565"/>
            </content>
        </type>
        <type derived="true" id="type.7408570">
            <name>const UniquePtr&lt;System.XPath.XPathFunction>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408565"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408569">
            <name>const UniquePtr&lt;System.XPath.XPathFunction>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408565"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408561">
            <name>const UniquePtr&lt;System.XPath.XPathFunctionLibrary></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408558"/>
            </content>
        </type>
        <type derived="true" id="type.7408563">
            <name>const UniquePtr&lt;System.XPath.XPathFunctionLibrary>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408562">
            <name>const UniquePtr&lt;System.XPath.XPathFunctionLibrary>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408558"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408357">
            <name>const UniquePtr&lt;System.XPath.XPathNodeSet></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408354"/>
            </content>
        </type>
        <type derived="true" id="type.7408359">
            <name>const UniquePtr&lt;System.XPath.XPathNodeSet>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408354"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408358">
            <name>const UniquePtr&lt;System.XPath.XPathNodeSet>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408354"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408366">
            <name>const UniquePtr&lt;System.XPath.XPathNodeTestExpr></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408363"/>
            </content>
        </type>
        <type derived="true" id="type.7408368">
            <name>const UniquePtr&lt;System.XPath.XPathNodeTestExpr>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408363"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408367">
            <name>const UniquePtr&lt;System.XPath.XPathNodeTestExpr>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408363"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408316">
            <name>const UniquePtr&lt;System.XPath.XPathObject></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408313"/>
            </content>
        </type>
        <type derived="true" id="type.7408318">
            <name>const UniquePtr&lt;System.XPath.XPathObject>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408313"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408317">
            <name>const UniquePtr&lt;System.XPath.XPathObject>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408313"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3817">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408813">
            <name>const ValueObject&lt;System.Dom.Axis></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408810"/>
            </content>
        </type>
        <type derived="true" id="type.7408815">
            <name>const ValueObject&lt;System.Dom.Axis>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408810"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408814">
            <name>const ValueObject&lt;System.Dom.Axis>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408810"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408703">
            <name>const ValueObject&lt;XPathExpr*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408700"/>
            </content>
        </type>
        <type derived="true" id="type.7408705">
            <name>const ValueObject&lt;XPathExpr*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408700"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408704">
            <name>const ValueObject&lt;XPathExpr*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408700"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408763">
            <name>const ValueObject&lt;XPathFunctionCall*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408760"/>
            </content>
        </type>
        <type derived="true" id="type.7408765">
            <name>const ValueObject&lt;XPathFunctionCall*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408760"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408764">
            <name>const ValueObject&lt;XPathFunctionCall*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408760"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408794">
            <name>const ValueObject&lt;XPathLocationStepExpr*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408791"/>
            </content>
        </type>
        <type derived="true" id="type.7408796">
            <name>const ValueObject&lt;XPathLocationStepExpr*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408791"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408795">
            <name>const ValueObject&lt;XPathLocationStepExpr*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408791"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408820">
            <name>const ValueObject&lt;XPathNodeTestExpr*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408817"/>
            </content>
        </type>
        <type derived="true" id="type.7408822">
            <name>const ValueObject&lt;XPathNodeTestExpr*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408817"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408821">
            <name>const ValueObject&lt;XPathNodeTestExpr*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7408817"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4071">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7397113"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407242">
            <name>const XPathAddExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathAddExpr_64D5E0CDC0D9A75C10B3433A367150D0A5B7ED6F"/>
            </content>
        </type>
        <type derived="true" id="type.7407244">
            <name>const XPathAddExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathAddExpr_64D5E0CDC0D9A75C10B3433A367150D0A5B7ED6F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407243">
            <name>const XPathAddExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathAddExpr_64D5E0CDC0D9A75C10B3433A367150D0A5B7ED6F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407200">
            <name>const XPathAndExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathAndExpr_6BE495B589C8902EFF40B7D143B7C2D2931BD4F3"/>
            </content>
        </type>
        <type derived="true" id="type.7407202">
            <name>const XPathAndExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathAndExpr_6BE495B589C8902EFF40B7D143B7C2D2931BD4F3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407201">
            <name>const XPathAndExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathAndExpr_6BE495B589C8902EFF40B7D143B7C2D2931BD4F3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407337">
            <name>const XPathAnyNodeTest</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathAnyNodeTest_1653BD12B7022917E52975C2AB2EFC101974D53E"/>
            </content>
        </type>
        <type derived="true" id="type.7407339">
            <name>const XPathAnyNodeTest&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathAnyNodeTest_1653BD12B7022917E52975C2AB2EFC101974D53E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407338">
            <name>const XPathAnyNodeTest*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathAnyNodeTest_1653BD12B7022917E52975C2AB2EFC101974D53E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407188">
            <name>const XPathBinaryExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
            </content>
        </type>
        <type derived="true" id="type.7407190">
            <name>const XPathBinaryExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407189">
            <name>const XPathBinaryExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathBinaryExpr_0EAB6B173744CD23F615186BED4C48FD7622A2DD"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407659">
            <name>const XPathBoolean</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathBoolean_62EBEB870905B1B981080A7A18EBBBD98ADD5C4A"/>
            </content>
        </type>
        <type derived="true" id="type.7407661">
            <name>const XPathBoolean&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathBoolean_62EBEB870905B1B981080A7A18EBBBD98ADD5C4A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407660">
            <name>const XPathBoolean*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathBoolean_62EBEB870905B1B981080A7A18EBBBD98ADD5C4A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407284">
            <name>const XPathCombineStepExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathCombineStepExpr_1E1819F1735CC284A8A4A12D8028573B7028D63A"/>
            </content>
        </type>
        <type derived="true" id="type.7407286">
            <name>const XPathCombineStepExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathCombineStepExpr_1E1819F1735CC284A8A4A12D8028573B7028D63A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407285">
            <name>const XPathCombineStepExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathCombineStepExpr_1E1819F1735CC284A8A4A12D8028573B7028D63A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407325">
            <name>const XPathCommentNodeTest</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathCommentNodeTest_8E388602C7FD6F18286CE97DC687F1196E059DDC"/>
            </content>
        </type>
        <type derived="true" id="type.7407327">
            <name>const XPathCommentNodeTest&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathCommentNodeTest_8E388602C7FD6F18286CE97DC687F1196E059DDC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407326">
            <name>const XPathCommentNodeTest*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathCommentNodeTest_8E388602C7FD6F18286CE97DC687F1196E059DDC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407157">
            <name>const XPathContext</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathContext_54EB2271A3739C07EC41BC345CC60F436CFAB6BB"/>
            </content>
        </type>
        <type derived="true" id="type.7407159">
            <name>const XPathContext&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathContext_54EB2271A3739C07EC41BC345CC60F436CFAB6BB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407158">
            <name>const XPathContext*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathContext_54EB2271A3739C07EC41BC345CC60F436CFAB6BB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407161">
            <name>const XPathDebug</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathDebug_1C2BEF2B9EA73DDB3A8B4AFA3612DB04B949B963"/>
            </content>
        </type>
        <type derived="true" id="type.7407163">
            <name>const XPathDebug&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathDebug_1C2BEF2B9EA73DDB3A8B4AFA3612DB04B949B963"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407162">
            <name>const XPathDebug*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathDebug_1C2BEF2B9EA73DDB3A8B4AFA3612DB04B949B963"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407260">
            <name>const XPathDivExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathDivExpr_DC2257E71CE47BD3F13502B631A85953A6CCCF2F"/>
            </content>
        </type>
        <type derived="true" id="type.7407262">
            <name>const XPathDivExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathDivExpr_DC2257E71CE47BD3F13502B631A85953A6CCCF2F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407261">
            <name>const XPathDivExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathDivExpr_DC2257E71CE47BD3F13502B631A85953A6CCCF2F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407206">
            <name>const XPathEqualExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathEqualExpr_CC0741F4FE017F177A8AA8CEE613CAAA6F130568"/>
            </content>
        </type>
        <type derived="true" id="type.7407208">
            <name>const XPathEqualExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathEqualExpr_CC0741F4FE017F177A8AA8CEE613CAAA6F130568"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407207">
            <name>const XPathEqualExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathEqualExpr_CC0741F4FE017F177A8AA8CEE613CAAA6F130568"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4331">
            <name>const XPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathException_5F5973D81A22230252D5069223C1877CBFBA755A"/>
            </content>
        </type>
        <type derived="true" id="type.4332">
            <name>const XPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathException_5F5973D81A22230252D5069223C1877CBFBA755A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407176">
            <name>const XPathExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
            </content>
        </type>
        <type derived="true" id="type.7407178">
            <name>const XPathExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407177">
            <name>const XPathExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4173">
            <name>const XPathExpr*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathExpr_95EA600BC53B469A10904A46CE3A1CA4901C4480"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4340">
            <name>const XPathExpressionGrammar</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathExpressionGrammar_D3F93E9C453CF512F7EEFBB47E0459A564D21DCE"/>
            </content>
        </type>
        <type derived="true" id="type.4341">
            <name>const XPathExpressionGrammar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathExpressionGrammar_D3F93E9C453CF512F7EEFBB47E0459A564D21DCE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408311">
            <name>const XPathExpressionParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathExpressionParser_F078FB4A0E8588AEF4683A48C55651DE936AED9B"/>
            </content>
        </type>
        <type derived="true" id="type.7408312">
            <name>const XPathExpressionParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathExpressionParser_F078FB4A0E8588AEF4683A48C55651DE936AED9B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408310">
            <name>const XPathExpressionParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathExpressionParser_F078FB4A0E8588AEF4683A48C55651DE936AED9B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407296">
            <name>const XPathFilterExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFilterExpr_C70744E20146504EF089A77257ED4D36041A468A"/>
            </content>
        </type>
        <type derived="true" id="type.7407298">
            <name>const XPathFilterExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFilterExpr_C70744E20146504EF089A77257ED4D36041A468A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407297">
            <name>const XPathFilterExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFilterExpr_C70744E20146504EF089A77257ED4D36041A468A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407614">
            <name>const XPathFunction</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
            </content>
        </type>
        <type derived="true" id="type.7407616">
            <name>const XPathFunction&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407615">
            <name>const XPathFunction*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408507">
            <name>const XPathFunction*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFunction_4E98AF12C16CEE36444238CC7D9E37903E24A408"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407377">
            <name>const XPathFunctionCall</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFunctionCall_C5BB4DC232BD6346E04957475A9C86B8F8521E16"/>
            </content>
        </type>
        <type derived="true" id="type.7407379">
            <name>const XPathFunctionCall&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFunctionCall_C5BB4DC232BD6346E04957475A9C86B8F8521E16"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407378">
            <name>const XPathFunctionCall*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFunctionCall_C5BB4DC232BD6346E04957475A9C86B8F8521E16"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4175">
            <name>const XPathFunctionCall*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFunctionCall_C5BB4DC232BD6346E04957475A9C86B8F8521E16"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407618">
            <name>const XPathFunctionLibrary</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFunctionLibrary_5044787DDFDAF4AF5701F92F8775A709B4496547"/>
            </content>
        </type>
        <type derived="true" id="type.7407620">
            <name>const XPathFunctionLibrary&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFunctionLibrary_5044787DDFDAF4AF5701F92F8775A709B4496547"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407619">
            <name>const XPathFunctionLibrary*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFunctionLibrary_5044787DDFDAF4AF5701F92F8775A709B4496547"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408963">
            <name>const XPathFunctionLibrary*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFunctionLibrary_5044787DDFDAF4AF5701F92F8775A709B4496547"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408962">
            <name>const XPathFunctionLibrary**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathFunctionLibrary_5044787DDFDAF4AF5701F92F8775A709B4496547"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407224">
            <name>const XPathGreaterExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathGreaterExpr_41B33DD4B2A08AFD60C521F68E2BE22044CCA315"/>
            </content>
        </type>
        <type derived="true" id="type.7407226">
            <name>const XPathGreaterExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathGreaterExpr_41B33DD4B2A08AFD60C521F68E2BE22044CCA315"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407225">
            <name>const XPathGreaterExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathGreaterExpr_41B33DD4B2A08AFD60C521F68E2BE22044CCA315"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407236">
            <name>const XPathGreaterOrEqualExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathGreaterOrEqualExpr_D23CE14AC5AADA96029DF5B4EF07289DD172803B"/>
            </content>
        </type>
        <type derived="true" id="type.7407238">
            <name>const XPathGreaterOrEqualExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathGreaterOrEqualExpr_D23CE14AC5AADA96029DF5B4EF07289DD172803B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407237">
            <name>const XPathGreaterOrEqualExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathGreaterOrEqualExpr_D23CE14AC5AADA96029DF5B4EF07289DD172803B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407218">
            <name>const XPathLessExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathLessExpr_B701BDBB55711A0AB3EF413A2A9D1CC9BC2B1511"/>
            </content>
        </type>
        <type derived="true" id="type.7407220">
            <name>const XPathLessExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathLessExpr_B701BDBB55711A0AB3EF413A2A9D1CC9BC2B1511"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407219">
            <name>const XPathLessExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathLessExpr_B701BDBB55711A0AB3EF413A2A9D1CC9BC2B1511"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407230">
            <name>const XPathLessOrEqualExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathLessOrEqualExpr_1C653B955EC20419DAFC98236046E34770D41F6D"/>
            </content>
        </type>
        <type derived="true" id="type.7407232">
            <name>const XPathLessOrEqualExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathLessOrEqualExpr_1C653B955EC20419DAFC98236046E34770D41F6D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407231">
            <name>const XPathLessOrEqualExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathLessOrEqualExpr_1C653B955EC20419DAFC98236046E34770D41F6D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407365">
            <name>const XPathLiteral</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathLiteral_97BC2333DDDF6EABF7DA5FD272541734687A14E8"/>
            </content>
        </type>
        <type derived="true" id="type.7407367">
            <name>const XPathLiteral&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathLiteral_97BC2333DDDF6EABF7DA5FD272541734687A14E8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407366">
            <name>const XPathLiteral*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathLiteral_97BC2333DDDF6EABF7DA5FD272541734687A14E8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407309">
            <name>const XPathLocationStepExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathLocationStepExpr_9B4616EA86D04D07EC9E1FA3C0C129DFEC975494"/>
            </content>
        </type>
        <type derived="true" id="type.7407311">
            <name>const XPathLocationStepExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathLocationStepExpr_9B4616EA86D04D07EC9E1FA3C0C129DFEC975494"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407310">
            <name>const XPathLocationStepExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathLocationStepExpr_9B4616EA86D04D07EC9E1FA3C0C129DFEC975494"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4177">
            <name>const XPathLocationStepExpr*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathLocationStepExpr_9B4616EA86D04D07EC9E1FA3C0C129DFEC975494"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407266">
            <name>const XPathModExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathModExpr_7DB9EBB1DF4E3D4EE87B5DBC20E76007C53963F5"/>
            </content>
        </type>
        <type derived="true" id="type.7407268">
            <name>const XPathModExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathModExpr_7DB9EBB1DF4E3D4EE87B5DBC20E76007C53963F5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407267">
            <name>const XPathModExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathModExpr_7DB9EBB1DF4E3D4EE87B5DBC20E76007C53963F5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407254">
            <name>const XPathMulExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathMulExpr_3999187027305818E384D1FCB2308929E48BDFEB"/>
            </content>
        </type>
        <type derived="true" id="type.7407256">
            <name>const XPathMulExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathMulExpr_3999187027305818E384D1FCB2308929E48BDFEB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407255">
            <name>const XPathMulExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathMulExpr_3999187027305818E384D1FCB2308929E48BDFEB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407353">
            <name>const XPathNameTest</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNameTest_1BB9325BB075144D167439A70658B1743BE5F322"/>
            </content>
        </type>
        <type derived="true" id="type.7407355">
            <name>const XPathNameTest&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNameTest_1BB9325BB075144D167439A70658B1743BE5F322"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407354">
            <name>const XPathNameTest*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNameTest_1BB9325BB075144D167439A70658B1743BE5F322"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407653">
            <name>const XPathNodeSet</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNodeSet_70D9F2F055A2EAFCF3988BC033AE454E204F643A"/>
            </content>
        </type>
        <type derived="true" id="type.7407655">
            <name>const XPathNodeSet&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNodeSet_70D9F2F055A2EAFCF3988BC033AE454E204F643A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407654">
            <name>const XPathNodeSet*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNodeSet_70D9F2F055A2EAFCF3988BC033AE454E204F643A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407300">
            <name>const XPathNodeTestExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
            </content>
        </type>
        <type derived="true" id="type.7407302">
            <name>const XPathNodeTestExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407301">
            <name>const XPathNodeTestExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4180">
            <name>const XPathNodeTestExpr*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNodeTestExpr_26AC4EE244D50D2DFBED03DCDBB56A11B4D3DFFE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407212">
            <name>const XPathNotEqualExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNotEqualExpr_8332C1622B73ED060248380F14625509104DF080"/>
            </content>
        </type>
        <type derived="true" id="type.7407214">
            <name>const XPathNotEqualExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNotEqualExpr_8332C1622B73ED060248380F14625509104DF080"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407213">
            <name>const XPathNotEqualExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNotEqualExpr_8332C1622B73ED060248380F14625509104DF080"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407665">
            <name>const XPathNumber</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNumber_030E4A77BFA393ABC52B71D17310DFB36384486F"/>
            </content>
        </type>
        <type derived="true" id="type.7407667">
            <name>const XPathNumber&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNumber_030E4A77BFA393ABC52B71D17310DFB36384486F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407666">
            <name>const XPathNumber*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNumber_030E4A77BFA393ABC52B71D17310DFB36384486F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407371">
            <name>const XPathNumberExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNumberExpr_CB62E9D51F1A4F9AA7E3937722FE3487F75F3D27"/>
            </content>
        </type>
        <type derived="true" id="type.7407373">
            <name>const XPathNumberExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNumberExpr_CB62E9D51F1A4F9AA7E3937722FE3487F75F3D27"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407372">
            <name>const XPathNumberExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathNumberExpr_CB62E9D51F1A4F9AA7E3937722FE3487F75F3D27"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407647">
            <name>const XPathObject</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
            </content>
        </type>
        <type derived="true" id="type.7407649">
            <name>const XPathObject&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407648">
            <name>const XPathObject*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408333">
            <name>const XPathObject*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7408334">
            <name>const XPathObject**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathObject_91D53F03F45FCACE5D10959D030939A3CBB38F3E"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407194">
            <name>const XPathOrExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathOrExpr_EBB1FF34863F294BF41D4497F5DB49E26CC99F32"/>
            </content>
        </type>
        <type derived="true" id="type.7407196">
            <name>const XPathOrExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathOrExpr_EBB1FF34863F294BF41D4497F5DB49E26CC99F32"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407195">
            <name>const XPathOrExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathOrExpr_EBB1FF34863F294BF41D4497F5DB49E26CC99F32"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407321">
            <name>const XPathPILiteralTest</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathPILiteralTest_3F86EF025B928E10BDB8373B7B25849DD41E16C9"/>
            </content>
        </type>
        <type derived="true" id="type.7407323">
            <name>const XPathPILiteralTest&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathPILiteralTest_3F86EF025B928E10BDB8373B7B25849DD41E16C9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407322">
            <name>const XPathPILiteralTest*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathPILiteralTest_3F86EF025B928E10BDB8373B7B25849DD41E16C9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407333">
            <name>const XPathPINodeTest</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathPINodeTest_3C6062E8681A250F424D8059EE5DD0803B3BFF00"/>
            </content>
        </type>
        <type derived="true" id="type.7407335">
            <name>const XPathPINodeTest&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathPINodeTest_3C6062E8681A250F424D8059EE5DD0803B3BFF00"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407334">
            <name>const XPathPINodeTest*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathPINodeTest_3C6062E8681A250F424D8059EE5DD0803B3BFF00"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407347">
            <name>const XPathPrefixTest</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathPrefixTest_7D0E6C8BFF9C298E4E7B339F475D675FA9161187"/>
            </content>
        </type>
        <type derived="true" id="type.7407349">
            <name>const XPathPrefixTest&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathPrefixTest_7D0E6C8BFF9C298E4E7B339F475D675FA9161187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407348">
            <name>const XPathPrefixTest*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathPrefixTest_7D0E6C8BFF9C298E4E7B339F475D675FA9161187"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407341">
            <name>const XPathPrincipalNodeTest</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathPrincipalNodeTest_95934E4A6771EAB845EC93002DCFD0E63193516F"/>
            </content>
        </type>
        <type derived="true" id="type.7407343">
            <name>const XPathPrincipalNodeTest&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathPrincipalNodeTest_95934E4A6771EAB845EC93002DCFD0E63193516F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407342">
            <name>const XPathPrincipalNodeTest*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathPrincipalNodeTest_95934E4A6771EAB845EC93002DCFD0E63193516F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407290">
            <name>const XPathRootNodeExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathRootNodeExpr_80F36A5C737D3E6D91496D2F168E801F8D3AF7F9"/>
            </content>
        </type>
        <type derived="true" id="type.7407292">
            <name>const XPathRootNodeExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathRootNodeExpr_80F36A5C737D3E6D91496D2F168E801F8D3AF7F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407291">
            <name>const XPathRootNodeExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathRootNodeExpr_80F36A5C737D3E6D91496D2F168E801F8D3AF7F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407671">
            <name>const XPathString</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathString_A53CB226777116E5435EF7B51EABFD704B80F682"/>
            </content>
        </type>
        <type derived="true" id="type.7407673">
            <name>const XPathString&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathString_A53CB226777116E5435EF7B51EABFD704B80F682"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407672">
            <name>const XPathString*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathString_A53CB226777116E5435EF7B51EABFD704B80F682"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407248">
            <name>const XPathSubExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathSubExpr_69FED22A13C6C7B2368B46347B4CAEE97468576A"/>
            </content>
        </type>
        <type derived="true" id="type.7407250">
            <name>const XPathSubExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathSubExpr_69FED22A13C6C7B2368B46347B4CAEE97468576A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407249">
            <name>const XPathSubExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathSubExpr_69FED22A13C6C7B2368B46347B4CAEE97468576A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407329">
            <name>const XPathTextNodeTest</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathTextNodeTest_F61C5D2B1A43AC9CF9EF724B603C0B62AFAFC24E"/>
            </content>
        </type>
        <type derived="true" id="type.7407331">
            <name>const XPathTextNodeTest&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathTextNodeTest_F61C5D2B1A43AC9CF9EF724B603C0B62AFAFC24E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407330">
            <name>const XPathTextNodeTest*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathTextNodeTest_F61C5D2B1A43AC9CF9EF724B603C0B62AFAFC24E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407182">
            <name>const XPathUnaryExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathUnaryExpr_86009132751C9E3CD64BE15301415EF8A1979F72"/>
            </content>
        </type>
        <type derived="true" id="type.7407184">
            <name>const XPathUnaryExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathUnaryExpr_86009132751C9E3CD64BE15301415EF8A1979F72"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407183">
            <name>const XPathUnaryExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathUnaryExpr_86009132751C9E3CD64BE15301415EF8A1979F72"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407272">
            <name>const XPathUnaryMinusExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathUnaryMinusExpr_AF3C43FA8F0EDE3BC21F7EE19995FC56E6C75626"/>
            </content>
        </type>
        <type derived="true" id="type.7407274">
            <name>const XPathUnaryMinusExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathUnaryMinusExpr_AF3C43FA8F0EDE3BC21F7EE19995FC56E6C75626"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407273">
            <name>const XPathUnaryMinusExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathUnaryMinusExpr_AF3C43FA8F0EDE3BC21F7EE19995FC56E6C75626"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407278">
            <name>const XPathUnionExpr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathUnionExpr_7AF61B483D2A2CBC8E988375E936460948104FD6"/>
            </content>
        </type>
        <type derived="true" id="type.7407280">
            <name>const XPathUnionExpr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathUnionExpr_7AF61B483D2A2CBC8E988375E936460948104FD6"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407279">
            <name>const XPathUnionExpr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathUnionExpr_7AF61B483D2A2CBC8E988375E936460948104FD6"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407359">
            <name>const XPathVariableReference</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathVariableReference_73ACE515A08D085D024DDFA8B32D529F578FDFAD"/>
            </content>
        </type>
        <type derived="true" id="type.7407361">
            <name>const XPathVariableReference&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathVariableReference_73ACE515A08D085D024DDFA8B32D529F578FDFAD"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407360">
            <name>const XPathVariableReference*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XPathVariableReference_73ACE515A08D085D024DDFA8B32D529F578FDFAD"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4320">
            <name>const XmlGrammar</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlGrammar_514387B50789C8E470155317F17349CFC3DF6E94"/>
            </content>
        </type>
        <type derived="true" id="type.4321">
            <name>const XmlGrammar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlGrammar_514387B50789C8E470155317F17349CFC3DF6E94"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4323">
            <name>const XmlProcessingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlProcessingException_38961E809BD4812FD6BEA01B8DDA08229100E6F5"/>
            </content>
        </type>
        <type derived="true" id="type.4324">
            <name>const XmlProcessingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlProcessingException_38961E809BD4812FD6BEA01B8DDA08229100E6F5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4105">
            <name>const double&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388905"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4103">
            <name>const float&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388904"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4092">
            <name>const sbyte&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388896"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4095">
            <name>const short&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4317">
            <name>const stdlib</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
            </content>
        </type>
        <type derived="true" id="type.4318">
            <name>const stdlib&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7390131">
            <name>const uchar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388908"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4097">
            <name>const ushort&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388899"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388905">
            <name>double</name>
        </type>
        <type basic="true" id="type.7388904">
            <name>float</name>
        </type>
        <type basic="true" id="type.7388900">
            <name>int</name>
        </type>
        <type basic="true" id="type.7388902">
            <name>long</name>
        </type>
        <type basic="true" id="type.7388896">
            <name>sbyte</name>
        </type>
        <type basic="true" id="type.7388898">
            <name>short</name>
        </type>
        <type derived="true" id="type.4319">
            <name>stdlib&amp;&amp;</name>
            <content>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388908">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.7388951">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.7388908"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388950">
            <name>uchar*</name>
            <content>
                <baseType ref="type.7388908"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388901">
            <name>uint</name>
        </type>
        <type derived="true" id="type.7388930">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.7388901"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388929">
            <name>uint*</name>
            <content>
                <baseType ref="type.7388901"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388903">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.7388936">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.7388903"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388935">
            <name>ulong*</name>
            <content>
                <baseType ref="type.7388903"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388899">
            <name>ushort</name>
        </type>
        <type basic="true" id="type.7388907">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.7388948">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.7388907"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388947">
            <name>wchar*</name>
            <content>
                <baseType ref="type.7388907"/>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
