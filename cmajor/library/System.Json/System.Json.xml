<library>
    <name>System.Json</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Json">
            <name>System.Json</name>
            <classes>
                <class id="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18">
                    <name>JsonArray</name>
                    <groupName>JsonArray</groupName>
                    <syntax> public class JsonArray;</syntax>
                    <baseClass ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                    <constructors>
                        <constructor id="default_constructor_JsonArray_27ECF6EF0157D1CAB00898D898CC7849D18B95CB">
                            <name>JsonArray()</name>
                            <syntax>public nothrow JsonArray();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddItem_JsonArray_93D6706B2A24ED128A3C59415964A857BA13317F">
                            <name>AddItem(UniquePtr&lt;System.Json.JsonValue>&amp;&amp; item)</name>
                            <syntax>public void AddItem(UniquePtr&lt;System.Json.JsonValue>&amp;&amp; item);</syntax>
                            <parameters>
                                <parameter>
                                    <name>item</name>
                                    <type ref="type.9504885"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Count_JsonArray_57652BF582B2E717BB319EE40CAA85E2A285CDEB">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.9490433"/>
                        </function>
                        <function id="member_function_ToString_JsonArray_BA7E1AD315213109D0099F88CDFFD9C0E98E2E93">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.9491567"/>
                        </function>
                        <function id="member_function_op_index_JsonArray_1378E53BF82426D07CFC777A2B475C65FFE24597">
                            <name>operator[](long index) const</name>
                            <syntax>public JsonValue* operator[](long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.9490433"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504124"/>
                        </function>
                    </functions>
                </class>
                <class id="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79">
                    <name>JsonBool</name>
                    <groupName>JsonBool</groupName>
                    <syntax> public class JsonBool;</syntax>
                    <baseClass ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                    <constructors>
                        <constructor id="default_constructor_JsonBool_6CDD1C0BAA418963493BBB6418B186CF96E87CE9">
                            <name>JsonBool()</name>
                            <syntax>public nothrow JsonBool();</syntax>
                        </constructor>
                        <constructor id="constructor_JsonBool_29321643A9D00B4E2219FA0BA146A80E0BBFD182">
                            <name>JsonBool(bool value_)</name>
                            <syntax>public nothrow explicit JsonBool(bool value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.9490426"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_SetValue_JsonBool_465B34C0AC7756D2E393EF971A4CBF597F63549F">
                            <name>SetValue(bool value_)</name>
                            <syntax>public nothrow inline void SetValue(bool value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.9490426"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ToString_JsonBool_11D1A4DC9F36611D4EC388D0AEB6152721A9A1BF">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.9491567"/>
                        </function>
                        <function id="member_function_Value_JsonBool_04618DA66215ABE8B9F977205B2D90FA5BBD060A">
                            <name>Value() const</name>
                            <syntax>public nothrow inline bool Value() const;</syntax>
                            <returnType ref="type.9490426"/>
                        </function>
                    </functions>
                </class>
                <class id="class_JsonClassFactory_07F3FE1559307E1B17EEBEAFBAA8C9DBAA71924E">
                    <name>JsonClassFactory</name>
                    <groupName>JsonClassFactory</groupName>
                    <syntax> public class JsonClassFactory;</syntax>
                    <functions>
                        <function id="member_function_CreateJsonClass_JsonClassFactory_BF574F7BB5506F6308DE0A8473F81F40BA047ACC">
                            <name>CreateJsonClass(const String&lt;uchar>&amp; jsonClassName, JsonValue* value)</name>
                            <syntax>public void* CreateJsonClass(const String&lt;uchar>&amp; jsonClassName, JsonValue* value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>jsonClassName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9490578"/>
                        </function>
                        <function id="member_function_RegisterJsonClass_JsonClassFactory_C3CEBA73260CF15D9C8F3CBA161BDCE1F5A417E9">
                            <name>RegisterJsonClass(const String&lt;uchar>&amp; jsonClassName, JsonClassCreatorDelegate creator)</name>
                            <syntax>public void RegisterJsonClass(const String&lt;uchar>&amp; jsonClassName, JsonClassCreatorDelegate creator);</syntax>
                            <parameters>
                                <parameter>
                                    <name>jsonClassName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>creator</name>
                                    <type ref="9504169"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_JsonClassFactory_D38F97BAC91B814118DAFA2C3E655F501E7D3CD9">
                            <name>Instance()</name>
                            <syntax>public static JsonClassFactory&amp; Instance();</syntax>
                            <returnType ref="type.9504172"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318">
                    <name>JsonGrammar</name>
                    <groupName>JsonGrammar</groupName>
                    <syntax> public class JsonGrammar;</syntax>
                    <baseClass ref="class_Grammar_2180D00808E7A786B21C35D11B36E77EC171A6C6"/>
                    <constructors>
                        <constructor id="default_constructor_JsonGrammar_1DB8D01EFAC1CEB1D3029D41B94B632BAB7B4BE0">
                            <name>JsonGrammar()</name>
                            <syntax>public JsonGrammar();</syntax>
                        </constructor>
                        <constructor id="constructor_JsonGrammar_BCAACB6C3F24AF6C14564C9A1F52903CDE668AAC">
                            <name>JsonGrammar(ParsingDomain* parsingDomain)</name>
                            <syntax>public JsonGrammar(ParsingDomain* parsingDomain);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parsingDomain</name>
                                    <type ref="type.9498668"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CreateRules_JsonGrammar_D6A82B25C567F66A831D4C2E84BAF38D9A84CF7E">
                            <name>CreateRules()</name>
                            <syntax>public override void CreateRules();</syntax>
                        </function>
                        <function id="member_function_GetReferencedGrammars_JsonGrammar_0DD617D5F948F46B03B9C5A995696B4EC6B595F4">
                            <name>GetReferencedGrammars()</name>
                            <syntax>public override void GetReferencedGrammars();</syntax>
                        </function>
                        <function id="member_function_Parse_JsonGrammar_657298B2AC17F5EF7701EF3B2F2F1DE7C6D17844">
                            <name>Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName)</name>
                            <syntax>public JsonValue* Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start</name>
                                    <type ref="type.9491662"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="type.9491662"/>
                                </parameter>
                                <parameter>
                                    <name>fileIndex</name>
                                    <type ref="type.9490431"/>
                                </parameter>
                                <parameter>
                                    <name>fileName</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504124"/>
                        </function>
                    </functions>
                </class>
                <class id="class_JsonImportException_B2C659772CC55BEE3DF2ECEA8C50121E3DA06723">
                    <name>JsonImportException</name>
                    <groupName>JsonImportException</groupName>
                    <syntax> public class JsonImportException;</syntax>
                    <baseClass ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                    <constructors>
                        <constructor id="constructor_JsonImportException_9015D892D35DFEF8203E58FB745BF6B2D9C1ED9A">
                            <name>JsonImportException(const String&lt;char>&amp; message_)</name>
                            <syntax>public nothrow JsonImportException(const String&lt;char>&amp; message_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="class_JsonNull_E0746AE6880508740D5FFC8AF4E0FB0A7AE20ED2">
                    <name>JsonNull</name>
                    <groupName>JsonNull</groupName>
                    <syntax> public class JsonNull;</syntax>
                    <baseClass ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                    <functions>
                        <function id="member_function_ToString_JsonNull_98302ABC70984F02CEFDC4D7D9AC5077D5C3C670">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.9491567"/>
                        </function>
                    </functions>
                </class>
                <class id="class_JsonNumber_BA94887A1742701B420D069040E7953026161429">
                    <name>JsonNumber</name>
                    <groupName>JsonNumber</groupName>
                    <syntax> public class JsonNumber;</syntax>
                    <baseClass ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                    <constructors>
                        <constructor id="default_constructor_JsonNumber_E3F45F095A90F5A0F4FBE1C03D7FB8FF4D10A14B">
                            <name>JsonNumber()</name>
                            <syntax>public nothrow JsonNumber();</syntax>
                        </constructor>
                        <constructor id="constructor_JsonNumber_FDC08E33EFFBBE794D13997E4CAE9D2B808068F9">
                            <name>JsonNumber(double value_)</name>
                            <syntax>public nothrow explicit JsonNumber(double value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.9490436"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_SetValue_JsonNumber_DAAA54BD89B58AB65CD4499C7D07AF0E9ACA07B4">
                            <name>SetValue(double value_)</name>
                            <syntax>public nothrow inline void SetValue(double value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.9490436"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ToString_JsonNumber_550723B35AC58E078F1F206AFC8854D1AE621DD1">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.9491567"/>
                        </function>
                        <function id="member_function_Value_JsonNumber_EEB14F86A8149741AF8DCC15731228CBFFE63CA3">
                            <name>Value() const</name>
                            <syntax>public nothrow inline double Value() const;</syntax>
                            <returnType ref="type.9490436"/>
                        </function>
                    </functions>
                </class>
                <class id="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D">
                    <name>JsonObject</name>
                    <groupName>JsonObject</groupName>
                    <syntax> public class JsonObject;</syntax>
                    <baseClass ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                    <constructors>
                        <constructor id="default_constructor_JsonObject_E16F3B423E9F14DE43D5DAB5762ADFDEABE53987">
                            <name>JsonObject()</name>
                            <syntax>public JsonObject();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_AddField_9C28B5737E68F5B7F6EFF0734E146A93E593F379">
                            <name>AddField</name>
                            <overloads>
                                <overload id="member_function_AddField_JsonObject_DD02685AFE75C76A9991A018417EFA3C01D031D2">
                                    <name>AddField(const String&lt;char>&amp; fieldName, UniquePtr&lt;System.Json.JsonValue>&amp;&amp; fieldValue)</name>
                                    <syntax>public void AddField(const String&lt;char>&amp; fieldName, UniquePtr&lt;System.Json.JsonValue>&amp;&amp; fieldValue);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>fieldName</name>
                                            <type ref="type.9491572"/>
                                        </parameter>
                                        <parameter>
                                            <name>fieldValue</name>
                                            <type ref="type.9504885"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_AddField_JsonObject_8DFE70E7F550CB1ED6417EB9195A69A486F401DC">
                                    <name>AddField(const String&lt;uchar>&amp; fieldName, UniquePtr&lt;System.Json.JsonValue>&amp;&amp; fieldValue)</name>
                                    <syntax>public void AddField(const String&lt;uchar>&amp; fieldName, UniquePtr&lt;System.Json.JsonValue>&amp;&amp; fieldValue);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>fieldName</name>
                                            <type ref="type.9491660"/>
                                        </parameter>
                                        <parameter>
                                            <name>fieldValue</name>
                                            <type ref="type.9504885"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_AddField_JsonObject_BB0F40BF879C0642E895C842012A6FFBE84A73CF">
                                    <name>AddField(const String&lt;wchar>&amp; fieldName, UniquePtr&lt;System.Json.JsonValue>&amp;&amp; fieldValue)</name>
                                    <syntax>public void AddField(const String&lt;wchar>&amp; fieldName, UniquePtr&lt;System.Json.JsonValue>&amp;&amp; fieldValue);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>fieldName</name>
                                            <type ref="type.9491615"/>
                                        </parameter>
                                        <parameter>
                                            <name>fieldValue</name>
                                            <type ref="type.9504885"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Fields_AF12E1547B6C54A07F8D8CA30B9F64B529C81D9C">
                            <name>Fields</name>
                            <overloads>
                                <overload id="member_function_Fields_JsonObject_6FBBFB84E3B990711F34D56259CBFF71582E3783">
                                    <name>Fields()</name>
                                    <syntax>public nothrow Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>&amp; Fields();</syntax>
                                    <returnType ref="type.9504894"/>
                                </overload>
                                <overload id="member_function_Fields_JsonObject_2FDE93F351742DB8AF31FBF4F61EE01FA575D806">
                                    <name>Fields() const</name>
                                    <syntax>public nothrow const Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>&amp; Fields() const;</syntax>
                                    <returnType ref="type.9504897"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_GetField_A070B2A86A16E986AB5708FC468ACB5C63644DE9">
                            <name>GetField</name>
                            <overloads>
                                <overload id="member_function_GetField_JsonObject_5EBC38E8BD34EFC54485EBD3A6E722ED17CE2656">
                                    <name>GetField(const String&lt;char>&amp; fieldName) const</name>
                                    <syntax>public JsonValue* GetField(const String&lt;char>&amp; fieldName) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>fieldName</name>
                                            <type ref="type.9491572"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.9504124"/>
                                </overload>
                                <overload id="member_function_GetField_JsonObject_7F5393C75E599A3AB9026AEA200FAA814EE3D55E">
                                    <name>GetField(const String&lt;uchar>&amp; fieldName) const</name>
                                    <syntax>public JsonValue* GetField(const String&lt;uchar>&amp; fieldName) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>fieldName</name>
                                            <type ref="type.9491660"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.9504124"/>
                                </overload>
                                <overload id="member_function_GetField_JsonObject_369351A3AB3806CA419789FB1E6220C53F899C71">
                                    <name>GetField(const String&lt;wchar>&amp; fieldName) const</name>
                                    <syntax>public JsonValue* GetField(const String&lt;wchar>&amp; fieldName) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>fieldName</name>
                                            <type ref="type.9491615"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.9504124"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_ToString_JsonObject_908D139FF48AE265A3D8785366898691E6FE1AD2">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.9491567"/>
                        </function>
                    </functions>
                </class>
                <class id="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9">
                    <name>JsonParser</name>
                    <groupName>JsonParser</groupName>
                    <syntax> public class JsonParser;</syntax>
                    <functions>
                        <function id="member_function_GetJsonGrammar_JsonParser_0D8370F75DD6DE1916BDCC1D635F967F38CEA6B5">
                            <name>GetJsonGrammar() const</name>
                            <syntax>public nothrow JsonGrammar* GetJsonGrammar() const;</syntax>
                            <returnType ref="type.9504194"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_JsonParser_E9AA664A2A5D30F70953E6B3922FF101467AB798">
                            <name>Instance()</name>
                            <syntax>public static nothrow JsonParser&amp; Instance();</syntax>
                            <returnType ref="type.9504165"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516">
                    <name>JsonString</name>
                    <groupName>JsonString</groupName>
                    <syntax> public class JsonString;</syntax>
                    <baseClass ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                    <constructors>
                        <constructor id="default_constructor_JsonString_3A7C62B9267602DAB602A8EF30A8D92559208784">
                            <name>JsonString()</name>
                            <syntax>public nothrow JsonString();</syntax>
                        </constructor>
                        <constructor id="constructor_JsonString_D3BE7AAE2CD078E46809B81D0721D508C009194E">
                            <name>JsonString(const String&lt;uchar>&amp; value_)</name>
                            <syntax>public nothrow JsonString(const String&lt;uchar>&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Append_78B62F7E28AEBF2F96AB59856D234EA0471FD424">
                            <name>Append</name>
                            <overloads>
                                <overload id="member_function_Append_JsonString_E9CF408B6A27F38BF4CFA45666CA5C3475A2F859">
                                    <name>Append(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public nothrow JsonString&amp; Append(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.9491660"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.9504147"/>
                                </overload>
                                <overload id="member_function_Append_JsonString_379050D4A6A8001570E98A20809FDB242B446EFD">
                                    <name>Append(const uchar* s)</name>
                                    <syntax>public nothrow JsonString&amp; Append(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.9491662"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.9504147"/>
                                </overload>
                                <overload id="member_function_Append_JsonString_E822E33CEBC9626C33424C43F829AD378A77B659">
                                    <name>Append(uchar c)</name>
                                    <syntax>public nothrow JsonString&amp; Append(uchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.9490439"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.9504147"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_SetValue_JsonString_F9199A8A958220B64ED8005718B7AE7185509E55">
                            <name>SetValue(const String&lt;uchar>&amp; value_)</name>
                            <syntax>public nothrow inline void SetValue(const String&lt;uchar>&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ToString_JsonString_4CBCB9FCD9FB546EB1C49167CD4C2C37BE606533">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.9491567"/>
                        </function>
                        <function id="member_function_Value_JsonString_1D360D73C54B65BBE85083AC095029213ED568BA">
                            <name>Value() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Value() const;</syntax>
                            <returnType ref="type.9491660"/>
                        </function>
                    </functions>
                </class>
                <class id="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A">
                    <name>JsonValue</name>
                    <groupName>JsonValue</groupName>
                    <syntax>abstract public class JsonValue;</syntax>
                    <functions>
                        <function id="member_function_ToString_JsonValue_0E8D02CC91EA26B2A9A8AF1C11DF12FD5FE86F31">
                            <name>ToString() const</name>
                            <syntax>public abstract String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.9491567"/>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_group_FromJson_22997B691ACDD99EB254F19DD18F75F989FE89EF">
                    <name>FromJson</name>
                    <overloads>
                        <overload id="function_FromJson_0D468A43DEB7747049443EB4EF884A4135625F54">
                            <name>FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, String&lt;char>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, String&lt;char>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9491569"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_FD4DA9B1398050558E5BF922A072C03C129097FB">
                            <name>FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, String&lt;uchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, String&lt;uchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9491657"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_8D111EF5D30668FB333D278DE18BB7084EC1BEC1">
                            <name>FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, String&lt;wchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, String&lt;wchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9491612"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_5452FE9912EEC2CAD2FCDDA224EC9780340F70E3">
                            <name>FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, bool&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, bool&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9490443"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_E0103885FB5C2EAA85A69FB9E3B88B0F08505C38">
                            <name>FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, double&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, double&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9490473"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_54062682CD69EE8046DDAA7F0FC20A9EE527901D">
                            <name>FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, int&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, int&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9490458"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_0FDE02F2AC8E3A1E0E469FC27DE91FAB6714F244">
                            <name>FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, String&lt;char>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, String&lt;char>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9491569"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_F738AFA288AFAB4C745BD61D99B2EEEA6337335D">
                            <name>FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, String&lt;uchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, String&lt;uchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9491657"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_37C1ACCEBB7EDA0F42A57D178260B0143BBEBA17">
                            <name>FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, String&lt;wchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, String&lt;wchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9491612"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_4B7564FFFFF32A4E3B2D0AD8B2601BB144CC2935">
                            <name>FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, bool&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, bool&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9490443"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_DB824D49846A7E03111FBBB884E79002D2431F8A">
                            <name>FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, double&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, double&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9490473"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_9D0EF3A56DF7ED266DB174141193A894B5A409EC">
                            <name>FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, int&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, int&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9490458"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_28A1E6951F82E0549D2DF5680C519D9FC076C9CB">
                            <name>FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, String&lt;char>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, String&lt;char>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491615"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9491569"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_B966CCBA3C2871F5525034998A78EA8217194B24">
                            <name>FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, String&lt;uchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, String&lt;uchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491615"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9491657"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_8EAA46E11086492741B83B71530310637D8DE4AB">
                            <name>FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, String&lt;wchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, String&lt;wchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491615"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9491612"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_E5E9BCD1395BC8C39A06FB102FF0B9E8DDF22E56">
                            <name>FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, bool&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, bool&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491615"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9490443"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_62C4C32E61B89D3AB75712DBABEA0BFC3F5B1976">
                            <name>FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, double&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, double&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491615"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9490473"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_4B63168BDE07291BB93873BB968CC902EA2EA499">
                            <name>FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, int&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, int&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491615"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9490458"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_B24EF3B2CA6DACDDA40455C0BAC1F81D35CBB64B">
                            <name>FromJson(JsonValue* value, String&lt;char>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* value, String&lt;char>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9491569"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_D379803A898D08C1B1B70B198CDCF31596A8FAEF">
                            <name>FromJson(JsonValue* value, String&lt;uchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* value, String&lt;uchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9491657"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_135453EE5B5381C490F9AA5A9DB42B54B8B0D473">
                            <name>FromJson(JsonValue* value, String&lt;wchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* value, String&lt;wchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9491612"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_1A5EF2BB505A65AE272D6778E5C726D7152C8209">
                            <name>FromJson(JsonValue* value, bool&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* value, bool&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9490443"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_EE92D51E43D5311A8A834EC6CAFD7552BC74BC2C">
                            <name>FromJson(JsonValue* value, double&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* value, double&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9490473"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_312EBF86915CFC46CC7A612B242406BD677FAF3C">
                            <name>FromJson(JsonValue* value, int&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* value, int&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9490458"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_FFAD692C1C6A68793C98499789D9D0995D7D5432">
                            <name>FromJson&lt;K, T, H, C>(JsonValue* container, const String&lt;char>&amp; fieldName, HashMap&lt;K, T, H, C>&amp; field) where T is JsonValueType or T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;K, T, H, C>(JsonValue* container, const String&lt;char>&amp; fieldName, HashMap&lt;K, T, H, C>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504300">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="9504301">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="9504302">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="9504303">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506758"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504301"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="9504301"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_E3F84A3CD39C44F180D8531D0B9613C98EED3828">
                            <name>FromJson&lt;K, T, H, C>(JsonValue* container, const String&lt;uchar>&amp; fieldName, HashMap&lt;K, T, H, C>&amp; field) where T is JsonValueType or T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;K, T, H, C>(JsonValue* container, const String&lt;uchar>&amp; fieldName, HashMap&lt;K, T, H, C>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504308">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="9504309">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="9504310">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="9504311">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506914"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504309"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="9504309"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_1841BC18B6B4F57155CA82AD178323BC48F79296">
                            <name>FromJson&lt;K, T, H, C>(JsonValue* container, const String&lt;wchar>&amp; fieldName, HashMap&lt;K, T, H, C>&amp; field) where T is JsonValueType or T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;K, T, H, C>(JsonValue* container, const String&lt;wchar>&amp; fieldName, HashMap&lt;K, T, H, C>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504304">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="9504305">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="9504306">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="9504307">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491615"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506836"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504305"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="9504305"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_F0AB8F8B2A3CAB4709E73C0B40ADEC76D5381496">
                            <name>FromJson&lt;K, T, H, C>(JsonValue* value, HashMap&lt;K, T, H, C>&amp; field) where K is ustring and T is JsonValueType</name>
                            <syntax>public void FromJson&lt;K, T, H, C>(JsonValue* value, HashMap&lt;K, T, H, C>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504267">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="9504268">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="9504269">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="9504270">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9505941"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504267"/>
                                <connector>is</connector>
                                <type ref="type.9491655"/>
                                <connector>and</connector>
                                <type ref="9504268"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_CA66F53A4B7279D7819C28DF759545627929AC07">
                            <name>FromJson&lt;K, T, H, C>(JsonValue* value, HashMap&lt;K, T, H, C>&amp; field) where K is wstring and T is JsonValueType</name>
                            <syntax>public void FromJson&lt;K, T, H, C>(JsonValue* value, HashMap&lt;K, T, H, C>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504271">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="9504272">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="9504273">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="9504274">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506019"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504271"/>
                                <connector>is</connector>
                                <type ref="type.9491610"/>
                                <connector>and</connector>
                                <type ref="9504272"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_9CEA6C1C5DCE40E3C08ED971B107560C25A2BD58">
                            <name>FromJson&lt;K, T, H, C>(JsonValue* value, HashMap&lt;K, T, H, C>&amp; field) where K is string and T is JsonValueType</name>
                            <syntax>public void FromJson&lt;K, T, H, C>(JsonValue* value, HashMap&lt;K, T, H, C>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504275">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="9504276">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="9504277">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="9504278">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506097"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504275"/>
                                <connector>is</connector>
                                <type ref="type.9491567"/>
                                <connector>and</connector>
                                <type ref="9504276"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_835C4BD46FFB629533B1344AF81392E241235C5A">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* container, const String&lt;char>&amp; fieldName, Map&lt;Key, Value, KeyCompare>&amp; field) where Value is JsonValueType or Value is JsonConstructible</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* container, const String&lt;char>&amp; fieldName, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504291">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="9504292">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="9504293">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506575"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504292"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="9504292"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_6F1E1E91A9CE9B3F27A7E95F2032FBD9785CC5CD">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* container, const String&lt;uchar>&amp; fieldName, Map&lt;Key, Value, KeyCompare>&amp; field) where Value is JsonValueType or Value is JsonConstructible</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* container, const String&lt;uchar>&amp; fieldName, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504297">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="9504298">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="9504299">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506697"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504298"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="9504298"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_141AD8D028A1463F11D57A1CC7D3DDBCA7EC1A26">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* container, const String&lt;wchar>&amp; fieldName, Map&lt;Key, Value, KeyCompare>&amp; field) where Value is JsonValueType or Value is JsonConstructible</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* container, const String&lt;wchar>&amp; fieldName, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504294">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="9504295">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="9504296">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491615"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506636"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504295"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="9504295"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_F0428D168859D23AC8741373B4D4CE9BD7E604BF">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field) where Key is wstring and Value is JsonValueType</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504252">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="9504253">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="9504254">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9505636"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504252"/>
                                <connector>is</connector>
                                <type ref="type.9491610"/>
                                <connector>and</connector>
                                <type ref="9504253"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_293CA650CEA60428E41363EF452297EA636E2B53">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field) where Key is ustring and Value is JsonValueType</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504249">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="9504250">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="9504251">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9505575"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504249"/>
                                <connector>is</connector>
                                <type ref="type.9491655"/>
                                <connector>and</connector>
                                <type ref="9504250"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_325A8C52C7395B16BC61FCDE988845CF3900DD30">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field) where Key is string and Value is JsonValueType</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504255">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="9504256">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="9504257">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9505697"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504255"/>
                                <connector>is</connector>
                                <type ref="type.9491567"/>
                                <connector>and</connector>
                                <type ref="9504256"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_5549A8B6E26ED0527CDEAD71A05C23A4AAE3F70F">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field) where Key is ustring and Value is JsonConstructible</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504258">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="9504259">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="9504260">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9505758"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504258"/>
                                <connector>is</connector>
                                <type ref="type.9491655"/>
                                <connector>and</connector>
                                <type ref="9504259"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_1824593656021EB8DC78E7379E9787F7EA4BC08C">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field) where Key is wstring and Value is JsonConstructible</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504261">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="9504262">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="9504263">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9505819"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504261"/>
                                <connector>is</connector>
                                <type ref="type.9491610"/>
                                <connector>and</connector>
                                <type ref="9504262"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_86B24EEC8A29EEDEEB1BDA72F46E16FF97EDB455">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field) where Key is string and Value is JsonConstructible</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504264">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="9504265">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="9504266">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9505880"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504264"/>
                                <connector>is</connector>
                                <type ref="type.9491567"/>
                                <connector>and</connector>
                                <type ref="9504265"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_1C47B33E24485758942AD2A756143394BF7E2376">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;char>&amp; fieldName, List&lt;SharedPtr&lt;T>>&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;char>&amp; fieldName, List&lt;SharedPtr&lt;T>>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504288">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506440"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504288"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_72C2B78EE74B873441A263F7D964176DF45A1536">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;char>&amp; fieldName, List&lt;T>&amp; field) where T is JsonValueType or T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;char>&amp; fieldName, List&lt;T>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504282">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506224"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504282"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="9504282"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_C2A1D16CB1CC4D128735796A17A1411322E6B1B0">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;char>&amp; fieldName, List&lt;UniquePtr&lt;T>>&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;char>&amp; fieldName, List&lt;UniquePtr&lt;T>>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504285">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506317"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504285"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_E85B239D4801966BC0C36D7D0EABDB6B3B4153A6">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;char>&amp; fieldName, T&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;char>&amp; fieldName, T&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504312">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506990"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504312"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_7D2B463B2026736BCFE7A8B10E71C7F38CF7EAD6">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, List&lt;SharedPtr&lt;T>>&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, List&lt;SharedPtr&lt;T>>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504290">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506554"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504290"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_7A814D4F5941FE9E25A4AE5425820D5FD4FF9BE3">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, List&lt;T>&amp; field) where T is JsonValueType or T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, List&lt;T>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504284">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506278"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504284"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="9504284"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_CCEDB82BD07C2C9DAD559F008F26E0D15C3AEFFC">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, List&lt;UniquePtr&lt;T>>&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, List&lt;UniquePtr&lt;T>>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504287">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506383"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504287"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_81D5153F2F4A29AEE9BCF03163C9DA49BD818293">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, SharedPtr&lt;T>&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, SharedPtr&lt;T>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504316">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9507007"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504316"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_95041BE10F45478E45EE3508DCFE9BF440E370C6">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, T&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, T&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504314">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506992"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504314"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_70EE2D3B1295C9C06D9783A1F0BC443E999DCF09">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, UniquePtr&lt;T>&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, UniquePtr&lt;T>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504315">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506995"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504315"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_27B8E570D19B486712739B7548955BF638284E2D">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;wchar>&amp; fieldName, List&lt;SharedPtr&lt;T>>&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;wchar>&amp; fieldName, List&lt;SharedPtr&lt;T>>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504289">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491615"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506497"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504289"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_FF155A7B997D3D253B9080C12E91442E4B3EADD2">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;wchar>&amp; fieldName, List&lt;T>&amp; field) where T is JsonValueType or T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;wchar>&amp; fieldName, List&lt;T>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504283">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491615"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506251"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504283"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="9504283"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_B6396B4F64B6622EC01B682A9FA07739C2EBCE4E">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;wchar>&amp; fieldName, List&lt;UniquePtr&lt;T>>&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;wchar>&amp; fieldName, List&lt;UniquePtr&lt;T>>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504286">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491615"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506350"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504286"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_06EC9ABFB5085084F92AC14030C24A856303CCC9">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;wchar>&amp; fieldName, T&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;wchar>&amp; fieldName, T&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504313">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.9491615"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506991"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504313"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_9D32015004A4C212A5B3BD7BCE8E54DDFEC2C72C">
                            <name>FromJson&lt;T>(JsonValue* value, List&lt;SharedPtr&lt;T>>&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* value, List&lt;SharedPtr&lt;T>>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504248">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9505554"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504248"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_1220656BC9EA62B69E42434C079779589A12546B">
                            <name>FromJson&lt;T>(JsonValue* value, List&lt;T>&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* value, List&lt;T>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504246">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9505458"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504246"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_9ED7B774E057E767955AA4BFB6975EA22778FFBA">
                            <name>FromJson&lt;T>(JsonValue* value, List&lt;T>&amp; field) where T is JsonValueType</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* value, List&lt;T>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504245">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9505431"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504245"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_97934AE31E49745BFBF115471B92C26C18CEB6B3">
                            <name>FromJson&lt;T>(JsonValue* value, List&lt;UniquePtr&lt;T>>&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* value, List&lt;UniquePtr&lt;T>>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504247">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9505497"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504247"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_B5BA065DFD8F981C687FCC85E634D2BEC7B5F534">
                            <name>FromJson&lt;T>(JsonValue* value, SharedPtr&lt;T>&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* value, SharedPtr&lt;T>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504281">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506188"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504281"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_E078F94C43EA1E961A54E8B518B61B936C577B8C">
                            <name>FromJson&lt;T>(JsonValue* value, T&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* value, T&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504279">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506173"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504279"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_97B0CE17747A8F5A6697880760B61937E269F734">
                            <name>FromJson&lt;T>(JsonValue* value, UniquePtr&lt;T>&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* value, UniquePtr&lt;T>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="9504280">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9504124"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.9506176"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="9504280"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseJson_D0F1BA19044FC5C9F02861FE13E01F68658D55A5">
                    <name>ParseJson</name>
                    <overloads>
                        <overload id="function_ParseJson_DBF1730C39BEE47518DDF489C3C1CA7CC4D29DFF">
                            <name>ParseJson(const String&lt;char>&amp; jsonText)</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ParseJson(const String&lt;char>&amp; jsonText);</syntax>
                            <parameters>
                                <parameter>
                                    <name>jsonText</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                        </overload>
                        <overload id="function_ParseJson_AA1EB3D4CCCAA45FDB88817F137BB8925D3738A7">
                            <name>ParseJson(const String&lt;uchar>&amp; jsonText)</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ParseJson(const String&lt;uchar>&amp; jsonText);</syntax>
                            <parameters>
                                <parameter>
                                    <name>jsonText</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                        </overload>
                        <overload id="function_ParseJson_2F088677CC9179ED41188E987956FF77EB3BEDB4">
                            <name>ParseJson(const String&lt;wchar>&amp; jsonText)</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ParseJson(const String&lt;wchar>&amp; jsonText);</syntax>
                            <parameters>
                                <parameter>
                                    <name>jsonText</name>
                                    <type ref="type.9491615"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_RegisterJsonClass_9F196AC1276E724F3E7E8FF1338696EA5D4B6DBA">
                    <name>RegisterJsonClass</name>
                    <overloads>
                        <overload id="function_RegisterJsonClass_2FBE4E8832266A3352BF1717BFB867612A99D471">
                            <name>RegisterJsonClass(const String&lt;char>&amp; jsonClassName, JsonClassCreatorDelegate creator)</name>
                            <syntax>public void RegisterJsonClass(const String&lt;char>&amp; jsonClassName, JsonClassCreatorDelegate creator);</syntax>
                            <parameters>
                                <parameter>
                                    <name>jsonClassName</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                                <parameter>
                                    <name>creator</name>
                                    <type ref="9504169"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_RegisterJsonClass_A3D18EABE8AD1F9D0C4A42DF133AD4E9CC2F8B98">
                            <name>RegisterJsonClass(const String&lt;uchar>&amp; jsonClassName, JsonClassCreatorDelegate creator)</name>
                            <syntax>public void RegisterJsonClass(const String&lt;uchar>&amp; jsonClassName, JsonClassCreatorDelegate creator);</syntax>
                            <parameters>
                                <parameter>
                                    <name>jsonClassName</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                                <parameter>
                                    <name>creator</name>
                                    <type ref="9504169"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_RegisterJsonClass_F2E6271DBF6A1478AD929ED54A519E0D2BCBD5AE">
                            <name>RegisterJsonClass(const String&lt;wchar>&amp; jsonClassName, JsonClassCreatorDelegate creator)</name>
                            <syntax>public void RegisterJsonClass(const String&lt;wchar>&amp; jsonClassName, JsonClassCreatorDelegate creator);</syntax>
                            <parameters>
                                <parameter>
                                    <name>jsonClassName</name>
                                    <type ref="type.9491615"/>
                                </parameter>
                                <parameter>
                                    <name>creator</name>
                                    <type ref="9504169"/>
                                </parameter>
                            </parameters>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ToJson_80373CB69AD5A80A6592CC2418A5282FCB2D0F14">
                    <name>ToJson</name>
                    <overloads>
                        <overload id="function_ToJson_574858316A43DEC277D82C9372FC90DD066D0EAC">
                            <name>ToJson(bool value)</name>
                            <syntax>public nothrow UniquePtr&lt;System.Json.JsonValue> ToJson(bool value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9490426"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                        </overload>
                        <overload id="function_ToJson_B74042AE374BEB28C90779B6CA4C98DA72081002">
                            <name>ToJson(const String&lt;char>&amp; value)</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson(const String&lt;char>&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9491572"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                        </overload>
                        <overload id="function_ToJson_7F3B903221E5DAB4017615FC50EE5FBC968600F8">
                            <name>ToJson(const String&lt;uchar>&amp; value)</name>
                            <syntax>public nothrow UniquePtr&lt;System.Json.JsonValue> ToJson(const String&lt;uchar>&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9491660"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                        </overload>
                        <overload id="function_ToJson_53C005E9773AC76D691F59144E23E4AE81E6EB16">
                            <name>ToJson(const String&lt;wchar>&amp; value)</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson(const String&lt;wchar>&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9491615"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                        </overload>
                        <overload id="function_ToJson_67DBD75B6175FD816B5C6F7218DFE8FED2B4B7F7">
                            <name>ToJson(double value)</name>
                            <syntax>public nothrow UniquePtr&lt;System.Json.JsonValue> ToJson(double value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9490436"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                        </overload>
                        <overload id="function_ToJson_D41D6D0DCA6C2F2E779486F47F8BFD91D47426EA">
                            <name>ToJson&lt;K, T, H, C>(const HashMap&lt;K, T, H, C>&amp; value) where K is ustring</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson&lt;K, T, H, C>(const HashMap&lt;K, T, H, C>&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="9504185">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="9504186">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="9504187">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="9504188">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9505272"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                            <constraint>
                                <type ref="9504185"/>
                                <connector>is</connector>
                                <type ref="type.9491655"/>
                            </constraint>
                        </overload>
                        <overload id="function_ToJson_91FBDD8DFFF0BEB6D6C29EC753DF3D9249916F3C">
                            <name>ToJson&lt;K, T, H, C>(const HashMap&lt;K, T, H, C>&amp; value) where K is wstring or K is string</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson&lt;K, T, H, C>(const HashMap&lt;K, T, H, C>&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="9504189">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="9504190">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="9504191">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="9504192">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9505350"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                            <constraint>
                                <type ref="9504189"/>
                                <connector>is</connector>
                                <type ref="type.9491610"/>
                                <connector>or</connector>
                                <type ref="9504189"/>
                                <connector>is</connector>
                                <type ref="type.9491567"/>
                            </constraint>
                        </overload>
                        <overload id="function_ToJson_660ADE07D30699D123CC5F0BECA3E252DF64B33D">
                            <name>ToJson&lt;Key, Value, KeyCompare>(const Map&lt;Key, Value, KeyCompare>&amp; value) where Key is ustring</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson&lt;Key, Value, KeyCompare>(const Map&lt;Key, Value, KeyCompare>&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="9504179">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="9504180">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="9504181">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9505150"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                            <constraint>
                                <type ref="9504179"/>
                                <connector>is</connector>
                                <type ref="type.9491655"/>
                            </constraint>
                        </overload>
                        <overload id="function_ToJson_F05F6792D09977AF3EDA3344A6CAA5403D58AFD1">
                            <name>ToJson&lt;Key, Value, KeyCompare>(const Map&lt;Key, Value, KeyCompare>&amp; value) where Key is wstring or Key is string</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson&lt;Key, Value, KeyCompare>(const Map&lt;Key, Value, KeyCompare>&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="9504182">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="9504183">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="9504184">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9505211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                            <constraint>
                                <type ref="9504182"/>
                                <connector>is</connector>
                                <type ref="type.9491610"/>
                                <connector>or</connector>
                                <type ref="9504182"/>
                                <connector>is</connector>
                                <type ref="type.9491567"/>
                            </constraint>
                        </overload>
                        <overload id="function_ToJson_8FF6AD1D7D1AF315BBE189E97243F7B20A759CCE">
                            <name>ToJson&lt;T>(const List&lt;T>&amp; value)</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson&lt;T>(const List&lt;T>&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="9504178">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.9505123"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                        </overload>
                        <overload id="function_ToJson_644044BAF600DEEDF2C36244ACC2EA1E2C07DAD6">
                            <name>ToJson&lt;T>(const SharedPtr&lt;T>&amp; ptr) where T is JsonExportable</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson&lt;T>(const SharedPtr&lt;T>&amp; ptr);</syntax>
                            <templateParameters>
                                <templateParameter id="9504177">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>ptr</name>
                                    <type ref="type.9505087"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                            <constraint>
                                <type ref="9504177"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonExportable_380A04F1C16289D6FC8DB54C68F467C83E565340"/>
                            </constraint>
                        </overload>
                        <overload id="function_ToJson_D4341533DFEB06925268DB024A00F44A7044154D">
                            <name>ToJson&lt;T>(const T&amp; object) where T is JsonExportable</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson&lt;T>(const T&amp; object);</syntax>
                            <templateParameters>
                                <templateParameter id="9504175">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>object</name>
                                    <type ref="type.9505069"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                            <constraint>
                                <type ref="9504175"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonExportable_380A04F1C16289D6FC8DB54C68F467C83E565340"/>
                            </constraint>
                        </overload>
                        <overload id="function_ToJson_14356EE699F7663903DB09AB9EFE1B206802DDE8">
                            <name>ToJson&lt;T>(const UniquePtr&lt;T>&amp; ptr) where T is JsonExportable</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson&lt;T>(const UniquePtr&lt;T>&amp; ptr);</syntax>
                            <templateParameters>
                                <templateParameter id="9504176">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>ptr</name>
                                    <type ref="type.9505075"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9504879"/>
                            <constraint>
                                <type ref="9504176"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonExportable_380A04F1C16289D6FC8DB54C68F467C83E565340"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_op_eq_A5531519537EF9A3672EFF09CFA3994163F6008D">
                    <name>operator==(JsonClassCreatorDelegate left, JsonClassCreatorDelegate right)</name>
                    <syntax>public bool operator==(JsonClassCreatorDelegate left, JsonClassCreatorDelegate right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="9504169"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="9504169"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.9490426"/>
                </function>
            </functions>
            <concepts>
                <concept id="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2">
                    <name>JsonConstructible&lt;T></name>
                    <groupName>JsonConstructible</groupName>
                    <syntax>public concept JsonConstructible&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="9504242">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>T(JsonValue*)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_JsonExportable_380A04F1C16289D6FC8DB54C68F467C83E565340">
                    <name>JsonExportable&lt;T></name>
                    <groupName>JsonExportable</groupName>
                    <syntax>public concept JsonExportable&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="9504174">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>UniquePtr&lt;JsonValue> T.ToJson()</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D">
                    <name>JsonValueType&lt;T></name>
                    <groupName>JsonValueType</groupName>
                    <syntax>public concept JsonValueType&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="9504244">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            System.Meta.IsBasicType&lt;T>()<connector>or</connector>
                            <type ref="9504244"/>
                            <connector>is</connector>
                            <type ref="type.9491567"/>
                            <connector>or</connector>
                            <type ref="9504244"/>
                            <connector>is</connector>
                            <type ref="type.9491610"/>
                            <connector>or</connector>
                            <type ref="9504244"/>
                            <connector>is</connector>
                            <type ref="type.9491655"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
            </concepts>
            <delegates>
                <delegate id="9504169">
                    <name>JsonClassCreatorDelegate</name>
                    <syntax>public delegate void* JsonClassCreatorDelegate(JsonValue* value);</syntax>
                    <parameters>
                        <parameter>
                            <name>value</name>
                            <type ref="type.9504124"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.9490578"/>
                </delegate>
            </delegates>
        </namespace>
    </namespaces>
    <types>
        <type derived="true" id="type.3050">
            <name>AddressOf&amp;&amp;</name>
            <content>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_ArrayRule_97D9572F1E83FBA5D44A80D2E6F6F0F63D0E73D0">
            <name>ArrayRule</name>
        </type>
        <type derived="true" id="type.9504216">
            <name>ArrayRule&amp;</name>
            <content>
                <baseType ref="class_ArrayRule_97D9572F1E83FBA5D44A80D2E6F6F0F63D0E73D0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504215">
            <name>ArrayRule*</name>
            <content>
                <baseType ref="class_ArrayRule_97D9572F1E83FBA5D44A80D2E6F6F0F63D0E73D0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507230">
            <name>ArrayRule*&amp;</name>
            <content>
                <baseType ref="class_ArrayRule_97D9572F1E83FBA5D44A80D2E6F6F0F63D0E73D0"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507229">
            <name>ArrayRule**</name>
            <content>
                <baseType ref="class_ArrayRule_97D9572F1E83FBA5D44A80D2E6F6F0F63D0E73D0"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3122">
            <name>AssertStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9505300" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.9506789" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.9492334" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.9505972" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.9505378" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.9506128" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.9506867" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.9506945" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.9506050" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.9506867" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.9505974">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.9505972"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505302">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.9505300"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506869">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.9506867"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506052">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.9506050"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506791">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.9506789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505380">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.9505378"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506947">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.9506945"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506869">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.9506867"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506130">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.9506128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505379">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.9505378"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506946">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.9506945"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506790">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.9506789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506868">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.9506867"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506129">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.9506128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506051">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.9506050"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505973">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.9505972"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505301">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.9505300"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506946">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.9506945"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506978">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.9506945"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505333">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.9505300"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506978">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.9506945"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506005">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.9505972"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506900">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.9506867"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506083">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.9506050"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506161">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.9506128"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505411">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.9505378"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506822">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.9506789"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506015">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9505972"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506093">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9506050"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506832">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9506789"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506171">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9506128"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505343">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9505300"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505421">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9505378"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506910">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9506867"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506988">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9506945"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2589">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9492334"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506988">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9506945"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506979">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.9506945"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506823">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.9506789"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506006">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.9505972"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506162">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.9506128"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506901">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.9506867"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505334">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.9505300"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506084">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.9506050"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505412">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.9505378"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9505015" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.9504989"/>
            </content>
        </type>
        <type derived="true" id="type.9505017">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>&amp;</name>
            <content>
                <baseType ref="type.9505015"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505016">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*</name>
            <content>
                <baseType ref="type.9505015"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505048">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;</name>
            <content>
                <baseType ref="type.9505015"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505058">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9505015"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505049">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**</name>
            <content>
                <baseType ref="type.9505015"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507139">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**&amp;</name>
            <content>
                <baseType ref="type.9505015"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507140">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.9505015"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507138">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>***</name>
            <content>
                <baseType ref="type.9505015"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="9491063"/>
            </content>
        </type>
        <type derived="true" id="type.2597">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="9491084"/>
            </content>
        </type>
        <type derived="true" id="type.2610">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="9504311">
            <name>C</name>
        </type>
        <type derived="true" id="type.3146">
            <name>CharParser&amp;&amp;</name>
            <content>
                <baseType ref="class_CharParser_F30B4B7DDC9B8D3CD1476C03049B3C7189028FDA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3129">
            <name>CodeExpandingVisitor&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3028">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3065">
            <name>Complement&amp;&amp;</name>
            <content>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2494">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504083">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2493">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504082">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3123">
            <name>Const&amp;&amp;</name>
            <content>
                <baseType ref="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3083">
            <name>Construct&amp;&amp;</name>
            <content>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B">
            <name>Context</name>
        </type>
        <type id="class_Context_C2EF2873965CE9318EBD0F1FE7D4908017FAAE75">
            <name>Context</name>
        </type>
        <type id="class_Context_29B31567A5E1B939D1D54BB81169ED882D01557F">
            <name>Context</name>
        </type>
        <type id="class_Context_CCB8DD1BC453001E743B1DAE18359E22470CB70C">
            <name>Context</name>
        </type>
        <type id="class_Context_AFEF333695DD586BEFCFA47EA307519802EF9BD3">
            <name>Context</name>
        </type>
        <type id="class_Context_BCC9FCB3E87A02D9FE9414B76F130D8B1771991A">
            <name>Context</name>
        </type>
        <type id="class_Context_A9DFFCA47D4C031CE59C631968775B728DC27723">
            <name>Context</name>
        </type>
        <type derived="true" id="type.9504219">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_AFEF333695DD586BEFCFA47EA307519802EF9BD3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504225">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_A9DFFCA47D4C031CE59C631968775B728DC27723"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504237">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504231">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_BCC9FCB3E87A02D9FE9414B76F130D8B1771991A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504237">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504201">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_29B31567A5E1B939D1D54BB81169ED882D01557F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504207">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_CCB8DD1BC453001E743B1DAE18359E22470CB70C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504213">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_C2EF2873965CE9318EBD0F1FE7D4908017FAAE75"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504206">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_CCB8DD1BC453001E743B1DAE18359E22470CB70C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504224">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_A9DFFCA47D4C031CE59C631968775B728DC27723"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504236">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504230">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_BCC9FCB3E87A02D9FE9414B76F130D8B1771991A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504212">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_C2EF2873965CE9318EBD0F1FE7D4908017FAAE75"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504218">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_AFEF333695DD586BEFCFA47EA307519802EF9BD3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504236">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504200">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_29B31567A5E1B939D1D54BB81169ED882D01557F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507232">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_A9DFFCA47D4C031CE59C631968775B728DC27723"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507237">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_BCC9FCB3E87A02D9FE9414B76F130D8B1771991A"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507242">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507217">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_CCB8DD1BC453001E743B1DAE18359E22470CB70C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507222">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_C2EF2873965CE9318EBD0F1FE7D4908017FAAE75"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507175">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_29B31567A5E1B939D1D54BB81169ED882D01557F"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507227">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_AFEF333695DD586BEFCFA47EA307519802EF9BD3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507231">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_A9DFFCA47D4C031CE59C631968775B728DC27723"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507236">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_BCC9FCB3E87A02D9FE9414B76F130D8B1771991A"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507241">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507216">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_CCB8DD1BC453001E743B1DAE18359E22470CB70C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507221">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_C2EF2873965CE9318EBD0F1FE7D4908017FAAE75"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507174">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_29B31567A5E1B939D1D54BB81169ED882D01557F"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507226">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_AFEF333695DD586BEFCFA47EA307519802EF9BD3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507241">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9491541" specialization="true">
            <name>Counter&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type id="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30" specialization="true">
            <name>Counter&lt;T></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="9491217"/>
            </content>
        </type>
        <type derived="true" id="type.9507019">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505530">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506200">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505096">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507019">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506416">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506530">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506473">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506535">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2716">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2723">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505535">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506205">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505101">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506421">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507024">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506478">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2682">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2685">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2694">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2701">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506199">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507018">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506415">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505529">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505095">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506472">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506529">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A" specialization="true">
            <name>Counter&lt;U></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="9491232"/>
            </content>
        </type>
        <type derived="true" id="type.3101">
            <name>DeleteStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3047">
            <name>Deref&amp;&amp;</name>
            <content>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3104">
            <name>DestroyStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504081">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2492">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504081">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3041">
            <name>DomObject&amp;&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504080">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2491">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504080">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9499603" specialization="true">
            <name>EqualTo&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="type.9491655"/>
            </content>
        </type>
        <type id="class_EscapeRule_F6F8C5008CC9D44A04F0BB4D7CFA25EAF565A0A4">
            <name>EscapeRule</name>
        </type>
        <type derived="true" id="type.9504228">
            <name>EscapeRule&amp;</name>
            <content>
                <baseType ref="class_EscapeRule_F6F8C5008CC9D44A04F0BB4D7CFA25EAF565A0A4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504227">
            <name>EscapeRule*</name>
            <content>
                <baseType ref="class_EscapeRule_F6F8C5008CC9D44A04F0BB4D7CFA25EAF565A0A4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507240">
            <name>EscapeRule*&amp;</name>
            <content>
                <baseType ref="class_EscapeRule_F6F8C5008CC9D44A04F0BB4D7CFA25EAF565A0A4"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507239">
            <name>EscapeRule**</name>
            <content>
                <baseType ref="class_EscapeRule_F6F8C5008CC9D44A04F0BB4D7CFA25EAF565A0A4"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3141">
            <name>ExpectationParser&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3107">
            <name>ExpressionStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_FieldRule_A2491AFE296C3CD848691B73370AC927B83536EC">
            <name>FieldRule</name>
        </type>
        <type derived="true" id="type.9504210">
            <name>FieldRule&amp;</name>
            <content>
                <baseType ref="class_FieldRule_A2491AFE296C3CD848691B73370AC927B83536EC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504209">
            <name>FieldRule*</name>
            <content>
                <baseType ref="class_FieldRule_A2491AFE296C3CD848691B73370AC927B83536EC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507225">
            <name>FieldRule*&amp;</name>
            <content>
                <baseType ref="class_FieldRule_A2491AFE296C3CD848691B73370AC927B83536EC"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507224">
            <name>FieldRule**</name>
            <content>
                <baseType ref="class_FieldRule_A2491AFE296C3CD848691B73370AC927B83536EC"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <argumentType ref="9490972"/>
            </content>
        </type>
        <type derived="true" id="type.2547">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="9490968"/>
                <argumentType ref="9490969"/>
                <argumentType ref="9490970"/>
            </content>
        </type>
        <type derived="true" id="type.2543">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2544">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="9490972"/>
                <argumentType ref="type.9491839"/>
                <argumentType ref="type.9491841"/>
            </content>
        </type>
        <type derived="true" id="type.2549">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2551">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2546">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="9490973"/>
                <argumentType ref="type.9491856"/>
                <argumentType ref="type.9491857"/>
            </content>
        </type>
        <type derived="true" id="type.2550">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2548">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2545">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3113">
            <name>GotoCaseStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3098">
            <name>GotoStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="9504306">
            <name>H</name>
        </type>
        <type id="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36" specialization="true">
            <name>HashMap&lt;K, T, H, C></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="9504300"/>
                <argumentType ref="9504301"/>
                <argumentType ref="9504302"/>
                <argumentType ref="9504303"/>
            </content>
        </type>
        <type id="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36" specialization="true">
            <name>HashMap&lt;K, T, H, C></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="9504267"/>
                <argumentType ref="9504268"/>
                <argumentType ref="9504269"/>
                <argumentType ref="9504270"/>
            </content>
        </type>
        <type derived="true" id="type.9505347">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505269">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506914">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506019">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506914">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506758">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505941">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506836">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506097">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506096">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506757">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506913">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506018">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505940">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506913">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506835">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505346">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505268">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504983" specialization="true">
            <name>HashMap&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="9504169"/>
                <argumentType ref="type.9499597"/>
                <argumentType ref="type.9499603"/>
            </content>
        </type>
        <type derived="true" id="type.9504985">
            <name>HashMap&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.9504983"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504984">
            <name>HashMap&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.9504983"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507159">
            <name>HashMap&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.9504983"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507158">
            <name>HashMap&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.9504983"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9499597" specialization="true">
            <name>Hasher&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <argumentType ref="type.9491655"/>
            </content>
        </type>
        <type id="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="9504275"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <argumentType ref="9504277"/>
                <argumentType ref="9504278"/>
            </content>
        </type>
        <type derived="true" id="type.9506118">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506935">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505368">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506935">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505962">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506779">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505290">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506040">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506857">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506064">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505314">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505986">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506959">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2585">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506142">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506803">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505392">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506881">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506959">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506039">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506778">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506934">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505367">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506934">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506117">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505961">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505289">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506856">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="9491083"/>
                <argumentType ref="9491084"/>
                <argumentType ref="9491085"/>
                <argumentType ref="9491086"/>
                <argumentType ref="9491087"/>
            </content>
        </type>
        <type derived="true" id="type.2605">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9505003" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="type.9504989"/>
                <argumentType ref="type.9504993"/>
                <argumentType ref="type.9499597"/>
                <argumentType ref="type.9499603"/>
            </content>
        </type>
        <type derived="true" id="type.9505005">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.9505003"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505029">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505003"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505004">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.9505003"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507150">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.9505003"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507151">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9505003"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507149">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.9505003"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9499911" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="type.9499902"/>
                <argumentType ref="type.9499597"/>
                <argumentType ref="type.9499603"/>
            </content>
        </type>
        <type id="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="9491063"/>
                <argumentType ref="9491063"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="9491064"/>
                <argumentType ref="9491065"/>
            </content>
        </type>
        <type derived="true" id="type.2593">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9505966" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9505947"/>
                <argumentType ref="type.9505946"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.9505294" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9505275"/>
                <argumentType ref="type.9505274"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.9506122" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9506103"/>
                <argumentType ref="type.9506102"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.9505372" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9505353"/>
                <argumentType ref="type.9505352"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.9506783" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9506764"/>
                <argumentType ref="type.9506763"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.9506044" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9506025"/>
                <argumentType ref="type.9506024"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.9506939" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9506920"/>
                <argumentType ref="type.9506919"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.9506861" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9506842"/>
                <argumentType ref="type.9506841"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.9505296">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9505294"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506124">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9506122"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506046">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9506044"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506863">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9506861"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505968">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9505966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506785">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9506783"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506941">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9506939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505374">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9505372"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506045">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9506044"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505295">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9505294"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506123">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9506122"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506940">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9506939"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506862">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9506861"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505967">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9505966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505373">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9505372"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506784">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9506783"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506940">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9506939"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9505308" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9505285"/>
                <argumentType ref="type.9505306"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.9505386" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9505363"/>
                <argumentType ref="type.9505384"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.9506797" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9506774"/>
                <argumentType ref="type.9506795"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.9505980" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9505957"/>
                <argumentType ref="type.9505978"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.9506953" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9506930"/>
                <argumentType ref="type.9506951"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.9506058" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9506035"/>
                <argumentType ref="type.9506056"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.9506875" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9506852"/>
                <argumentType ref="type.9506873"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.9506797" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9506774"/>
                <argumentType ref="type.9506795"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.9506136" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.9506113"/>
                <argumentType ref="type.9506134"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.9505982">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9505980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505388">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9505386"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506138">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9506136"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506877">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9506875"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506955">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9506953"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506877">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9506875"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506060">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9506058"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506799">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9506797"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505310">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.9505308"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506954">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9506953"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505309">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9505308"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505981">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9505980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506954">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9506953"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506137">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9506136"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506876">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9506875"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506798">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9506797"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505387">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9505386"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506059">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.9506058"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9505009" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.9504989"/>
                <argumentType ref="type.9504991"/>
                <argumentType ref="type.9504990"/>
                <argumentType ref="type.9505003"/>
            </content>
        </type>
        <type derived="true" id="type.9505011">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.9505009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507152">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505010">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.9505009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9505023" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.9504989"/>
                <argumentType ref="type.9505000"/>
                <argumentType ref="type.9505021"/>
                <argumentType ref="type.9505003"/>
            </content>
        </type>
        <type derived="true" id="type.9505025">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.9505023"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507160">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505023"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505024">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.9505023"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504680" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="type.9491657"/>
                <argumentType ref="type.9491656"/>
                <argumentType ref="type.9499911"/>
            </content>
        </type>
        <type id="type.2861" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="type.9491657"/>
                <argumentType ref="type.9491656"/>
                <argumentType ref="type.9499911"/>
            </content>
        </type>
        <type id="type.9504680" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="type.9491657"/>
                <argumentType ref="type.9491656"/>
                <argumentType ref="type.9499911"/>
            </content>
        </type>
        <type derived="true" id="type.9504682">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.9504680"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2863">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.2861"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2862">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.2861"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504681">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.9504680"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2867" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="type.9491660"/>
                <argumentType ref="type.9491659"/>
                <argumentType ref="type.9499911"/>
            </content>
        </type>
        <type id="type.9504686" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="type.9491660"/>
                <argumentType ref="type.9491659"/>
                <argumentType ref="type.9499911"/>
            </content>
        </type>
        <type derived="true" id="type.9504688">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.9504686"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2869">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.2867"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504687">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.9504686"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2868">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.2867"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504687">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.9504686"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3087">
            <name>Identifier&amp;&amp;</name>
            <content>
                <baseType ref="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3068">
            <name>Invoke&amp;&amp;</name>
            <content>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18">
            <name>JsonArray</name>
        </type>
        <type derived="true" id="type.9504159">
            <name>JsonArray&amp;</name>
            <content>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504158">
            <name>JsonArray*</name>
            <content>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507206">
            <name>JsonArray*&amp;</name>
            <content>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507205">
            <name>JsonArray**</name>
            <content>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79">
            <name>JsonBool</name>
        </type>
        <type derived="true" id="type.9504141">
            <name>JsonBool&amp;</name>
            <content>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3151">
            <name>JsonBool&amp;&amp;</name>
            <content>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504140">
            <name>JsonBool*</name>
            <content>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507256">
            <name>JsonBool*&amp;</name>
            <content>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507255">
            <name>JsonBool**</name>
            <content>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="9504169">
            <name>JsonClassCreatorDelegate</name>
        </type>
        <type derived="true" id="type.9504981">
            <name>JsonClassCreatorDelegate&amp;</name>
            <content>
                <baseType ref="9504169"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504982">
            <name>JsonClassCreatorDelegate&amp;&amp;</name>
            <content>
                <baseType ref="9504169"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504980">
            <name>JsonClassCreatorDelegate*</name>
            <content>
                <baseType ref="9504169"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonClassFactory_07F3FE1559307E1B17EEBEAFBAA8C9DBAA71924E">
            <name>JsonClassFactory</name>
        </type>
        <type derived="true" id="type.9504172">
            <name>JsonClassFactory&amp;</name>
            <content>
                <baseType ref="class_JsonClassFactory_07F3FE1559307E1B17EEBEAFBAA8C9DBAA71924E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504171">
            <name>JsonClassFactory*</name>
            <content>
                <baseType ref="class_JsonClassFactory_07F3FE1559307E1B17EEBEAFBAA8C9DBAA71924E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507142">
            <name>JsonClassFactory*&amp;</name>
            <content>
                <baseType ref="class_JsonClassFactory_07F3FE1559307E1B17EEBEAFBAA8C9DBAA71924E"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507141">
            <name>JsonClassFactory**</name>
            <content>
                <baseType ref="class_JsonClassFactory_07F3FE1559307E1B17EEBEAFBAA8C9DBAA71924E"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318">
            <name>JsonGrammar</name>
        </type>
        <type derived="true" id="type.9504195">
            <name>JsonGrammar&amp;</name>
            <content>
                <baseType ref="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3154">
            <name>JsonGrammar&amp;&amp;</name>
            <content>
                <baseType ref="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504194">
            <name>JsonGrammar*</name>
            <content>
                <baseType ref="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507128">
            <name>JsonGrammar*&amp;</name>
            <content>
                <baseType ref="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507127">
            <name>JsonGrammar**</name>
            <content>
                <baseType ref="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonImportException_B2C659772CC55BEE3DF2ECEA8C50121E3DA06723">
            <name>JsonImportException</name>
        </type>
        <type derived="true" id="type.9504240">
            <name>JsonImportException&amp;</name>
            <content>
                <baseType ref="class_JsonImportException_B2C659772CC55BEE3DF2ECEA8C50121E3DA06723"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505428">
            <name>JsonImportException&amp;&amp;</name>
            <content>
                <baseType ref="class_JsonImportException_B2C659772CC55BEE3DF2ECEA8C50121E3DA06723"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504239">
            <name>JsonImportException*</name>
            <content>
                <baseType ref="class_JsonImportException_B2C659772CC55BEE3DF2ECEA8C50121E3DA06723"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonNull_E0746AE6880508740D5FFC8AF4E0FB0A7AE20ED2">
            <name>JsonNull</name>
        </type>
        <type derived="true" id="type.9504875">
            <name>JsonNull&amp;</name>
            <content>
                <baseType ref="class_JsonNull_E0746AE6880508740D5FFC8AF4E0FB0A7AE20ED2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504874">
            <name>JsonNull*</name>
            <content>
                <baseType ref="class_JsonNull_E0746AE6880508740D5FFC8AF4E0FB0A7AE20ED2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonNumber_BA94887A1742701B420D069040E7953026161429">
            <name>JsonNumber</name>
        </type>
        <type derived="true" id="type.9504135">
            <name>JsonNumber&amp;</name>
            <content>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3150">
            <name>JsonNumber&amp;&amp;</name>
            <content>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504134">
            <name>JsonNumber*</name>
            <content>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507187">
            <name>JsonNumber*&amp;</name>
            <content>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507186">
            <name>JsonNumber**</name>
            <content>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D">
            <name>JsonObject</name>
        </type>
        <type derived="true" id="type.9504153">
            <name>JsonObject&amp;</name>
            <content>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504152">
            <name>JsonObject*</name>
            <content>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507110">
            <name>JsonObject*&amp;</name>
            <content>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507109">
            <name>JsonObject**</name>
            <content>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9">
            <name>JsonParser</name>
        </type>
        <type derived="true" id="type.9504165">
            <name>JsonParser&amp;</name>
            <content>
                <baseType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504164">
            <name>JsonParser*</name>
            <content>
                <baseType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507125">
            <name>JsonParser*&amp;</name>
            <content>
                <baseType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507124">
            <name>JsonParser**</name>
            <content>
                <baseType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516">
            <name>JsonString</name>
        </type>
        <type derived="true" id="type.9504147">
            <name>JsonString&amp;</name>
            <content>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504878">
            <name>JsonString&amp;&amp;</name>
            <content>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504146">
            <name>JsonString*</name>
            <content>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507114">
            <name>JsonString*&amp;</name>
            <content>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507113">
            <name>JsonString**</name>
            <content>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A">
            <name>JsonValue</name>
        </type>
        <type derived="true" id="type.9504125">
            <name>JsonValue&amp;</name>
            <content>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507162">
            <name>JsonValue&amp;&amp;</name>
            <content>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504124">
            <name>JsonValue*</name>
            <content>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504951">
            <name>JsonValue*&amp;</name>
            <content>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507059">
            <name>JsonValue*&amp;&amp;</name>
            <content>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507058">
            <name>JsonValue**</name>
            <content>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="9504308">
            <name>K</name>
        </type>
        <type id="9504297">
            <name>Key</name>
        </type>
        <type id="9504299">
            <name>KeyCompare</name>
        </type>
        <type derived="true" id="type.3138">
            <name>KleeneStarParser&amp;&amp;</name>
            <content>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9504886" specialization="true">
            <name>Less&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2"/>
                <argumentType ref="type.9491655"/>
            </content>
        </type>
        <type derived="true" id="type.9504891">
            <name>Less&lt;String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.9504886"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507067">
            <name>Less&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504886"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504890">
            <name>Less&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.9504886"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <argumentType ref="9491093"/>
            </content>
        </type>
        <type derived="true" id="type.2613">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2614">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9505318" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9505301"/>
            </content>
        </type>
        <type id="type.9506963" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9506946"/>
            </content>
        </type>
        <type id="type.9505990" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9505973"/>
            </content>
        </type>
        <type id="type.9506068" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9506051"/>
            </content>
        </type>
        <type id="type.9506807" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9506790"/>
            </content>
        </type>
        <type id="type.9506885" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9506868"/>
            </content>
        </type>
        <type id="type.9492353" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9492335"/>
            </content>
        </type>
        <type id="type.9506885" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9506868"/>
            </content>
        </type>
        <type id="type.9506146" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9506129"/>
            </content>
        </type>
        <type id="type.9505396" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9505379"/>
            </content>
        </type>
        <type derived="true" id="type.9506070">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.9506068"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506148">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.9506146"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506887">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.9506885"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505992">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.9505990"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505398">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.9505396"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505320">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.9505318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506965">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.9506963"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506809">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.9506807"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506014">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506092">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506068"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505420">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505396"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506987">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506963"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506170">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506146"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505342">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505318"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506831">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506807"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506909">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506885"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2588">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9492353"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506147">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.9506146"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506964">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.9506963"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506808">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.9506807"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505397">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.9505396"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506069">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.9506068"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506964">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.9506963"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505319">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.9505318"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506886">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.9506885"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505991">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.9505990"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9505033" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9505016"/>
            </content>
        </type>
        <type derived="true" id="type.9505035">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*>&amp;</name>
            <content>
                <baseType ref="type.9505033"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505057">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505033"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505034">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*>*</name>
            <content>
                <baseType ref="type.9505033"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9492506" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9492489"/>
            </content>
        </type>
        <type derived="true" id="type.2596">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9492506"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9492691" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9492672"/>
            </content>
        </type>
        <type derived="true" id="type.2609">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9492691"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9505552" specialization="true">
            <name>List&lt;SharedPtr&lt;T>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type id="type.9506438" specialization="true">
            <name>List&lt;SharedPtr&lt;T>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type id="type.9506495" specialization="true">
            <name>List&lt;SharedPtr&lt;T>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type id="type.9506552" specialization="true">
            <name>List&lt;SharedPtr&lt;T>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type id="type.9506438" specialization="true">
            <name>List&lt;SharedPtr&lt;T>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.9506554">
            <name>List&lt;SharedPtr&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.9506552"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506440">
            <name>List&lt;SharedPtr&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.9506438"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506497">
            <name>List&lt;SharedPtr&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.9506495"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505554">
            <name>List&lt;SharedPtr&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.9505552"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506554">
            <name>List&lt;SharedPtr&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.9506552"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505572">
            <name>List&lt;SharedPtr&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505552"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506458">
            <name>List&lt;SharedPtr&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506438"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506515">
            <name>List&lt;SharedPtr&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506495"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506572">
            <name>List&lt;SharedPtr&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506552"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506515">
            <name>List&lt;SharedPtr&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506495"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506553">
            <name>List&lt;SharedPtr&lt;T>>*</name>
            <content>
                <baseType ref="type.9506552"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506439">
            <name>List&lt;SharedPtr&lt;T>>*</name>
            <content>
                <baseType ref="type.9506438"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506553">
            <name>List&lt;SharedPtr&lt;T>>*</name>
            <content>
                <baseType ref="type.9506552"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506496">
            <name>List&lt;SharedPtr&lt;T>>*</name>
            <content>
                <baseType ref="type.9506495"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505553">
            <name>List&lt;SharedPtr&lt;T>>*</name>
            <content>
                <baseType ref="type.9505552"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9494056" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.2741">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494056"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="9504283"/>
            </content>
        </type>
        <type derived="true" id="type.9505458">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506224">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506251">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505431">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506278">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505120">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506247">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505481">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2735">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2653">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2617">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506274">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505454">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505143">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506301">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506250">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506277">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506223">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505430">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505119">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506223">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505457">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504952" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Json.JsonValue>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9504879"/>
            </content>
        </type>
        <type derived="true" id="type.9504954">
            <name>List&lt;UniquePtr&lt;System.Json.JsonValue>>&amp;</name>
            <content>
                <baseType ref="type.9504952"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504972">
            <name>List&lt;UniquePtr&lt;System.Json.JsonValue>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504952"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504953">
            <name>List&lt;UniquePtr&lt;System.Json.JsonValue>>*</name>
            <content>
                <baseType ref="type.9504952"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9505495" specialization="true">
            <name>List&lt;UniquePtr&lt;T>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type id="type.9506381" specialization="true">
            <name>List&lt;UniquePtr&lt;T>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type id="type.9506348" specialization="true">
            <name>List&lt;UniquePtr&lt;T>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type id="type.9505495" specialization="true">
            <name>List&lt;UniquePtr&lt;T>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type id="type.9506315" specialization="true">
            <name>List&lt;UniquePtr&lt;T>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type derived="true" id="type.9506317">
            <name>List&lt;UniquePtr&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.9506315"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506350">
            <name>List&lt;UniquePtr&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.9506348"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506383">
            <name>List&lt;UniquePtr&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.9506381"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505497">
            <name>List&lt;UniquePtr&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.9505495"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505515">
            <name>List&lt;UniquePtr&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505495"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506401">
            <name>List&lt;UniquePtr&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506381"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506368">
            <name>List&lt;UniquePtr&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506348"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506401">
            <name>List&lt;UniquePtr&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506381"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506335">
            <name>List&lt;UniquePtr&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506315"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506316">
            <name>List&lt;UniquePtr&lt;T>>*</name>
            <content>
                <baseType ref="type.9506315"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506349">
            <name>List&lt;UniquePtr&lt;T>>*</name>
            <content>
                <baseType ref="type.9506348"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506382">
            <name>List&lt;UniquePtr&lt;T>>*</name>
            <content>
                <baseType ref="type.9506381"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505496">
            <name>List&lt;UniquePtr&lt;T>>*</name>
            <content>
                <baseType ref="type.9505495"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3091">
            <name>Literal&amp;&amp;</name>
            <content>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1" specialization="true">
            <name>LockGuard&lt;Mtx></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="9491129"/>
            </content>
        </type>
        <type derived="true" id="type.2641">
            <name>LockGuard&lt;Mtx>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496398" specialization="true">
            <name>LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.2828">
            <name>LockGuard&lt;System.Threading.Mutex>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496398"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3124">
            <name>LvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D" specialization="true">
            <name>Map&lt;Key, Value, KeyCompare></name>
            <content>
                <primaryType ref="class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <argumentType ref="9504261"/>
                <argumentType ref="9504262"/>
                <argumentType ref="9504263"/>
            </content>
        </type>
        <type id="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D" specialization="true">
            <name>Map&lt;Key, Value, KeyCompare></name>
            <content>
                <primaryType ref="class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <argumentType ref="9504291"/>
                <argumentType ref="9504292"/>
                <argumentType ref="9504293"/>
            </content>
        </type>
        <type derived="true" id="type.9505147">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505819">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505758">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506636">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505575">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506575">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505636">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505697">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505208">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506697">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505880">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506696">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506574">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505574">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505207">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506635">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505818">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505146">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505757">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506696">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505635">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505696">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505879">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504892" specialization="true">
            <name>Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="type.9504124"/>
                <argumentType ref="type.9504886"/>
            </content>
        </type>
        <type derived="true" id="type.9504894">
            <name>Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.9504892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504893">
            <name>Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.9504892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507102">
            <name>Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.9504892"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507101">
            <name>Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.9504892"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2638">
            <name>Mtx&amp;</name>
            <content>
                <baseType ref="9491129"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3086">
            <name>New&amp;&amp;</name>
            <content>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3044">
            <name>Not&amp;&amp;</name>
            <content>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_NumberRule_27C8EFF3C84114164EA6042FB8F167C6EB90366C">
            <name>NumberRule</name>
        </type>
        <type derived="true" id="type.9504234">
            <name>NumberRule&amp;</name>
            <content>
                <baseType ref="class_NumberRule_27C8EFF3C84114164EA6042FB8F167C6EB90366C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504233">
            <name>NumberRule*</name>
            <content>
                <baseType ref="class_NumberRule_27C8EFF3C84114164EA6042FB8F167C6EB90366C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507245">
            <name>NumberRule*&amp;</name>
            <content>
                <baseType ref="class_NumberRule_27C8EFF3C84114164EA6042FB8F167C6EB90366C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507244">
            <name>NumberRule**</name>
            <content>
                <baseType ref="class_NumberRule_27C8EFF3C84114164EA6042FB8F167C6EB90366C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ObjectRule_5E2C4DD6D6F88EBF302BC3AE586ACFE38942C13D">
            <name>ObjectRule</name>
        </type>
        <type derived="true" id="type.9504204">
            <name>ObjectRule&amp;</name>
            <content>
                <baseType ref="class_ObjectRule_5E2C4DD6D6F88EBF302BC3AE586ACFE38942C13D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504203">
            <name>ObjectRule*</name>
            <content>
                <baseType ref="class_ObjectRule_5E2C4DD6D6F88EBF302BC3AE586ACFE38942C13D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507220">
            <name>ObjectRule*&amp;</name>
            <content>
                <baseType ref="class_ObjectRule_5E2C4DD6D6F88EBF302BC3AE586ACFE38942C13D"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507219">
            <name>ObjectRule**</name>
            <content>
                <baseType ref="class_ObjectRule_5E2C4DD6D6F88EBF302BC3AE586ACFE38942C13D"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3132">
            <name>OptionalParser&amp;&amp;</name>
            <content>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9506804" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9506783"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9506065" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9506044"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9506960" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9506939"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9505987" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9505966"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9506143" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9506122"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9506882" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9506861"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9505315" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9505294"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9505393" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9505372"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type derived="true" id="type.9506145">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.9506143"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506962">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.9506960"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506067">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.9506065"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505317">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.9505315"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506962">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.9506960"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506884">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.9506882"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505395">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.9505393"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505989">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.9505987"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506806">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.9506804"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506066">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.9506065"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506144">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.9506143"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505394">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.9505393"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506961">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.9506960"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506883">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.9506882"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506961">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.9506960"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505988">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.9505987"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506805">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.9506804"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505316">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.9505315"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9505030" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9505009"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type derived="true" id="type.9505032">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.9505030"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507154">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505030"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505031">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.9505030"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2873" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.2861"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9504692" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9504680"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type derived="true" id="type.9504694">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.9504692"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2875">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.2873"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2874">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.2873"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504693">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.9504692"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980" specialization="true">
            <name>Pair&lt;K, T></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="9504275"/>
                <argumentType ref="9504276"/>
            </content>
        </type>
        <type derived="true" id="type.9506920">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506842">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506025">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506764">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505275">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506920">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506103">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505947">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505353">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506919">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506024">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506102">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505352">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506919">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505274">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505946">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506841">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506763">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183" specialization="true">
            <name>Pair&lt;Key, Value></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="9504252"/>
                <argumentType ref="9504253"/>
            </content>
        </type>
        <type derived="true" id="type.9505703">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506703">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505581">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505764">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505642">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506642">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505825">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505153">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505886">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506581">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505214">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506703">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505763">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506580">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505213">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505702">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506641">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505824">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506702">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505885">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505580">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506702">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505152">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505641">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9505256" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9505248"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9505928" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9505920"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9506745" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9506737"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9505867" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9505859"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9505806" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9505798"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9505684" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9505676"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9505745" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9505737"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9505195" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9505187"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9506684" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9506676"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9505623" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9505615"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9505684" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9505676"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type id="type.9506623" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9506615"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type derived="true" id="type.9505808">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.9505806"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506747">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.9506745"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505869">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.9505867"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506686">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.9506684"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505930">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.9505928"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505258">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.9505256"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505747">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.9505745"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506625">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.9506623"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505686">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.9505684"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506747">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.9506745"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505197">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.9505195"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505625">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.9505623"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505196">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.9505195"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506746">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.9506745"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505929">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.9505928"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505868">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.9505867"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505807">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.9505806"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505257">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.9505256"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506624">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.9506623"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505685">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.9505684"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505624">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.9505623"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505746">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.9505745"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506685">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.9506684"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506746">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.9506745"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504941" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9504933"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type derived="true" id="type.9504943">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.9504941"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507098">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504941"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504942">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>, bool>*</name>
            <content>
                <baseType ref="type.9504941"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504898" specialization="true">
            <name>Pair&lt;String&lt;uchar>, JsonValue*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="type.9504124"/>
            </content>
        </type>
        <type derived="true" id="type.9504900">
            <name>Pair&lt;String&lt;uchar>, JsonValue*>&amp;</name>
            <content>
                <baseType ref="type.9504898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507057">
            <name>Pair&lt;String&lt;uchar>, JsonValue*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504898"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504899">
            <name>Pair&lt;String&lt;uchar>, JsonValue*>*</name>
            <content>
                <baseType ref="type.9504898"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504989" specialization="true">
            <name>Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="9504169"/>
            </content>
        </type>
        <type derived="true" id="type.9504991">
            <name>Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;</name>
            <content>
                <baseType ref="type.9504989"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507130">
            <name>Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504989"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504990">
            <name>Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*</name>
            <content>
                <baseType ref="type.9504989"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="9491143"/>
                <argumentType ref="9491144"/>
            </content>
        </type>
        <type derived="true" id="type.9504085">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2496">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504084">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2495">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3145">
            <name>ParsingData&amp;&amp;</name>
            <content>
                <baseType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504087">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2498">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504087">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504086">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9498668">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2497">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3126">
            <name>Pointer&amp;&amp;</name>
            <content>
                <baseType ref="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3135">
            <name>PositiveParser&amp;&amp;</name>
            <content>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3074">
            <name>PostfixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3071">
            <name>PostfixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3056">
            <name>PrefixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3053">
            <name>PrefixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500330" specialization="true">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9498525"/>
                <argumentType ref="type.9500328"/>
                <argumentType ref="type.9500329"/>
            </content>
        </type>
        <type derived="true" id="type.2893">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500330"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495239" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9491349"/>
                <argumentType ref="type.9495082"/>
                <argumentType ref="type.9495238"/>
            </content>
        </type>
        <type derived="true" id="type.2785">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495239"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496279" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9491420"/>
                <argumentType ref="type.9496122"/>
                <argumentType ref="type.9496278"/>
            </content>
        </type>
        <type derived="true" id="type.2810">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496279"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495863" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9491394"/>
                <argumentType ref="type.9495706"/>
                <argumentType ref="type.9495862"/>
            </content>
        </type>
        <type derived="true" id="type.2800">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495863"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496071" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9491407"/>
                <argumentType ref="type.9495914"/>
                <argumentType ref="type.9496070"/>
            </content>
        </type>
        <type derived="true" id="type.2805">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9494602" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9491319"/>
                <argumentType ref="type.9494431"/>
                <argumentType ref="type.9494601"/>
            </content>
        </type>
        <type derived="true" id="type.2770">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494602"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9494820" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9491329"/>
                <argumentType ref="type.9494663"/>
                <argumentType ref="type.9494819"/>
            </content>
        </type>
        <type derived="true" id="type.2775">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9499872" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9499839"/>
                <argumentType ref="type.9499870"/>
                <argumentType ref="type.9499871"/>
            </content>
        </type>
        <type derived="true" id="type.2860">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499872"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9499863" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9499839"/>
                <argumentType ref="type.9499861"/>
                <argumentType ref="type.9499862"/>
            </content>
        </type>
        <type derived="true" id="type.2859">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499863"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9506980" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9506946"/>
                <argumentType ref="type.9506978"/>
                <argumentType ref="type.9506979"/>
            </content>
        </type>
        <type id="type.9505413" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9505379"/>
                <argumentType ref="type.9505411"/>
                <argumentType ref="type.9505412"/>
            </content>
        </type>
        <type id="type.9505335" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9505301"/>
                <argumentType ref="type.9505333"/>
                <argumentType ref="type.9505334"/>
            </content>
        </type>
        <type id="type.9506163" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9506129"/>
                <argumentType ref="type.9506161"/>
                <argumentType ref="type.9506162"/>
            </content>
        </type>
        <type id="type.9506085" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9506051"/>
                <argumentType ref="type.9506083"/>
                <argumentType ref="type.9506084"/>
            </content>
        </type>
        <type id="type.9506007" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9505973"/>
                <argumentType ref="type.9506005"/>
                <argumentType ref="type.9506006"/>
            </content>
        </type>
        <type id="type.9506980" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9506946"/>
                <argumentType ref="type.9506978"/>
                <argumentType ref="type.9506979"/>
            </content>
        </type>
        <type id="type.9506824" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9506790"/>
                <argumentType ref="type.9506822"/>
                <argumentType ref="type.9506823"/>
            </content>
        </type>
        <type id="type.9506902" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9506868"/>
                <argumentType ref="type.9506900"/>
                <argumentType ref="type.9506901"/>
            </content>
        </type>
        <type id="type.9492370" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9492335"/>
                <argumentType ref="type.9492368"/>
                <argumentType ref="type.9492369"/>
            </content>
        </type>
        <type id="type.9492448" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9492414"/>
                <argumentType ref="type.9492446"/>
                <argumentType ref="type.9492447"/>
            </content>
        </type>
        <type derived="true" id="type.9506982">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9506980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506165">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9506163"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505415">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9505413"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506087">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9506085"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506904">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9506902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506982">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9506980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506009">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9506007"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505337">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9505335"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506826">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9506824"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2933">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505335"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2935">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505413"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3001">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506980"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2999">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506902"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2587">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9492370"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2961">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506085"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2592">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9492448"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2997">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506824"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2959">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506007"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2963">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506163"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505414">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9505413"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506008">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9506007"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506825">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9506824"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506903">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9506902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506981">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9506980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506086">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9506085"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506981">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9506980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505336">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9505335"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506164">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9506163"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9506971" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9506946"/>
                <argumentType ref="type.9506969"/>
                <argumentType ref="type.9506970"/>
            </content>
        </type>
        <type id="type.9505998" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9505973"/>
                <argumentType ref="type.9505996"/>
                <argumentType ref="type.9505997"/>
            </content>
        </type>
        <type id="type.9506893" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9506868"/>
                <argumentType ref="type.9506891"/>
                <argumentType ref="type.9506892"/>
            </content>
        </type>
        <type id="type.9505404" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9505379"/>
                <argumentType ref="type.9505402"/>
                <argumentType ref="type.9505403"/>
            </content>
        </type>
        <type id="type.9492361" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9492335"/>
                <argumentType ref="type.9492359"/>
                <argumentType ref="type.9492360"/>
            </content>
        </type>
        <type id="type.9506815" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9506790"/>
                <argumentType ref="type.9506813"/>
                <argumentType ref="type.9506814"/>
            </content>
        </type>
        <type id="type.9506971" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9506946"/>
                <argumentType ref="type.9506969"/>
                <argumentType ref="type.9506970"/>
            </content>
        </type>
        <type id="type.9505326" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9505301"/>
                <argumentType ref="type.9505324"/>
                <argumentType ref="type.9505325"/>
            </content>
        </type>
        <type id="type.9506154" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9506129"/>
                <argumentType ref="type.9506152"/>
                <argumentType ref="type.9506153"/>
            </content>
        </type>
        <type id="type.9506076" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9506051"/>
                <argumentType ref="type.9506074"/>
                <argumentType ref="type.9506075"/>
            </content>
        </type>
        <type id="type.9492439" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9492414"/>
                <argumentType ref="type.9492437"/>
                <argumentType ref="type.9492438"/>
            </content>
        </type>
        <type derived="true" id="type.9506817">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9506815"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506000">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9505998"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506078">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9506076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505328">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9505326"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506895">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9506893"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505406">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9505404"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506973">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9506971"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506156">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9506154"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506973">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.9506971"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2998">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506893"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2996">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506815"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2962">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506154"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2960">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2958">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505998"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2932">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505326"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2586">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9492361"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2934">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505404"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3000">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506971"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2591">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9492439"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506816">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9506815"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506155">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9506154"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505327">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9505326"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505999">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9505998"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506077">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9506076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505405">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9505404"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506972">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9506971"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506894">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.9506893"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9495216" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495182"/>
                <argumentType ref="type.9495214"/>
                <argumentType ref="type.9495215"/>
            </content>
        </type>
        <type derived="true" id="type.2784">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495216"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495207" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495182"/>
                <argumentType ref="type.9495205"/>
                <argumentType ref="type.9495206"/>
            </content>
        </type>
        <type derived="true" id="type.2783">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495207"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496256" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9496222"/>
                <argumentType ref="type.9496254"/>
                <argumentType ref="type.9496255"/>
            </content>
        </type>
        <type derived="true" id="type.2809">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496256"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496247" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9496222"/>
                <argumentType ref="type.9496245"/>
                <argumentType ref="type.9496246"/>
            </content>
        </type>
        <type derived="true" id="type.2808">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496247"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495840" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495806"/>
                <argumentType ref="type.9495838"/>
                <argumentType ref="type.9495839"/>
            </content>
        </type>
        <type derived="true" id="type.2799">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495840"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495831" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495806"/>
                <argumentType ref="type.9495829"/>
                <argumentType ref="type.9495830"/>
            </content>
        </type>
        <type derived="true" id="type.2798">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495831"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496048" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9496014"/>
                <argumentType ref="type.9496046"/>
                <argumentType ref="type.9496047"/>
            </content>
        </type>
        <type derived="true" id="type.2804">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496048"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496039" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9496014"/>
                <argumentType ref="type.9496037"/>
                <argumentType ref="type.9496038"/>
            </content>
        </type>
        <type derived="true" id="type.2803">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496039"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9494586" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9494552"/>
                <argumentType ref="type.9494584"/>
                <argumentType ref="type.9494585"/>
            </content>
        </type>
        <type derived="true" id="type.2769">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494586"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9494577" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9494552"/>
                <argumentType ref="type.9494575"/>
                <argumentType ref="type.9494576"/>
            </content>
        </type>
        <type derived="true" id="type.2768">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494577"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9494797" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9494763"/>
                <argumentType ref="type.9494795"/>
                <argumentType ref="type.9494796"/>
            </content>
        </type>
        <type derived="true" id="type.2774">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494797"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9494788" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9494763"/>
                <argumentType ref="type.9494786"/>
                <argumentType ref="type.9494787"/>
            </content>
        </type>
        <type derived="true" id="type.2773">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494788"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495008" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9494974"/>
                <argumentType ref="type.9495006"/>
                <argumentType ref="type.9495007"/>
            </content>
        </type>
        <type derived="true" id="type.2779">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495008"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9494999" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9494974"/>
                <argumentType ref="type.9494997"/>
                <argumentType ref="type.9494998"/>
            </content>
        </type>
        <type derived="true" id="type.2778">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494999"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495632" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495598"/>
                <argumentType ref="type.9495630"/>
                <argumentType ref="type.9495631"/>
            </content>
        </type>
        <type derived="true" id="type.2794">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495632"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495623" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495598"/>
                <argumentType ref="type.9495621"/>
                <argumentType ref="type.9495622"/>
            </content>
        </type>
        <type derived="true" id="type.2793">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495623"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495424" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495390"/>
                <argumentType ref="type.9495422"/>
                <argumentType ref="type.9495423"/>
            </content>
        </type>
        <type derived="true" id="type.2789">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495424"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495415" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495390"/>
                <argumentType ref="type.9495413"/>
                <argumentType ref="type.9495414"/>
            </content>
        </type>
        <type derived="true" id="type.2788">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495415"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500118" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9500084"/>
                <argumentType ref="type.9500116"/>
                <argumentType ref="type.9500117"/>
            </content>
        </type>
        <type derived="true" id="type.2884">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500118"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500109" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9500084"/>
                <argumentType ref="type.9500107"/>
                <argumentType ref="type.9500108"/>
            </content>
        </type>
        <type derived="true" id="type.2883">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500109"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500194" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9500160"/>
                <argumentType ref="type.9500192"/>
                <argumentType ref="type.9500193"/>
            </content>
        </type>
        <type derived="true" id="type.2886">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500194"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500185" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9500160"/>
                <argumentType ref="type.9500183"/>
                <argumentType ref="type.9500184"/>
            </content>
        </type>
        <type derived="true" id="type.2885">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500185"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500441" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9500407"/>
                <argumentType ref="type.9500439"/>
                <argumentType ref="type.9500440"/>
            </content>
        </type>
        <type derived="true" id="type.2896">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500441"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500432" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9500407"/>
                <argumentType ref="type.9500430"/>
                <argumentType ref="type.9500431"/>
            </content>
        </type>
        <type derived="true" id="type.2895">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500432"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9499684" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9499650"/>
                <argumentType ref="type.9499682"/>
                <argumentType ref="type.9499683"/>
            </content>
        </type>
        <type derived="true" id="type.2855">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499684"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9499675" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9499650"/>
                <argumentType ref="type.9499673"/>
                <argumentType ref="type.9499674"/>
            </content>
        </type>
        <type derived="true" id="type.2854">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499675"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9505050" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*, Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9505016"/>
                <argumentType ref="type.9505048"/>
                <argumentType ref="type.9505049"/>
            </content>
        </type>
        <type derived="true" id="type.9505052">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*, Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**>&amp;</name>
            <content>
                <baseType ref="type.9505050"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2923">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*, Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505050"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505051">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*, Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**>*</name>
            <content>
                <baseType ref="type.9505050"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9505041" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9505016"/>
                <argumentType ref="type.9505039"/>
                <argumentType ref="type.9505040"/>
            </content>
        </type>
        <type derived="true" id="type.9505043">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**>&amp;</name>
            <content>
                <baseType ref="type.9505041"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2922">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505041"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505042">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**>*</name>
            <content>
                <baseType ref="type.9505041"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9495140" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495106"/>
                <argumentType ref="type.9495138"/>
                <argumentType ref="type.9495139"/>
            </content>
        </type>
        <type derived="true" id="type.2782">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495140"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495131" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495106"/>
                <argumentType ref="type.9495129"/>
                <argumentType ref="type.9495130"/>
            </content>
        </type>
        <type derived="true" id="type.2781">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495131"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496180" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9496146"/>
                <argumentType ref="type.9496178"/>
                <argumentType ref="type.9496179"/>
            </content>
        </type>
        <type derived="true" id="type.2807">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496180"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496171" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9496146"/>
                <argumentType ref="type.9496169"/>
                <argumentType ref="type.9496170"/>
            </content>
        </type>
        <type derived="true" id="type.2806">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496171"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495764" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495730"/>
                <argumentType ref="type.9495762"/>
                <argumentType ref="type.9495763"/>
            </content>
        </type>
        <type derived="true" id="type.2797">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495764"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495755" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495730"/>
                <argumentType ref="type.9495753"/>
                <argumentType ref="type.9495754"/>
            </content>
        </type>
        <type derived="true" id="type.2796">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495755"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495972" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495938"/>
                <argumentType ref="type.9495970"/>
                <argumentType ref="type.9495971"/>
            </content>
        </type>
        <type derived="true" id="type.2802">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495972"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495963" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495938"/>
                <argumentType ref="type.9495961"/>
                <argumentType ref="type.9495962"/>
            </content>
        </type>
        <type derived="true" id="type.2801">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495963"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9494489" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9494455"/>
                <argumentType ref="type.9494487"/>
                <argumentType ref="type.9494488"/>
            </content>
        </type>
        <type derived="true" id="type.2767">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494489"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9494480" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9494455"/>
                <argumentType ref="type.9494478"/>
                <argumentType ref="type.9494479"/>
            </content>
        </type>
        <type derived="true" id="type.2766">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494480"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9494721" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9494687"/>
                <argumentType ref="type.9494719"/>
                <argumentType ref="type.9494720"/>
            </content>
        </type>
        <type derived="true" id="type.2772">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494721"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9494712" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9494687"/>
                <argumentType ref="type.9494710"/>
                <argumentType ref="type.9494711"/>
            </content>
        </type>
        <type derived="true" id="type.2771">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494712"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9494932" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9494898"/>
                <argumentType ref="type.9494930"/>
                <argumentType ref="type.9494931"/>
            </content>
        </type>
        <type derived="true" id="type.2777">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494932"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9494923" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9494898"/>
                <argumentType ref="type.9494921"/>
                <argumentType ref="type.9494922"/>
            </content>
        </type>
        <type derived="true" id="type.2776">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494923"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495556" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495522"/>
                <argumentType ref="type.9495554"/>
                <argumentType ref="type.9495555"/>
            </content>
        </type>
        <type derived="true" id="type.2792">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495556"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495547" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495522"/>
                <argumentType ref="type.9495545"/>
                <argumentType ref="type.9495546"/>
            </content>
        </type>
        <type derived="true" id="type.2791">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495547"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495348" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495314"/>
                <argumentType ref="type.9495346"/>
                <argumentType ref="type.9495347"/>
            </content>
        </type>
        <type derived="true" id="type.2787">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495348"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495339" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9495314"/>
                <argumentType ref="type.9495337"/>
                <argumentType ref="type.9495338"/>
            </content>
        </type>
        <type derived="true" id="type.2786">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495339"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9499956" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9499924"/>
                <argumentType ref="type.9499954"/>
                <argumentType ref="type.9499955"/>
            </content>
        </type>
        <type derived="true" id="type.2877">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499956"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9499947" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9499924"/>
                <argumentType ref="type.9499945"/>
                <argumentType ref="type.9499946"/>
            </content>
        </type>
        <type derived="true" id="type.2876">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499947"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9492597" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9492563"/>
                <argumentType ref="type.9492595"/>
                <argumentType ref="type.9492596"/>
            </content>
        </type>
        <type id="type.9492523" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9492489"/>
                <argumentType ref="type.9492521"/>
                <argumentType ref="type.9492522"/>
            </content>
        </type>
        <type id="type.9492597" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9492563"/>
                <argumentType ref="type.9492595"/>
                <argumentType ref="type.9492596"/>
            </content>
        </type>
        <type derived="true" id="type.2599">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9492597"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2595">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9492523"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9492588" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9492563"/>
                <argumentType ref="type.9492586"/>
                <argumentType ref="type.9492587"/>
            </content>
        </type>
        <type id="type.9492514" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9492489"/>
                <argumentType ref="type.9492512"/>
                <argumentType ref="type.9492513"/>
            </content>
        </type>
        <type id="type.9492588" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9492563"/>
                <argumentType ref="type.9492586"/>
                <argumentType ref="type.9492587"/>
            </content>
        </type>
        <type derived="true" id="type.2598">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9492588"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2594">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9492514"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9492708" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9492672"/>
                <argumentType ref="type.9492706"/>
                <argumentType ref="type.9492707"/>
            </content>
        </type>
        <type derived="true" id="type.2608">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9492708"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9492699" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9492672"/>
                <argumentType ref="type.9492697"/>
                <argumentType ref="type.9492698"/>
            </content>
        </type>
        <type derived="true" id="type.2607">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9492699"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9491258"/>
                <argumentType ref="type.9494093"/>
                <argumentType ref="type.9494094"/>
            </content>
        </type>
        <type derived="true" id="type.2751">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2763">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2747">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2755">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2743">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2737">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2759">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9491257"/>
                <argumentType ref="type.9494036"/>
                <argumentType ref="type.9494037"/>
            </content>
        </type>
        <type derived="true" id="type.2746">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2742">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2736">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2754">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2758">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2750">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2762">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495031" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9491339"/>
                <argumentType ref="type.9494874"/>
                <argumentType ref="type.9495030"/>
            </content>
        </type>
        <type derived="true" id="type.2780">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495031"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500221" specialization="true">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9498630"/>
                <argumentType ref="type.9500136"/>
                <argumentType ref="type.9500217"/>
            </content>
        </type>
        <type derived="true" id="type.2887">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500221"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500356" specialization="true">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9498638"/>
                <argumentType ref="type.9500354"/>
                <argumentType ref="type.9500355"/>
            </content>
        </type>
        <type derived="true" id="type.2894">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500356"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495648" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9491381"/>
                <argumentType ref="type.9495498"/>
                <argumentType ref="type.9495647"/>
            </content>
        </type>
        <type derived="true" id="type.2795">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495648"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9499769" specialization="true">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9498869"/>
                <argumentType ref="type.9499767"/>
                <argumentType ref="type.9499768"/>
            </content>
        </type>
        <type derived="true" id="type.2858">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499769"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9495447" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9491362"/>
                <argumentType ref="type.9495290"/>
                <argumentType ref="type.9495446"/>
            </content>
        </type>
        <type derived="true" id="type.2790">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9495447"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9506565" specialization="true">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="type.9506518"/>
                <argumentType ref="type.9506517"/>
            </content>
        </type>
        <type id="type.9506508" specialization="true">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="type.9506461"/>
                <argumentType ref="type.9506460"/>
            </content>
        </type>
        <type id="type.9506451" specialization="true">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="type.9506404"/>
                <argumentType ref="type.9506403"/>
            </content>
        </type>
        <type id="type.9505565" specialization="true">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="type.9505518"/>
                <argumentType ref="type.9505517"/>
            </content>
        </type>
        <type derived="true" id="type.9506567">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506565"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506510">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506508"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506453">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506451"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505567">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9505565"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506567">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506565"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2989">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506565"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2945">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505565"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2981">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506451"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2985">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506508"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506452">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9506451"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505566">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9505565"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506509">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9506508"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506566">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9506565"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506509">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9506508"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9506558" specialization="true">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="type.9506521"/>
                <argumentType ref="type.9506520"/>
            </content>
        </type>
        <type id="type.9505558" specialization="true">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="type.9505521"/>
                <argumentType ref="type.9505520"/>
            </content>
        </type>
        <type id="type.9506558" specialization="true">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="type.9506521"/>
                <argumentType ref="type.9506520"/>
            </content>
        </type>
        <type id="type.9506501" specialization="true">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="type.9506464"/>
                <argumentType ref="type.9506463"/>
            </content>
        </type>
        <type id="type.9506444" specialization="true">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="type.9506407"/>
                <argumentType ref="type.9506406"/>
            </content>
        </type>
        <type derived="true" id="type.9505560">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9505558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506560">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506503">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506501"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506560">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506446">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506444"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2944">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505558"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2988">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506558"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2984">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506501"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2980">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506444"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506502">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9506501"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506445">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9506444"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505559">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9505558"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506559">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9506558"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506502">
            <name>RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9506501"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9494163" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9494126"/>
                <argumentType ref="type.9494125"/>
            </content>
        </type>
        <type id="type.9494257" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9494220"/>
                <argumentType ref="type.9494219"/>
            </content>
        </type>
        <type id="type.9494210" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9494173"/>
                <argumentType ref="type.9494172"/>
            </content>
        </type>
        <type id="type.9494069" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9494032"/>
                <argumentType ref="type.9494031"/>
            </content>
        </type>
        <type id="type.9494304" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9494270"/>
                <argumentType ref="type.9494269"/>
            </content>
        </type>
        <type id="type.9494116" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9494079"/>
                <argumentType ref="type.9494078"/>
            </content>
        </type>
        <type id="type.9494351" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9494314"/>
                <argumentType ref="type.9494313"/>
            </content>
        </type>
        <type derived="true" id="type.2740">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494069"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2761">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494304"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2745">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494116"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2753">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494210"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2757">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494257"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2749">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494163"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2765">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494351"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9494062" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9494035"/>
                <argumentType ref="type.9494034"/>
            </content>
        </type>
        <type id="type.9494156" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9494129"/>
                <argumentType ref="type.9494128"/>
            </content>
        </type>
        <type id="type.9494297" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9494273"/>
                <argumentType ref="type.9494272"/>
            </content>
        </type>
        <type id="type.9494203" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9494176"/>
                <argumentType ref="type.9494175"/>
            </content>
        </type>
        <type id="type.9494344" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9494317"/>
                <argumentType ref="type.9494316"/>
            </content>
        </type>
        <type id="type.9494156" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9494129"/>
                <argumentType ref="type.9494128"/>
            </content>
        </type>
        <type id="type.9494250" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9494223"/>
                <argumentType ref="type.9494222"/>
            </content>
        </type>
        <type id="type.9494109" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9494082"/>
                <argumentType ref="type.9494081"/>
            </content>
        </type>
        <type derived="true" id="type.2739">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494062"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2748">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494156"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2760">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494297"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2752">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494203"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2764">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494344"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2744">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494109"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2756">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9494250"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9491602" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9491567"/>
                <argumentType ref="type.9491569"/>
                <argumentType ref="type.9491568"/>
            </content>
        </type>
        <type derived="true" id="type.2509">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9491602"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9491595" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9491567"/>
                <argumentType ref="type.9491572"/>
                <argumentType ref="type.9491571"/>
            </content>
        </type>
        <type derived="true" id="type.2508">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9491595"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9491692" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="type.9491657"/>
                <argumentType ref="type.9491656"/>
            </content>
        </type>
        <type derived="true" id="type.2528">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9491692"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9491685" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="type.9491660"/>
                <argumentType ref="type.9491659"/>
            </content>
        </type>
        <type derived="true" id="type.2527">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9491685"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9491647" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9491610"/>
                <argumentType ref="type.9491612"/>
                <argumentType ref="type.9491611"/>
            </content>
        </type>
        <type derived="true" id="type.2518">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9491647"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9491640" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9491610"/>
                <argumentType ref="type.9491615"/>
                <argumentType ref="type.9491614"/>
            </content>
        </type>
        <type derived="true" id="type.2517">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9491640"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500306" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_AttrOrVar_50B6EF23E232C2A406B7F5C94499D4CC0CC6D353"/>
                <argumentType ref="type.9498861"/>
                <argumentType ref="type.9498860"/>
            </content>
        </type>
        <type derived="true" id="type.2892">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500306"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500292" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.9498696"/>
                <argumentType ref="type.9498695"/>
            </content>
        </type>
        <type derived="true" id="type.2891">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500292"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500285" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.9498699"/>
                <argumentType ref="type.9498698"/>
            </content>
        </type>
        <type derived="true" id="type.2890">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500285"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500043" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.9500025"/>
                <argumentType ref="type.9500024"/>
            </content>
        </type>
        <type derived="true" id="type.2882">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500043"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500036" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.9500033"/>
                <argumentType ref="type.9500034"/>
            </content>
        </type>
        <type derived="true" id="type.2881">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500036"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496309" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.9491433"/>
                <argumentType ref="type.9491432"/>
            </content>
        </type>
        <type derived="true" id="type.2812">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496302" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.9491436"/>
                <argumentType ref="type.9491435"/>
            </content>
        </type>
        <type derived="true" id="type.2811">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496302"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9491161"/>
                <argumentType ref="9491162"/>
                <argumentType ref="9491163"/>
            </content>
        </type>
        <type derived="true" id="type.2660">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2659">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2654">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2655">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2656">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2657">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2658">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9504284"/>
                <argumentType ref="type.9506292"/>
                <argumentType ref="type.9506293"/>
            </content>
        </type>
        <type derived="true" id="type.9506296">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506242">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505138">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506296">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506269">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505449">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505476">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2967">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2927">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2620">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2937">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2616">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2622">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2652">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2734">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2971">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2969">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2939">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505137">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505475">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505448">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506241">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506295">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506268">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506295">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9504178"/>
                <argumentType ref="type.9505124"/>
                <argumentType ref="type.9505125"/>
            </content>
        </type>
        <type derived="true" id="type.9505129">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506287">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505467">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505440">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506233">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506260">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506287">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2938">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2936">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2926">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2733">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2651">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2615">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2619">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2968">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2970">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2621">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2966">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505466">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506286">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506232">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506259">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505439">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506286">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505128">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504965" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, UniquePtr&lt;System.Json.JsonValue>&amp;, UniquePtr&lt;System.Json.JsonValue>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9504879"/>
                <argumentType ref="type.9504881"/>
                <argumentType ref="type.9504880"/>
            </content>
        </type>
        <type derived="true" id="type.9504967">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, UniquePtr&lt;System.Json.JsonValue>&amp;, UniquePtr&lt;System.Json.JsonValue>*>&amp;</name>
            <content>
                <baseType ref="type.9504965"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504971">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, UniquePtr&lt;System.Json.JsonValue>&amp;, UniquePtr&lt;System.Json.JsonValue>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504965"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504966">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, UniquePtr&lt;System.Json.JsonValue>&amp;, UniquePtr&lt;System.Json.JsonValue>*>*</name>
            <content>
                <baseType ref="type.9504965"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504958" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, const UniquePtr&lt;System.Json.JsonValue>&amp;, const UniquePtr&lt;System.Json.JsonValue>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9504879"/>
                <argumentType ref="type.9504884"/>
                <argumentType ref="type.9504883"/>
            </content>
        </type>
        <type derived="true" id="type.9504960">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, const UniquePtr&lt;System.Json.JsonValue>&amp;, const UniquePtr&lt;System.Json.JsonValue>*>&amp;</name>
            <content>
                <baseType ref="type.9504958"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2921">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, const UniquePtr&lt;System.Json.JsonValue>&amp;, const UniquePtr&lt;System.Json.JsonValue>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504958"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504959">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, const UniquePtr&lt;System.Json.JsonValue>&amp;, const UniquePtr&lt;System.Json.JsonValue>*>*</name>
            <content>
                <baseType ref="type.9504958"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9498340" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9498324"/>
                <argumentType ref="type.9498329"/>
                <argumentType ref="type.9498328"/>
            </content>
        </type>
        <type derived="true" id="type.2843">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9498340"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9498400" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9498384"/>
                <argumentType ref="type.9498389"/>
                <argumentType ref="type.9498388"/>
            </content>
        </type>
        <type derived="true" id="type.2844">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9498400"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9498239" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9498199"/>
                <argumentType ref="type.9498204"/>
                <argumentType ref="type.9498203"/>
            </content>
        </type>
        <type derived="true" id="type.2841">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9498239"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9498291" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9498278"/>
                <argumentType ref="type.9498283"/>
                <argumentType ref="type.9498282"/>
            </content>
        </type>
        <type derived="true" id="type.2842">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9498291"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500009" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9499987"/>
                <argumentType ref="type.9499992"/>
                <argumentType ref="type.9499991"/>
            </content>
        </type>
        <type derived="true" id="type.2880">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9499582" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9499560"/>
                <argumentType ref="type.9499565"/>
                <argumentType ref="type.9499564"/>
            </content>
        </type>
        <type derived="true" id="type.2853">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499582"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500267" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9500247"/>
                <argumentType ref="type.9500249"/>
                <argumentType ref="type.9500248"/>
            </content>
        </type>
        <type derived="true" id="type.2889">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500267"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500260" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9500247"/>
                <argumentType ref="type.9500252"/>
                <argumentType ref="type.9500251"/>
            </content>
        </type>
        <type derived="true" id="type.2888">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500260"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9499551" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9499531"/>
                <argumentType ref="type.9499533"/>
                <argumentType ref="type.9499532"/>
            </content>
        </type>
        <type derived="true" id="type.2852">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499551"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9499544" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9499531"/>
                <argumentType ref="type.9499536"/>
                <argumentType ref="type.9499535"/>
            </content>
        </type>
        <type derived="true" id="type.2851">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499544"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496338" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9496318"/>
                <argumentType ref="type.9496320"/>
                <argumentType ref="type.9496319"/>
            </content>
        </type>
        <type derived="true" id="type.2814">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496338"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496331" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9496318"/>
                <argumentType ref="type.9496323"/>
                <argumentType ref="type.9496322"/>
            </content>
        </type>
        <type derived="true" id="type.2813">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496331"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496434" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9496414"/>
                <argumentType ref="type.9496416"/>
                <argumentType ref="type.9496415"/>
            </content>
        </type>
        <type derived="true" id="type.2830">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496434"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496427" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9496414"/>
                <argumentType ref="type.9496419"/>
                <argumentType ref="type.9496418"/>
            </content>
        </type>
        <type derived="true" id="type.2829">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496427"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496366" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9496346"/>
                <argumentType ref="type.9496348"/>
                <argumentType ref="type.9496347"/>
            </content>
        </type>
        <type derived="true" id="type.2816">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496366"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496359" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9496346"/>
                <argumentType ref="type.9496351"/>
                <argumentType ref="type.9496350"/>
            </content>
        </type>
        <type derived="true" id="type.2815">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496359"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496469" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9496449"/>
                <argumentType ref="type.9496451"/>
                <argumentType ref="type.9496450"/>
            </content>
        </type>
        <type derived="true" id="type.2832">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496469"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496462" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9496449"/>
                <argumentType ref="type.9496454"/>
                <argumentType ref="type.9496453"/>
            </content>
        </type>
        <type derived="true" id="type.2831">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496462"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9506361" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9506338"/>
                <argumentType ref="type.9506337"/>
            </content>
        </type>
        <type id="type.9505508" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9505485"/>
                <argumentType ref="type.9505484"/>
            </content>
        </type>
        <type id="type.9506394" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9506371"/>
                <argumentType ref="type.9506370"/>
            </content>
        </type>
        <type id="type.9506328" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9506305"/>
                <argumentType ref="type.9506304"/>
            </content>
        </type>
        <type derived="true" id="type.9506330">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506328"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506396">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506394"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506330">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506328"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505510">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9505508"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506363">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506361"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2975">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506361"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2977">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506394"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2973">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506328"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2941">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505508"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506395">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9506394"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506362">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9506361"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505509">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9505508"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506329">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9506328"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9506321" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9506308"/>
                <argumentType ref="type.9506307"/>
            </content>
        </type>
        <type id="type.9506387" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9506374"/>
                <argumentType ref="type.9506373"/>
            </content>
        </type>
        <type id="type.9505501" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9505488"/>
                <argumentType ref="type.9505487"/>
            </content>
        </type>
        <type id="type.9506354" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9506341"/>
                <argumentType ref="type.9506340"/>
            </content>
        </type>
        <type derived="true" id="type.9506356">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506354"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506389">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506387"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506323">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506321"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506389">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9506387"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505503">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.9505501"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2940">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505501"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2976">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506387"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2974">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506354"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2972">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506321"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506355">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9506354"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506388">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9506387"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505502">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9505501"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506322">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9506321"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506355">
            <name>RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>*</name>
            <content>
                <baseType ref="type.9506354"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9493057" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490428"/>
                <argumentType ref="type.9490449"/>
                <argumentType ref="type.9490448"/>
            </content>
        </type>
        <type id="type.9497960" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490428"/>
                <argumentType ref="type.9490449"/>
                <argumentType ref="type.9490448"/>
            </content>
        </type>
        <type id="type.9499185" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490428"/>
                <argumentType ref="type.9490449"/>
                <argumentType ref="type.9490448"/>
            </content>
        </type>
        <type id="type.9504448" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490428"/>
                <argumentType ref="type.9490449"/>
                <argumentType ref="type.9490448"/>
            </content>
        </type>
        <type id="type.2630" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490428"/>
                <argumentType ref="type.9490449"/>
                <argumentType ref="type.9490448"/>
            </content>
        </type>
        <type derived="true" id="type.9504450">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.9504448"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2632">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.2630"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504450">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.9504448"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2849">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499185"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2636">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2630"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2637">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9493057"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2839">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9497960"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2919">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504448"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2631">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.2630"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504449">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.9504448"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504319" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490437"/>
                <argumentType ref="type.9490476"/>
                <argumentType ref="type.9490475"/>
            </content>
        </type>
        <type id="type.2501" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490437"/>
                <argumentType ref="type.9490476"/>
                <argumentType ref="type.9490475"/>
            </content>
        </type>
        <type id="type.9499056" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490437"/>
                <argumentType ref="type.9490476"/>
                <argumentType ref="type.9490475"/>
            </content>
        </type>
        <type id="type.9497831" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490437"/>
                <argumentType ref="type.9490476"/>
                <argumentType ref="type.9490475"/>
            </content>
        </type>
        <type id="type.9504319" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490437"/>
                <argumentType ref="type.9490476"/>
                <argumentType ref="type.9490475"/>
            </content>
        </type>
        <type derived="true" id="type.9504321">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.9504319"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2503">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.2501"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2835">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9497831"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2917">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504319"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2507">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2501"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2845">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499056"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2502">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.2501"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504320">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.9504319"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9499075" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490439"/>
                <argumentType ref="type.9490482"/>
                <argumentType ref="type.9490481"/>
            </content>
        </type>
        <type id="type.2520" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490439"/>
                <argumentType ref="type.9490482"/>
                <argumentType ref="type.9490481"/>
            </content>
        </type>
        <type id="type.9504338" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490439"/>
                <argumentType ref="type.9490482"/>
                <argumentType ref="type.9490481"/>
            </content>
        </type>
        <type id="type.9497850" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490439"/>
                <argumentType ref="type.9490482"/>
                <argumentType ref="type.9490481"/>
            </content>
        </type>
        <type id="type.9504338" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490439"/>
                <argumentType ref="type.9490482"/>
                <argumentType ref="type.9490481"/>
            </content>
        </type>
        <type id="type.9491671" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490439"/>
                <argumentType ref="type.9490482"/>
                <argumentType ref="type.9490481"/>
            </content>
        </type>
        <type derived="true" id="type.2522">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.2520"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504340">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.9504338"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504344">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504338"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2529">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9491671"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2847">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499075"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504344">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504338"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2837">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9497850"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2526">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2520"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504339">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.9504338"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2521">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.2520"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9496383" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490432"/>
                <argumentType ref="type.9496380"/>
                <argumentType ref="type.9496381"/>
            </content>
        </type>
        <type derived="true" id="type.2817">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496383"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9504637" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490432"/>
                <argumentType ref="type.9490461"/>
                <argumentType ref="type.9490460"/>
            </content>
        </type>
        <type id="type.2818" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490432"/>
                <argumentType ref="type.9490461"/>
                <argumentType ref="type.9490460"/>
            </content>
        </type>
        <type id="type.9499374" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490432"/>
                <argumentType ref="type.9490461"/>
                <argumentType ref="type.9490460"/>
            </content>
        </type>
        <type id="type.9498149" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490432"/>
                <argumentType ref="type.9490461"/>
                <argumentType ref="type.9490460"/>
            </content>
        </type>
        <type id="type.9496390" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490432"/>
                <argumentType ref="type.9490461"/>
                <argumentType ref="type.9490460"/>
            </content>
        </type>
        <type derived="true" id="type.9504639">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.9504637"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2820">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.2818"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504639">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.9504637"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2850">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499374"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2825">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496390"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2840">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9498149"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2824">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2818"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2920">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504637"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504638">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.9504637"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2819">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.2818"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9491714" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490434"/>
                <argumentType ref="type.9491711"/>
                <argumentType ref="type.9491712"/>
            </content>
        </type>
        <type derived="true" id="type.2530">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9491714"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2531" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490434"/>
                <argumentType ref="type.9490467"/>
                <argumentType ref="type.9490466"/>
            </content>
        </type>
        <type id="type.9499086" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490434"/>
                <argumentType ref="type.9490467"/>
                <argumentType ref="type.9490466"/>
            </content>
        </type>
        <type id="type.9504349" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490434"/>
                <argumentType ref="type.9490467"/>
                <argumentType ref="type.9490466"/>
            </content>
        </type>
        <type id="type.9497861" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490434"/>
                <argumentType ref="type.9490467"/>
                <argumentType ref="type.9490466"/>
            </content>
        </type>
        <type id="type.9491721" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490434"/>
                <argumentType ref="type.9490467"/>
                <argumentType ref="type.9490466"/>
            </content>
        </type>
        <type id="type.9504349" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490434"/>
                <argumentType ref="type.9490467"/>
                <argumentType ref="type.9490466"/>
            </content>
        </type>
        <type derived="true" id="type.2533">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.2531"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504351">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.9504349"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2537">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2531"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2918">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504349"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2848">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499086"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2838">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9497861"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2538">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9491721"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2532">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.2531"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504350">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.9504349"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9491626" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490438"/>
                <argumentType ref="type.9490479"/>
                <argumentType ref="type.9490478"/>
            </content>
        </type>
        <type id="type.2510" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490438"/>
                <argumentType ref="type.9490479"/>
                <argumentType ref="type.9490478"/>
            </content>
        </type>
        <type id="type.9504328" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490438"/>
                <argumentType ref="type.9490479"/>
                <argumentType ref="type.9490478"/>
            </content>
        </type>
        <type id="type.9499065" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490438"/>
                <argumentType ref="type.9490479"/>
                <argumentType ref="type.9490478"/>
            </content>
        </type>
        <type id="type.9497840" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9490438"/>
                <argumentType ref="type.9490479"/>
                <argumentType ref="type.9490478"/>
            </content>
        </type>
        <type derived="true" id="type.9504330">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.9504328"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2512">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.2510"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504330">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.9504328"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2516">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2510"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504334">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504328"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2836">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9497840"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2846">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499065"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2519">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9491626"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504329">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.9504328"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2511">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.2510"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504329">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.9504328"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="9504297"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <argumentType ref="9504299"/>
            </content>
        </type>
        <type derived="true" id="type.9505657">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505229">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505901">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505596">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505779">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506718">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505168">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506657">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505840">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506596">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505718">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506718">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505866">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505683">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505805">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505927">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2627">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506622">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506744">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505866">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505255">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505622">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505744">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505194">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506683">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506717">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505228">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505656">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505900">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505717">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506595">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505839">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505778">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505167">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506656">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506717">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505595">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="9491190"/>
                <argumentType ref="9491191"/>
                <argumentType ref="9491192"/>
                <argumentType ref="9491193"/>
            </content>
        </type>
        <type derived="true" id="type.2669">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9504912" specialization="true">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, JsonValue*>, SelectFirst&lt;String&lt;uchar>, JsonValue*>, Less&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="type.9504898"/>
                <argumentType ref="type.9504902"/>
                <argumentType ref="type.9504886"/>
            </content>
        </type>
        <type derived="true" id="type.9504914">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, JsonValue*>, SelectFirst&lt;String&lt;uchar>, JsonValue*>, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.9504912"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504940">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, JsonValue*>, SelectFirst&lt;String&lt;uchar>, JsonValue*>, Less&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504912"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504913">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, JsonValue*>, SelectFirst&lt;String&lt;uchar>, JsonValue*>, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.9504912"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="9491196"/>
                <argumentType ref="9491196"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="9491197"/>
            </content>
        </type>
        <type derived="true" id="type.2674">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9505669" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.9505241" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.9506669" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.9505791" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.9506608" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.9505852" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.9505608" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.9505180" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.9505913" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.9505730" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.9506730" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.9506610">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.9506608"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505732">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.9505730"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506671">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.9506669"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505610">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.9505608"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505793">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.9505791"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505182">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.9505180"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506732">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.9506730"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505854">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.9505852"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505915">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.9505913"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505243">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.9505241"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506671">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.9506669"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505671">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.9505669"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506609">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.9506608"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505670">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.9505669"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506670">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.9506669"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505181">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.9505180"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506731">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.9506730"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505609">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.9505608"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505242">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.9505241"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505731">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.9505730"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505914">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.9505913"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505853">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.9505852"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505792">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.9505791"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504926" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.9504898"/>
            </content>
        </type>
        <type derived="true" id="type.9504928">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>&amp;</name>
            <content>
                <baseType ref="type.9504926"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504927">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>*</name>
            <content>
                <baseType ref="type.9504926"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507072">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>*&amp;</name>
            <content>
                <baseType ref="type.9504926"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507073">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9504926"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507071">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>**</name>
            <content>
                <baseType ref="type.9504926"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504079">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2490">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504079">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3027">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504078">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2489">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9506676" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9506642"/>
                <argumentType ref="type.9506641"/>
            </content>
        </type>
        <type id="type.9505920" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505886"/>
                <argumentType ref="type.9505885"/>
            </content>
        </type>
        <type id="type.9505859" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505825"/>
                <argumentType ref="type.9505824"/>
            </content>
        </type>
        <type id="type.9505187" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505153"/>
                <argumentType ref="type.9505152"/>
            </content>
        </type>
        <type id="type.9505676" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505642"/>
                <argumentType ref="type.9505641"/>
            </content>
        </type>
        <type id="type.9505615" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505581"/>
                <argumentType ref="type.9505580"/>
            </content>
        </type>
        <type id="type.9506615" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9506581"/>
                <argumentType ref="type.9506580"/>
            </content>
        </type>
        <type id="type.9493021" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9492982"/>
                <argumentType ref="type.9492981"/>
            </content>
        </type>
        <type id="type.9505798" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505764"/>
                <argumentType ref="type.9505763"/>
            </content>
        </type>
        <type id="type.9505676" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505642"/>
                <argumentType ref="type.9505641"/>
            </content>
        </type>
        <type id="type.9505737" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505703"/>
                <argumentType ref="type.9505702"/>
            </content>
        </type>
        <type id="type.9505248" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505214"/>
                <argumentType ref="type.9505213"/>
            </content>
        </type>
        <type id="type.9506737" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9506703"/>
                <argumentType ref="type.9506702"/>
            </content>
        </type>
        <type derived="true" id="type.9505617">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505250">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505248"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505922">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505920"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505739">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506739">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9506737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506678">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9506676"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505678">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505676"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505189">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506617">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9506615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505800">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505798"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505861">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505859"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2991">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506615"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2993">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506676"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2995">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506737"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2929">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505187"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2626">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9493021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2931">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505248"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2947">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505615"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2949">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505676"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2951">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505737"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2953">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505798"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2955">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505859"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2957">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505920"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506616">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9506615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505249">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505248"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505860">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505859"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505188">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505187"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505799">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505798"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506738">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9506737"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505738">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505737"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505677">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505676"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505616">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506677">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9506676"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505921">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505920"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9506663" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9506652"/>
                <argumentType ref="type.9506661"/>
            </content>
        </type>
        <type id="type.9506724" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9506713"/>
                <argumentType ref="type.9506722"/>
            </content>
        </type>
        <type id="type.9505235" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505224"/>
                <argumentType ref="type.9505233"/>
            </content>
        </type>
        <type id="type.9506602" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9506591"/>
                <argumentType ref="type.9506600"/>
            </content>
        </type>
        <type id="type.9505663" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505652"/>
                <argumentType ref="type.9505661"/>
            </content>
        </type>
        <type id="type.9505174" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505163"/>
                <argumentType ref="type.9505172"/>
            </content>
        </type>
        <type id="type.9506663" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9506652"/>
                <argumentType ref="type.9506661"/>
            </content>
        </type>
        <type id="type.9505907" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505896"/>
                <argumentType ref="type.9505905"/>
            </content>
        </type>
        <type id="type.9505724" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505713"/>
                <argumentType ref="type.9505722"/>
            </content>
        </type>
        <type id="type.9505602" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505591"/>
                <argumentType ref="type.9505600"/>
            </content>
        </type>
        <type id="type.9493003" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9492992"/>
                <argumentType ref="type.9493001"/>
            </content>
        </type>
        <type id="type.9505846" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505835"/>
                <argumentType ref="type.9505844"/>
            </content>
        </type>
        <type id="type.9505785" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9505774"/>
                <argumentType ref="type.9505783"/>
            </content>
        </type>
        <type derived="true" id="type.9505604">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505665">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505663"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506604">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9506602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505237">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505235"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505176">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505174"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505909">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505907"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506665">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9506663"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506726">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9506724"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506665">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9506663"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505787">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505785"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505848">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505846"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505726">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.9505724"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2956">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505907"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2992">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506663"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2930">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505235"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2928">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505174"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2990">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506602"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2625">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9493003"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2952">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505785"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2950">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505724"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2954">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505846"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2994">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506724"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2948">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505663"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2946">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505602"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505603">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505908">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505907"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506664">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9506663"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505175">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505174"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505664">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505663"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505725">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505724"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506603">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9506602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505786">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505785"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506725">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9506724"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505236">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505235"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505847">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.9505846"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504933" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.9504898"/>
                <argumentType ref="type.9504900"/>
                <argumentType ref="type.9504899"/>
            </content>
        </type>
        <type derived="true" id="type.9504935">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>&amp;</name>
            <content>
                <baseType ref="type.9504933"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504939">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504933"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504934">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>*</name>
            <content>
                <baseType ref="type.9504933"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504920" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, const Pair&lt;String&lt;uchar>, JsonValue*>&amp;, const Pair&lt;String&lt;uchar>, JsonValue*>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.9504898"/>
                <argumentType ref="type.9504909"/>
                <argumentType ref="type.9504918"/>
            </content>
        </type>
        <type derived="true" id="type.9504922">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, const Pair&lt;String&lt;uchar>, JsonValue*>&amp;, const Pair&lt;String&lt;uchar>, JsonValue*>*>&amp;</name>
            <content>
                <baseType ref="type.9504920"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504932">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, const Pair&lt;String&lt;uchar>, JsonValue*>&amp;, const Pair&lt;String&lt;uchar>, JsonValue*>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504920"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504921">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, const Pair&lt;String&lt;uchar>, JsonValue*>&amp;, const Pair&lt;String&lt;uchar>, JsonValue*>*>*</name>
            <content>
                <baseType ref="type.9504920"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9491186"/>
                <argumentType ref="9491187"/>
                <argumentType ref="9491188"/>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9491183"/>
                <argumentType ref="9491184"/>
                <argumentType ref="9491185"/>
            </content>
        </type>
        <type derived="true" id="type.2666">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2665">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9491200"/>
                <argumentType ref="type.9493447"/>
                <argumentType ref="type.9493449"/>
            </content>
        </type>
        <type derived="true" id="type.2679">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2677">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2673">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9491200"/>
                <argumentType ref="type.9493424"/>
                <argumentType ref="type.9493433"/>
            </content>
        </type>
        <type derived="true" id="type.2678">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2672">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2676">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9491191"/>
                <argumentType ref="type.9493274"/>
                <argumentType ref="type.9493276"/>
            </content>
        </type>
        <type derived="true" id="type.2668">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9491191"/>
                <argumentType ref="type.9493259"/>
                <argumentType ref="type.9493260"/>
            </content>
        </type>
        <type derived="true" id="type.2667">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3095">
            <name>ReturnStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3125">
            <name>RvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21" specialization="true">
            <name>SelectFirst&lt;K, T></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="9504300"/>
                <argumentType ref="9504301"/>
            </content>
        </type>
        <type derived="true" id="type.9505365">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506932">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505959">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506037">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506115">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506854">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506932">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505287">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506776">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506036">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505286">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505364">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506931">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506853">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505958">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506114">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506775">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506931">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7" specialization="true">
            <name>SelectFirst&lt;Key, Value></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="9504261"/>
                <argumentType ref="9504262"/>
            </content>
        </type>
        <type derived="true" id="type.9505593">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506715">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505715">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505654">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505898">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506593">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505837">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505226">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505776">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505165">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506654">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506715">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505592">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505897">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506592">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505164">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506714">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505836">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505714">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505225">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506592">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505653">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505775">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506653">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504902" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, JsonValue*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="type.9504124"/>
            </content>
        </type>
        <type derived="true" id="type.9504911">
            <name>SelectFirst&lt;String&lt;uchar>, JsonValue*>&amp;</name>
            <content>
                <baseType ref="type.9504902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507063">
            <name>SelectFirst&lt;String&lt;uchar>, JsonValue*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504902"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504910">
            <name>SelectFirst&lt;String&lt;uchar>, JsonValue*>*</name>
            <content>
                <baseType ref="type.9504902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507077">
            <name>SelectFirst&lt;String&lt;uchar>, JsonValue*>*&amp;</name>
            <content>
                <baseType ref="type.9504902"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507076">
            <name>SelectFirst&lt;String&lt;uchar>, JsonValue*>**</name>
            <content>
                <baseType ref="type.9504902"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504993" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.9491655"/>
                <argumentType ref="9504169"/>
            </content>
        </type>
        <type derived="true" id="type.9505002">
            <name>SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;</name>
            <content>
                <baseType ref="type.9504993"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507132">
            <name>SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504993"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505001">
            <name>SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*</name>
            <content>
                <baseType ref="type.9504993"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507148">
            <name>SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*&amp;</name>
            <content>
                <baseType ref="type.9504993"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507147">
            <name>SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>**</name>
            <content>
                <baseType ref="type.9504993"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076" specialization="true">
            <name>SharedCount&lt;T></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="9504281"/>
            </content>
        </type>
        <type derived="true" id="type.9505524">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506524">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506410">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507013">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506467">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505090">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506194">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506479">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2696">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507025">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505102">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507025">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506206">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2686">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506422">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2724">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505536">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2718">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506536">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2702">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506193">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506523">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507012">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505523">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506466">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506409">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505089">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F" specialization="true">
            <name>SharedPtr&lt;T></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="9491229"/>
            </content>
        </type>
        <type derived="true" id="type.9506404">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506188">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505518">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507007">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506518">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505084">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506461">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507007">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2726">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506544">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2719">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2704">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506430">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506214">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506487">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505110">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505544">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507033">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506544">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505517">
            <name>SharedPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506187">
            <name>SharedPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506403">
            <name>SharedPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506460">
            <name>SharedPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506517">
            <name>SharedPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505083">
            <name>SharedPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507006">
            <name>SharedPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3077">
            <name>SizeOf&amp;&amp;</name>
            <content>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3092">
            <name>Statement&amp;&amp;</name>
            <content>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3014">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="9491257"/>
            </content>
        </type>
        <type derived="true" id="type.2738">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9491567" specialization="true">
            <name>String&lt;char></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9490437"/>
            </content>
        </type>
        <type derived="true" id="type.9491569">
            <name>String&lt;char>&amp;</name>
            <content>
                <baseType ref="type.9491567"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.9491655" specialization="true">
            <name>String&lt;uchar></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9490439"/>
            </content>
        </type>
        <type derived="true" id="type.9491657">
            <name>String&lt;uchar>&amp;</name>
            <content>
                <baseType ref="type.9491655"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9491656">
            <name>String&lt;uchar>*</name>
            <content>
                <baseType ref="type.9491655"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9491610" specialization="true">
            <name>String&lt;wchar></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9490438"/>
            </content>
        </type>
        <type derived="true" id="type.9491612">
            <name>String&lt;wchar>&amp;</name>
            <content>
                <baseType ref="type.9491610"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="class_StringRule_6A3C489F690184D3F17D7916567A6918B614FF1C">
            <name>StringRule</name>
        </type>
        <type derived="true" id="type.9504222">
            <name>StringRule&amp;</name>
            <content>
                <baseType ref="class_StringRule_6A3C489F690184D3F17D7916567A6918B614FF1C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504221">
            <name>StringRule*</name>
            <content>
                <baseType ref="class_StringRule_6A3C489F690184D3F17D7916567A6918B614FF1C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507235">
            <name>StringRule*&amp;</name>
            <content>
                <baseType ref="class_StringRule_6A3C489F690184D3F17D7916567A6918B614FF1C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507234">
            <name>StringRule**</name>
            <content>
                <baseType ref="class_StringRule_6A3C489F690184D3F17D7916567A6918B614FF1C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3110">
            <name>SwitchStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="9504316">
            <name>T</name>
        </type>
        <type derived="true" id="type.9505344">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504186"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506343">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504286"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2604">
            <name>T&amp;</name>
            <content>
                <baseType ref="9491074"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506016">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504268"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506202">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504281"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506094">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504272"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505445">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504245"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506911">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504305"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506376">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504287"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506475">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504289"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506833">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504301"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505077">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504176"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2602">
            <name>T&amp;</name>
            <content>
                <baseType ref="9491072"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506310">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504285"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2662">
            <name>T&amp;</name>
            <content>
                <baseType ref="9491181"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2664">
            <name>T&amp;</name>
            <content>
                <baseType ref="9491183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505422">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504190"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505472">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504246"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506292">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505490">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504247"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2542">
            <name>T&amp;</name>
            <content>
                <baseType ref="9490965"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2540">
            <name>T&amp;</name>
            <content>
                <baseType ref="9490963"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506418">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504288"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505134">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504178"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506181">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504280"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505532">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504248"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506265">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504283"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506532">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504290"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2590">
            <name>T&amp;</name>
            <content>
                <baseType ref="9491055"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507021">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504316"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506173">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504279"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506172">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504276"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506238">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504282"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507000">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504315"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507021">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504316"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506992">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504314"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506991">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504313"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506990">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504312"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506989">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504309"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505098">
            <name>T&amp;</name>
            <content>
                <baseType ref="9504177"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2612">
            <name>T&amp;</name>
            <content>
                <baseType ref="9491091"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506302">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="9504284"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505455">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="9504245"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2618">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="9491104"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2650">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="9491150"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2732">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="9491234"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506248">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="9504282"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505482">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="9504246"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506275">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="9504283"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505144">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="9504178"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506375">
            <name>T*</name>
            <content>
                <baseType ref="9504287"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506342">
            <name>T*</name>
            <content>
                <baseType ref="9504286"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505076">
            <name>T*</name>
            <content>
                <baseType ref="9504176"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506309">
            <name>T*</name>
            <content>
                <baseType ref="9504285"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507020">
            <name>T*</name>
            <content>
                <baseType ref="9504316"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506293">
            <name>T*</name>
            <content>
                <baseType ref="9504284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506417">
            <name>T*</name>
            <content>
                <baseType ref="9504288"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506266">
            <name>T*</name>
            <content>
                <baseType ref="9504283"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506531">
            <name>T*</name>
            <content>
                <baseType ref="9504290"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506999">
            <name>T*</name>
            <content>
                <baseType ref="9504315"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506201">
            <name>T*</name>
            <content>
                <baseType ref="9504281"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505531">
            <name>T*</name>
            <content>
                <baseType ref="9504248"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505489">
            <name>T*</name>
            <content>
                <baseType ref="9504247"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505097">
            <name>T*</name>
            <content>
                <baseType ref="9504177"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505473">
            <name>T*</name>
            <content>
                <baseType ref="9504246"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506239">
            <name>T*</name>
            <content>
                <baseType ref="9504282"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506474">
            <name>T*</name>
            <content>
                <baseType ref="9504289"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505446">
            <name>T*</name>
            <content>
                <baseType ref="9504245"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506999">
            <name>T*</name>
            <content>
                <baseType ref="9504315"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505135">
            <name>T*</name>
            <content>
                <baseType ref="9504178"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506180">
            <name>T*</name>
            <content>
                <baseType ref="9504280"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3088">
            <name>TemplateId&amp;&amp;</name>
            <content>
                <baseType ref="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3116">
            <name>ThrowStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3144">
            <name>TokenParser&amp;&amp;</name>
            <content>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3119">
            <name>TryStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3040">
            <name>Type&amp;&amp;</name>
            <content>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3080">
            <name>TypeName&amp;&amp;</name>
            <content>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D" specialization="true">
            <name>UnaryFun&lt;Pair&lt;K, T>, K></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="9504308"/>
            </content>
        </type>
        <type derived="true" id="type.9506773">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506112">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505956">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506851">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505362">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506929">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506851">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505284">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506034">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506928">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506850">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505361">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506772">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506111">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506850">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505955">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506033">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505283">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF" specialization="true">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="9504264"/>
            </content>
        </type>
        <type derived="true" id="type.9505651">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505895">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506590">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505773">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506651">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505223">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505590">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506712">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505162">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506712">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505834">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505712">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505711">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505894">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505772">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505589">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505222">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505650">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506589">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505833">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506650">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505161">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506711">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504906" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, JsonValue*>, String&lt;uchar>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.9504898"/>
                <argumentType ref="type.9491655"/>
            </content>
        </type>
        <type derived="true" id="type.9504908">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, JsonValue*>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.9504906"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507064">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, JsonValue*>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504906"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504907">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, JsonValue*>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.9504906"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504997" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, String&lt;uchar>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.9504989"/>
                <argumentType ref="type.9491655"/>
            </content>
        </type>
        <type derived="true" id="type.9504999">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.9504997"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507133">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504997"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504998">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.9504997"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3062">
            <name>UnaryMinus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3059">
            <name>UnaryPlus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9493032" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9493009"/>
            </content>
        </type>
        <type id="type.9505626" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9505608"/>
            </content>
        </type>
        <type id="type.9505809" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9505791"/>
            </content>
        </type>
        <type id="type.9505748" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9505730"/>
            </content>
        </type>
        <type id="type.9505931" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9505913"/>
            </content>
        </type>
        <type id="type.9506748" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9506730"/>
            </content>
        </type>
        <type id="type.9505259" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9505241"/>
            </content>
        </type>
        <type id="type.9505870" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9505852"/>
            </content>
        </type>
        <type id="type.9506687" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9506669"/>
            </content>
        </type>
        <type id="type.9506626" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9506608"/>
            </content>
        </type>
        <type id="type.9505687" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9505669"/>
            </content>
        </type>
        <type id="type.9505198" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9505180"/>
            </content>
        </type>
        <type id="type.9506626" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9506608"/>
            </content>
        </type>
        <type derived="true" id="type.9506750">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.9506748"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505933">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.9505931"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505750">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.9505748"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505261">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.9505259"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505872">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.9505870"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506750">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.9506748"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505811">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.9505809"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506689">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.9506687"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506628">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.9506626"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505689">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.9505687"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505628">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.9505626"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505200">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.9505198"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506632">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506626"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505204">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505198"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506754">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506748"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505876">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505870"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505937">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505931"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505815">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505809"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505265">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505259"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505632">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505626"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505754">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505748"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505693">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505687"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2628">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9493032"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506754">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506748"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506693">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9506687"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505260">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.9505259"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505199">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.9505198"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506688">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.9506687"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506749">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.9506748"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505871">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.9505870"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505627">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.9505626"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506627">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.9506626"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505688">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.9505687"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505932">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.9505931"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505749">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.9505748"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505810">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.9505809"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506688">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.9506687"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504944" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9504926"/>
            </content>
        </type>
        <type derived="true" id="type.9504946">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>>&amp;</name>
            <content>
                <baseType ref="type.9504944"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504950">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504944"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504945">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>>*</name>
            <content>
                <baseType ref="type.9504944"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9493347" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.2675">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9493347"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9493289" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
            </content>
        </type>
        <type derived="true" id="type.2671">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9493289"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9496543" specialization="true">
            <name>UniquePtr&lt;System.Exception></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
            </content>
        </type>
        <type derived="true" id="type.2834">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.9496543"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9505059" specialization="true">
            <name>UniquePtr&lt;System.Json.JsonClassFactory></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_JsonClassFactory_07F3FE1559307E1B17EEBEAFBAA8C9DBAA71924E"/>
            </content>
        </type>
        <type derived="true" id="type.9505061">
            <name>UniquePtr&lt;System.Json.JsonClassFactory>&amp;</name>
            <content>
                <baseType ref="type.9505059"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505065">
            <name>UniquePtr&lt;System.Json.JsonClassFactory>&amp;&amp;</name>
            <content>
                <baseType ref="type.9505059"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505060">
            <name>UniquePtr&lt;System.Json.JsonClassFactory>*</name>
            <content>
                <baseType ref="type.9505059"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504973" specialization="true">
            <name>UniquePtr&lt;System.Json.JsonParser></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
            </content>
        </type>
        <type derived="true" id="type.9504975">
            <name>UniquePtr&lt;System.Json.JsonParser>&amp;</name>
            <content>
                <baseType ref="type.9504973"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504979">
            <name>UniquePtr&lt;System.Json.JsonParser>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504973"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504974">
            <name>UniquePtr&lt;System.Json.JsonParser>*</name>
            <content>
                <baseType ref="type.9504973"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9504879" specialization="true">
            <name>UniquePtr&lt;System.Json.JsonValue></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
            </content>
        </type>
        <type derived="true" id="type.9504881">
            <name>UniquePtr&lt;System.Json.JsonValue>&amp;</name>
            <content>
                <baseType ref="type.9504879"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504885">
            <name>UniquePtr&lt;System.Json.JsonValue>&amp;&amp;</name>
            <content>
                <baseType ref="type.9504879"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504880">
            <name>UniquePtr&lt;System.Json.JsonValue>*</name>
            <content>
                <baseType ref="type.9504879"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507055">
            <name>UniquePtr&lt;System.Json.JsonValue>*&amp;</name>
            <content>
                <baseType ref="type.9504879"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507056">
            <name>UniquePtr&lt;System.Json.JsonValue>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9504879"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507054">
            <name>UniquePtr&lt;System.Json.JsonValue>**</name>
            <content>
                <baseType ref="type.9504879"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9500517" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ExpectationFailure_EBDBB0FC1DDED5BE7E15008622BB34AFCA7E9A8C"/>
            </content>
        </type>
        <type derived="true" id="type.2897">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500517"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9499721" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
            </content>
        </type>
        <type derived="true" id="type.2856">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499721"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500643" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingException_71361E1F1BFEB5E7F55F5F6E472A696283973396"/>
            </content>
        </type>
        <type derived="true" id="type.2898">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500643"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9499728" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XmlLog_8F1C6843100321A56502C0710D6A400B6E4C7704"/>
            </content>
        </type>
        <type derived="true" id="type.2857">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog>&amp;&amp;</name>
            <content>
                <baseType ref="type.9499728"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="9504315"/>
            </content>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="9504315"/>
            </content>
        </type>
        <type derived="true" id="type.9506176">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506338">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505072">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505485">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506995">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506305">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506371">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506995">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505491">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505078">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507001">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506311">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506344">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506377">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506344">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506182">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2833">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505071">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506994">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505484">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506994">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506337">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506370">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506304">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506175">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="9504298">
            <name>Value</name>
        </type>
        <type derived="true" id="type.2629">
            <name>Value&amp;</name>
            <content>
                <baseType ref="9491112"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505877">
            <name>Value&amp;</name>
            <content>
                <baseType ref="9504262"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506694">
            <name>Value&amp;</name>
            <content>
                <baseType ref="9504295"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506633">
            <name>Value&amp;</name>
            <content>
                <baseType ref="9504292"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506755">
            <name>Value&amp;</name>
            <content>
                <baseType ref="9504298"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505816">
            <name>Value&amp;</name>
            <content>
                <baseType ref="9504259"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505205">
            <name>Value&amp;</name>
            <content>
                <baseType ref="9504180"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505633">
            <name>Value&amp;</name>
            <content>
                <baseType ref="9504250"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505266">
            <name>Value&amp;</name>
            <content>
                <baseType ref="9504183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506755">
            <name>Value&amp;</name>
            <content>
                <baseType ref="9504298"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505694">
            <name>Value&amp;</name>
            <content>
                <baseType ref="9504253"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505755">
            <name>Value&amp;</name>
            <content>
                <baseType ref="9504256"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505938">
            <name>Value&amp;</name>
            <content>
                <baseType ref="9504265"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.9507207" specialization="true">
            <name>ValueObject&lt;JsonArray*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9504158"/>
            </content>
        </type>
        <type derived="true" id="type.9507209">
            <name>ValueObject&lt;JsonArray*>&amp;</name>
            <content>
                <baseType ref="type.9507207"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3011">
            <name>ValueObject&lt;JsonArray*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9507207"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507208">
            <name>ValueObject&lt;JsonArray*>*</name>
            <content>
                <baseType ref="type.9507207"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9507188" specialization="true">
            <name>ValueObject&lt;JsonNumber*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9504134"/>
            </content>
        </type>
        <type derived="true" id="type.9507190">
            <name>ValueObject&lt;JsonNumber*>&amp;</name>
            <content>
                <baseType ref="type.9507188"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3008">
            <name>ValueObject&lt;JsonNumber*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9507188"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507189">
            <name>ValueObject&lt;JsonNumber*>*</name>
            <content>
                <baseType ref="type.9507188"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9507197" specialization="true">
            <name>ValueObject&lt;JsonObject*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9504152"/>
            </content>
        </type>
        <type derived="true" id="type.9507199">
            <name>ValueObject&lt;JsonObject*>&amp;</name>
            <content>
                <baseType ref="type.9507197"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3009">
            <name>ValueObject&lt;JsonObject*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9507197"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507198">
            <name>ValueObject&lt;JsonObject*>*</name>
            <content>
                <baseType ref="type.9507197"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9507179" specialization="true">
            <name>ValueObject&lt;JsonString*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9504146"/>
            </content>
        </type>
        <type derived="true" id="type.9507181">
            <name>ValueObject&lt;JsonString*>&amp;</name>
            <content>
                <baseType ref="type.9507179"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3006">
            <name>ValueObject&lt;JsonString*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9507179"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507180">
            <name>ValueObject&lt;JsonString*>*</name>
            <content>
                <baseType ref="type.9507179"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9507167" specialization="true">
            <name>ValueObject&lt;JsonValue*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9504124"/>
            </content>
        </type>
        <type derived="true" id="type.9507169">
            <name>ValueObject&lt;JsonValue*>&amp;</name>
            <content>
                <baseType ref="type.9507167"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3004">
            <name>ValueObject&lt;JsonValue*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9507167"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507168">
            <name>ValueObject&lt;JsonValue*>*</name>
            <content>
                <baseType ref="type.9507167"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9501018" specialization="true">
            <name>ValueObject&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9491655"/>
            </content>
        </type>
        <type derived="true" id="type.2915">
            <name>ValueObject&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9501018"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79" specialization="true">
            <name>ValueObject&lt;ValueType></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="9498647"/>
            </content>
        </type>
        <type id="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79" specialization="true">
            <name>ValueObject&lt;ValueType></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="9498647"/>
            </content>
        </type>
        <type derived="true" id="type.2879">
            <name>ValueObject&lt;ValueType>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9501006" specialization="true">
            <name>ValueObject&lt;bool></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9490426"/>
            </content>
        </type>
        <type derived="true" id="type.2914">
            <name>ValueObject&lt;bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.9501006"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500843" specialization="true">
            <name>ValueObject&lt;byte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9490428"/>
            </content>
        </type>
        <type derived="true" id="type.2901">
            <name>ValueObject&lt;byte>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500843"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500982" specialization="true">
            <name>ValueObject&lt;double></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9490436"/>
            </content>
        </type>
        <type derived="true" id="type.2913">
            <name>ValueObject&lt;double>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500982"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500968" specialization="true">
            <name>ValueObject&lt;float></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9490435"/>
            </content>
        </type>
        <type derived="true" id="type.2911">
            <name>ValueObject&lt;float>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500968"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500884" specialization="true">
            <name>ValueObject&lt;int></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9490431"/>
            </content>
        </type>
        <type derived="true" id="type.2906">
            <name>ValueObject&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500884"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500909" specialization="true">
            <name>ValueObject&lt;long></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9490433"/>
            </content>
        </type>
        <type derived="true" id="type.2908">
            <name>ValueObject&lt;long>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500909"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500826" specialization="true">
            <name>ValueObject&lt;sbyte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9490427"/>
            </content>
        </type>
        <type derived="true" id="type.2900">
            <name>ValueObject&lt;sbyte>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500826"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500856" specialization="true">
            <name>ValueObject&lt;short></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9490429"/>
            </content>
        </type>
        <type derived="true" id="type.2903">
            <name>ValueObject&lt;short>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500856"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9501035" specialization="true">
            <name>ValueObject&lt;uchar></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9490439"/>
            </content>
        </type>
        <type derived="true" id="type.2916">
            <name>ValueObject&lt;uchar>&amp;&amp;</name>
            <content>
                <baseType ref="type.9501035"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500896" specialization="true">
            <name>ValueObject&lt;uint></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9490432"/>
            </content>
        </type>
        <type derived="true" id="type.2907">
            <name>ValueObject&lt;uint>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500896"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500921" specialization="true">
            <name>ValueObject&lt;ulong></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9490434"/>
            </content>
        </type>
        <type derived="true" id="type.2909">
            <name>ValueObject&lt;ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500921"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9500870" specialization="true">
            <name>ValueObject&lt;ushort></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9490430"/>
            </content>
        </type>
        <type derived="true" id="type.2905">
            <name>ValueObject&lt;ushort>&amp;&amp;</name>
            <content>
                <baseType ref="type.9500870"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_ValueRule_B33645C537AF028FF2E642F30FE36D99549C75E4">
            <name>ValueRule</name>
        </type>
        <type derived="true" id="type.9504198">
            <name>ValueRule&amp;</name>
            <content>
                <baseType ref="class_ValueRule_B33645C537AF028FF2E642F30FE36D99549C75E4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504197">
            <name>ValueRule*</name>
            <content>
                <baseType ref="class_ValueRule_B33645C537AF028FF2E642F30FE36D99549C75E4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507178">
            <name>ValueRule*&amp;</name>
            <content>
                <baseType ref="class_ValueRule_B33645C537AF028FF2E642F30FE36D99549C75E4"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507177">
            <name>ValueRule**</name>
            <content>
                <baseType ref="class_ValueRule_B33645C537AF028FF2E642F30FE36D99549C75E4"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F" specialization="true">
            <name>WeakCount&lt;T></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="9504177"/>
            </content>
        </type>
        <type derived="true" id="type.9507028">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506425">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506539">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507028">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505539">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505105">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506209">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506482">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2687">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507032">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2725">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2703">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505543">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2695">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506213">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505109">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506486">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506429">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2717">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506543">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507032">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506424">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506481">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507027">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506208">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505538">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506538">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507027">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505104">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9491557" specialization="true">
            <name>WeakPtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.2500">
            <name>WeakPtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.9491557"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC" specialization="true">
            <name>WeakPtr&lt;T></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="9504290"/>
            </content>
        </type>
        <type derived="true" id="type.9505547">
            <name>WeakPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506433">
            <name>WeakPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507036">
            <name>WeakPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506490">
            <name>WeakPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507036">
            <name>WeakPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506217">
            <name>WeakPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506547">
            <name>WeakPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505113">
            <name>WeakPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2965">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2943">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2925">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2705">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2709">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2711">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2720">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2727">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2730">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2707">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3003">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2987">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2983">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2979">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505112">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505546">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507035">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506546">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506489">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507035">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506432">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506216">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021" specialization="true">
            <name>WeakPtr&lt;U></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="9491224"/>
            </content>
        </type>
        <type derived="true" id="type.2713">
            <name>WeakPtr&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9490426">
            <name>bool</name>
        </type>
        <type derived="true" id="type.9490443">
            <name>bool&amp;</name>
            <content>
                <baseType ref="type.9490426"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9490428">
            <name>byte</name>
        </type>
        <type derived="true" id="type.9490449">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.9490428"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9490448">
            <name>byte*</name>
            <content>
                <baseType ref="type.9490428"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9490437">
            <name>char</name>
        </type>
        <type derived="true" id="type.9490476">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.9490437"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9490475">
            <name>char*</name>
            <content>
                <baseType ref="type.9490437"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3048">
            <name>const AddressOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
            </content>
        </type>
        <type derived="true" id="type.3049">
            <name>const AddressOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3120">
            <name>const AssertStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
            </content>
        </type>
        <type derived="true" id="type.3121">
            <name>const AssertStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3015">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
            </content>
        </type>
        <type derived="true" id="type.3016">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3017">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
            </content>
        </type>
        <type derived="true" id="type.3018">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506948">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506945"/>
            </content>
        </type>
        <type derived="true" id="type.9506131">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506128"/>
            </content>
        </type>
        <type derived="true" id="type.9506948">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506945"/>
            </content>
        </type>
        <type derived="true" id="type.9505975">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505972"/>
            </content>
        </type>
        <type derived="true" id="type.9506053">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506050"/>
            </content>
        </type>
        <type derived="true" id="type.9505303">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505300"/>
            </content>
        </type>
        <type derived="true" id="type.9506792">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506789"/>
            </content>
        </type>
        <type derived="true" id="type.9506870">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506867"/>
            </content>
        </type>
        <type derived="true" id="type.9505381">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505378"/>
            </content>
        </type>
        <type derived="true" id="type.9506872">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506867"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506950">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506945"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505383">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505378"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505305">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505300"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506794">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505977">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505972"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506133">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506055">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506050"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506950">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506945"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506054">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506050"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506793">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506949">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506945"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505304">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505300"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506949">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506945"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506871">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506867"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506132">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505976">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505972"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505382">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505378"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506813">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506789"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505996">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505972"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506152">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506128"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505324">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505300"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506969">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506945"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505402">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505378"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506891">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506867"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506074">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506050"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505325">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505300"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505997">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505972"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506970">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506945"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506153">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506128"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506814">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506789"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505403">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505378"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506892">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506867"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506075">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506050"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505018">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505015"/>
            </content>
        </type>
        <type derived="true" id="type.9505020">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505015"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505019">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505015"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505039">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505015"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505040">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505015"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3019">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
            </content>
        </type>
        <type derived="true" id="type.3020">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.3127">
            <name>const CodeExpandingVisitor</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
            </content>
        </type>
        <type derived="true" id="type.3128">
            <name>const CodeExpandingVisitor&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3063">
            <name>const Complement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
            </content>
        </type>
        <type derived="true" id="type.3064">
            <name>const Complement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3029">
            <name>const ConditionVariable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
            </content>
        </type>
        <type derived="true" id="type.3081">
            <name>const Construct</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
            </content>
        </type>
        <type derived="true" id="type.3082">
            <name>const Construct&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3034">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
            </content>
        </type>
        <type derived="true" id="type.3035">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2499">
            <name>const Counter&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9491541"/>
            </content>
        </type>
        <type derived="true" id="type.3002">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2683">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2688">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2680">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2982">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2978">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2689">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2690">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2986">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2692">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2697">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2964">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2698">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2699">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2714">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2729">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2728">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2942">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2706">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2708">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2924">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2710">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2721">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2700">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505534">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506534">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2693">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2684">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2681">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507023">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2722">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505100">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2715">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506477">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506204">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507023">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506420">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2691">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.2731">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.2712">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.3099">
            <name>const DeleteStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
            </content>
        </type>
        <type derived="true" id="type.3100">
            <name>const DeleteStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3045">
            <name>const Deref</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
            </content>
        </type>
        <type derived="true" id="type.3046">
            <name>const Deref&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3102">
            <name>const DestroyStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
            </content>
        </type>
        <type derived="true" id="type.3103">
            <name>const DestroyStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3139">
            <name>const ExpectationParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
            </content>
        </type>
        <type derived="true" id="type.3140">
            <name>const ExpectationParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3105">
            <name>const ExpressionStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
            </content>
        </type>
        <type derived="true" id="type.3106">
            <name>const ExpressionStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3021">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
            </content>
        </type>
        <type derived="true" id="type.3022">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3111">
            <name>const GotoCaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
            </content>
        </type>
        <type derived="true" id="type.3112">
            <name>const GotoCaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3096">
            <name>const GotoStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
            </content>
        </type>
        <type derived="true" id="type.3097">
            <name>const GotoStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505348">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.9506837">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.9506098">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.9506915">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.9505270">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.9506915">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.9505942">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.9506020">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.9506759">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.9506100">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505272">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506761">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506917">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506839">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506022">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505944">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506917">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505350">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505271">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506916">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505943">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506838">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506760">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506021">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506916">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506099">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505349">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504986">
            <name>const HashMap&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504983"/>
            </content>
        </type>
        <type derived="true" id="type.9504988">
            <name>const HashMap&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504983"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504987">
            <name>const HashMap&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504983"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506936">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.9506780">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.9506858">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.9505963">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.9506041">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.9506858">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.9505369">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.9506119">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.9505291">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.9505371">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505293">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506782">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506860">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506782">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505965">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506938">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506043">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506121">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505292">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506781">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505964">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506859">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506042">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506937">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506120">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505370">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505006">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505003"/>
            </content>
        </type>
        <type derived="true" id="type.9505008">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505003"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505007">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505003"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506942">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506939"/>
            </content>
        </type>
        <type derived="true" id="type.9506786">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506783"/>
            </content>
        </type>
        <type derived="true" id="type.9506125">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506122"/>
            </content>
        </type>
        <type derived="true" id="type.9506047">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506044"/>
            </content>
        </type>
        <type derived="true" id="type.9505969">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505966"/>
            </content>
        </type>
        <type derived="true" id="type.9506864">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506861"/>
            </content>
        </type>
        <type derived="true" id="type.9506942">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506939"/>
            </content>
        </type>
        <type derived="true" id="type.9505297">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505294"/>
            </content>
        </type>
        <type derived="true" id="type.9505375">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505372"/>
            </content>
        </type>
        <type derived="true" id="type.9506944">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506127">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506122"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505299">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505294"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506788">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506783"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506049">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506044"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506944">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505971">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505377">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505372"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506866">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506861"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506943">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506939"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505298">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505294"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506787">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506783"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506126">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506122"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506048">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506044"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506943">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506939"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505970">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506865">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506861"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505376">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505372"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506878">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506875"/>
            </content>
        </type>
        <type derived="true" id="type.9506800">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506797"/>
            </content>
        </type>
        <type derived="true" id="type.9505389">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505386"/>
            </content>
        </type>
        <type derived="true" id="type.9506061">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506058"/>
            </content>
        </type>
        <type derived="true" id="type.9506139">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506136"/>
            </content>
        </type>
        <type derived="true" id="type.9506956">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506953"/>
            </content>
        </type>
        <type derived="true" id="type.9505983">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505980"/>
            </content>
        </type>
        <type derived="true" id="type.9505311">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505308"/>
            </content>
        </type>
        <type derived="true" id="type.9505985">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506802">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506797"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506880">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506875"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506141">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506136"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506958">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506953"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506880">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506875"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506063">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506058"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505391">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505386"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505313">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505308"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506062">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506058"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506879">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506875"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505984">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506957">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506953"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506140">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506136"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506957">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506953"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505390">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505386"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506801">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506797"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505312">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505308"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505012">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505009"/>
            </content>
        </type>
        <type derived="true" id="type.9505014">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505013">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505026">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505023"/>
            </content>
        </type>
        <type derived="true" id="type.9505028">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505023"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505027">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;, const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505023"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504683">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504680"/>
            </content>
        </type>
        <type derived="true" id="type.2864">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2861"/>
            </content>
        </type>
        <type derived="true" id="type.9504685">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504680"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2866">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2861"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504684">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504680"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2865">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2861"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2870">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2867"/>
            </content>
        </type>
        <type derived="true" id="type.9504689">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504686"/>
            </content>
        </type>
        <type derived="true" id="type.2872">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2867"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504691">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504686"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2871">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2867"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504690">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504686"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3023">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
            </content>
        </type>
        <type derived="true" id="type.3024">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3066">
            <name>const Invoke</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
            </content>
        </type>
        <type derived="true" id="type.3067">
            <name>const Invoke&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504160">
            <name>const JsonArray</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
            </content>
        </type>
        <type derived="true" id="type.9504162">
            <name>const JsonArray&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504161">
            <name>const JsonArray*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3010">
            <name>const JsonArray*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504142">
            <name>const JsonBool</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
            </content>
        </type>
        <type derived="true" id="type.9504144">
            <name>const JsonBool&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504143">
            <name>const JsonBool*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504992">
            <name>const JsonClassCreatorDelegate&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504169"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505067">
            <name>const JsonClassFactory</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonClassFactory_07F3FE1559307E1B17EEBEAFBAA8C9DBAA71924E"/>
            </content>
        </type>
        <type derived="true" id="type.9505068">
            <name>const JsonClassFactory&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonClassFactory_07F3FE1559307E1B17EEBEAFBAA8C9DBAA71924E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505066">
            <name>const JsonClassFactory*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonClassFactory_07F3FE1559307E1B17EEBEAFBAA8C9DBAA71924E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3152">
            <name>const JsonGrammar</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318"/>
            </content>
        </type>
        <type derived="true" id="type.3153">
            <name>const JsonGrammar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3155">
            <name>const JsonImportException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonImportException_B2C659772CC55BEE3DF2ECEA8C50121E3DA06723"/>
            </content>
        </type>
        <type derived="true" id="type.3156">
            <name>const JsonImportException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonImportException_B2C659772CC55BEE3DF2ECEA8C50121E3DA06723"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504130">
            <name>const JsonNull</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonNull_E0746AE6880508740D5FFC8AF4E0FB0A7AE20ED2"/>
            </content>
        </type>
        <type derived="true" id="type.9504132">
            <name>const JsonNull&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonNull_E0746AE6880508740D5FFC8AF4E0FB0A7AE20ED2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504131">
            <name>const JsonNull*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonNull_E0746AE6880508740D5FFC8AF4E0FB0A7AE20ED2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504136">
            <name>const JsonNumber</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
            </content>
        </type>
        <type derived="true" id="type.9504138">
            <name>const JsonNumber&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504137">
            <name>const JsonNumber*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3007">
            <name>const JsonNumber*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504154">
            <name>const JsonObject</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
            </content>
        </type>
        <type derived="true" id="type.9504156">
            <name>const JsonObject&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504155">
            <name>const JsonObject*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507108">
            <name>const JsonObject*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507107">
            <name>const JsonObject**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504166">
            <name>const JsonParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
            </content>
        </type>
        <type derived="true" id="type.9504168">
            <name>const JsonParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504167">
            <name>const JsonParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504148">
            <name>const JsonString</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
            </content>
        </type>
        <type derived="true" id="type.9504150">
            <name>const JsonString&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504149">
            <name>const JsonString*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3005">
            <name>const JsonString*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504126">
            <name>const JsonValue</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
            </content>
        </type>
        <type derived="true" id="type.9504128">
            <name>const JsonValue&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504127">
            <name>const JsonValue*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504901">
            <name>const JsonValue*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507122">
            <name>const JsonValue**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505948">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504267"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505354">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504189"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506921">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504308"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2583">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491054"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506843">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504304"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506765">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504300"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506921">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504308"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506104">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504275"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506026">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504271"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505276">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504185"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505704">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504255"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505826">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504261"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505215">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504182"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505643">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504252"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2623">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491111"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505154">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504179"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506704">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504297"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505765">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504258"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506704">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504297"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505887">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504264"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505582">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504249"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506643">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504294"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506582">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504291"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2670">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491190"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2606">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491083"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3136">
            <name>const KleeneStarParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
            </content>
        </type>
        <type derived="true" id="type.3137">
            <name>const KleeneStarParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504887">
            <name>const Less&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504886"/>
            </content>
        </type>
        <type derived="true" id="type.9504889">
            <name>const Less&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504886"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504888">
            <name>const Less&lt;String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504886"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506810">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506807"/>
            </content>
        </type>
        <type derived="true" id="type.9505993">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505990"/>
            </content>
        </type>
        <type derived="true" id="type.9506149">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506146"/>
            </content>
        </type>
        <type derived="true" id="type.9506966">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506963"/>
            </content>
        </type>
        <type derived="true" id="type.9505399">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505396"/>
            </content>
        </type>
        <type derived="true" id="type.9506888">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506885"/>
            </content>
        </type>
        <type derived="true" id="type.9505321">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505318"/>
            </content>
        </type>
        <type derived="true" id="type.9506071">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506068"/>
            </content>
        </type>
        <type derived="true" id="type.9505995">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505990"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506890">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506885"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506968">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506963"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506151">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506146"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506073">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506068"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505401">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505396"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506812">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506807"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505323">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505400">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505396"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505994">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505990"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506072">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506068"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506150">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506146"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506967">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506963"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506889">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506885"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506967">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506963"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506811">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506807"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505322">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505318"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505036">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505033"/>
            </content>
        </type>
        <type derived="true" id="type.9505038">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505033"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505037">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505033"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505555">
            <name>const List&lt;SharedPtr&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505552"/>
            </content>
        </type>
        <type derived="true" id="type.9506555">
            <name>const List&lt;SharedPtr&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506552"/>
            </content>
        </type>
        <type derived="true" id="type.9506498">
            <name>const List&lt;SharedPtr&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506495"/>
            </content>
        </type>
        <type derived="true" id="type.9506555">
            <name>const List&lt;SharedPtr&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506552"/>
            </content>
        </type>
        <type derived="true" id="type.9506441">
            <name>const List&lt;SharedPtr&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506438"/>
            </content>
        </type>
        <type derived="true" id="type.9506443">
            <name>const List&lt;SharedPtr&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506438"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506500">
            <name>const List&lt;SharedPtr&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506495"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506557">
            <name>const List&lt;SharedPtr&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506552"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505557">
            <name>const List&lt;SharedPtr&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505552"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506557">
            <name>const List&lt;SharedPtr&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506552"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506556">
            <name>const List&lt;SharedPtr&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506552"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506442">
            <name>const List&lt;SharedPtr&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506438"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506499">
            <name>const List&lt;SharedPtr&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506495"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505556">
            <name>const List&lt;SharedPtr&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505552"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505432">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.9506279">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.9505459">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.9506252">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.9506225">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.9505121">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.9506252">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.9506227">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505461">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505123">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506281">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506254">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505434">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506254">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506280">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505433">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506253">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506226">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505122">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505460">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506280">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504955">
            <name>const List&lt;UniquePtr&lt;System.Json.JsonValue>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504952"/>
            </content>
        </type>
        <type derived="true" id="type.9504957">
            <name>const List&lt;UniquePtr&lt;System.Json.JsonValue>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504952"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504956">
            <name>const List&lt;UniquePtr&lt;System.Json.JsonValue>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504952"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506384">
            <name>const List&lt;UniquePtr&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506381"/>
            </content>
        </type>
        <type derived="true" id="type.9506318">
            <name>const List&lt;UniquePtr&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506315"/>
            </content>
        </type>
        <type derived="true" id="type.9505498">
            <name>const List&lt;UniquePtr&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505495"/>
            </content>
        </type>
        <type derived="true" id="type.9506351">
            <name>const List&lt;UniquePtr&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506348"/>
            </content>
        </type>
        <type derived="true" id="type.9506386">
            <name>const List&lt;UniquePtr&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506381"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506353">
            <name>const List&lt;UniquePtr&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506348"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506320">
            <name>const List&lt;UniquePtr&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506315"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505500">
            <name>const List&lt;UniquePtr&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505495"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506320">
            <name>const List&lt;UniquePtr&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506315"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506352">
            <name>const List&lt;UniquePtr&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506348"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506385">
            <name>const List&lt;UniquePtr&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506381"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506319">
            <name>const List&lt;UniquePtr&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506315"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505499">
            <name>const List&lt;UniquePtr&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505495"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506352">
            <name>const List&lt;UniquePtr&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506348"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3089">
            <name>const Literal</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
            </content>
        </type>
        <type derived="true" id="type.3090">
            <name>const Literal&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2639">
            <name>const LockGuard&lt;Mtx></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
            </content>
        </type>
        <type derived="true" id="type.2640">
            <name>const LockGuard&lt;Mtx>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2826">
            <name>const LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9496398"/>
            </content>
        </type>
        <type derived="true" id="type.2827">
            <name>const LockGuard&lt;System.Threading.Mutex>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9496398"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506698">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.9505820">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.9506576">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.9506637">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.9506698">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.9505881">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.9505637">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.9505698">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.9505209">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.9505576">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.9505759">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.9505148">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.9505883">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505639">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505211">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505700">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505761">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506639">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505578">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506578">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505822">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505150">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506700">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505699">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505210">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506699">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505638">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505760">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506638">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505577">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505149">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506699">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506577">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505821">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505882">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504895">
            <name>const Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504892"/>
            </content>
        </type>
        <type derived="true" id="type.9504897">
            <name>const Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504896">
            <name>const Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3030">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.3084">
            <name>const New</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
            </content>
        </type>
        <type derived="true" id="type.3085">
            <name>const New&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3042">
            <name>const Not</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
            </content>
        </type>
        <type derived="true" id="type.3043">
            <name>const Not&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3130">
            <name>const OptionalParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
            </content>
        </type>
        <type derived="true" id="type.3131">
            <name>const OptionalParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3025">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
            </content>
        </type>
        <type derived="true" id="type.9505307">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.9505385">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.9506952">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.9506874">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.9506796">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.9505979">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.9506952">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.9506057">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.9506135">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.9506852">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505285">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505957">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506035">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505363">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506113">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506930">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506774">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506930">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506134">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506873">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505384">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505978">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506951">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506873">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506056">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506795">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505306">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506662">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.9505662">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.9505845">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.9505601">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.9506662">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.9505723">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.9506601">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.9506723">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.9505784">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.9505234">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.9505173">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.9505906">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.9505163">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505835">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505591">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506591">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505713">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506591">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505224">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505652">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506713">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505774">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505896">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506652">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505172">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506722">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505783">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506722">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506600">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505661">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506661">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505844">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505722">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505905">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505600">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505233">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504919">
            <name>const Pair&lt;String&lt;uchar>, JsonValue*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504898"/>
            </content>
        </type>
        <type derived="true" id="type.9504909">
            <name>const Pair&lt;String&lt;uchar>, JsonValue*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504918">
            <name>const Pair&lt;String&lt;uchar>, JsonValue*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504898"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505022">
            <name>const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504989"/>
            </content>
        </type>
        <type derived="true" id="type.9505000">
            <name>const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504989"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505021">
            <name>const Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504989"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2646">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2649">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3133">
            <name>const PositiveParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
            </content>
        </type>
        <type derived="true" id="type.3134">
            <name>const PositiveParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3072">
            <name>const PostfixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
            </content>
        </type>
        <type derived="true" id="type.3073">
            <name>const PostfixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3069">
            <name>const PostfixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
            </content>
        </type>
        <type derived="true" id="type.3070">
            <name>const PostfixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3054">
            <name>const PrefixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
            </content>
        </type>
        <type derived="true" id="type.3055">
            <name>const PrefixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3051">
            <name>const PrefixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
            </content>
        </type>
        <type derived="true" id="type.3052">
            <name>const PrefixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506166">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506163"/>
            </content>
        </type>
        <type derived="true" id="type.9506088">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506085"/>
            </content>
        </type>
        <type derived="true" id="type.9506827">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506824"/>
            </content>
        </type>
        <type derived="true" id="type.9506983">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506980"/>
            </content>
        </type>
        <type derived="true" id="type.9505338">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505335"/>
            </content>
        </type>
        <type derived="true" id="type.9506010">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506007"/>
            </content>
        </type>
        <type derived="true" id="type.9506983">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506980"/>
            </content>
        </type>
        <type derived="true" id="type.9506905">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506902"/>
            </content>
        </type>
        <type derived="true" id="type.9505416">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505413"/>
            </content>
        </type>
        <type derived="true" id="type.9506829">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506824"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506012">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506007"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505340">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505335"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506985">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506168">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506163"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506907">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506090">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506085"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505418">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505413"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506906">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506089">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506085"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505417">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505413"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506984">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506167">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506163"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506984">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505339">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505335"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506828">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506824"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506011">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506007"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505329">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505326"/>
            </content>
        </type>
        <type derived="true" id="type.9506896">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506893"/>
            </content>
        </type>
        <type derived="true" id="type.9506974">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506971"/>
            </content>
        </type>
        <type derived="true" id="type.9506818">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506815"/>
            </content>
        </type>
        <type derived="true" id="type.9506001">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505998"/>
            </content>
        </type>
        <type derived="true" id="type.9506974">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506971"/>
            </content>
        </type>
        <type derived="true" id="type.9505407">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505404"/>
            </content>
        </type>
        <type derived="true" id="type.9506157">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506154"/>
            </content>
        </type>
        <type derived="true" id="type.9506079">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506076"/>
            </content>
        </type>
        <type derived="true" id="type.9506081">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505409">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505404"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506898">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506893"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506820">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506815"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506976">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506971"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506159">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506154"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505331">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505326"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506003">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505998"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506080">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505408">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505404"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506158">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506154"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506002">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505998"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506897">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506893"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506819">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506815"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506975">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506971"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505330">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505326"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506975">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506971"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505053">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*, Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505050"/>
            </content>
        </type>
        <type derived="true" id="type.9505055">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*, Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505050"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505054">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*, Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505050"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505044">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505041"/>
            </content>
        </type>
        <type derived="true" id="type.9505046">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505041"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505045">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505041"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506568">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506565"/>
            </content>
        </type>
        <type derived="true" id="type.9505568">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505565"/>
            </content>
        </type>
        <type derived="true" id="type.9506511">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506508"/>
            </content>
        </type>
        <type derived="true" id="type.9506568">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506565"/>
            </content>
        </type>
        <type derived="true" id="type.9506454">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506451"/>
            </content>
        </type>
        <type derived="true" id="type.9506513">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506508"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506456">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506451"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506570">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506565"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505570">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505565"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506512">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506508"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506569">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506565"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505569">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505565"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506455">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506451"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506569">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, SharedPtr&lt;T>&amp;, SharedPtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506565"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506447">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506444"/>
            </content>
        </type>
        <type derived="true" id="type.9506504">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506501"/>
            </content>
        </type>
        <type derived="true" id="type.9506447">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506444"/>
            </content>
        </type>
        <type derived="true" id="type.9505561">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505558"/>
            </content>
        </type>
        <type derived="true" id="type.9506561">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506558"/>
            </content>
        </type>
        <type derived="true" id="type.9505563">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506563">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506449">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506444"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506506">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506501"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506449">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506444"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505562">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505558"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506562">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506558"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506505">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506501"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506448">
            <name>const RandomAccessIter&lt;SharedPtr&lt;T>, const SharedPtr&lt;T>&amp;, const SharedPtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506444"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506243">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.9506297">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.9505139">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.9506270">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.9505477">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.9506297">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.9505450">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.9506245">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506299">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506272">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505479">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505452">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505141">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506244">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506298">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506244">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506271">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505451">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505478">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505140">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506288">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.9506234">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.9505130">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.9506288">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.9506261">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.9505441">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.9505468">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.9506263">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506290">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505470">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505443">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505132">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506236">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505470">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506289">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505442">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505469">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506235">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506262">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505131">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504968">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, UniquePtr&lt;System.Json.JsonValue>&amp;, UniquePtr&lt;System.Json.JsonValue>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504965"/>
            </content>
        </type>
        <type derived="true" id="type.9504970">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, UniquePtr&lt;System.Json.JsonValue>&amp;, UniquePtr&lt;System.Json.JsonValue>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504965"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504969">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, UniquePtr&lt;System.Json.JsonValue>&amp;, UniquePtr&lt;System.Json.JsonValue>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504965"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504961">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, const UniquePtr&lt;System.Json.JsonValue>&amp;, const UniquePtr&lt;System.Json.JsonValue>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504958"/>
            </content>
        </type>
        <type derived="true" id="type.9504963">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, const UniquePtr&lt;System.Json.JsonValue>&amp;, const UniquePtr&lt;System.Json.JsonValue>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504958"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504962">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, const UniquePtr&lt;System.Json.JsonValue>&amp;, const UniquePtr&lt;System.Json.JsonValue>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504958"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506364">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506361"/>
            </content>
        </type>
        <type derived="true" id="type.9505511">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505508"/>
            </content>
        </type>
        <type derived="true" id="type.9506397">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506394"/>
            </content>
        </type>
        <type derived="true" id="type.9506331">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506328"/>
            </content>
        </type>
        <type derived="true" id="type.9506399">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506394"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506333">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506328"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506366">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506361"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505513">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505508"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506333">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506328"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506332">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506328"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506365">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506361"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506332">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506328"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506398">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506394"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505512">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, UniquePtr&lt;T>&amp;, UniquePtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505508"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506324">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506321"/>
            </content>
        </type>
        <type derived="true" id="type.9506357">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506354"/>
            </content>
        </type>
        <type derived="true" id="type.9505504">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505501"/>
            </content>
        </type>
        <type derived="true" id="type.9506390">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506387"/>
            </content>
        </type>
        <type derived="true" id="type.9505506">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505501"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506359">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506354"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506326">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506321"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506359">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506354"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506392">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506387"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505505">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505501"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506325">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506321"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506391">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506387"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506325">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506321"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506358">
            <name>const RandomAccessIter&lt;UniquePtr&lt;T>, const UniquePtr&lt;T>&amp;, const UniquePtr&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506354"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504451">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504448"/>
            </content>
        </type>
        <type derived="true" id="type.2633">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2630"/>
            </content>
        </type>
        <type derived="true" id="type.9504451">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504448"/>
            </content>
        </type>
        <type derived="true" id="type.9504453">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504448"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2635">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2630"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504453">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504448"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2634">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2630"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504452">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504448"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504322">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504319"/>
            </content>
        </type>
        <type derived="true" id="type.2504">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2501"/>
            </content>
        </type>
        <type derived="true" id="type.2506">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2501"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504324">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504319"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2505">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2501"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504323">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504319"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504341">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504338"/>
            </content>
        </type>
        <type derived="true" id="type.2523">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2520"/>
            </content>
        </type>
        <type derived="true" id="type.9504341">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504338"/>
            </content>
        </type>
        <type derived="true" id="type.2525">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2520"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504343">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504338"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504342">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504338"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2524">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2520"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2821">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2818"/>
            </content>
        </type>
        <type derived="true" id="type.9504640">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504637"/>
            </content>
        </type>
        <type derived="true" id="type.2823">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2818"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504642">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504637"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504641">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504637"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2822">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2818"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504641">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504637"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2534">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2531"/>
            </content>
        </type>
        <type derived="true" id="type.9504352">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504349"/>
            </content>
        </type>
        <type derived="true" id="type.9504354">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504349"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2536">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2531"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2535">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2531"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504353">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504349"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504331">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504328"/>
            </content>
        </type>
        <type derived="true" id="type.2513">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2510"/>
            </content>
        </type>
        <type derived="true" id="type.9504333">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504328"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2515">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2510"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504332">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504328"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2514">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2510"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3031">
            <name>const RecursiveMutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
            </content>
        </type>
        <type derived="true" id="type.9506597">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.9505719">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.9506719">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.9505169">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.9506658">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.9505597">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.9506658">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.9505841">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.9505902">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.9505780">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.9505658">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.9505230">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.9506660">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505904">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506599">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505721">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505171">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505782">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505599">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505843">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506721">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505232">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505904">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505660">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505903">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506720">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505781">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506598">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505842">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505659">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505170">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505842">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505720">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505231">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505598">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506659">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504915">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, JsonValue*>, SelectFirst&lt;String&lt;uchar>, JsonValue*>, Less&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504912"/>
            </content>
        </type>
        <type derived="true" id="type.9504917">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, JsonValue*>, SelectFirst&lt;String&lt;uchar>, JsonValue*>, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504912"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504916">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, JsonValue*>, SelectFirst&lt;String&lt;uchar>, JsonValue*>, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504912"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505183">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505180"/>
            </content>
        </type>
        <type derived="true" id="type.9505794">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505791"/>
            </content>
        </type>
        <type derived="true" id="type.9505855">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505852"/>
            </content>
        </type>
        <type derived="true" id="type.9505672">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505669"/>
            </content>
        </type>
        <type derived="true" id="type.9506611">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506608"/>
            </content>
        </type>
        <type derived="true" id="type.9505244">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505241"/>
            </content>
        </type>
        <type derived="true" id="type.9505733">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505730"/>
            </content>
        </type>
        <type derived="true" id="type.9505916">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505913"/>
            </content>
        </type>
        <type derived="true" id="type.9506672">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506669"/>
            </content>
        </type>
        <type derived="true" id="type.9506733">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506730"/>
            </content>
        </type>
        <type derived="true" id="type.9506672">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506669"/>
            </content>
        </type>
        <type derived="true" id="type.9505611">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505608"/>
            </content>
        </type>
        <type derived="true" id="type.9506613">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506608"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505185">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505180"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506674">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506669"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505674">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505669"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505857">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505852"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505796">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505791"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505735">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505730"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505613">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505608"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505246">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505241"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505918">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505913"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506735">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506730"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506674">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506669"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505795">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505791"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506673">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506669"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506612">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506608"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505673">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505669"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506673">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506669"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505612">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505608"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506734">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506730"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505734">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505730"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505856">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505852"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505184">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505180"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505245">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505241"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505917">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505913"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504929">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504926"/>
            </content>
        </type>
        <type derived="true" id="type.9504931">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504926"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504930">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504926"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505618">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505615"/>
            </content>
        </type>
        <type derived="true" id="type.9505679">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505676"/>
            </content>
        </type>
        <type derived="true" id="type.9505923">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505920"/>
            </content>
        </type>
        <type derived="true" id="type.9506740">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506737"/>
            </content>
        </type>
        <type derived="true" id="type.9505251">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505248"/>
            </content>
        </type>
        <type derived="true" id="type.9506618">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506615"/>
            </content>
        </type>
        <type derived="true" id="type.9506740">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506737"/>
            </content>
        </type>
        <type derived="true" id="type.9505801">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505798"/>
            </content>
        </type>
        <type derived="true" id="type.9505190">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505187"/>
            </content>
        </type>
        <type derived="true" id="type.9505740">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505737"/>
            </content>
        </type>
        <type derived="true" id="type.9505862">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505859"/>
            </content>
        </type>
        <type derived="true" id="type.9506679">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506676"/>
            </content>
        </type>
        <type derived="true" id="type.9506681">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506676"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505681">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505676"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505620">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506742">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506620">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505192">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505742">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505253">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505248"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505864">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505859"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505803">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505798"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505925">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505920"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506742">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506741">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506737"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505619">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505191">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505187"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505863">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505859"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505802">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505798"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505924">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505920"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505680">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505676"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506619">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505741">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505737"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506741">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506737"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506680">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506676"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505252">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505248"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505788">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505785"/>
            </content>
        </type>
        <type derived="true" id="type.9505910">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505907"/>
            </content>
        </type>
        <type derived="true" id="type.9506727">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506724"/>
            </content>
        </type>
        <type derived="true" id="type.9506605">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506602"/>
            </content>
        </type>
        <type derived="true" id="type.9505849">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505846"/>
            </content>
        </type>
        <type derived="true" id="type.9505238">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505235"/>
            </content>
        </type>
        <type derived="true" id="type.9506666">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506663"/>
            </content>
        </type>
        <type derived="true" id="type.9506727">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506724"/>
            </content>
        </type>
        <type derived="true" id="type.9505605">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505602"/>
            </content>
        </type>
        <type derived="true" id="type.9505666">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505663"/>
            </content>
        </type>
        <type derived="true" id="type.9505177">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505174"/>
            </content>
        </type>
        <type derived="true" id="type.9505727">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505724"/>
            </content>
        </type>
        <type derived="true" id="type.9506607">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505851">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505846"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506729">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506724"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505240">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505235"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505668">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505663"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505790">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505785"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505607">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505179">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505174"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505729">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505724"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506668">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506663"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505912">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505907"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505178">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505174"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506728">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506724"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505728">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505724"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505789">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505785"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505606">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505850">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505846"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506667">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506663"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505911">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505907"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505239">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505235"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506606">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505911">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505907"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505667">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505663"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504936">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504933"/>
            </content>
        </type>
        <type derived="true" id="type.9504938">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504933"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504937">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504933"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504923">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, const Pair&lt;String&lt;uchar>, JsonValue*>&amp;, const Pair&lt;String&lt;uchar>, JsonValue*>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504920"/>
            </content>
        </type>
        <type derived="true" id="type.9504925">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, const Pair&lt;String&lt;uchar>, JsonValue*>&amp;, const Pair&lt;String&lt;uchar>, JsonValue*>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504920"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504924">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, const Pair&lt;String&lt;uchar>, JsonValue*>&amp;, const Pair&lt;String&lt;uchar>, JsonValue*>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504920"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3093">
            <name>const ReturnStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
            </content>
        </type>
        <type derived="true" id="type.3094">
            <name>const ReturnStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506768">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.9506924">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.9505951">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.9506846">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.9505279">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.9506107">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.9506029">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.9505357">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.9506926">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506031">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506926">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505359">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506109">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505281">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506770">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506848">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505953">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505358">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506925">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505280">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506769">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506847">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506108">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506030">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506925">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505952">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505707">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.9506585">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.9506707">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.9505585">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.9505829">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.9506646">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.9505890">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.9505218">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.9505157">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.9506707">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.9505768">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.9505646">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.9505648">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505892">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506709">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506587">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506648">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505770">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505831">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505159">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505709">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505220">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505587">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505891">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506647">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506586">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505219">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505769">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505647">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506708">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505158">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505830">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505708">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505586">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506708">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504903">
            <name>const SelectFirst&lt;String&lt;uchar>, JsonValue*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504902"/>
            </content>
        </type>
        <type derived="true" id="type.9504905">
            <name>const SelectFirst&lt;String&lt;uchar>, JsonValue*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504904">
            <name>const SelectFirst&lt;String&lt;uchar>, JsonValue*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507075">
            <name>const SelectFirst&lt;String&lt;uchar>, JsonValue*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504902"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507074">
            <name>const SelectFirst&lt;String&lt;uchar>, JsonValue*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504902"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504994">
            <name>const SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504993"/>
            </content>
        </type>
        <type derived="true" id="type.9504996">
            <name>const SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504993"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504995">
            <name>const SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504993"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507146">
            <name>const SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504993"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507145">
            <name>const SelectFirst&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504993"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505525">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.9506411">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.9505091">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.9506195">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.9507014">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.9506468">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.9506525">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.9506527">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505093">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505527">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506413">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506197">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506470">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507016">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507015">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505092">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505526">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506412">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506469">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506196">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506526">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507015">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506519">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.9507008">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.9506189">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.9505085">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.9506405">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.9505519">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.9506462">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.9507008">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.9506464">
            <name>const SharedPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506407">
            <name>const SharedPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507010">
            <name>const SharedPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505087">
            <name>const SharedPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505521">
            <name>const SharedPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506191">
            <name>const SharedPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506521">
            <name>const SharedPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506463">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507009">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506190">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506520">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505520">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507009">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506406">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505086">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3075">
            <name>const SizeOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
            </content>
        </type>
        <type derived="true" id="type.3076">
            <name>const SizeOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3012">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
            </content>
        </type>
        <type derived="true" id="type.3013">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3026">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
            </content>
        </type>
        <type derived="true" id="type.9491572">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9491567"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9491660">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9491655"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9491659">
            <name>const String&lt;uchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9491655"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9491615">
            <name>const String&lt;wchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9491610"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3108">
            <name>const SwitchStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
            </content>
        </type>
        <type derived="true" id="type.3109">
            <name>const SwitchStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505126">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504178"/>
            </content>
        </type>
        <type derived="true" id="type.9506313">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504285"/>
            </content>
        </type>
        <type derived="true" id="type.9507003">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504315"/>
            </content>
        </type>
        <type derived="true" id="type.9505437">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504245"/>
            </content>
        </type>
        <type derived="true" id="type.9505464">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504246"/>
            </content>
        </type>
        <type derived="true" id="type.9506346">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504286"/>
            </content>
        </type>
        <type derived="true" id="type.9506379">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504287"/>
            </content>
        </type>
        <type derived="true" id="type.9506184">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504280"/>
            </content>
        </type>
        <type derived="true" id="type.9506230">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504282"/>
            </content>
        </type>
        <type derived="true" id="type.9505080">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504176"/>
            </content>
        </type>
        <type derived="true" id="type.9507003">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504315"/>
            </content>
        </type>
        <type derived="true" id="type.9506257">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504283"/>
            </content>
        </type>
        <type derived="true" id="type.9506284">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504284"/>
            </content>
        </type>
        <type derived="true" id="type.9505493">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504247"/>
            </content>
        </type>
        <type derived="true" id="type.2555">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9490990"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505277">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504186"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2556">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9490993"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2557">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9490995"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505355">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504190"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2558">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491004"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2559">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491006"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2560">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491008"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2562">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491011"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2563">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491013"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2565">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491016"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2566">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491018"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2568">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491021"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2663">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2569">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491023"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2661">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491181"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2571">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491026"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2572">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491028"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2574">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491031"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2575">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491033"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506844">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504305"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2577">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491042"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2647">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491143"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2644">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491140"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2642">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491131"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2578">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491044"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505069">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504175"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2579">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491046"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506105">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504276"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2580">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491048"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2581">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491050"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2582">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491052"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2584">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491055"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2611">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491091"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505124">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504178"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506282">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506027">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504272"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506922">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504309"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507004">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504315"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506314">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504285"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2603">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491074"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505949">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504268"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507004">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504315"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506347">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504286"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506380">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504287"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506766">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504301"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505494">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504247"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506228">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504282"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505462">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504246"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505435">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504245"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506185">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504280"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506255">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504283"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2539">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9490963"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505081">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504176"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2541">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9490965"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2552">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9490983"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2601">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491072"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2600">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491070"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2553">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9490986"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2554">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9490988"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506312">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504285"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506229">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504282"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505125">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504178"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506256">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504283"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506345">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504286"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506283">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506183">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504280"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505492">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504247"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505463">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504246"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506378">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504287"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507002">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504315"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505079">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504176"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505436">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504245"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3032">
            <name>const ThreadingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
            </content>
        </type>
        <type derived="true" id="type.3033">
            <name>const ThreadingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3114">
            <name>const ThrowStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
            </content>
        </type>
        <type derived="true" id="type.3115">
            <name>const ThrowStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3142">
            <name>const TokenParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
            </content>
        </type>
        <type derived="true" id="type.3143">
            <name>const TokenParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3117">
            <name>const TryStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
            </content>
        </type>
        <type derived="true" id="type.3118">
            <name>const TryStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3038">
            <name>const Type</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
            </content>
        </type>
        <type derived="true" id="type.3039">
            <name>const Type&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3078">
            <name>const TypeName</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
            </content>
        </type>
        <type derived="true" id="type.3079">
            <name>const TypeName&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2561">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2645">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491141"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2643">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491132"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2570">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491024"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2564">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491014"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2573">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491029"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2567">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491019"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2576">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491034"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2648">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491144"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507066">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, JsonValue*>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504906"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507135">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, System.Json.JsonClassCreatorDelegate>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504997"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3060">
            <name>const UnaryMinus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
            </content>
        </type>
        <type derived="true" id="type.3061">
            <name>const UnaryMinus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3057">
            <name>const UnaryPlus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
            </content>
        </type>
        <type derived="true" id="type.3058">
            <name>const UnaryPlus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3036">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
            </content>
        </type>
        <type derived="true" id="type.3037">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505751">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505748"/>
            </content>
        </type>
        <type derived="true" id="type.9505873">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505870"/>
            </content>
        </type>
        <type derived="true" id="type.9505812">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505809"/>
            </content>
        </type>
        <type derived="true" id="type.9505690">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505687"/>
            </content>
        </type>
        <type derived="true" id="type.9505934">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505931"/>
            </content>
        </type>
        <type derived="true" id="type.9506751">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506748"/>
            </content>
        </type>
        <type derived="true" id="type.9506629">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506626"/>
            </content>
        </type>
        <type derived="true" id="type.9505262">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505259"/>
            </content>
        </type>
        <type derived="true" id="type.9506690">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506687"/>
            </content>
        </type>
        <type derived="true" id="type.9505201">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505198"/>
            </content>
        </type>
        <type derived="true" id="type.9505629">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505626"/>
            </content>
        </type>
        <type derived="true" id="type.9506690">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506687"/>
            </content>
        </type>
        <type derived="true" id="type.9505692">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505687"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505203">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505198"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506631">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506626"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506753">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506748"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505753">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505748"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505875">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505870"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505264">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505259"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505631">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505626"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505936">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505931"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506753">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506748"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506692">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506687"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505814">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505809"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506691">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506687"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506630">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506626"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505202">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505198"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505691">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505687"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506752">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506748"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505874">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505870"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505813">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505809"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505752">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505748"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505263">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505259"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505630">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505626"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505935">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505931"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506691">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9506687"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504947">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504944"/>
            </content>
        </type>
        <type derived="true" id="type.9504949">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504944"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504948">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504944"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505062">
            <name>const UniquePtr&lt;System.Json.JsonClassFactory></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505059"/>
            </content>
        </type>
        <type derived="true" id="type.9505064">
            <name>const UniquePtr&lt;System.Json.JsonClassFactory>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505059"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505063">
            <name>const UniquePtr&lt;System.Json.JsonClassFactory>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9505059"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504976">
            <name>const UniquePtr&lt;System.Json.JsonParser></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504973"/>
            </content>
        </type>
        <type derived="true" id="type.9504978">
            <name>const UniquePtr&lt;System.Json.JsonParser>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504973"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504977">
            <name>const UniquePtr&lt;System.Json.JsonParser>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504973"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504882">
            <name>const UniquePtr&lt;System.Json.JsonValue></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504879"/>
            </content>
        </type>
        <type derived="true" id="type.9504884">
            <name>const UniquePtr&lt;System.Json.JsonValue>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504879"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504883">
            <name>const UniquePtr&lt;System.Json.JsonValue>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9504879"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506372">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type derived="true" id="type.9506306">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type derived="true" id="type.9506996">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type derived="true" id="type.9506177">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type derived="true" id="type.9506339">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type derived="true" id="type.9505073">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type derived="true" id="type.9505486">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type derived="true" id="type.9505488">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506998">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506179">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506308">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506341">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506374">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505075">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506997">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506340">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505487">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505074">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506178">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506340">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506373">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506307">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505705">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504256"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506583">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504292"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505644">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504253"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506644">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504295"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506705">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504298"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505888">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504265"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505216">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505583">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504250"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505155">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504180"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505766">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504259"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505827">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504262"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2624">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9491112"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506583">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9504292"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507210">
            <name>const ValueObject&lt;JsonArray*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9507207"/>
            </content>
        </type>
        <type derived="true" id="type.9507212">
            <name>const ValueObject&lt;JsonArray*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9507207"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507211">
            <name>const ValueObject&lt;JsonArray*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9507207"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507191">
            <name>const ValueObject&lt;JsonNumber*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9507188"/>
            </content>
        </type>
        <type derived="true" id="type.9507193">
            <name>const ValueObject&lt;JsonNumber*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9507188"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507192">
            <name>const ValueObject&lt;JsonNumber*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9507188"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507200">
            <name>const ValueObject&lt;JsonObject*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9507197"/>
            </content>
        </type>
        <type derived="true" id="type.9507202">
            <name>const ValueObject&lt;JsonObject*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9507197"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507201">
            <name>const ValueObject&lt;JsonObject*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9507197"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507182">
            <name>const ValueObject&lt;JsonString*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9507179"/>
            </content>
        </type>
        <type derived="true" id="type.9507184">
            <name>const ValueObject&lt;JsonString*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9507179"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507183">
            <name>const ValueObject&lt;JsonString*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9507179"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507170">
            <name>const ValueObject&lt;JsonValue*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9507167"/>
            </content>
        </type>
        <type derived="true" id="type.9507172">
            <name>const ValueObject&lt;JsonValue*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9507167"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507171">
            <name>const ValueObject&lt;JsonValue*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9507167"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2878">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9498647"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506540">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.9506483">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.9505540">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.9505106">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.9507029">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.9506210">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.9506483">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.9506426">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.9507031">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506542">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506212">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506428">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507031">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506485">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505108">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505542">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506427">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507030">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506484">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507030">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505541">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506211">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506541">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505107">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505114">
            <name>const WeakPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
            </content>
        </type>
        <type derived="true" id="type.9506434">
            <name>const WeakPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
            </content>
        </type>
        <type derived="true" id="type.9506548">
            <name>const WeakPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
            </content>
        </type>
        <type derived="true" id="type.9507037">
            <name>const WeakPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
            </content>
        </type>
        <type derived="true" id="type.9505548">
            <name>const WeakPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
            </content>
        </type>
        <type derived="true" id="type.9506491">
            <name>const WeakPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
            </content>
        </type>
        <type derived="true" id="type.9507037">
            <name>const WeakPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
            </content>
        </type>
        <type derived="true" id="type.9506218">
            <name>const WeakPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
            </content>
        </type>
        <type derived="true" id="type.9505116">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505550">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506550">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506436">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506493">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507039">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506220">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507039">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507038">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505115">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506549">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506435">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506492">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505549">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507038">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506219">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2912">
            <name>const double&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9490436"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2910">
            <name>const float&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9490435"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2899">
            <name>const sbyte&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9490427"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2902">
            <name>const short&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9490429"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3147">
            <name>const stdlib</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
            </content>
        </type>
        <type derived="true" id="type.3148">
            <name>const stdlib&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9491662">
            <name>const uchar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9490439"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2904">
            <name>const ushort&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9490430"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9490436">
            <name>double</name>
        </type>
        <type derived="true" id="type.9490473">
            <name>double&amp;</name>
            <content>
                <baseType ref="type.9490436"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9490435">
            <name>float</name>
        </type>
        <type derived="true" id="type.9490458">
            <name>int&amp;</name>
            <content>
                <baseType ref="type.9490431"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9490433">
            <name>long</name>
        </type>
        <type basic="true" id="type.9490427">
            <name>sbyte</name>
        </type>
        <type basic="true" id="type.9490429">
            <name>short</name>
        </type>
        <type derived="true" id="type.3149">
            <name>stdlib&amp;&amp;</name>
            <content>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9490439">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.9490482">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.9490439"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9490481">
            <name>uchar*</name>
            <content>
                <baseType ref="type.9490439"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9490432">
            <name>uint</name>
        </type>
        <type derived="true" id="type.9490461">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.9490432"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9490460">
            <name>uint*</name>
            <content>
                <baseType ref="type.9490432"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9490434">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.9490467">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.9490434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9490466">
            <name>ulong*</name>
            <content>
                <baseType ref="type.9490434"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9490430">
            <name>ushort</name>
        </type>
        <type derived="true" id="type.9490578">
            <name>void*</name>
            <content>
                <baseType ref="type.9490440"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9490438">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.9490479">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.9490438"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9490478">
            <name>wchar*</name>
            <content>
                <baseType ref="type.9490438"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9507043">
            <name>wchar*&amp;&amp;</name>
            <content>
                <baseType ref="type.9490438"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
    </types>
</library>
