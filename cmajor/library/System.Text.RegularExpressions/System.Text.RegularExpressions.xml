<library>
    <name>System.Text.RegularExpressions</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Text.RegularExpressions">
            <name>System.Text.RegularExpressions</name>
            <classes>
                <class id="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544">
                    <name>CharClass</name>
                    <groupName>CharClass</groupName>
                    <syntax> public class CharClass;</syntax>
                    <constructors>
                        <constructor id="default_constructor_CharClass_4F299E04B214EFD79E3917A8DD73C5BE8A797ECF">
                            <name>CharClass()</name>
                            <syntax>public nothrow CharClass();</syntax>
                        </constructor>
                        <constructor id="constructor_CharClass_40A4F82B2A48D14DD89DAB0A9DF3B426A88687DE">
                            <name>CharClass(char c)</name>
                            <syntax>public CharClass(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.7388906"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_CharClass_CDA6DB40AADCBF95F6D36C8A19F6D10B6EC19254">
                            <name>CharClass(char first, char last)</name>
                            <syntax>public CharClass(char first, char last);</syntax>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="type.7388906"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="type.7388906"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_CharClass_25D571BDCAE49D770485EC5CE744557957ACDBE3">
                            <name>CharClass(const String&lt;char>&amp; ranges_, bool inverse_)</name>
                            <syntax>public CharClass(const String&lt;char>&amp; ranges_, bool inverse_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ranges_</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                                <parameter>
                                    <name>inverse_</name>
                                    <type ref="type.7388895"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Bits_CharClass_9ECE69FD02C8D17B1F4BD73D01C86B19C96E8B05">
                            <name>Bits() const</name>
                            <syntax>public nothrow const Bitset&amp; Bits() const;</syntax>
                            <returnType ref="type.7389233"/>
                        </function>
                        <function id="member_function_Clear_CharClass_1C3772822A7788BD789A7112740E37BBFAE4014E">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Contains_CharClass_64AE527B23017CB93AA9B53F8662B10B343DD8D7">
                            <name>Contains(char c) const</name>
                            <syntax>public bool Contains(char c) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.7388906"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_Inverse_CharClass_4C38FA76EF0074E679704D9509E685B7799B62C8">
                            <name>Inverse() const</name>
                            <syntax>public nothrow bool Inverse() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_Ranges_CharClass_25D624B4FD8DB9C0A342A5FDF9F50C326A707EEB">
                            <name>Ranges() const</name>
                            <syntax>public String&lt;char> Ranges() const;</syntax>
                            <returnType ref="type.7390036"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E">
                    <name>Dfa</name>
                    <groupName>Dfa</groupName>
                    <syntax> public class Dfa;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Dfa_07B3929613F3F1D3AC0F17C91AF2DD120D0F925B">
                            <name>Dfa()</name>
                            <syntax>public Dfa();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddState_Dfa_26E6A2488835D869B3AB7BDB7C552FA35EEA12DE">
                            <name>AddState(const DfaState&amp; state)</name>
                            <syntax>public void AddState(const DfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.7406037"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_GetState_Dfa_7254A2BD303B52356723E9DD6869544B191C42B1">
                            <name>GetState(int i) const</name>
                            <syntax>public nothrow inline const DfaState&amp; GetState(int i) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>i</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7406037"/>
                        </function>
                        <function id="member_function_Next_Dfa_EE4D529688DA0296683B932FC977436566DBF5E8">
                            <name>Next(char c, int s)</name>
                            <syntax>public nothrow inline int Next(char c, int s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.7388906"/>
                                </parameter>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388900"/>
                        </function>
                        <function id="member_function_NumStates_Dfa_5FA197DF9994622390F95CEFCF924D9B21B22DBC">
                            <name>NumStates() const</name>
                            <syntax>public nothrow inline long NumStates() const;</syntax>
                            <returnType ref="type.7388902"/>
                        </function>
                        <function id="member_function_SetAccepting_Dfa_1AFD4EC4A55DA9F672AB8B7544CB52F4615D9B9A">
                            <name>SetAccepting(int s)</name>
                            <syntax>public void SetAccepting(int s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetNext_Dfa_E8632C356CC711A2319B8F7E3DDAC03C17236C6F">
                            <name>SetNext(char c, int from, int to)</name>
                            <syntax>public nothrow void SetNext(char c, int from, int to);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.7388906"/>
                                </parameter>
                                <parameter>
                                    <name>from</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                                <parameter>
                                    <name>to</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228">
                    <name>DfaState</name>
                    <groupName>DfaState</groupName>
                    <syntax> public class DfaState;</syntax>
                    <constructors>
                        <constructor id="default_constructor_DfaState_19F186C1F03FBBEB052944628C3262031F52CE64">
                            <name>DfaState()</name>
                            <syntax>public DfaState();</syntax>
                        </constructor>
                        <constructor id="constructor_DfaState_379F9E98A9A3D7F7EEE2163E05F0EC00201C6C20">
                            <name>DfaState(int id_)</name>
                            <syntax>public DfaState(int id_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accepting_DfaState_A7310D3993BEA18C9F952F6F19A24B69F71F154F">
                            <name>Accepting() const</name>
                            <syntax>public nothrow inline bool Accepting() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_Id_DfaState_97D5CBFA0C129D3C05DB810D88AB5C541BD314F7">
                            <name>Id() const</name>
                            <syntax>public nothrow inline int Id() const;</syntax>
                            <returnType ref="type.7388900"/>
                        </function>
                        <function id="member_function_Next_DfaState_9FD3599AACDA82803E14C9F11DD78FD3840E9228">
                            <name>Next(char c) const</name>
                            <syntax>public nothrow inline int Next(char c) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.7388906"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388900"/>
                        </function>
                        <function id="member_function_SetAccepting_DfaState_225F14C713639CAB7CB363A38B33DC2ADB9AD4A1">
                            <name>SetAccepting()</name>
                            <syntax>public nothrow inline void SetAccepting();</syntax>
                        </function>
                        <function id="member_function_SetNext_DfaState_A1432436EB7B6E49C1D8319587D2482F770CF3EB">
                            <name>SetNext(char c, int n)</name>
                            <syntax>public nothrow inline void SetNext(char c, int n);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.7388906"/>
                                </parameter>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57">
                    <name>Nfa</name>
                    <groupName>Nfa</groupName>
                    <syntax> public class Nfa;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Nfa_C911A047871E46B502D94CE905FACFC250286635">
                            <name>Nfa()</name>
                            <syntax>public Nfa();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddState_Nfa_B04784C00A1F38D5975225A1819B2E7F80FC5524">
                            <name>AddState(const NfaState&amp; state)</name>
                            <syntax>public void AddState(const NfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.7406055"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_GetState_Nfa_69254B598DF5877CA3EEAF6EA75A9E56EB3A641F">
                            <name>GetState(long i) const</name>
                            <syntax>public nothrow inline const NfaState&amp; GetState(long i) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>i</name>
                                    <type ref="type.7388902"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7406055"/>
                        </function>
                        <function id="member_function_NumStates_Nfa_36BDB4B847FB98481B3F29F51A81C5BA63A4CA53">
                            <name>NumStates() const</name>
                            <syntax>public nothrow inline long NumStates() const;</syntax>
                            <returnType ref="type.7388902"/>
                        </function>
                        <function id="member_function_States_Nfa_02ACF5CE923C7145CB8872B14A9C917888A0A735">
                            <name>States() const</name>
                            <syntax>public nothrow inline const List&lt;System.Text.RegularExpressions.NfaState>&amp; States() const;</syntax>
                            <returnType ref="type.7406796"/>
                        </function>
                    </functions>
                </class>
                <class id="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662">
                    <name>NfaState</name>
                    <groupName>NfaState</groupName>
                    <syntax> public class NfaState;</syntax>
                    <constructors>
                        <constructor id="default_constructor_NfaState_CC4550AEE21C0EE53951230670CD03A47DA75FD7">
                            <name>NfaState()</name>
                            <syntax>public NfaState();</syntax>
                        </constructor>
                        <constructor id="constructor_NfaState_DC6741ACEDF986BED3E1D9E3E7AB3E6A929F3673">
                            <name>NfaState(int id_)</name>
                            <syntax>public NfaState(int id_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accepting_NfaState_AF5C02F9685E4F2B2F518875814539C115F74F16">
                            <name>Accepting()</name>
                            <syntax>public nothrow inline bool Accepting();</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_Epsilon_NfaState_D60F94B16132539AFC860863C4FE7AEF7249B326">
                            <name>Epsilon() const</name>
                            <syntax>public nothrow const NfaStateNumberSet&amp; Epsilon() const;</syntax>
                            <returnType ref="type.7406049"/>
                        </function>
                        <function id="member_function_Id_NfaState_1901DF43AE73062A31B45016F07FF2890C6B2D1E">
                            <name>Id() const</name>
                            <syntax>public nothrow inline int Id() const;</syntax>
                            <returnType ref="type.7388900"/>
                        </function>
                        <function id="member_function_Next_NfaState_F1C182E26DED97995E45DE94E7A7F66CBF61A74E">
                            <name>Next(char c) const</name>
                            <syntax>public nothrow const NfaStateNumberSet&amp; Next(char c) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.7388906"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7406049"/>
                        </function>
                        <function id="member_function_SetAccepting_NfaState_9F80C6A52F51B0940F68E65869F9F1A0B2D6DB93">
                            <name>SetAccepting()</name>
                            <syntax>public nothrow inline void SetAccepting();</syntax>
                        </function>
                        <function id="member_function_SetNext_NfaState_F96A4564E9D4510790B3FC80476BB34DC2701E05">
                            <name>SetNext(char c, const NfaStateNumberSet&amp; s)</name>
                            <syntax>public void SetNext(char c, const NfaStateNumberSet&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.7388906"/>
                                </parameter>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7406049"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3">
                    <name>NfaStateNumberSet</name>
                    <groupName>NfaStateNumberSet</groupName>
                    <syntax> public class NfaStateNumberSet;</syntax>
                    <constructors>
                        <constructor id="default_constructor_NfaStateNumberSet_4432F26437CB58C87A8E2FF4A904CFB34A567BCF">
                            <name>NfaStateNumberSet()</name>
                            <syntax>public nothrow NfaStateNumberSet();</syntax>
                        </constructor>
                        <constructor id="constructor_NfaStateNumberSet_520535118410C8EC3A9D6CDC97A44F3A6D1A3C1E">
                            <name>NfaStateNumberSet(int s)</name>
                            <syntax>public NfaStateNumberSet(int s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Add_NfaStateNumberSet_649B6F8C53A15F573E66E01469E390EAEE74ACA5">
                            <name>Add(int stateNumber)</name>
                            <syntax>public void Add(int stateNumber);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stateNumber</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CanonicalContains_NfaStateNumberSet_3E3C070606C453E2D88124FE922BB741DDB90AE0">
                            <name>CanonicalContains(int stateNumber)</name>
                            <syntax>public nothrow bool CanonicalContains(int stateNumber);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stateNumber</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_Contains_NfaStateNumberSet_918B8C3DDADA5D4B238A2DD02349CE0FE0F1C45F">
                            <name>Contains(int stateNumber)</name>
                            <syntax>public nothrow bool Contains(int stateNumber);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stateNumber</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_IsEmpty_NfaStateNumberSet_43645D0B37A3928867F888309EB8452A9B1BDBE3">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_MakeCanonical_NfaStateNumberSet_C42068B1DC4BA252151DD3777C00E7BE26039A0A">
                            <name>MakeCanonical()</name>
                            <syntax>public void MakeCanonical();</syntax>
                        </function>
                        <function id="member_function_Merge_NfaStateNumberSet_767CE8DDFEF6A5C7F29141A28ECA2172FC518E9D">
                            <name>Merge(const NfaStateNumberSet&amp; x)</name>
                            <syntax>public void Merge(const NfaStateNumberSet&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.7406049"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Rep_NfaStateNumberSet_291560AD89F4F0E7F7A1887C43F7F01374E29171">
                            <name>Rep() const</name>
                            <syntax>public nothrow const List&lt;int>&amp; Rep() const;</syntax>
                            <returnType ref="type.7406724"/>
                        </function>
                        <function id="member_function_ToString_NfaStateNumberSet_44BA3F2CB44C01913423DABA63C2B2A64E29D293">
                            <name>ToString() const</name>
                            <syntax>public String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.7390036"/>
                        </function>
                    </functions>
                </class>
                <class id="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB">
                    <name>PtrNfa</name>
                    <groupName>PtrNfa</groupName>
                    <syntax> public class PtrNfa;</syntax>
                    <constructors>
                        <constructor id="default_constructor_PtrNfa_71AA850786E0FF72DFAF4F76055420C328B7A1D0">
                            <name>PtrNfa()</name>
                            <syntax>public PtrNfa();</syntax>
                        </constructor>
                        <constructor id="constructor_PtrNfa_DD413467E32CD13263051E678D94CB3A79B3D1FB">
                            <name>PtrNfa(PtrNfaState* start_, PtrNfaState* end_)</name>
                            <syntax>public PtrNfa(PtrNfaState* start_, PtrNfaState* end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.7406066"/>
                                </parameter>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.7406066"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddState_PtrNfa_9ACE919104983EE7EE583D8D5896F65CD3A6924C">
                            <name>AddState(PtrNfaState* state)</name>
                            <syntax>public void AddState(PtrNfaState* state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.7406066"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_End_PtrNfa_9D0D4AEEB95A05FB49398DCDE44EE409822792A6">
                            <name>End() const</name>
                            <syntax>public nothrow inline PtrNfaState* End() const;</syntax>
                            <returnType ref="type.7406066"/>
                        </function>
                        <function id="member_function_NumberStates_PtrNfa_E15BF6BE88238C33876FB91272D03D3745BC472C">
                            <name>NumberStates()</name>
                            <syntax>public nothrow void NumberStates();</syntax>
                        </function>
                        <function id="member_function_SetEnd_PtrNfa_A046A4A4455872E5113117EBF6F958DBC5772A92">
                            <name>SetEnd(PtrNfaState* end_)</name>
                            <syntax>public inline void SetEnd(PtrNfaState* end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.7406066"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetStart_PtrNfa_68D8D18EE0BC53CE9761A4F7871A4756CC6CC579">
                            <name>SetStart(PtrNfaState* start_)</name>
                            <syntax>public inline void SetStart(PtrNfaState* start_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.7406066"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Start_PtrNfa_6B888DEA26A54DC8A3A86CADBB9DFAEA8D6B419C">
                            <name>Start() const</name>
                            <syntax>public nothrow inline PtrNfaState* Start() const;</syntax>
                            <returnType ref="type.7406066"/>
                        </function>
                        <function id="member_function_States_PtrNfa_1C5C73292FB6212598B84B2AFB46BD29214CF42F">
                            <name>States() const</name>
                            <syntax>public nothrow const List&lt;PtrNfaState*>&amp; States() const;</syntax>
                            <returnType ref="type.7406850"/>
                        </function>
                    </functions>
                </class>
                <class id="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3">
                    <name>PtrNfaEdge</name>
                    <groupName>PtrNfaEdge</groupName>
                    <syntax> public class PtrNfaEdge;</syntax>
                    <constructors>
                        <constructor id="default_constructor_PtrNfaEdge_4E5C4C7D81EF9451C225A411124357E80330BB28">
                            <name>PtrNfaEdge()</name>
                            <syntax>public PtrNfaEdge();</syntax>
                        </constructor>
                        <constructor id="constructor_PtrNfaEdge_B54320755C6D76958ED7659B24C92A774C008725">
                            <name>PtrNfaEdge(const CharClass&amp; cls_, PtrNfaState* next_)</name>
                            <syntax>public PtrNfaEdge(const CharClass&amp; cls_, PtrNfaState* next_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>cls_</name>
                                    <type ref="type.7406031"/>
                                </parameter>
                                <parameter>
                                    <name>next_</name>
                                    <type ref="type.7406066"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Chars_PtrNfaEdge_8DAE9F8CCBF632554AE355DD5114A3CE0362730F">
                            <name>Chars() const</name>
                            <syntax>public nothrow inline const CharClass&amp; Chars() const;</syntax>
                            <returnType ref="type.7406031"/>
                        </function>
                        <function id="member_function_Next_PtrNfaEdge_5C5682B5F4FEE0A942759DD67774745F253CEF68">
                            <name>Next() const</name>
                            <syntax>public nothrow inline PtrNfaState* Next() const;</syntax>
                            <returnType ref="type.7406066"/>
                        </function>
                    </functions>
                </class>
                <class id="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8">
                    <name>PtrNfaState</name>
                    <groupName>PtrNfaState</groupName>
                    <syntax> public class PtrNfaState;</syntax>
                    <constructors>
                        <constructor id="default_constructor_PtrNfaState_9DA055AE969B06DAD332DFB9B42ED7E157B2F4DD">
                            <name>PtrNfaState()</name>
                            <syntax>public PtrNfaState();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accepting_PtrNfaState_F855D1DD52E08421C0B4A21B3FC920F5D7745D77">
                            <name>Accepting() const</name>
                            <syntax>public nothrow inline bool Accepting() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="function_group_AddEdge_8A34AC8F152910A6C8F61BD0CF5B8ABE0FF33E68">
                            <name>AddEdge</name>
                            <overloads>
                                <overload id="member_function_AddEdge_PtrNfaState_3A56537C6A7CC3B736C0B5DF95047218F306FFB1">
                                    <name>AddEdge(PtrNfaEdge&amp;&amp; edge)</name>
                                    <syntax>public void AddEdge(PtrNfaEdge&amp;&amp; edge);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>edge</name>
                                            <type ref="type.7406823"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_AddEdge_PtrNfaState_6265A90DB7DBA58239F893A386EAE44FA6DBA8CD">
                                    <name>AddEdge(const PtrNfaEdge&amp; edge)</name>
                                    <syntax>public void AddEdge(const PtrNfaEdge&amp; edge);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>edge</name>
                                            <type ref="type.7406076"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Clear_PtrNfaState_DC6DB92F580C0A613488896F73C48108A13070DB">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Edges_PtrNfaState_E20B01CFC9AD97DFCF490D9311EC7B565E359234">
                            <name>Edges() const</name>
                            <syntax>public nothrow inline const List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp; Edges() const;</syntax>
                            <returnType ref="type.7406829"/>
                        </function>
                        <function id="member_function_Id_PtrNfaState_68DE82FBD7784855DE6267B33EF7B2B6698A5384">
                            <name>Id() const</name>
                            <syntax>public nothrow inline int Id() const;</syntax>
                            <returnType ref="type.7388900"/>
                        </function>
                        <function id="member_function_Next_PtrNfaState_A090132D956B94CE56194DD7713206B8BA785B0A">
                            <name>Next(char c)</name>
                            <syntax>public List&lt;PtrNfaState*> Next(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.7388906"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7406845"/>
                        </function>
                        <function id="member_function_ResetAccepting_PtrNfaState_69E6A386FFB55E0B5498D7A8328B7B3D5167EF11">
                            <name>ResetAccepting()</name>
                            <syntax>public nothrow inline void ResetAccepting();</syntax>
                        </function>
                        <function id="member_function_SetAccepting_PtrNfaState_218FCA739C8EE65F4D88C8C0466F2EF6F78CE13D">
                            <name>SetAccepting()</name>
                            <syntax>public nothrow inline void SetAccepting();</syntax>
                        </function>
                        <function id="member_function_SetEdges_PtrNfaState_A96C1C104A95EB2D6C269685FF385287FA62D1BC">
                            <name>SetEdges(const List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp; edges_)</name>
                            <syntax>public void SetEdges(const List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp; edges_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>edges_</name>
                                    <type ref="type.7406829"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetId_PtrNfaState_532A57EB866393C4A1FC2910F7038BEE855DCA7D">
                            <name>SetId(int id_)</name>
                            <syntax>public nothrow inline void SetId(int id_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2">
                    <name>PtrNfaStateFactory</name>
                    <groupName>PtrNfaStateFactory</groupName>
                    <syntax> public class PtrNfaStateFactory;</syntax>
                    <functions>
                        <function id="member_function_Clear_PtrNfaStateFactory_B512A7C5924FC729EA3A04EDBAFBD22884889F6F">
                            <name>Clear()</name>
                            <syntax>public void Clear();</syntax>
                        </function>
                        <function id="member_function_FreeState_PtrNfaStateFactory_75536BA04D6F342070BCFDC70C600BF039030D9E">
                            <name>FreeState(PtrNfaState* state)</name>
                            <syntax>public void FreeState(PtrNfaState* state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.7406066"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_MakeState_PtrNfaStateFactory_29EB7C55E503DE112D5A16E05EBF1AA6F69D89A2">
                            <name>MakeState()</name>
                            <syntax>public PtrNfaState* MakeState();</syntax>
                            <returnType ref="type.7406066"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_PtrNfaStateFactory_FABCA8014FD1A3C260209F93CE0A1FC56DE53015">
                            <name>Instance()</name>
                            <syntax>public static PtrNfaStateFactory&amp; Instance();</syntax>
                            <returnType ref="type.7406079"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F">
                    <name>RegEx</name>
                    <groupName>RegEx</groupName>
                    <syntax> public class RegEx;</syntax>
                    <constructors>
                        <constructor id="constructor_RegEx_048A5AC6F13DA9ED011823E2E2E8820225A196C8">
                            <name>RegEx(const String&lt;char>&amp; pattern_)</name>
                            <syntax>public RegEx(const String&lt;char>&amp; pattern_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pattern_</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_RegEx_80C0AB8F118532186C3778D5E11AA9A69CD4EC01">
                            <name>RegEx(const String&lt;char>&amp; pattern_, RegExFlags flags)</name>
                            <syntax>public RegEx(const String&lt;char>&amp; pattern_, RegExFlags flags);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pattern_</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                                <parameter>
                                    <name>flags</name>
                                    <type ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Compiled_RegEx_661D620F09E6D141272FCABE143FE78A56C662EB">
                            <name>Compiled() const</name>
                            <syntax>public nothrow inline bool Compiled() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_GetDfa_RegEx_4827339014C71AE442EEFCFED46D894EC77EA45E">
                            <name>GetDfa() const</name>
                            <syntax>public nothrow inline const Dfa&amp; GetDfa() const;</syntax>
                            <returnType ref="type.7406043"/>
                        </function>
                        <function id="member_function_GetNfa_RegEx_421BE8C85790708F9013444D8E7847B4887CAE76">
                            <name>GetNfa() const</name>
                            <syntax>public nothrow inline const Nfa&amp; GetNfa() const;</syntax>
                            <returnType ref="type.7406061"/>
                        </function>
                        <function id="member_function_Matches_RegEx_59E97BBCEE02267BB93B3A7BDB2A90148DB9D40A">
                            <name>Matches(const String&lt;char>&amp; s)</name>
                            <syntax>public bool Matches(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_Pattern_RegEx_911BFB722C9A92651F1B3118FE55413E92546ADE">
                            <name>Pattern() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Pattern() const;</syntax>
                            <returnType ref="type.7390041"/>
                        </function>
                    </functions>
                </class>
                <class id="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC">
                    <name>RegExParser</name>
                    <groupName>RegExParser</groupName>
                    <syntax> public class RegExParser;</syntax>
                    <constructors>
                        <constructor id="default_constructor_RegExParser_8140C92D742EBE123151F6886D3472F9C11B1590">
                            <name>RegExParser()</name>
                            <syntax>public RegExParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Parse_RegExParser_01A06ACE0DC9C2175030CADE47EE763C8A0FA90A">
                            <name>Parse(const String&lt;char>&amp; regEx)</name>
                            <syntax>public PtrNfa Parse(const String&lt;char>&amp; regEx);</syntax>
                            <parameters>
                                <parameter>
                                    <name>regEx</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_RegExParser_C24BF2834AEC9A218B0ED4D75F0828032116DA00">
                            <name>Instance()</name>
                            <syntax>public static RegExParser&amp; Instance();</syntax>
                            <returnType ref="type.7406064"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22">
                    <name>RegularExpressionGrammar</name>
                    <groupName>RegularExpressionGrammar</groupName>
                    <syntax> public class RegularExpressionGrammar;</syntax>
                    <baseClass ref="class_Grammar_2180D00808E7A786B21C35D11B36E77EC171A6C6"/>
                    <constructors>
                        <constructor id="default_constructor_RegularExpressionGrammar_F36ED07549A921E3839F0FE4EA4B1CF8C4F60484">
                            <name>RegularExpressionGrammar()</name>
                            <syntax>public RegularExpressionGrammar();</syntax>
                        </constructor>
                        <constructor id="constructor_RegularExpressionGrammar_6501A1B591C14B01B647F1F8B4D00B4731CD2A62">
                            <name>RegularExpressionGrammar(ParsingDomain* parsingDomain)</name>
                            <syntax>public RegularExpressionGrammar(ParsingDomain* parsingDomain);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parsingDomain</name>
                                    <type ref="type.7397134"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CreateRules_RegularExpressionGrammar_7A43A6B5AD3D3A39A6F71E515C7540C3389ED011">
                            <name>CreateRules()</name>
                            <syntax>public override void CreateRules();</syntax>
                        </function>
                        <function id="member_function_GetReferencedGrammars_RegularExpressionGrammar_2732FBB540D81C3CDDBE8F73366811FAA272766C">
                            <name>GetReferencedGrammars()</name>
                            <syntax>public override void GetReferencedGrammars();</syntax>
                        </function>
                        <function id="member_function_Parse_RegularExpressionGrammar_E529B0C217B5C1B88AEA848FB7B7A364CC28B2FF">
                            <name>Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName)</name>
                            <syntax>public PtrNfa Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start</name>
                                    <type ref="type.7390131"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="type.7390131"/>
                                </parameter>
                                <parameter>
                                    <name>fileIndex</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                                <parameter>
                                    <name>fileName</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_AddState_07F1E4FBD352758B79D1E725CC8F92F1D86E6A5F">
                    <name>AddState(int s, List&lt;int>&amp; newStates, Bitset&amp; alreadyOn, const Nfa&amp; nfa)</name>
                    <syntax>public void AddState(int s, List&lt;int>&amp; newStates, Bitset&amp; alreadyOn, const Nfa&amp; nfa);</syntax>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.7388900"/>
                        </parameter>
                        <parameter>
                            <name>newStates</name>
                            <type ref="type.7406721"/>
                        </parameter>
                        <parameter>
                            <name>alreadyOn</name>
                            <type ref="type.7389230"/>
                        </parameter>
                        <parameter>
                            <name>nfa</name>
                            <type ref="type.7406061"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_Alt_D5524DBAD9A12AD8D723443912874B636A784F1E">
                    <name>Alt(const PtrNfa&amp; left, const PtrNfa&amp; right)</name>
                    <syntax>public PtrNfa Alt(const PtrNfa&amp; left, const PtrNfa&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.7406085"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.7406085"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_Cat_0465226282EC3ABACE56D89A451378945115C788">
                    <name>Cat(const PtrNfa&amp; left, const PtrNfa&amp; right)</name>
                    <syntax>public PtrNfa Cat(const PtrNfa&amp; left, const PtrNfa&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.7406085"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.7406085"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_group_EpsilonClosure_4289D97C873E7B7EB7A7CC0946FBC68D1515C917">
                    <name>EpsilonClosure</name>
                    <overloads>
                        <overload id="function_EpsilonClosure_2920F52FDF4A51BCA9D33B76B0D92C2E57BE1BFC">
                            <name>EpsilonClosure(const NfaStateNumberSet&amp; states, const Nfa&amp; nfa)</name>
                            <syntax>public NfaStateNumberSet EpsilonClosure(const NfaStateNumberSet&amp; states, const Nfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>states</name>
                                    <type ref="type.7406049"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.7406061"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                        </overload>
                        <overload id="function_EpsilonClosure_C70736F90888A8A25B5030EDD28F95D54AC08E4A">
                            <name>EpsilonClosure(int s, const Nfa&amp; nfa)</name>
                            <syntax>public NfaStateNumberSet EpsilonClosure(int s, const Nfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.7406061"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_FindState_6835210F08F0DAAF90AD37AC594DFE0DCA732DDF">
                    <name>FindState(RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*> begin, RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*> end, const NfaStateNumberSet&amp; s)</name>
                    <syntax>public int FindState(RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*> begin, RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*> end, const NfaStateNumberSet&amp; s);</syntax>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="type.7406748"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="type.7406748"/>
                        </parameter>
                        <parameter>
                            <name>s</name>
                            <type ref="type.7406049"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7388900"/>
                </function>
                <function id="function_Kleene_7713A26D1A3F54B2092A897249CB5E39E3F1B53F">
                    <name>Kleene(const PtrNfa&amp; subject)</name>
                    <syntax>public PtrNfa Kleene(const PtrNfa&amp; subject);</syntax>
                    <parameters>
                        <parameter>
                            <name>subject</name>
                            <type ref="type.7406085"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_group_MakeNfa_8132CF2AF0EA5C0C6000822983BC1360BCCFD706">
                    <name>MakeNfa</name>
                    <overloads>
                        <overload id="function_MakeNfa_D79E15BE6BCAEB816164DD385F247B8F62B07957">
                            <name>MakeNfa(char c)</name>
                            <syntax>public PtrNfa MakeNfa(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.7388906"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                        </overload>
                        <overload id="function_MakeNfa_E488F2099F06822C021374D0EC23DD5E16D26A23">
                            <name>MakeNfa(const CharClass&amp; cls)</name>
                            <syntax>public PtrNfa MakeNfa(const CharClass&amp; cls);</syntax>
                            <parameters>
                                <parameter>
                                    <name>cls</name>
                                    <type ref="type.7406031"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Matches_8BAA67F5DC1921A919ED85B64CE0602EBC481F40">
                    <name>Matches</name>
                    <overloads>
                        <overload id="function_Matches_5ACF03A6FF47E999410B0148CF76C540DE97D0A8">
                            <name>Matches(const String&lt;char>&amp; s, const Dfa&amp; dfa)</name>
                            <syntax>public nothrow bool Matches(const String&lt;char>&amp; s, const Dfa&amp; dfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                                <parameter>
                                    <name>dfa</name>
                                    <type ref="type.7406043"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </overload>
                        <overload id="function_Matches_CABA9735ED4A5D89DEE37FCE1F80C710F4AA7501">
                            <name>Matches(const String&lt;char>&amp; s, const Nfa&amp; nfa)</name>
                            <syntax>public bool Matches(const String&lt;char>&amp; s, const Nfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.7406061"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_MatchesSlow_3283EC27B79209142A1A6F427314AD173B4B526F">
                    <name>MatchesSlow(const String&lt;char>&amp; s, const Nfa&amp; nfa)</name>
                    <syntax>public bool MatchesSlow(const String&lt;char>&amp; s, const Nfa&amp; nfa);</syntax>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.7390041"/>
                        </parameter>
                        <parameter>
                            <name>nfa</name>
                            <type ref="type.7406061"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7388895"/>
                </function>
                <function id="function_Move_0EEDAF3B7AAF3C35467317B8AD4D7F35D2412BF0">
                    <name>Move(const NfaStateNumberSet&amp; states, char c, const Nfa&amp; nfa)</name>
                    <syntax>public NfaStateNumberSet Move(const NfaStateNumberSet&amp; states, char c, const Nfa&amp; nfa);</syntax>
                    <parameters>
                        <parameter>
                            <name>states</name>
                            <type ref="type.7406049"/>
                        </parameter>
                        <parameter>
                            <name>c</name>
                            <type ref="type.7388906"/>
                        </parameter>
                        <parameter>
                            <name>nfa</name>
                            <type ref="type.7406061"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                </function>
                <function id="function_Optional_A91AD05335DB0478FB38E926766295BAF36AED04">
                    <name>Optional(const PtrNfa&amp; subject)</name>
                    <syntax>public PtrNfa Optional(const PtrNfa&amp; subject);</syntax>
                    <parameters>
                        <parameter>
                            <name>subject</name>
                            <type ref="type.7406085"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_ParseRegEx_E19FFA4F71A38771F5578C338314BD5F8F10D655">
                    <name>ParseRegEx(const String&lt;char>&amp; pattern, RegExFlags flags)</name>
                    <syntax>public PtrNfa ParseRegEx(const String&lt;char>&amp; pattern, RegExFlags flags);</syntax>
                    <parameters>
                        <parameter>
                            <name>pattern</name>
                            <type ref="type.7390041"/>
                        </parameter>
                        <parameter>
                            <name>flags</name>
                            <type ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_Positive_EE60205EB0EC73B6B0BE6BCE863DD0D934FC17AA">
                    <name>Positive(const PtrNfa&amp; subject)</name>
                    <syntax>public PtrNfa Positive(const PtrNfa&amp; subject);</syntax>
                    <parameters>
                        <parameter>
                            <name>subject</name>
                            <type ref="type.7406085"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_ToDfa_3C137DA5A679038BEAFCE6E395241C01126DC1A7">
                    <name>ToDfa(const Nfa&amp; nfa)</name>
                    <syntax>public Dfa ToDfa(const Nfa&amp; nfa);</syntax>
                    <parameters>
                        <parameter>
                            <name>nfa</name>
                            <type ref="type.7406061"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                </function>
                <function id="function_group_ToNfa_4A30E6BE6D6A4FCB836B6EEDC9EC474A8A6A1B20">
                    <name>ToNfa</name>
                    <overloads>
                        <overload id="function_ToNfa_47B4C0C904524DB43CFF1A2180CBA8B70F84CA00">
                            <name>ToNfa(const PtrNfa&amp; ptrNfa)</name>
                            <syntax>public Nfa ToNfa(const PtrNfa&amp; ptrNfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ptrNfa</name>
                                    <type ref="type.7406085"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                        </overload>
                        <overload id="function_ToNfa_E93F77CDE077C3E57B1556A7A48371CBB10CD64D">
                            <name>ToNfa(const String&lt;char>&amp; pattern, RegExFlags flags)</name>
                            <syntax>public Nfa ToNfa(const String&lt;char>&amp; pattern, RegExFlags flags);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pattern</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                                <parameter>
                                    <name>flags</name>
                                    <type ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ToRanges_3BECBF25B0A0C3200B2FC864696D656B87058250">
                    <name>ToRanges(Class cls)</name>
                    <syntax>public String&lt;char> ToRanges(Class cls);</syntax>
                    <parameters>
                        <parameter>
                            <name>cls</name>
                            <type ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7390036"/>
                </function>
                <function id="function_Transform_A221E9D046B37DA540984D0A629132630378DA3C">
                    <name>Transform(char c, List&lt;int>&amp; oldStates, List&lt;int>&amp; newStates, Bitset&amp; alreadyOn, const Nfa&amp; nfa)</name>
                    <syntax>public void Transform(char c, List&lt;int>&amp; oldStates, List&lt;int>&amp; newStates, Bitset&amp; alreadyOn, const Nfa&amp; nfa);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.7388906"/>
                        </parameter>
                        <parameter>
                            <name>oldStates</name>
                            <type ref="type.7406721"/>
                        </parameter>
                        <parameter>
                            <name>newStates</name>
                            <type ref="type.7406721"/>
                        </parameter>
                        <parameter>
                            <name>alreadyOn</name>
                            <type ref="type.7389230"/>
                        </parameter>
                        <parameter>
                            <name>nfa</name>
                            <type ref="type.7406061"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_group_op_shl_637EF27F8E355AF9344F2DA639A81DA4E5ACB541">
                    <name>operator&lt;&lt;</name>
                    <overloads>
                        <overload id="function_op_shl_C1DEC1FF29229F2C2E24F7685ADF587A765B5947">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const CharClass&amp; cls)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const CharClass&amp; cls);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389712"/>
                                </parameter>
                                <parameter>
                                    <name>cls</name>
                                    <type ref="type.7406031"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389712"/>
                        </overload>
                        <overload id="function_op_shl_529DAA6DAA82E134670BD473AD7269E2F37C94BA">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const Dfa&amp; dfa)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const Dfa&amp; dfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389712"/>
                                </parameter>
                                <parameter>
                                    <name>dfa</name>
                                    <type ref="type.7406043"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389712"/>
                        </overload>
                        <overload id="function_op_shl_6FC8187D8A10228A2B234648D5813A2989EE986F">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const DfaState&amp; state)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const DfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389712"/>
                                </parameter>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.7406037"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389712"/>
                        </overload>
                        <overload id="function_op_shl_4E5CAC0C1959738EA9F3D41EA8C384D0F55BEB02">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const Nfa&amp; nfa)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const Nfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389712"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.7406061"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389712"/>
                        </overload>
                        <overload id="function_op_shl_F6A1C2C0E02B025CF998B4AF949CC63F52E49A24">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const NfaState&amp; state)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const NfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389712"/>
                                </parameter>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.7406055"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389712"/>
                        </overload>
                        <overload id="function_op_shl_4708DEEF88C9580BCAB388C3AE502A8B4382BEC5">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const NfaStateNumberSet&amp; ns)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const NfaStateNumberSet&amp; ns);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389712"/>
                                </parameter>
                                <parameter>
                                    <name>ns</name>
                                    <type ref="type.7406049"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389712"/>
                        </overload>
                        <overload id="function_op_shl_0C23222D819AC864A37182196D3EA36958DF633C">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const PtrNfa&amp; nfa)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const PtrNfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389712"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.7406085"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389712"/>
                        </overload>
                        <overload id="function_op_shl_51AABFDB519D7C04C6F3C75CAAB1ABDC5313E49F">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const PtrNfaEdge&amp; edge)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const PtrNfaEdge&amp; edge);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389712"/>
                                </parameter>
                                <parameter>
                                    <name>edge</name>
                                    <type ref="type.7406076"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389712"/>
                        </overload>
                        <overload id="function_op_shl_B16D0D64750AB09DA2A841C2F3AB1EDCF83E05A6">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const CharClass&amp; cls)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const CharClass&amp; cls);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389724"/>
                                </parameter>
                                <parameter>
                                    <name>cls</name>
                                    <type ref="type.7406031"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389724"/>
                        </overload>
                        <overload id="function_op_shl_39E6DB77B3726EE382A4928DE8B747FCE82D55C9">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const Dfa&amp; dfa)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const Dfa&amp; dfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389724"/>
                                </parameter>
                                <parameter>
                                    <name>dfa</name>
                                    <type ref="type.7406043"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389724"/>
                        </overload>
                        <overload id="function_op_shl_DDC9181576324064116CCA12EA81F494F4FD7671">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const DfaState&amp; state)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const DfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389724"/>
                                </parameter>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.7406037"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389724"/>
                        </overload>
                        <overload id="function_op_shl_32B788139992A46133E1128EA68FE9705068391B">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const Nfa&amp; nfa)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const Nfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389724"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.7406061"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389724"/>
                        </overload>
                        <overload id="function_op_shl_6485B9489611903D001C978ACF890102A19BB472">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const NfaState&amp; state)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const NfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389724"/>
                                </parameter>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.7406055"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389724"/>
                        </overload>
                        <overload id="function_op_shl_825C28946705E8199F546560B5918AF74B4DCA0D">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const PtrNfa&amp; nfa)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const PtrNfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389724"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.7406085"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389724"/>
                        </overload>
                        <overload id="function_op_shl_6F9AF13E509A9C210D030CEDBC6B253DC6568410">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const PtrNfaEdge&amp; edge)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const PtrNfaEdge&amp; edge);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389724"/>
                                </parameter>
                                <parameter>
                                    <name>edge</name>
                                    <type ref="type.7406076"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389724"/>
                        </overload>
                        <overload id="function_op_shl_1FAFC8A002E684C1701F2045817D6A3F812784C0">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const NfaStateNumberSet&amp; ns)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const NfaStateNumberSet&amp; ns);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.7389724"/>
                                </parameter>
                                <parameter>
                                    <name>ns</name>
                                    <type ref="type.7406049"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389724"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_eq_1225FBF89BDAF45ABAD92A7A839964C8025299FA">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_8E43A7A9E8B02E781EBFC6C1D2DD2D8024FA6835">
                            <name>operator==(Class left, Class right)</name>
                            <syntax>public bool operator==(Class left, Class right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </overload>
                        <overload id="function_op_eq_1657CC5F4F56C5764772DB14D167206EA3E61EA5">
                            <name>operator==(RegExFlags left, RegExFlags right)</name>
                            <syntax>public bool operator==(RegExFlags left, RegExFlags right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </overload>
                        <overload id="function_op_eq_E167B657AE9463D25B3B65B5090C498284BDC388">
                            <name>operator==(const NfaStateNumberSet&amp; left, const NfaStateNumberSet&amp; right)</name>
                            <syntax>public nothrow bool operator==(const NfaStateNumberSet&amp; left, const NfaStateNumberSet&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7406049"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7406049"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </overload>
                    </overloads>
                </function>
            </functions>
            <constants>
                <constant id="constant_eps_F7D3432B47D7ADDBD0C715A5872E89F738895881">
                    <name>eps</name>
                    <syntax>public const char eps = 0;</syntax>
                    <type ref="type.7388906"/>
                    <value>0</value>
                </constant>
            </constants>
            <enumerations>
                <enumeration id="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB">
                    <name>Class</name>
                    <syntax>public enum Class;</syntax>
                    <underlyingType ref="type.7388900"/>
                    <enumConstant>
                        <name>alnum</name>
                        <value>0</value>
                    </enumConstant>
                    <enumConstant>
                        <name>alpha</name>
                        <value>1</value>
                    </enumConstant>
                    <enumConstant>
                        <name>blank</name>
                        <value>2</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cntrl</name>
                        <value>3</value>
                    </enumConstant>
                    <enumConstant>
                        <name>digit</name>
                        <value>4</value>
                    </enumConstant>
                    <enumConstant>
                        <name>graph</name>
                        <value>5</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lower</name>
                        <value>6</value>
                    </enumConstant>
                    <enumConstant>
                        <name>print</name>
                        <value>7</value>
                    </enumConstant>
                    <enumConstant>
                        <name>punct</name>
                        <value>8</value>
                    </enumConstant>
                    <enumConstant>
                        <name>space</name>
                        <value>9</value>
                    </enumConstant>
                    <enumConstant>
                        <name>upper</name>
                        <value>10</value>
                    </enumConstant>
                    <enumConstant>
                        <name>word</name>
                        <value>11</value>
                    </enumConstant>
                    <enumConstant>
                        <name>xdigit</name>
                        <value>12</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603">
                    <name>RegExFlags</name>
                    <syntax>public enum RegExFlags;</syntax>
                    <underlyingType ref="type.7388900"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0</value>
                    </enumConstant>
                    <enumConstant>
                        <name>compiled</name>
                        <value>1</value>
                    </enumConstant>
                    <enumConstant>
                        <name>matchLine</name>
                        <value>2</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
    </namespaces>
    <types>
        <type derived="true" id="type.5572">
            <name>AddressOf&amp;&amp;</name>
            <content>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_AlternativeExpressionRule_4A8E0A75B1E15D431953E1A2CC7001CE365A23BE">
            <name>AlternativeExpressionRule</name>
        </type>
        <type derived="true" id="type.7406104">
            <name>AlternativeExpressionRule&amp;</name>
            <content>
                <baseType ref="class_AlternativeExpressionRule_4A8E0A75B1E15D431953E1A2CC7001CE365A23BE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406103">
            <name>AlternativeExpressionRule*</name>
            <content>
                <baseType ref="class_AlternativeExpressionRule_4A8E0A75B1E15D431953E1A2CC7001CE365A23BE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407045">
            <name>AlternativeExpressionRule*&amp;</name>
            <content>
                <baseType ref="class_AlternativeExpressionRule_4A8E0A75B1E15D431953E1A2CC7001CE365A23BE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407044">
            <name>AlternativeExpressionRule**</name>
            <content>
                <baseType ref="class_AlternativeExpressionRule_4A8E0A75B1E15D431953E1A2CC7001CE365A23BE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5644">
            <name>AssertStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7406968" specialization="true">
            <name>BinaryFun&lt;int, int, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="type.7388900"/>
                <argumentType ref="type.7388900"/>
                <argumentType ref="type.7388895"/>
            </content>
        </type>
        <type derived="true" id="type.7406970">
            <name>BinaryFun&lt;int, int, bool>&amp;</name>
            <content>
                <baseType ref="type.7406968"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406984">
            <name>BinaryFun&lt;int, int, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406968"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406969">
            <name>BinaryFun&lt;int, int, bool>*</name>
            <content>
                <baseType ref="type.7406968"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406967" specialization="true">
            <name>BinaryPred&lt;int, int></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="type.7388900"/>
                <argumentType ref="type.7388900"/>
            </content>
        </type>
        <type derived="true" id="type.7406972">
            <name>BinaryPred&lt;int, int>&amp;</name>
            <content>
                <baseType ref="type.7406967"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406981">
            <name>BinaryPred&lt;int, int>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406967"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406971">
            <name>BinaryPred&lt;int, int>*</name>
            <content>
                <baseType ref="type.7406967"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7389230">
            <name>Bitset&amp;</name>
            <content>
                <baseType ref="class_Bitset_BA1EE2E68426C5445CB6CAF7F957084ADAFD19CA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390801" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.5186">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7390801"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="7389532"/>
            </content>
        </type>
        <type derived="true" id="type.5194">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="7389553"/>
            </content>
        </type>
        <type derived="true" id="type.5207">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544">
            <name>CharClass</name>
        </type>
        <type derived="true" id="type.7406028">
            <name>CharClass&amp;</name>
            <content>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406767">
            <name>CharClass&amp;&amp;</name>
            <content>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406027">
            <name>CharClass*</name>
            <content>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CharClassCharRule_A53117A13BF1152F840E4ABF3F80BB10F64CEC38">
            <name>CharClassCharRule</name>
        </type>
        <type derived="true" id="type.7406152">
            <name>CharClassCharRule&amp;</name>
            <content>
                <baseType ref="class_CharClassCharRule_A53117A13BF1152F840E4ABF3F80BB10F64CEC38"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406151">
            <name>CharClassCharRule*</name>
            <content>
                <baseType ref="class_CharClassCharRule_A53117A13BF1152F840E4ABF3F80BB10F64CEC38"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407102">
            <name>CharClassCharRule*&amp;</name>
            <content>
                <baseType ref="class_CharClassCharRule_A53117A13BF1152F840E4ABF3F80BB10F64CEC38"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407101">
            <name>CharClassCharRule**</name>
            <content>
                <baseType ref="class_CharClassCharRule_A53117A13BF1152F840E4ABF3F80BB10F64CEC38"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CharClassRule_4F146B0ADDD3D4BE0C73F0669E2FBBF45F3788EE">
            <name>CharClassRule</name>
        </type>
        <type derived="true" id="type.7406134">
            <name>CharClassRule&amp;</name>
            <content>
                <baseType ref="class_CharClassRule_4F146B0ADDD3D4BE0C73F0669E2FBBF45F3788EE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406133">
            <name>CharClassRule*</name>
            <content>
                <baseType ref="class_CharClassRule_4F146B0ADDD3D4BE0C73F0669E2FBBF45F3788EE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407078">
            <name>CharClassRule*&amp;</name>
            <content>
                <baseType ref="class_CharClassRule_4F146B0ADDD3D4BE0C73F0669E2FBBF45F3788EE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407077">
            <name>CharClassRule**</name>
            <content>
                <baseType ref="class_CharClassRule_4F146B0ADDD3D4BE0C73F0669E2FBBF45F3788EE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5668">
            <name>CharParser&amp;&amp;</name>
            <content>
                <baseType ref="class_CharParser_F30B4B7DDC9B8D3CD1476C03049B3C7189028FDA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_CharRangeRule_618435CFE0DB4BD0ABFBE4AFB8D7E8ED673F12F7">
            <name>CharRangeRule</name>
        </type>
        <type derived="true" id="type.7406146">
            <name>CharRangeRule&amp;</name>
            <content>
                <baseType ref="class_CharRangeRule_618435CFE0DB4BD0ABFBE4AFB8D7E8ED673F12F7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406145">
            <name>CharRangeRule*</name>
            <content>
                <baseType ref="class_CharRangeRule_618435CFE0DB4BD0ABFBE4AFB8D7E8ED673F12F7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407097">
            <name>CharRangeRule*&amp;</name>
            <content>
                <baseType ref="class_CharRangeRule_618435CFE0DB4BD0ABFBE4AFB8D7E8ED673F12F7"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407096">
            <name>CharRangeRule**</name>
            <content>
                <baseType ref="class_CharRangeRule_618435CFE0DB4BD0ABFBE4AFB8D7E8ED673F12F7"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CharRule_B7D4B34179E6B09B20AED1A5DC81494C02C4B5F2">
            <name>CharRule</name>
        </type>
        <type derived="true" id="type.7406128">
            <name>CharRule&amp;</name>
            <content>
                <baseType ref="class_CharRule_B7D4B34179E6B09B20AED1A5DC81494C02C4B5F2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406127">
            <name>CharRule*</name>
            <content>
                <baseType ref="class_CharRule_B7D4B34179E6B09B20AED1A5DC81494C02C4B5F2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407073">
            <name>CharRule*&amp;</name>
            <content>
                <baseType ref="class_CharRule_B7D4B34179E6B09B20AED1A5DC81494C02C4B5F2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407072">
            <name>CharRule**</name>
            <content>
                <baseType ref="class_CharRule_B7D4B34179E6B09B20AED1A5DC81494C02C4B5F2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB">
            <name>Class</name>
        </type>
        <type derived="true" id="type.7406765">
            <name>Class&amp;</name>
            <content>
                <baseType ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406766">
            <name>Class&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406764">
            <name>Class*</name>
            <content>
                <baseType ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ClassRule_CB84A917AD277E1C502ED913C6E87F636CB3D527">
            <name>ClassRule</name>
        </type>
        <type derived="true" id="type.7406140">
            <name>ClassRule&amp;</name>
            <content>
                <baseType ref="class_ClassRule_CB84A917AD277E1C502ED913C6E87F636CB3D527"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406139">
            <name>ClassRule*</name>
            <content>
                <baseType ref="class_ClassRule_CB84A917AD277E1C502ED913C6E87F636CB3D527"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407091">
            <name>ClassRule*&amp;</name>
            <content>
                <baseType ref="class_ClassRule_CB84A917AD277E1C502ED913C6E87F636CB3D527"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407090">
            <name>ClassRule**</name>
            <content>
                <baseType ref="class_ClassRule_CB84A917AD277E1C502ED913C6E87F636CB3D527"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5651">
            <name>CodeExpandingVisitor&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5550">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5587">
            <name>Complement&amp;&amp;</name>
            <content>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405985">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5091">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405985">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5090">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405984">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5645">
            <name>Const&amp;&amp;</name>
            <content>
                <baseType ref="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5605">
            <name>Construct&amp;&amp;</name>
            <content>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F">
            <name>Context</name>
        </type>
        <type id="class_Context_C54426BCE970844EC5951E8505ABAD41E90D3B3C">
            <name>Context</name>
        </type>
        <type id="class_Context_0C8D185307CAF62D15099706D5FE138E1B6E1288">
            <name>Context</name>
        </type>
        <type id="class_Context_8F48190AFFFA303A9B132F56189CDD4703FC16E1">
            <name>Context</name>
        </type>
        <type id="class_Context_2995333F7FB4E575DF46CB6813BEB1F6F3A7E737">
            <name>Context</name>
        </type>
        <type id="class_Context_63EB906843D5D4373C35066FF5009683B089C34B">
            <name>Context</name>
        </type>
        <type id="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2">
            <name>Context</name>
        </type>
        <type id="class_Context_B08E85EEE770E2B21335C89CF53D58AB5087B3A6">
            <name>Context</name>
        </type>
        <type id="class_Context_0D46FA6C66A259182789E6D19E7461B00281875B">
            <name>Context</name>
        </type>
        <type id="class_Context_0C61E182102956552E65E5786F357793121668DE">
            <name>Context</name>
        </type>
        <type derived="true" id="type.7406107">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_0C61E182102956552E65E5786F357793121668DE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406155">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406131">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_0C8D185307CAF62D15099706D5FE138E1B6E1288"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406143">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_2995333F7FB4E575DF46CB6813BEB1F6F3A7E737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406113">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_B08E85EEE770E2B21335C89CF53D58AB5087B3A6"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406149">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406101">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_8F48190AFFFA303A9B132F56189CDD4703FC16E1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406137">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_63EB906843D5D4373C35066FF5009683B089C34B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406155">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406125">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_0D46FA6C66A259182789E6D19E7461B00281875B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406119">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_C54426BCE970844EC5951E8505ABAD41E90D3B3C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406154">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406100">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_8F48190AFFFA303A9B132F56189CDD4703FC16E1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406124">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_0D46FA6C66A259182789E6D19E7461B00281875B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406136">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_63EB906843D5D4373C35066FF5009683B089C34B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406130">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_0C8D185307CAF62D15099706D5FE138E1B6E1288"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406106">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_0C61E182102956552E65E5786F357793121668DE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406142">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_2995333F7FB4E575DF46CB6813BEB1F6F3A7E737"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406148">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406118">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_C54426BCE970844EC5951E8505ABAD41E90D3B3C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406154">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406112">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_B08E85EEE770E2B21335C89CF53D58AB5087B3A6"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407075">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_63EB906843D5D4373C35066FF5009683B089C34B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407042">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_0C61E182102956552E65E5786F357793121668DE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407037">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_8F48190AFFFA303A9B132F56189CDD4703FC16E1"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407053">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_C54426BCE970844EC5951E8505ABAD41E90D3B3C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407048">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_B08E85EEE770E2B21335C89CF53D58AB5087B3A6"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407088">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_2995333F7FB4E575DF46CB6813BEB1F6F3A7E737"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407094">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407099">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407070">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_0C8D185307CAF62D15099706D5FE138E1B6E1288"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407058">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_0D46FA6C66A259182789E6D19E7461B00281875B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407094">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407087">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_2995333F7FB4E575DF46CB6813BEB1F6F3A7E737"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407047">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_B08E85EEE770E2B21335C89CF53D58AB5087B3A6"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407057">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_0D46FA6C66A259182789E6D19E7461B00281875B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407041">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_0C61E182102956552E65E5786F357793121668DE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407093">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407098">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407052">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_C54426BCE970844EC5951E8505ABAD41E90D3B3C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407036">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_8F48190AFFFA303A9B132F56189CDD4703FC16E1"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407074">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_63EB906843D5D4373C35066FF5009683B089C34B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407069">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_0C8D185307CAF62D15099706D5FE138E1B6E1288"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407093">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390010" specialization="true">
            <name>Counter&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type id="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30" specialization="true">
            <name>Counter&lt;T></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="7389678"/>
            </content>
        </type>
        <type derived="true" id="type.5320">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5282">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5291">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5298">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5313">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5279">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A" specialization="true">
            <name>Counter&lt;U></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="7389693"/>
            </content>
        </type>
        <type derived="true" id="type.5623">
            <name>DeleteStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5569">
            <name>Deref&amp;&amp;</name>
            <content>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5626">
            <name>DestroyStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E">
            <name>Dfa</name>
        </type>
        <type derived="true" id="type.7406040">
            <name>Dfa&amp;</name>
            <content>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406943">
            <name>Dfa&amp;&amp;</name>
            <content>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406039">
            <name>Dfa*</name>
            <content>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228">
            <name>DfaState</name>
        </type>
        <type derived="true" id="type.7406034">
            <name>DfaState&amp;</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406768">
            <name>DfaState&amp;&amp;</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406033">
            <name>DfaState*</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406945">
            <name>DfaState*&amp;</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406946">
            <name>DfaState*&amp;&amp;</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406944">
            <name>DfaState**</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5089">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405983">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5563">
            <name>DomObject&amp;&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405982">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5088">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5663">
            <name>ExpectationParser&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5629">
            <name>ExpressionStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <argumentType ref="7389441"/>
            </content>
        </type>
        <type derived="true" id="type.5144">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="7389437"/>
                <argumentType ref="7389438"/>
                <argumentType ref="7389439"/>
            </content>
        </type>
        <type derived="true" id="type.5140">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5141">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="7389442"/>
                <argumentType ref="type.7390338"/>
                <argumentType ref="type.7390340"/>
            </content>
        </type>
        <type derived="true" id="type.5143">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5146">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5148">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="7389441"/>
                <argumentType ref="type.7390291"/>
                <argumentType ref="type.7390292"/>
            </content>
        </type>
        <type derived="true" id="type.5142">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5145">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5147">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5635">
            <name>GotoCaseStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5620">
            <name>GotoStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="7389523"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <argumentType ref="7389525"/>
                <argumentType ref="7389526"/>
            </content>
        </type>
        <type derived="true" id="type.5182">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="7389552"/>
                <argumentType ref="7389553"/>
                <argumentType ref="7389554"/>
                <argumentType ref="7389555"/>
                <argumentType ref="7389556"/>
            </content>
        </type>
        <type derived="true" id="type.5202">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398376" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7398367"/>
                <argumentType ref="type.7398062"/>
                <argumentType ref="type.7398068"/>
            </content>
        </type>
        <type id="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="7389532"/>
                <argumentType ref="7389532"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="7389533"/>
                <argumentType ref="7389534"/>
            </content>
        </type>
        <type derived="true" id="type.5190">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7406519" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390126"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398376"/>
            </content>
        </type>
        <type id="type.5458" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390126"/>
                <argumentType ref="type.7390125"/>
                <argumentType ref="type.7398376"/>
            </content>
        </type>
        <type derived="true" id="type.7406521">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.7406519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5460">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.5458"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406520">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.7406519"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5459">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.5458"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.5464" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390129"/>
                <argumentType ref="type.7390128"/>
                <argumentType ref="type.7398376"/>
            </content>
        </type>
        <type id="type.7406525" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390129"/>
                <argumentType ref="type.7390128"/>
                <argumentType ref="type.7398376"/>
            </content>
        </type>
        <type derived="true" id="type.5466">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.5464"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406527">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.7406525"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406526">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.7406525"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5465">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.5464"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5609">
            <name>Identifier&amp;&amp;</name>
            <content>
                <baseType ref="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5590">
            <name>Invoke&amp;&amp;</name>
            <content>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5660">
            <name>KleeneStarParser&amp;&amp;</name>
            <content>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7406962" specialization="true">
            <name>Less&lt;int></name>
            <content>
                <primaryType ref="class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2"/>
                <argumentType ref="type.7388900"/>
            </content>
        </type>
        <type derived="true" id="type.7406976">
            <name>Less&lt;int>&amp;</name>
            <content>
                <baseType ref="type.7406962"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406977">
            <name>Less&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406962"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406975">
            <name>Less&lt;int>*</name>
            <content>
                <baseType ref="type.7406962"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <argumentType ref="7389569"/>
            </content>
        </type>
        <type derived="true" id="type.5211">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5210">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390820" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390802"/>
            </content>
        </type>
        <type derived="true" id="type.5185">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390973" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390956"/>
            </content>
        </type>
        <type derived="true" id="type.5193">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390973"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391158" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7391139"/>
            </content>
        </type>
        <type derived="true" id="type.5206">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391158"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7406845" specialization="true">
            <name>List&lt;PtrNfaState*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7406066"/>
            </content>
        </type>
        <type derived="true" id="type.7406847">
            <name>List&lt;PtrNfaState*>&amp;</name>
            <content>
                <baseType ref="type.7406845"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406869">
            <name>List&lt;PtrNfaState*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406845"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406846">
            <name>List&lt;PtrNfaState*>*</name>
            <content>
                <baseType ref="type.7406845"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7392525" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.5338">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392525"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7406769" specialization="true">
            <name>List&lt;System.Text.RegularExpressions.DfaState></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
            </content>
        </type>
        <type derived="true" id="type.7406771">
            <name>List&lt;System.Text.RegularExpressions.DfaState>&amp;</name>
            <content>
                <baseType ref="type.7406769"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406789">
            <name>List&lt;System.Text.RegularExpressions.DfaState>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406769"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406770">
            <name>List&lt;System.Text.RegularExpressions.DfaState>*</name>
            <content>
                <baseType ref="type.7406769"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406791" specialization="true">
            <name>List&lt;System.Text.RegularExpressions.NfaState></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
            </content>
        </type>
        <type derived="true" id="type.7406793">
            <name>List&lt;System.Text.RegularExpressions.NfaState>&amp;</name>
            <content>
                <baseType ref="type.7406791"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406811">
            <name>List&lt;System.Text.RegularExpressions.NfaState>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406791"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406792">
            <name>List&lt;System.Text.RegularExpressions.NfaState>*</name>
            <content>
                <baseType ref="type.7406791"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406742" specialization="true">
            <name>List&lt;System.Text.RegularExpressions.NfaStateNumberSet></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
            </content>
        </type>
        <type derived="true" id="type.7406744">
            <name>List&lt;System.Text.RegularExpressions.NfaStateNumberSet>&amp;</name>
            <content>
                <baseType ref="type.7406742"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406762">
            <name>List&lt;System.Text.RegularExpressions.NfaStateNumberSet>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406742"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406743">
            <name>List&lt;System.Text.RegularExpressions.NfaStateNumberSet>*</name>
            <content>
                <baseType ref="type.7406742"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406824" specialization="true">
            <name>List&lt;System.Text.RegularExpressions.PtrNfaEdge></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
            </content>
        </type>
        <type derived="true" id="type.7406826">
            <name>List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp;</name>
            <content>
                <baseType ref="type.7406824"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406844">
            <name>List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406824"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406825">
            <name>List&lt;System.Text.RegularExpressions.PtrNfaEdge>*</name>
            <content>
                <baseType ref="type.7406824"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="7389703"/>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="7389573"/>
            </content>
        </type>
        <type derived="true" id="type.5214">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5250">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5332">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7406719" specialization="true">
            <name>List&lt;int></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7388900"/>
            </content>
        </type>
        <type derived="true" id="type.7406721">
            <name>List&lt;int>&amp;</name>
            <content>
                <baseType ref="type.7406719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406741">
            <name>List&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406719"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406720">
            <name>List&lt;int>*</name>
            <content>
                <baseType ref="type.7406719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5613">
            <name>Literal&amp;&amp;</name>
            <content>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1" specialization="true">
            <name>LockGuard&lt;Mtx></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="7389598"/>
            </content>
        </type>
        <type derived="true" id="type.5238">
            <name>LockGuard&lt;Mtx>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394867" specialization="true">
            <name>LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.5425">
            <name>LockGuard&lt;System.Threading.Mutex>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394867"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5646">
            <name>LvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5235">
            <name>Mtx&amp;</name>
            <content>
                <baseType ref="7389598"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5608">
            <name>New&amp;&amp;</name>
            <content>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57">
            <name>Nfa</name>
        </type>
        <type derived="true" id="type.7406058">
            <name>Nfa&amp;</name>
            <content>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406908">
            <name>Nfa&amp;&amp;</name>
            <content>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406057">
            <name>Nfa*</name>
            <content>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662">
            <name>NfaState</name>
        </type>
        <type derived="true" id="type.7406052">
            <name>NfaState&amp;</name>
            <content>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406790">
            <name>NfaState&amp;&amp;</name>
            <content>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406051">
            <name>NfaState*</name>
            <content>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406921">
            <name>NfaState*&amp;</name>
            <content>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406920">
            <name>NfaState**</name>
            <content>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3">
            <name>NfaStateNumberSet</name>
        </type>
        <type derived="true" id="type.7406046">
            <name>NfaStateNumberSet&amp;</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406763">
            <name>NfaStateNumberSet&amp;&amp;</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406045">
            <name>NfaStateNumberSet*</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406915">
            <name>NfaStateNumberSet*&amp;</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406916">
            <name>NfaStateNumberSet*&amp;&amp;</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406914">
            <name>NfaStateNumberSet**</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5566">
            <name>Not&amp;&amp;</name>
            <content>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5654">
            <name>OptionalParser&amp;&amp;</name>
            <content>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7389712">
            <name>OutputStream&amp;</name>
            <content>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.7406531" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.7406519"/>
                <argumentType ref="type.7388895"/>
            </content>
        </type>
        <type id="type.5470" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.5458"/>
                <argumentType ref="type.7388895"/>
            </content>
        </type>
        <type id="type.7406531" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.7406519"/>
                <argumentType ref="type.7388895"/>
            </content>
        </type>
        <type derived="true" id="type.7406533">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.7406531"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5472">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.5470"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406533">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.7406531"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5471">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.5470"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406532">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.7406531"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="7389609"/>
                <argumentType ref="7389610"/>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="7389609"/>
                <argumentType ref="7389610"/>
            </content>
        </type>
        <type derived="true" id="type.5093">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405987">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405986">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5092">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405986">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5667">
            <name>ParsingData&amp;&amp;</name>
            <content>
                <baseType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405989">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5095">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405989">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405988">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5094">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405988">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7397134">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5648">
            <name>Pointer&amp;&amp;</name>
            <content>
                <baseType ref="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5657">
            <name>PositiveParser&amp;&amp;</name>
            <content>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5596">
            <name>PostfixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_PostfixExpressionRule_54839DB8B1E97899D69C4D4C08ADD8922DA2C262">
            <name>PostfixExpressionRule</name>
        </type>
        <type derived="true" id="type.7406116">
            <name>PostfixExpressionRule&amp;</name>
            <content>
                <baseType ref="class_PostfixExpressionRule_54839DB8B1E97899D69C4D4C08ADD8922DA2C262"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406115">
            <name>PostfixExpressionRule*</name>
            <content>
                <baseType ref="class_PostfixExpressionRule_54839DB8B1E97899D69C4D4C08ADD8922DA2C262"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407056">
            <name>PostfixExpressionRule*&amp;</name>
            <content>
                <baseType ref="class_PostfixExpressionRule_54839DB8B1E97899D69C4D4C08ADD8922DA2C262"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407055">
            <name>PostfixExpressionRule**</name>
            <content>
                <baseType ref="class_PostfixExpressionRule_54839DB8B1E97899D69C4D4C08ADD8922DA2C262"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5593">
            <name>PostfixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5578">
            <name>PrefixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5575">
            <name>PrefixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_PrimaryExpressionRule_06E24805A354F46D89064514E21FF94363E8A751">
            <name>PrimaryExpressionRule</name>
        </type>
        <type derived="true" id="type.7406122">
            <name>PrimaryExpressionRule&amp;</name>
            <content>
                <baseType ref="class_PrimaryExpressionRule_06E24805A354F46D89064514E21FF94363E8A751"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406121">
            <name>PrimaryExpressionRule*</name>
            <content>
                <baseType ref="class_PrimaryExpressionRule_06E24805A354F46D89064514E21FF94363E8A751"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407061">
            <name>PrimaryExpressionRule*&amp;</name>
            <content>
                <baseType ref="class_PrimaryExpressionRule_06E24805A354F46D89064514E21FF94363E8A751"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407060">
            <name>PrimaryExpressionRule**</name>
            <content>
                <baseType ref="class_PrimaryExpressionRule_06E24805A354F46D89064514E21FF94363E8A751"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB">
            <name>PtrNfa</name>
        </type>
        <type derived="true" id="type.7406082">
            <name>PtrNfa&amp;</name>
            <content>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406923">
            <name>PtrNfa&amp;&amp;</name>
            <content>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406081">
            <name>PtrNfa*</name>
            <content>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3">
            <name>PtrNfaEdge</name>
        </type>
        <type derived="true" id="type.7406073">
            <name>PtrNfaEdge&amp;</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406823">
            <name>PtrNfaEdge&amp;&amp;</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406072">
            <name>PtrNfaEdge*</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407008">
            <name>PtrNfaEdge*&amp;</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407009">
            <name>PtrNfaEdge*&amp;&amp;</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407007">
            <name>PtrNfaEdge**</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8">
            <name>PtrNfaState</name>
        </type>
        <type derived="true" id="type.7406067">
            <name>PtrNfaState&amp;</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406066">
            <name>PtrNfaState*</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406860">
            <name>PtrNfaState*&amp;</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406870">
            <name>PtrNfaState*&amp;&amp;</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406861">
            <name>PtrNfaState**</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406898">
            <name>PtrNfaState**&amp;</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406899">
            <name>PtrNfaState**&amp;&amp;</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406897">
            <name>PtrNfaState***</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2">
            <name>PtrNfaStateFactory</name>
        </type>
        <type derived="true" id="type.7406079">
            <name>PtrNfaStateFactory&amp;</name>
            <content>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406078">
            <name>PtrNfaStateFactory*</name>
            <content>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407016">
            <name>PtrNfaStateFactory*&amp;</name>
            <content>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407015">
            <name>PtrNfaStateFactory**</name>
            <content>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7398795" specialization="true">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396991"/>
                <argumentType ref="type.7398793"/>
                <argumentType ref="type.7398794"/>
            </content>
        </type>
        <type derived="true" id="type.5490">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398795"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393708" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389818"/>
                <argumentType ref="type.7393551"/>
                <argumentType ref="type.7393707"/>
            </content>
        </type>
        <type derived="true" id="type.5382">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393708"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394748" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389889"/>
                <argumentType ref="type.7394591"/>
                <argumentType ref="type.7394747"/>
            </content>
        </type>
        <type derived="true" id="type.5407">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394748"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394332" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389863"/>
                <argumentType ref="type.7394175"/>
                <argumentType ref="type.7394331"/>
            </content>
        </type>
        <type derived="true" id="type.5397">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394332"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394540" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389876"/>
                <argumentType ref="type.7394383"/>
                <argumentType ref="type.7394539"/>
            </content>
        </type>
        <type derived="true" id="type.5402">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394540"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393071" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389788"/>
                <argumentType ref="type.7392900"/>
                <argumentType ref="type.7393070"/>
            </content>
        </type>
        <type derived="true" id="type.5367">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393289" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389798"/>
                <argumentType ref="type.7393132"/>
                <argumentType ref="type.7393288"/>
            </content>
        </type>
        <type derived="true" id="type.5372">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393289"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398337" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398304"/>
                <argumentType ref="type.7398335"/>
                <argumentType ref="type.7398336"/>
            </content>
        </type>
        <type derived="true" id="type.5457">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398337"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398328" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398304"/>
                <argumentType ref="type.7398326"/>
                <argumentType ref="type.7398327"/>
            </content>
        </type>
        <type derived="true" id="type.5456">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398328"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390837" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390802"/>
                <argumentType ref="type.7390835"/>
                <argumentType ref="type.7390836"/>
            </content>
        </type>
        <type id="type.7390915" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390881"/>
                <argumentType ref="type.7390913"/>
                <argumentType ref="type.7390914"/>
            </content>
        </type>
        <type derived="true" id="type.5189">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390915"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5184">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390837"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390828" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390802"/>
                <argumentType ref="type.7390826"/>
                <argumentType ref="type.7390827"/>
            </content>
        </type>
        <type id="type.7390906" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390881"/>
                <argumentType ref="type.7390904"/>
                <argumentType ref="type.7390905"/>
            </content>
        </type>
        <type id="type.7390828" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390802"/>
                <argumentType ref="type.7390826"/>
                <argumentType ref="type.7390827"/>
            </content>
        </type>
        <type derived="true" id="type.5188">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390906"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5183">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390828"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393685" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393651"/>
                <argumentType ref="type.7393683"/>
                <argumentType ref="type.7393684"/>
            </content>
        </type>
        <type derived="true" id="type.5381">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393685"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393676" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393651"/>
                <argumentType ref="type.7393674"/>
                <argumentType ref="type.7393675"/>
            </content>
        </type>
        <type derived="true" id="type.5380">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393676"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394725" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394691"/>
                <argumentType ref="type.7394723"/>
                <argumentType ref="type.7394724"/>
            </content>
        </type>
        <type derived="true" id="type.5406">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394725"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394716" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394691"/>
                <argumentType ref="type.7394714"/>
                <argumentType ref="type.7394715"/>
            </content>
        </type>
        <type derived="true" id="type.5405">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394716"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394309" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394275"/>
                <argumentType ref="type.7394307"/>
                <argumentType ref="type.7394308"/>
            </content>
        </type>
        <type derived="true" id="type.5396">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394300" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394275"/>
                <argumentType ref="type.7394298"/>
                <argumentType ref="type.7394299"/>
            </content>
        </type>
        <type derived="true" id="type.5395">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394300"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394517" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394483"/>
                <argumentType ref="type.7394515"/>
                <argumentType ref="type.7394516"/>
            </content>
        </type>
        <type derived="true" id="type.5401">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394517"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394508" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394483"/>
                <argumentType ref="type.7394506"/>
                <argumentType ref="type.7394507"/>
            </content>
        </type>
        <type derived="true" id="type.5400">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394508"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393055" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393021"/>
                <argumentType ref="type.7393053"/>
                <argumentType ref="type.7393054"/>
            </content>
        </type>
        <type derived="true" id="type.5366">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393046" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393021"/>
                <argumentType ref="type.7393044"/>
                <argumentType ref="type.7393045"/>
            </content>
        </type>
        <type derived="true" id="type.5365">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393046"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393266" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393232"/>
                <argumentType ref="type.7393264"/>
                <argumentType ref="type.7393265"/>
            </content>
        </type>
        <type derived="true" id="type.5371">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393266"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393257" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393232"/>
                <argumentType ref="type.7393255"/>
                <argumentType ref="type.7393256"/>
            </content>
        </type>
        <type derived="true" id="type.5370">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393257"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393477" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393443"/>
                <argumentType ref="type.7393475"/>
                <argumentType ref="type.7393476"/>
            </content>
        </type>
        <type derived="true" id="type.5376">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393477"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393468" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393443"/>
                <argumentType ref="type.7393466"/>
                <argumentType ref="type.7393467"/>
            </content>
        </type>
        <type derived="true" id="type.5375">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393468"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394101" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394067"/>
                <argumentType ref="type.7394099"/>
                <argumentType ref="type.7394100"/>
            </content>
        </type>
        <type derived="true" id="type.5391">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394101"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394092" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394067"/>
                <argumentType ref="type.7394090"/>
                <argumentType ref="type.7394091"/>
            </content>
        </type>
        <type derived="true" id="type.5390">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394092"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393893" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393859"/>
                <argumentType ref="type.7393891"/>
                <argumentType ref="type.7393892"/>
            </content>
        </type>
        <type derived="true" id="type.5386">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393893"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393884" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393859"/>
                <argumentType ref="type.7393882"/>
                <argumentType ref="type.7393883"/>
            </content>
        </type>
        <type derived="true" id="type.5385">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393884"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398583" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398549"/>
                <argumentType ref="type.7398581"/>
                <argumentType ref="type.7398582"/>
            </content>
        </type>
        <type derived="true" id="type.5481">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398583"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398574" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398549"/>
                <argumentType ref="type.7398572"/>
                <argumentType ref="type.7398573"/>
            </content>
        </type>
        <type derived="true" id="type.5480">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398574"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398659" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398625"/>
                <argumentType ref="type.7398657"/>
                <argumentType ref="type.7398658"/>
            </content>
        </type>
        <type derived="true" id="type.5483">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398659"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398650" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398625"/>
                <argumentType ref="type.7398648"/>
                <argumentType ref="type.7398649"/>
            </content>
        </type>
        <type derived="true" id="type.5482">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398650"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398906" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398872"/>
                <argumentType ref="type.7398904"/>
                <argumentType ref="type.7398905"/>
            </content>
        </type>
        <type derived="true" id="type.5493">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398906"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398897" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398872"/>
                <argumentType ref="type.7398895"/>
                <argumentType ref="type.7398896"/>
            </content>
        </type>
        <type derived="true" id="type.5492">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398897"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398149" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398115"/>
                <argumentType ref="type.7398147"/>
                <argumentType ref="type.7398148"/>
            </content>
        </type>
        <type derived="true" id="type.5452">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398149"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398140" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398115"/>
                <argumentType ref="type.7398138"/>
                <argumentType ref="type.7398139"/>
            </content>
        </type>
        <type derived="true" id="type.5451">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398140"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393609" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393575"/>
                <argumentType ref="type.7393607"/>
                <argumentType ref="type.7393608"/>
            </content>
        </type>
        <type derived="true" id="type.5379">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393609"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393600" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393575"/>
                <argumentType ref="type.7393598"/>
                <argumentType ref="type.7393599"/>
            </content>
        </type>
        <type derived="true" id="type.5378">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393600"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394649" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394615"/>
                <argumentType ref="type.7394647"/>
                <argumentType ref="type.7394648"/>
            </content>
        </type>
        <type derived="true" id="type.5404">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394649"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394640" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394615"/>
                <argumentType ref="type.7394638"/>
                <argumentType ref="type.7394639"/>
            </content>
        </type>
        <type derived="true" id="type.5403">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394640"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394233" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394199"/>
                <argumentType ref="type.7394231"/>
                <argumentType ref="type.7394232"/>
            </content>
        </type>
        <type derived="true" id="type.5394">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394233"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394224" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394199"/>
                <argumentType ref="type.7394222"/>
                <argumentType ref="type.7394223"/>
            </content>
        </type>
        <type derived="true" id="type.5393">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394224"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394441" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394407"/>
                <argumentType ref="type.7394439"/>
                <argumentType ref="type.7394440"/>
            </content>
        </type>
        <type derived="true" id="type.5399">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394441"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394432" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394407"/>
                <argumentType ref="type.7394430"/>
                <argumentType ref="type.7394431"/>
            </content>
        </type>
        <type derived="true" id="type.5398">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394432"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392958" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7392924"/>
                <argumentType ref="type.7392956"/>
                <argumentType ref="type.7392957"/>
            </content>
        </type>
        <type derived="true" id="type.5364">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392958"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392949" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7392924"/>
                <argumentType ref="type.7392947"/>
                <argumentType ref="type.7392948"/>
            </content>
        </type>
        <type derived="true" id="type.5363">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392949"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393190" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393156"/>
                <argumentType ref="type.7393188"/>
                <argumentType ref="type.7393189"/>
            </content>
        </type>
        <type derived="true" id="type.5369">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393190"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393181" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393156"/>
                <argumentType ref="type.7393179"/>
                <argumentType ref="type.7393180"/>
            </content>
        </type>
        <type derived="true" id="type.5368">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393181"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393401" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393367"/>
                <argumentType ref="type.7393399"/>
                <argumentType ref="type.7393400"/>
            </content>
        </type>
        <type derived="true" id="type.5374">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393401"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393392" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393367"/>
                <argumentType ref="type.7393390"/>
                <argumentType ref="type.7393391"/>
            </content>
        </type>
        <type derived="true" id="type.5373">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394025" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393991"/>
                <argumentType ref="type.7394023"/>
                <argumentType ref="type.7394024"/>
            </content>
        </type>
        <type derived="true" id="type.5389">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394025"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394016" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393991"/>
                <argumentType ref="type.7394014"/>
                <argumentType ref="type.7394015"/>
            </content>
        </type>
        <type derived="true" id="type.5388">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394016"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393817" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393783"/>
                <argumentType ref="type.7393815"/>
                <argumentType ref="type.7393816"/>
            </content>
        </type>
        <type derived="true" id="type.5384">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393817"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393808" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393783"/>
                <argumentType ref="type.7393806"/>
                <argumentType ref="type.7393807"/>
            </content>
        </type>
        <type derived="true" id="type.5383">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393808"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398421" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398389"/>
                <argumentType ref="type.7398419"/>
                <argumentType ref="type.7398420"/>
            </content>
        </type>
        <type derived="true" id="type.5474">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398421"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398412" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398389"/>
                <argumentType ref="type.7398410"/>
                <argumentType ref="type.7398411"/>
            </content>
        </type>
        <type derived="true" id="type.5473">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398412"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390990" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390956"/>
                <argumentType ref="type.7390988"/>
                <argumentType ref="type.7390989"/>
            </content>
        </type>
        <type id="type.7391064" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391030"/>
                <argumentType ref="type.7391062"/>
                <argumentType ref="type.7391063"/>
            </content>
        </type>
        <type derived="true" id="type.5192">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5196">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391055" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391030"/>
                <argumentType ref="type.7391053"/>
                <argumentType ref="type.7391054"/>
            </content>
        </type>
        <type id="type.7390981" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390956"/>
                <argumentType ref="type.7390979"/>
                <argumentType ref="type.7390980"/>
            </content>
        </type>
        <type id="type.7391055" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391030"/>
                <argumentType ref="type.7391053"/>
                <argumentType ref="type.7391054"/>
            </content>
        </type>
        <type derived="true" id="type.5191">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5195">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391175" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391139"/>
                <argumentType ref="type.7391173"/>
                <argumentType ref="type.7391174"/>
            </content>
        </type>
        <type derived="true" id="type.5205">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391175"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391166" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391139"/>
                <argumentType ref="type.7391164"/>
                <argumentType ref="type.7391165"/>
            </content>
        </type>
        <type derived="true" id="type.5204">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391166"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389731"/>
                <argumentType ref="type.7392750"/>
                <argumentType ref="type.7392751"/>
            </content>
        </type>
        <type derived="true" id="type.5360">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5334">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5348">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5340">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5352">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5356">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5344">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389731"/>
                <argumentType ref="type.7392736"/>
                <argumentType ref="type.7392734"/>
            </content>
        </type>
        <type derived="true" id="type.5355">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5333">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5351">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5339">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5343">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5347">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5359">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393500" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389808"/>
                <argumentType ref="type.7393343"/>
                <argumentType ref="type.7393499"/>
            </content>
        </type>
        <type derived="true" id="type.5377">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393500"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398686" specialization="true">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7397096"/>
                <argumentType ref="type.7398601"/>
                <argumentType ref="type.7398682"/>
            </content>
        </type>
        <type derived="true" id="type.5484">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398686"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398821" specialization="true">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7397104"/>
                <argumentType ref="type.7398819"/>
                <argumentType ref="type.7398820"/>
            </content>
        </type>
        <type derived="true" id="type.5491">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398821"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394117" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389850"/>
                <argumentType ref="type.7393967"/>
                <argumentType ref="type.7394116"/>
            </content>
        </type>
        <type derived="true" id="type.5392">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394117"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7406862" specialization="true">
            <name>RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7406066"/>
                <argumentType ref="type.7406860"/>
                <argumentType ref="type.7406861"/>
            </content>
        </type>
        <type derived="true" id="type.7406864">
            <name>RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**>&amp;</name>
            <content>
                <baseType ref="type.7406862"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406868">
            <name>RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406862"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406863">
            <name>RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**>*</name>
            <content>
                <baseType ref="type.7406862"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406853" specialization="true">
            <name>RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7406066"/>
                <argumentType ref="type.7406851"/>
                <argumentType ref="type.7406852"/>
            </content>
        </type>
        <type derived="true" id="type.7406855">
            <name>RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**>&amp;</name>
            <content>
                <baseType ref="type.7406853"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406859">
            <name>RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406853"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406854">
            <name>RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**>*</name>
            <content>
                <baseType ref="type.7406853"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7398234" specialization="true">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7397335"/>
                <argumentType ref="type.7398232"/>
                <argumentType ref="type.7398233"/>
            </content>
        </type>
        <type derived="true" id="type.5455">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398234"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393916" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389831"/>
                <argumentType ref="type.7393759"/>
                <argumentType ref="type.7393915"/>
            </content>
        </type>
        <type derived="true" id="type.5387">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393916"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392679" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392642"/>
                <argumentType ref="type.7392641"/>
            </content>
        </type>
        <type id="type.7392632" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392595"/>
                <argumentType ref="type.7392594"/>
            </content>
        </type>
        <type id="type.7392538" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392501"/>
                <argumentType ref="type.7392500"/>
            </content>
        </type>
        <type id="type.7392726" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392689"/>
                <argumentType ref="type.7392688"/>
            </content>
        </type>
        <type id="type.7392773" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392739"/>
                <argumentType ref="type.7392738"/>
            </content>
        </type>
        <type id="type.7392538" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392501"/>
                <argumentType ref="type.7392500"/>
            </content>
        </type>
        <type id="type.7392585" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392548"/>
                <argumentType ref="type.7392547"/>
            </content>
        </type>
        <type id="type.7392820" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392783"/>
                <argumentType ref="type.7392782"/>
            </content>
        </type>
        <type derived="true" id="type.5342">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392585"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5350">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392679"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5354">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392726"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5337">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392538"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5358">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392773"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5346">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392632"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5362">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392719" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392692"/>
                <argumentType ref="type.7392691"/>
            </content>
        </type>
        <type id="type.7392531" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392504"/>
                <argumentType ref="type.7392503"/>
            </content>
        </type>
        <type id="type.7392578" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392551"/>
                <argumentType ref="type.7392550"/>
            </content>
        </type>
        <type id="type.7392672" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392645"/>
                <argumentType ref="type.7392644"/>
            </content>
        </type>
        <type id="type.7392766" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392742"/>
                <argumentType ref="type.7392741"/>
            </content>
        </type>
        <type id="type.7392813" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392786"/>
                <argumentType ref="type.7392785"/>
            </content>
        </type>
        <type id="type.7392625" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392598"/>
                <argumentType ref="type.7392597"/>
            </content>
        </type>
        <type id="type.7392766" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392742"/>
                <argumentType ref="type.7392741"/>
            </content>
        </type>
        <type derived="true" id="type.5341">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392578"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5353">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392719"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5336">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392531"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5357">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392766"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5361">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392813"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5349">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392672"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5345">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392625"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390071" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390036"/>
                <argumentType ref="type.7390038"/>
                <argumentType ref="type.7390037"/>
            </content>
        </type>
        <type derived="true" id="type.5106">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390064" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390036"/>
                <argumentType ref="type.7390041"/>
                <argumentType ref="type.7390040"/>
            </content>
        </type>
        <type derived="true" id="type.5105">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390161" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390126"/>
                <argumentType ref="type.7390125"/>
            </content>
        </type>
        <type derived="true" id="type.5125">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390161"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390154" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390129"/>
                <argumentType ref="type.7390128"/>
            </content>
        </type>
        <type derived="true" id="type.5124">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390154"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390116" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390079"/>
                <argumentType ref="type.7390081"/>
                <argumentType ref="type.7390080"/>
            </content>
        </type>
        <type derived="true" id="type.5115">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390116"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390109" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390079"/>
                <argumentType ref="type.7390084"/>
                <argumentType ref="type.7390083"/>
            </content>
        </type>
        <type derived="true" id="type.5114">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390109"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398771" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_AttrOrVar_50B6EF23E232C2A406B7F5C94499D4CC0CC6D353"/>
                <argumentType ref="type.7397327"/>
                <argumentType ref="type.7397326"/>
            </content>
        </type>
        <type derived="true" id="type.5489">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398771"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398757" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.7397162"/>
                <argumentType ref="type.7397161"/>
            </content>
        </type>
        <type derived="true" id="type.5488">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398757"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398750" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.7397165"/>
                <argumentType ref="type.7397164"/>
            </content>
        </type>
        <type derived="true" id="type.5487">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398508" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.7398490"/>
                <argumentType ref="type.7398489"/>
            </content>
        </type>
        <type derived="true" id="type.5479">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398508"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398501" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.7398498"/>
                <argumentType ref="type.7398499"/>
            </content>
        </type>
        <type derived="true" id="type.5478">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398501"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7406782" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <argumentType ref="type.7406034"/>
                <argumentType ref="type.7406033"/>
            </content>
        </type>
        <type derived="true" id="type.7406784">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*>&amp;</name>
            <content>
                <baseType ref="type.7406782"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5528">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406782"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406783">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*>*</name>
            <content>
                <baseType ref="type.7406782"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406775" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <argumentType ref="type.7406037"/>
                <argumentType ref="type.7406036"/>
            </content>
        </type>
        <type derived="true" id="type.7406777">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*>&amp;</name>
            <content>
                <baseType ref="type.7406775"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5527">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406775"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406776">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*>*</name>
            <content>
                <baseType ref="type.7406775"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406804" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <argumentType ref="type.7406052"/>
                <argumentType ref="type.7406051"/>
            </content>
        </type>
        <type derived="true" id="type.7406806">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*>&amp;</name>
            <content>
                <baseType ref="type.7406804"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5529">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406804"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406805">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*>*</name>
            <content>
                <baseType ref="type.7406804"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406797" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <argumentType ref="type.7406055"/>
                <argumentType ref="type.7406054"/>
            </content>
        </type>
        <type derived="true" id="type.7406799">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*>&amp;</name>
            <content>
                <baseType ref="type.7406797"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406803">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406797"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406798">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*>*</name>
            <content>
                <baseType ref="type.7406797"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406755" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <argumentType ref="type.7406046"/>
                <argumentType ref="type.7406045"/>
            </content>
        </type>
        <type derived="true" id="type.7406757">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*>&amp;</name>
            <content>
                <baseType ref="type.7406755"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5526">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406755"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406756">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*>*</name>
            <content>
                <baseType ref="type.7406755"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406748" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <argumentType ref="type.7406049"/>
                <argumentType ref="type.7406048"/>
            </content>
        </type>
        <type derived="true" id="type.7406750">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*>&amp;</name>
            <content>
                <baseType ref="type.7406748"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406754">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406748"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406749">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*>*</name>
            <content>
                <baseType ref="type.7406748"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406837" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <argumentType ref="type.7406073"/>
                <argumentType ref="type.7406072"/>
            </content>
        </type>
        <type derived="true" id="type.7406839">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*>&amp;</name>
            <content>
                <baseType ref="type.7406837"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406843">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406837"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406838">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*>*</name>
            <content>
                <baseType ref="type.7406837"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406830" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <argumentType ref="type.7406076"/>
                <argumentType ref="type.7406075"/>
            </content>
        </type>
        <type derived="true" id="type.7406832">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*>&amp;</name>
            <content>
                <baseType ref="type.7406830"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406836">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406830"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406831">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*>*</name>
            <content>
                <baseType ref="type.7406830"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7394778" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.7389902"/>
                <argumentType ref="type.7389901"/>
            </content>
        </type>
        <type derived="true" id="type.5409">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394778"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394771" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.7389905"/>
                <argumentType ref="type.7389904"/>
            </content>
        </type>
        <type derived="true" id="type.5408">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394771"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389621"/>
                <argumentType ref="7389622"/>
                <argumentType ref="7389623"/>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389639"/>
                <argumentType ref="7389640"/>
                <argumentType ref="7389641"/>
            </content>
        </type>
        <type derived="true" id="type.5255">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5251">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5252">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5253">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5254">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5256">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5257">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389574"/>
                <argumentType ref="type.7391397"/>
                <argumentType ref="type.7391398"/>
            </content>
        </type>
        <type derived="true" id="type.5249">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5331">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5213">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5217">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5219">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389619"/>
                <argumentType ref="type.7391606"/>
                <argumentType ref="type.7391614"/>
            </content>
        </type>
        <type derived="true" id="type.5212">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5330">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5216">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5218">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5248">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396806" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396790"/>
                <argumentType ref="type.7396795"/>
                <argumentType ref="type.7396794"/>
            </content>
        </type>
        <type derived="true" id="type.5440">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396806"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396866" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396850"/>
                <argumentType ref="type.7396855"/>
                <argumentType ref="type.7396854"/>
            </content>
        </type>
        <type derived="true" id="type.5441">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396866"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396705" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396665"/>
                <argumentType ref="type.7396670"/>
                <argumentType ref="type.7396669"/>
            </content>
        </type>
        <type derived="true" id="type.5438">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396705"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396757" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396744"/>
                <argumentType ref="type.7396749"/>
                <argumentType ref="type.7396748"/>
            </content>
        </type>
        <type derived="true" id="type.5439">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396757"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398474" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398452"/>
                <argumentType ref="type.7398457"/>
                <argumentType ref="type.7398456"/>
            </content>
        </type>
        <type derived="true" id="type.5477">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398474"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398047" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398025"/>
                <argumentType ref="type.7398030"/>
                <argumentType ref="type.7398029"/>
            </content>
        </type>
        <type derived="true" id="type.5450">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398732" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398712"/>
                <argumentType ref="type.7398714"/>
                <argumentType ref="type.7398713"/>
            </content>
        </type>
        <type derived="true" id="type.5486">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398732"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398725" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7398712"/>
                <argumentType ref="type.7398717"/>
                <argumentType ref="type.7398716"/>
            </content>
        </type>
        <type derived="true" id="type.5485">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398725"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398017" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7397997"/>
                <argumentType ref="type.7397999"/>
                <argumentType ref="type.7397998"/>
            </content>
        </type>
        <type derived="true" id="type.5449">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398017"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398010" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7397997"/>
                <argumentType ref="type.7398002"/>
                <argumentType ref="type.7398001"/>
            </content>
        </type>
        <type derived="true" id="type.5448">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398010"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394807" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394787"/>
                <argumentType ref="type.7394789"/>
                <argumentType ref="type.7394788"/>
            </content>
        </type>
        <type derived="true" id="type.5411">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394807"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394800" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394787"/>
                <argumentType ref="type.7394792"/>
                <argumentType ref="type.7394791"/>
            </content>
        </type>
        <type derived="true" id="type.5410">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394800"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394903" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394883"/>
                <argumentType ref="type.7394885"/>
                <argumentType ref="type.7394884"/>
            </content>
        </type>
        <type derived="true" id="type.5427">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394903"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394896" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394883"/>
                <argumentType ref="type.7394888"/>
                <argumentType ref="type.7394887"/>
            </content>
        </type>
        <type derived="true" id="type.5426">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394896"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394835" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394815"/>
                <argumentType ref="type.7394817"/>
                <argumentType ref="type.7394816"/>
            </content>
        </type>
        <type derived="true" id="type.5413">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394835"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394828" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394815"/>
                <argumentType ref="type.7394820"/>
                <argumentType ref="type.7394819"/>
            </content>
        </type>
        <type derived="true" id="type.5412">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394828"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394938" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394918"/>
                <argumentType ref="type.7394920"/>
                <argumentType ref="type.7394919"/>
            </content>
        </type>
        <type derived="true" id="type.5429">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394938"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394931" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394918"/>
                <argumentType ref="type.7394923"/>
                <argumentType ref="type.7394922"/>
            </content>
        </type>
        <type derived="true" id="type.5428">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394931"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7397651" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.5227" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7396426" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7406287" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7391524" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type derived="true" id="type.7406289">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.7406287"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5229">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.5227"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406289">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.7406287"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5436">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396426"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5233">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5227"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5446">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397651"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5517">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406287"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5234">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391524"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406288">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.7406287"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5228">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.5227"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396297" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.7406158" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.5098" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.7406158" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.7397522" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type derived="true" id="type.7406160">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.7406158"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5100">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.5098"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406160">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.7406158"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5442">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397522"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5432">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396297"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5104">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5098"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406164">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406158"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5099">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.5098"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406159">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.7406158"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406727" specialization="true">
            <name>RandomAccessIter&lt;int, const int&amp;, const int*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388900"/>
                <argumentType ref="type.7398999"/>
                <argumentType ref="type.7406725"/>
            </content>
        </type>
        <type derived="true" id="type.7406729">
            <name>RandomAccessIter&lt;int, const int&amp;, const int*>&amp;</name>
            <content>
                <baseType ref="type.7406727"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406733">
            <name>RandomAccessIter&lt;int, const int&amp;, const int*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406727"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406728">
            <name>RandomAccessIter&lt;int, const int&amp;, const int*>*</name>
            <content>
                <baseType ref="type.7406727"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406734" specialization="true">
            <name>RandomAccessIter&lt;int, int&amp;, int*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388900"/>
                <argumentType ref="type.7388927"/>
                <argumentType ref="type.7388926"/>
            </content>
        </type>
        <type id="type.5519" specialization="true">
            <name>RandomAccessIter&lt;int, int&amp;, int*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388900"/>
                <argumentType ref="type.7388927"/>
                <argumentType ref="type.7388926"/>
            </content>
        </type>
        <type derived="true" id="type.7406736">
            <name>RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <baseType ref="type.7406734"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5521">
            <name>RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <baseType ref="type.5519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406736">
            <name>RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <baseType ref="type.7406734"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5525">
            <name>RandomAccessIter&lt;int, int&amp;, int*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5519"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406740">
            <name>RandomAccessIter&lt;int, int&amp;, int*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406734"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5520">
            <name>RandomAccessIter&lt;int, int&amp;, int*>*</name>
            <content>
                <baseType ref="type.5519"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406735">
            <name>RandomAccessIter&lt;int, int&amp;, int*>*</name>
            <content>
                <baseType ref="type.7406734"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396316" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.5117" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7406177" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7390140" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7406177" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7397541" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type derived="true" id="type.7406179">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.7406177"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5119">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.5117"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406179">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.7406177"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5444">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397541"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5434">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396316"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5126">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390140"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5123">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5117"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5515">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406177"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406178">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.7406177"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5118">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.5117"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7394852" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7394849"/>
                <argumentType ref="type.7394850"/>
            </content>
        </type>
        <type derived="true" id="type.5414">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394852"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394859" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7406476" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.5415" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7406476" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7396615" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7397840" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type derived="true" id="type.7406478">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.7406476"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5417">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.5415"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5518">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406476"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5447">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397840"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5422">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394859"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5421">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5415"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5437">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396615"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406477">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.7406476"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5416">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.5415"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390183" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7390180"/>
                <argumentType ref="type.7390181"/>
            </content>
        </type>
        <type derived="true" id="type.5127">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390183"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390190" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.5128" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7406188" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7396327" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7397552" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type derived="true" id="type.5130">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.5128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406190">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.7406188"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5134">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5128"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5445">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397552"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5435">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396327"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5135">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390190"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5516">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406188"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5129">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.5128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406189">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.7406188"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390095" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7397531" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.5107" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7396306" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7406167" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type derived="true" id="type.7406169">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.7406167"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5109">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.5107"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5514">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406167"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5113">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5107"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5116">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390095"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5443">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7397531"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5433">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396306"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5108">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.5107"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406168">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.7406167"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389580"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <argumentType ref="7389582"/>
            </content>
        </type>
        <type derived="true" id="type.5224">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389659"/>
                <argumentType ref="7389660"/>
                <argumentType ref="7389661"/>
                <argumentType ref="7389662"/>
            </content>
        </type>
        <type derived="true" id="type.5266">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389665"/>
                <argumentType ref="7389665"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="7389666"/>
            </content>
        </type>
        <type derived="true" id="type.5271">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405981">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5087">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5549">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5086">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405980">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7391488" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.7391449"/>
                <argumentType ref="type.7391448"/>
            </content>
        </type>
        <type derived="true" id="type.5223">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391488"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391470" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.7391459"/>
                <argumentType ref="type.7391468"/>
            </content>
        </type>
        <type derived="true" id="type.5222">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391470"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389652"/>
                <argumentType ref="7389653"/>
                <argumentType ref="7389654"/>
            </content>
        </type>
        <type derived="true" id="type.5263">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5262">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389669"/>
                <argumentType ref="type.7391914"/>
                <argumentType ref="type.7391916"/>
            </content>
        </type>
        <type derived="true" id="type.5270">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5276">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5274">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389669"/>
                <argumentType ref="type.7391891"/>
                <argumentType ref="type.7391900"/>
            </content>
        </type>
        <type derived="true" id="type.5273">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5269">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5275">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389660"/>
                <argumentType ref="type.7391741"/>
                <argumentType ref="type.7391743"/>
            </content>
        </type>
        <type derived="true" id="type.5265">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389660"/>
                <argumentType ref="type.7391726"/>
                <argumentType ref="type.7391727"/>
            </content>
        </type>
        <type derived="true" id="type.5264">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F">
            <name>RegEx</name>
        </type>
        <type derived="true" id="type.7406089">
            <name>RegEx&amp;</name>
            <content>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5672">
            <name>RegEx&amp;&amp;</name>
            <content>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406088">
            <name>RegEx*</name>
            <content>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603">
            <name>RegExFlags</name>
        </type>
        <type derived="true" id="type.7406888">
            <name>RegExFlags&amp;</name>
            <content>
                <baseType ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406889">
            <name>RegExFlags&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406887">
            <name>RegExFlags*</name>
            <content>
                <baseType ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC">
            <name>RegExParser</name>
        </type>
        <type derived="true" id="type.7406064">
            <name>RegExParser&amp;</name>
            <content>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406814">
            <name>RegExParser&amp;&amp;</name>
            <content>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406063">
            <name>RegExParser*</name>
            <content>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407001">
            <name>RegExParser*&amp;</name>
            <content>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407000">
            <name>RegExParser**</name>
            <content>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22">
            <name>RegularExpressionGrammar</name>
        </type>
        <type derived="true" id="type.7406095">
            <name>RegularExpressionGrammar&amp;</name>
            <content>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5675">
            <name>RegularExpressionGrammar&amp;&amp;</name>
            <content>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406094">
            <name>RegularExpressionGrammar*</name>
            <content>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407004">
            <name>RegularExpressionGrammar*&amp;</name>
            <content>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407003">
            <name>RegularExpressionGrammar**</name>
            <content>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_RegularExpressionRule_2B13F70B2A4FF7C115CB38005FA00CC5A61A8284">
            <name>RegularExpressionRule</name>
        </type>
        <type derived="true" id="type.7406098">
            <name>RegularExpressionRule&amp;</name>
            <content>
                <baseType ref="class_RegularExpressionRule_2B13F70B2A4FF7C115CB38005FA00CC5A61A8284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406097">
            <name>RegularExpressionRule*</name>
            <content>
                <baseType ref="class_RegularExpressionRule_2B13F70B2A4FF7C115CB38005FA00CC5A61A8284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407040">
            <name>RegularExpressionRule*&amp;</name>
            <content>
                <baseType ref="class_RegularExpressionRule_2B13F70B2A4FF7C115CB38005FA00CC5A61A8284"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407039">
            <name>RegularExpressionRule**</name>
            <content>
                <baseType ref="class_RegularExpressionRule_2B13F70B2A4FF7C115CB38005FA00CC5A61A8284"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406966" specialization="true">
            <name>Rel&lt;int></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="type.7388900"/>
            </content>
        </type>
        <type derived="true" id="type.7406974">
            <name>Rel&lt;int>&amp;</name>
            <content>
                <baseType ref="type.7406966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406978">
            <name>Rel&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406973">
            <name>Rel&lt;int>*</name>
            <content>
                <baseType ref="type.7406966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5617">
            <name>ReturnStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5647">
            <name>RvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_SequenceExpressionRule_60D359D8CE70B6B0937DCF203E2A5BCF6525CB46">
            <name>SequenceExpressionRule</name>
        </type>
        <type derived="true" id="type.7406110">
            <name>SequenceExpressionRule&amp;</name>
            <content>
                <baseType ref="class_SequenceExpressionRule_60D359D8CE70B6B0937DCF203E2A5BCF6525CB46"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406109">
            <name>SequenceExpressionRule*</name>
            <content>
                <baseType ref="class_SequenceExpressionRule_60D359D8CE70B6B0937DCF203E2A5BCF6525CB46"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407051">
            <name>SequenceExpressionRule*&amp;</name>
            <content>
                <baseType ref="class_SequenceExpressionRule_60D359D8CE70B6B0937DCF203E2A5BCF6525CB46"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407050">
            <name>SequenceExpressionRule**</name>
            <content>
                <baseType ref="class_SequenceExpressionRule_60D359D8CE70B6B0937DCF203E2A5BCF6525CB46"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076" specialization="true">
            <name>SharedCount&lt;T></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="7389698"/>
            </content>
        </type>
        <type derived="true" id="type.5315">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5321">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5299">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5293">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5283">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F" specialization="true">
            <name>SharedPtr&lt;T></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="7389690"/>
            </content>
        </type>
        <type derived="true" id="type.5323">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5301">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5316">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5599">
            <name>SizeOf&amp;&amp;</name>
            <content>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7406881" specialization="true">
            <name>Stack&lt;PtrNfaState*></name>
            <content>
                <primaryType ref="class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963"/>
                <argumentType ref="type.7406066"/>
            </content>
        </type>
        <type derived="true" id="type.7406886">
            <name>Stack&lt;PtrNfaState*>&amp;</name>
            <content>
                <baseType ref="type.7406881"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406885">
            <name>Stack&lt;PtrNfaState*>*</name>
            <content>
                <baseType ref="type.7406881"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406713" specialization="true">
            <name>Stack&lt;int></name>
            <content>
                <primaryType ref="class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963"/>
                <argumentType ref="type.7388900"/>
            </content>
        </type>
        <type derived="true" id="type.7406718">
            <name>Stack&lt;int>&amp;</name>
            <content>
                <baseType ref="type.7406713"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406717">
            <name>Stack&lt;int>*</name>
            <content>
                <baseType ref="type.7406713"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5614">
            <name>Statement&amp;&amp;</name>
            <content>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5536">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7389724">
            <name>StreamWriter&amp;</name>
            <content>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="7389726"/>
            </content>
        </type>
        <type derived="true" id="type.5335">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390036" specialization="true">
            <name>String&lt;char></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7388906"/>
            </content>
        </type>
        <type id="type.7390124" specialization="true">
            <name>String&lt;uchar></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7388908"/>
            </content>
        </type>
        <type derived="true" id="type.7390126">
            <name>String&lt;uchar>&amp;</name>
            <content>
                <baseType ref="type.7390124"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7390125">
            <name>String&lt;uchar>*</name>
            <content>
                <baseType ref="type.7390124"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5632">
            <name>SwitchStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5201">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389543"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5259">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5261">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5209">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389560"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5137">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389432"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5139">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5187">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5199">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5215">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="7389573"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5247">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="7389619"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5329">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="7389703"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5610">
            <name>TemplateId&amp;&amp;</name>
            <content>
                <baseType ref="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5638">
            <name>ThrowStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5666">
            <name>TokenParser&amp;&amp;</name>
            <content>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5641">
            <name>TryStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5562">
            <name>Type&amp;&amp;</name>
            <content>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5602">
            <name>TypeName&amp;&amp;</name>
            <content>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5584">
            <name>UnaryMinus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5581">
            <name>UnaryPlus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391499" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.7391476"/>
            </content>
        </type>
        <type derived="true" id="type.5225">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391499"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391814" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.5272">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391814"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391756" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
            </content>
        </type>
        <type derived="true" id="type.5268">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391756"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7395012" specialization="true">
            <name>UniquePtr&lt;System.Exception></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
            </content>
        </type>
        <type derived="true" id="type.5431">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.7395012"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398983" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ExpectationFailure_EBDBB0FC1DDED5BE7E15008622BB34AFCA7E9A8C"/>
            </content>
        </type>
        <type derived="true" id="type.5494">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398983"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398186" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
            </content>
        </type>
        <type derived="true" id="type.5453">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398186"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399109" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingException_71361E1F1BFEB5E7F55F5F6E472A696283973396"/>
            </content>
        </type>
        <type derived="true" id="type.5495">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399109"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7398193" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XmlLog_8F1C6843100321A56502C0710D6A400B6E4C7704"/>
            </content>
        </type>
        <type derived="true" id="type.5454">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog>&amp;&amp;</name>
            <content>
                <baseType ref="type.7398193"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7406871" specialization="true">
            <name>UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
            </content>
        </type>
        <type derived="true" id="type.7406873">
            <name>UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory>&amp;</name>
            <content>
                <baseType ref="type.7406871"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406877">
            <name>UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406871"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406872">
            <name>UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory>*</name>
            <content>
                <baseType ref="type.7406871"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7406815" specialization="true">
            <name>UniquePtr&lt;System.Text.RegularExpressions.RegExParser></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
            </content>
        </type>
        <type derived="true" id="type.7406817">
            <name>UniquePtr&lt;System.Text.RegularExpressions.RegExParser>&amp;</name>
            <content>
                <baseType ref="type.7406815"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406821">
            <name>UniquePtr&lt;System.Text.RegularExpressions.RegExParser>&amp;&amp;</name>
            <content>
                <baseType ref="type.7406815"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406816">
            <name>UniquePtr&lt;System.Text.RegularExpressions.RegExParser>*</name>
            <content>
                <baseType ref="type.7406815"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="7389934"/>
            </content>
        </type>
        <type derived="true" id="type.5430">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5226">
            <name>Value&amp;</name>
            <content>
                <baseType ref="7389581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399484" specialization="true">
            <name>ValueObject&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7390124"/>
            </content>
        </type>
        <type derived="true" id="type.5512">
            <name>ValueObject&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7407062" specialization="true">
            <name>ValueObject&lt;System.Text.RegularExpressions.CharClass></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
            </content>
        </type>
        <type derived="true" id="type.7407064">
            <name>ValueObject&lt;System.Text.RegularExpressions.CharClass>&amp;</name>
            <content>
                <baseType ref="type.7407062"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5531">
            <name>ValueObject&lt;System.Text.RegularExpressions.CharClass>&amp;&amp;</name>
            <content>
                <baseType ref="type.7407062"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407063">
            <name>ValueObject&lt;System.Text.RegularExpressions.CharClass>*</name>
            <content>
                <baseType ref="type.7407062"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7407079" specialization="true">
            <name>ValueObject&lt;System.Text.RegularExpressions.Class></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
            </content>
        </type>
        <type derived="true" id="type.7407081">
            <name>ValueObject&lt;System.Text.RegularExpressions.Class>&amp;</name>
            <content>
                <baseType ref="type.7407079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5533">
            <name>ValueObject&lt;System.Text.RegularExpressions.Class>&amp;&amp;</name>
            <content>
                <baseType ref="type.7407079"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407080">
            <name>ValueObject&lt;System.Text.RegularExpressions.Class>*</name>
            <content>
                <baseType ref="type.7407079"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7407029" specialization="true">
            <name>ValueObject&lt;System.Text.RegularExpressions.PtrNfa></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
            </content>
        </type>
        <type derived="true" id="type.7407031">
            <name>ValueObject&lt;System.Text.RegularExpressions.PtrNfa>&amp;</name>
            <content>
                <baseType ref="type.7407029"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5530">
            <name>ValueObject&lt;System.Text.RegularExpressions.PtrNfa>&amp;&amp;</name>
            <content>
                <baseType ref="type.7407029"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407030">
            <name>ValueObject&lt;System.Text.RegularExpressions.PtrNfa>*</name>
            <content>
                <baseType ref="type.7407029"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79" specialization="true">
            <name>ValueObject&lt;ValueType></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="7397113"/>
            </content>
        </type>
        <type derived="true" id="type.5476">
            <name>ValueObject&lt;ValueType>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399472" specialization="true">
            <name>ValueObject&lt;bool></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388895"/>
            </content>
        </type>
        <type derived="true" id="type.5511">
            <name>ValueObject&lt;bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399472"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399309" specialization="true">
            <name>ValueObject&lt;byte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388897"/>
            </content>
        </type>
        <type derived="true" id="type.5498">
            <name>ValueObject&lt;byte>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399448" specialization="true">
            <name>ValueObject&lt;double></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388905"/>
            </content>
        </type>
        <type derived="true" id="type.5510">
            <name>ValueObject&lt;double>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399448"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399434" specialization="true">
            <name>ValueObject&lt;float></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388904"/>
            </content>
        </type>
        <type derived="true" id="type.5508">
            <name>ValueObject&lt;float>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399434"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399350" specialization="true">
            <name>ValueObject&lt;int></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388900"/>
            </content>
        </type>
        <type derived="true" id="type.5503">
            <name>ValueObject&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399350"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399375" specialization="true">
            <name>ValueObject&lt;long></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388902"/>
            </content>
        </type>
        <type derived="true" id="type.5505">
            <name>ValueObject&lt;long>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399375"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399292" specialization="true">
            <name>ValueObject&lt;sbyte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388896"/>
            </content>
        </type>
        <type derived="true" id="type.5497">
            <name>ValueObject&lt;sbyte>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399292"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399322" specialization="true">
            <name>ValueObject&lt;short></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388898"/>
            </content>
        </type>
        <type derived="true" id="type.5500">
            <name>ValueObject&lt;short>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399322"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399501" specialization="true">
            <name>ValueObject&lt;uchar></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388908"/>
            </content>
        </type>
        <type derived="true" id="type.5513">
            <name>ValueObject&lt;uchar>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399501"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399362" specialization="true">
            <name>ValueObject&lt;uint></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388901"/>
            </content>
        </type>
        <type derived="true" id="type.5504">
            <name>ValueObject&lt;uint>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399362"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399387" specialization="true">
            <name>ValueObject&lt;ulong></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388903"/>
            </content>
        </type>
        <type derived="true" id="type.5506">
            <name>ValueObject&lt;ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399387"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7399336" specialization="true">
            <name>ValueObject&lt;ushort></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.7388899"/>
            </content>
        </type>
        <type derived="true" id="type.5502">
            <name>ValueObject&lt;ushort>&amp;&amp;</name>
            <content>
                <baseType ref="type.7399336"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F" specialization="true">
            <name>WeakCount&lt;T></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="7389686"/>
            </content>
        </type>
        <type derived="true" id="type.5300">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5322">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5314">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5292">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5284">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390026" specialization="true">
            <name>WeakPtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.5097">
            <name>WeakPtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390026"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC" specialization="true">
            <name>WeakPtr&lt;T></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="7389690"/>
            </content>
        </type>
        <type derived="true" id="type.5324">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5327">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5317">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5308">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5306">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5304">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5302">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021" specialization="true">
            <name>WeakPtr&lt;U></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="7389693"/>
            </content>
        </type>
        <type derived="true" id="type.5310">
            <name>WeakPtr&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388895">
            <name>bool</name>
        </type>
        <type basic="true" id="type.7388897">
            <name>byte</name>
        </type>
        <type derived="true" id="type.7388918">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.7388897"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388917">
            <name>byte*</name>
            <content>
                <baseType ref="type.7388897"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388906">
            <name>char</name>
        </type>
        <type derived="true" id="type.7388945">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.7388906"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388944">
            <name>char*</name>
            <content>
                <baseType ref="type.7388906"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5570">
            <name>const AddressOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
            </content>
        </type>
        <type derived="true" id="type.5571">
            <name>const AddressOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5642">
            <name>const AssertStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
            </content>
        </type>
        <type derived="true" id="type.5643">
            <name>const AssertStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406986">
            <name>const BinaryFun&lt;int, int, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406968"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406983">
            <name>const BinaryPred&lt;int, int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406967"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5537">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
            </content>
        </type>
        <type derived="true" id="type.5538">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5539">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
            </content>
        </type>
        <type derived="true" id="type.5540">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7389233">
            <name>const Bitset&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Bitset_BA1EE2E68426C5445CB6CAF7F957084ADAFD19CA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5541">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
            </content>
        </type>
        <type derived="true" id="type.5542">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.7406029">
            <name>const CharClass</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
            </content>
        </type>
        <type derived="true" id="type.7406031">
            <name>const CharClass&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406030">
            <name>const CharClass*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5532">
            <name>const Class&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5649">
            <name>const CodeExpandingVisitor</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
            </content>
        </type>
        <type derived="true" id="type.5650">
            <name>const CodeExpandingVisitor&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5585">
            <name>const Complement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
            </content>
        </type>
        <type derived="true" id="type.5586">
            <name>const Complement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5551">
            <name>const ConditionVariable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
            </content>
        </type>
        <type derived="true" id="type.5603">
            <name>const Construct</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
            </content>
        </type>
        <type derived="true" id="type.5604">
            <name>const Construct&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5556">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
            </content>
        </type>
        <type derived="true" id="type.5557">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5096">
            <name>const Counter&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390010"/>
            </content>
        </type>
        <type derived="true" id="type.5285">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5318">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5277">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5294">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5311">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5280">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5325">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5296">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5305">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5295">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5307">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5303">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5289">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5287">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5326">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5286">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5297">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5319">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5312">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5281">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5290">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5278">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5328">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.5288">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.5309">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.5621">
            <name>const DeleteStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
            </content>
        </type>
        <type derived="true" id="type.5622">
            <name>const DeleteStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5567">
            <name>const Deref</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
            </content>
        </type>
        <type derived="true" id="type.5568">
            <name>const Deref&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5624">
            <name>const DestroyStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
            </content>
        </type>
        <type derived="true" id="type.5625">
            <name>const DestroyStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406041">
            <name>const Dfa</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
            </content>
        </type>
        <type derived="true" id="type.7406043">
            <name>const Dfa&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406042">
            <name>const Dfa*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406035">
            <name>const DfaState</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
            </content>
        </type>
        <type derived="true" id="type.7406037">
            <name>const DfaState&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406036">
            <name>const DfaState*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7389394">
            <name>const Exception*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406948">
            <name>const Exception*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406949">
            <name>const Exception**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5661">
            <name>const ExpectationParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
            </content>
        </type>
        <type derived="true" id="type.5662">
            <name>const ExpectationParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5627">
            <name>const ExpressionStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
            </content>
        </type>
        <type derived="true" id="type.5628">
            <name>const ExpressionStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5543">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
            </content>
        </type>
        <type derived="true" id="type.5544">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5633">
            <name>const GotoCaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
            </content>
        </type>
        <type derived="true" id="type.5634">
            <name>const GotoCaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5618">
            <name>const GotoStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
            </content>
        </type>
        <type derived="true" id="type.5619">
            <name>const GotoStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5461">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5458"/>
            </content>
        </type>
        <type derived="true" id="type.7406522">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406519"/>
            </content>
        </type>
        <type derived="true" id="type.7406524">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5463">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5458"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5458"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406523">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406519"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5467">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5464"/>
            </content>
        </type>
        <type derived="true" id="type.7406528">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406525"/>
            </content>
        </type>
        <type derived="true" id="type.7406530">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406525"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5469">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5464"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406530">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406525"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406529">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406525"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5468">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5464"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406529">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406525"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5545">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
            </content>
        </type>
        <type derived="true" id="type.5546">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5588">
            <name>const Invoke</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
            </content>
        </type>
        <type derived="true" id="type.5589">
            <name>const Invoke&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5180">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5220">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5203">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389552"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5267">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389659"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5658">
            <name>const KleeneStarParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
            </content>
        </type>
        <type derived="true" id="type.5659">
            <name>const KleeneStarParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406963">
            <name>const Less&lt;int></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406962"/>
            </content>
        </type>
        <type derived="true" id="type.7406965">
            <name>const Less&lt;int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406962"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406964">
            <name>const Less&lt;int>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406962"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406848">
            <name>const List&lt;PtrNfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406845"/>
            </content>
        </type>
        <type derived="true" id="type.7406850">
            <name>const List&lt;PtrNfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406845"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406849">
            <name>const List&lt;PtrNfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406845"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406772">
            <name>const List&lt;System.Text.RegularExpressions.DfaState></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406769"/>
            </content>
        </type>
        <type derived="true" id="type.7406774">
            <name>const List&lt;System.Text.RegularExpressions.DfaState>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406769"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406773">
            <name>const List&lt;System.Text.RegularExpressions.DfaState>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406769"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406794">
            <name>const List&lt;System.Text.RegularExpressions.NfaState></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406791"/>
            </content>
        </type>
        <type derived="true" id="type.7406796">
            <name>const List&lt;System.Text.RegularExpressions.NfaState>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406791"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406795">
            <name>const List&lt;System.Text.RegularExpressions.NfaState>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406791"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406745">
            <name>const List&lt;System.Text.RegularExpressions.NfaStateNumberSet></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406742"/>
            </content>
        </type>
        <type derived="true" id="type.7406747">
            <name>const List&lt;System.Text.RegularExpressions.NfaStateNumberSet>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406742"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406746">
            <name>const List&lt;System.Text.RegularExpressions.NfaStateNumberSet>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406742"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406827">
            <name>const List&lt;System.Text.RegularExpressions.PtrNfaEdge></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406824"/>
            </content>
        </type>
        <type derived="true" id="type.7406829">
            <name>const List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406824"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406828">
            <name>const List&lt;System.Text.RegularExpressions.PtrNfaEdge>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406824"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406722">
            <name>const List&lt;int></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406719"/>
            </content>
        </type>
        <type derived="true" id="type.7406724">
            <name>const List&lt;int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406723">
            <name>const List&lt;int>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5611">
            <name>const Literal</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
            </content>
        </type>
        <type derived="true" id="type.5612">
            <name>const Literal&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5236">
            <name>const LockGuard&lt;Mtx></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
            </content>
        </type>
        <type derived="true" id="type.5237">
            <name>const LockGuard&lt;Mtx>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5423">
            <name>const LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7394867"/>
            </content>
        </type>
        <type derived="true" id="type.5424">
            <name>const LockGuard&lt;System.Threading.Mutex>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7394867"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5552">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.5606">
            <name>const New</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
            </content>
        </type>
        <type derived="true" id="type.5607">
            <name>const New&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406059">
            <name>const Nfa</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
            </content>
        </type>
        <type derived="true" id="type.7406061">
            <name>const Nfa&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406060">
            <name>const Nfa*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406053">
            <name>const NfaState</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
            </content>
        </type>
        <type derived="true" id="type.7406055">
            <name>const NfaState&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406054">
            <name>const NfaState*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406931">
            <name>const NfaState*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406995">
            <name>const NfaState*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406994">
            <name>const NfaState**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406047">
            <name>const NfaStateNumberSet</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
            </content>
        </type>
        <type derived="true" id="type.7406049">
            <name>const NfaStateNumberSet&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406048">
            <name>const NfaStateNumberSet*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406941">
            <name>const NfaStateNumberSet*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406942">
            <name>const NfaStateNumberSet*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406940">
            <name>const NfaStateNumberSet**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5564">
            <name>const Not</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
            </content>
        </type>
        <type derived="true" id="type.5565">
            <name>const Not&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5652">
            <name>const OptionalParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
            </content>
        </type>
        <type derived="true" id="type.5653">
            <name>const OptionalParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5547">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
            </content>
        </type>
        <type derived="true" id="type.5243">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5246">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5655">
            <name>const PositiveParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
            </content>
        </type>
        <type derived="true" id="type.5656">
            <name>const PositiveParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5594">
            <name>const PostfixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
            </content>
        </type>
        <type derived="true" id="type.5595">
            <name>const PostfixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5591">
            <name>const PostfixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
            </content>
        </type>
        <type derived="true" id="type.5592">
            <name>const PostfixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5576">
            <name>const PrefixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
            </content>
        </type>
        <type derived="true" id="type.5577">
            <name>const PrefixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5573">
            <name>const PrefixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
            </content>
        </type>
        <type derived="true" id="type.5574">
            <name>const PrefixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406083">
            <name>const PtrNfa</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
            </content>
        </type>
        <type derived="true" id="type.7406085">
            <name>const PtrNfa&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406084">
            <name>const PtrNfa*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406074">
            <name>const PtrNfaEdge</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
            </content>
        </type>
        <type derived="true" id="type.7406076">
            <name>const PtrNfaEdge&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406075">
            <name>const PtrNfaEdge*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407014">
            <name>const PtrNfaEdge*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407019">
            <name>const PtrNfaEdge*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407018">
            <name>const PtrNfaEdge**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406068">
            <name>const PtrNfaState</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
            </content>
        </type>
        <type derived="true" id="type.7406070">
            <name>const PtrNfaState&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406069">
            <name>const PtrNfaState*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406851">
            <name>const PtrNfaState*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406852">
            <name>const PtrNfaState**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406895">
            <name>const PtrNfaState**&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406896">
            <name>const PtrNfaState**&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406894">
            <name>const PtrNfaState***</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406879">
            <name>const PtrNfaStateFactory</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
            </content>
        </type>
        <type derived="true" id="type.7406880">
            <name>const PtrNfaStateFactory&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406878">
            <name>const PtrNfaStateFactory*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406865">
            <name>const RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406862"/>
            </content>
        </type>
        <type derived="true" id="type.7406867">
            <name>const RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406862"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406866">
            <name>const RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406862"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406856">
            <name>const RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406853"/>
            </content>
        </type>
        <type derived="true" id="type.7406858">
            <name>const RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406853"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406857">
            <name>const RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406853"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406785">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406782"/>
            </content>
        </type>
        <type derived="true" id="type.7406787">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406782"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406786">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406782"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406778">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406775"/>
            </content>
        </type>
        <type derived="true" id="type.7406780">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406775"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406779">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406775"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406807">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406804"/>
            </content>
        </type>
        <type derived="true" id="type.7406809">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406804"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406808">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406804"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406800">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406797"/>
            </content>
        </type>
        <type derived="true" id="type.7406802">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406797"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406801">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406797"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406758">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406755"/>
            </content>
        </type>
        <type derived="true" id="type.7406760">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406755"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406759">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406755"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406751">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406748"/>
            </content>
        </type>
        <type derived="true" id="type.7406753">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406748"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406752">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406748"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406840">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406837"/>
            </content>
        </type>
        <type derived="true" id="type.7406842">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406837"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406841">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406837"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406833">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406830"/>
            </content>
        </type>
        <type derived="true" id="type.7406835">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406830"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406834">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406830"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406290">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406287"/>
            </content>
        </type>
        <type derived="true" id="type.5230">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5227"/>
            </content>
        </type>
        <type derived="true" id="type.7406292">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406287"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5232">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5227"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406292">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406287"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406291">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406287"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5231">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5227"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406161">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406158"/>
            </content>
        </type>
        <type derived="true" id="type.5101">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5098"/>
            </content>
        </type>
        <type derived="true" id="type.7406161">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406158"/>
            </content>
        </type>
        <type derived="true" id="type.7406163">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406158"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5103">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5098"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406163">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406158"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406162">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406158"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5102">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5098"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406162">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406158"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406730">
            <name>const RandomAccessIter&lt;int, const int&amp;, const int*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406727"/>
            </content>
        </type>
        <type derived="true" id="type.7406732">
            <name>const RandomAccessIter&lt;int, const int&amp;, const int*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406727"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406731">
            <name>const RandomAccessIter&lt;int, const int&amp;, const int*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406727"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406737">
            <name>const RandomAccessIter&lt;int, int&amp;, int*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406734"/>
            </content>
        </type>
        <type derived="true" id="type.5522">
            <name>const RandomAccessIter&lt;int, int&amp;, int*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5519"/>
            </content>
        </type>
        <type derived="true" id="type.7406739">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406734"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5524">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406739">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406734"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406738">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406734"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5523">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5519"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5120">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5117"/>
            </content>
        </type>
        <type derived="true" id="type.7406180">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406177"/>
            </content>
        </type>
        <type derived="true" id="type.7406182">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406177"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5122">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5117"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406181">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406177"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5121">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5117"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406181">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406177"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5418">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5415"/>
            </content>
        </type>
        <type derived="true" id="type.7406479">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406476"/>
            </content>
        </type>
        <type derived="true" id="type.5420">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5415"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406481">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406476"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406480">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406476"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5419">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5415"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5131">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5128"/>
            </content>
        </type>
        <type derived="true" id="type.7406191">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406188"/>
            </content>
        </type>
        <type derived="true" id="type.5133">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406193">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406188"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5132">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406192">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406188"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406170">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406167"/>
            </content>
        </type>
        <type derived="true" id="type.5110">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5107"/>
            </content>
        </type>
        <type derived="true" id="type.7406172">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406167"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5112">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5107"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406172">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406167"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5111">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5107"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406171">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406167"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5553">
            <name>const RecursiveMutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
            </content>
        </type>
        <type derived="true" id="type.7406090">
            <name>const RegEx</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
            </content>
        </type>
        <type derived="true" id="type.7406092">
            <name>const RegEx&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406091">
            <name>const RegEx*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406813">
            <name>const RegExParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
            </content>
        </type>
        <type derived="true" id="type.7406812">
            <name>const RegExParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406822">
            <name>const RegExParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5673">
            <name>const RegularExpressionGrammar</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
            </content>
        </type>
        <type derived="true" id="type.5674">
            <name>const RegularExpressionGrammar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406980">
            <name>const Rel&lt;int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5615">
            <name>const ReturnStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
            </content>
        </type>
        <type derived="true" id="type.5616">
            <name>const ReturnStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5597">
            <name>const SizeOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
            </content>
        </type>
        <type derived="true" id="type.5598">
            <name>const SizeOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406882">
            <name>const Stack&lt;PtrNfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406881"/>
            </content>
        </type>
        <type derived="true" id="type.7406884">
            <name>const Stack&lt;PtrNfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406881"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406883">
            <name>const Stack&lt;PtrNfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406881"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406714">
            <name>const Stack&lt;int></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406713"/>
            </content>
        </type>
        <type derived="true" id="type.7406716">
            <name>const Stack&lt;int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406713"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406715">
            <name>const Stack&lt;int>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406713"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5534">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
            </content>
        </type>
        <type derived="true" id="type.5535">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5548">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
            </content>
        </type>
        <type derived="true" id="type.7390041">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390036"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7390129">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390124"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7390128">
            <name>const String&lt;uchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390124"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5630">
            <name>const SwitchStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
            </content>
        </type>
        <type derived="true" id="type.5631">
            <name>const SwitchStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5166">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5168">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389495"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5175">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389513"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5197">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389539"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5244">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389612"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5174">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389511"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5258">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5198">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5179">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389521"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5160">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389482"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5172">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5165">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389490"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5169">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389497"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5208">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389560"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5260">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5162">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5171">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389500"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5138">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5181">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5163">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389487"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5178">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5136">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389432"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5177">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389517"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5176">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389515"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5159">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5149">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5150">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389455"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5152">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389459"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5154">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389464"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5155">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389473"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5156">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389475"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5157">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389477"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5200">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389543"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5241">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389609"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5153">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389462"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5151">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389457"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5239">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5554">
            <name>const ThreadingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
            </content>
        </type>
        <type derived="true" id="type.5555">
            <name>const ThreadingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5636">
            <name>const ThrowStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
            </content>
        </type>
        <type derived="true" id="type.5637">
            <name>const ThrowStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5664">
            <name>const TokenParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
            </content>
        </type>
        <type derived="true" id="type.5665">
            <name>const TokenParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5639">
            <name>const TryStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
            </content>
        </type>
        <type derived="true" id="type.5640">
            <name>const TryStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5560">
            <name>const Type</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
            </content>
        </type>
        <type derived="true" id="type.5561">
            <name>const Type&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5600">
            <name>const TypeName</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
            </content>
        </type>
        <type derived="true" id="type.5601">
            <name>const TypeName&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5158">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389478"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5240">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389601"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5170">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389498"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5167">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389493"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5242">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389610"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5245">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389613"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5161">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389483"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5164">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389488"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5173">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389503"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5582">
            <name>const UnaryMinus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
            </content>
        </type>
        <type derived="true" id="type.5583">
            <name>const UnaryMinus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5579">
            <name>const UnaryPlus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
            </content>
        </type>
        <type derived="true" id="type.5580">
            <name>const UnaryPlus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5558">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
            </content>
        </type>
        <type derived="true" id="type.5559">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406874">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406871"/>
            </content>
        </type>
        <type derived="true" id="type.7406876">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406871"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406875">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406871"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406818">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.RegExParser></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406815"/>
            </content>
        </type>
        <type derived="true" id="type.7406820">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.RegExParser>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406815"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406819">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.RegExParser>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7406815"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5221">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407065">
            <name>const ValueObject&lt;System.Text.RegularExpressions.CharClass></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407062"/>
            </content>
        </type>
        <type derived="true" id="type.7407067">
            <name>const ValueObject&lt;System.Text.RegularExpressions.CharClass>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407062"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407066">
            <name>const ValueObject&lt;System.Text.RegularExpressions.CharClass>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407062"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407082">
            <name>const ValueObject&lt;System.Text.RegularExpressions.Class></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407079"/>
            </content>
        </type>
        <type derived="true" id="type.7407084">
            <name>const ValueObject&lt;System.Text.RegularExpressions.Class>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407083">
            <name>const ValueObject&lt;System.Text.RegularExpressions.Class>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407079"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407032">
            <name>const ValueObject&lt;System.Text.RegularExpressions.PtrNfa></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407029"/>
            </content>
        </type>
        <type derived="true" id="type.7407034">
            <name>const ValueObject&lt;System.Text.RegularExpressions.PtrNfa>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407029"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7407033">
            <name>const ValueObject&lt;System.Text.RegularExpressions.PtrNfa>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7407029"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5475">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7397113"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5509">
            <name>const double&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388905"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5507">
            <name>const float&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388904"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7398999">
            <name>const int&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388900"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406725">
            <name>const int*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388900"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406925">
            <name>const int*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388900"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406926">
            <name>const int*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388900"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406924">
            <name>const int**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388900"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5496">
            <name>const sbyte&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388896"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5499">
            <name>const short&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5669">
            <name>const stdlib</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
            </content>
        </type>
        <type derived="true" id="type.5670">
            <name>const stdlib&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7390131">
            <name>const uchar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388908"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5501">
            <name>const ushort&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7388899"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388905">
            <name>double</name>
        </type>
        <type basic="true" id="type.7388904">
            <name>float</name>
        </type>
        <type basic="true" id="type.7388900">
            <name>int</name>
        </type>
        <type derived="true" id="type.7388927">
            <name>int&amp;</name>
            <content>
                <baseType ref="type.7388900"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388926">
            <name>int*</name>
            <content>
                <baseType ref="type.7388900"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406910">
            <name>int*&amp;</name>
            <content>
                <baseType ref="type.7388900"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406911">
            <name>int*&amp;&amp;</name>
            <content>
                <baseType ref="type.7388900"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406909">
            <name>int**</name>
            <content>
                <baseType ref="type.7388900"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388902">
            <name>long</name>
        </type>
        <type basic="true" id="type.7388896">
            <name>sbyte</name>
        </type>
        <type basic="true" id="type.7388898">
            <name>short</name>
        </type>
        <type derived="true" id="type.5671">
            <name>stdlib&amp;&amp;</name>
            <content>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388908">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.7388951">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.7388908"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388950">
            <name>uchar*</name>
            <content>
                <baseType ref="type.7388908"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388901">
            <name>uint</name>
        </type>
        <type derived="true" id="type.7388930">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.7388901"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388929">
            <name>uint*</name>
            <content>
                <baseType ref="type.7388901"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388903">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.7388936">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.7388903"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388935">
            <name>ulong*</name>
            <content>
                <baseType ref="type.7388903"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388899">
            <name>ushort</name>
        </type>
        <type basic="true" id="type.7388907">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.7388948">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.7388907"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388947">
            <name>wchar*</name>
            <content>
                <baseType ref="type.7388907"/>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
