<library>
    <name>System.Text.RegularExpressions</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Text.RegularExpressions">
            <name>System.Text.RegularExpressions</name>
            <classes>
                <class id="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544">
                    <name>CharClass</name>
                    <groupName>CharClass</groupName>
                    <syntax> public class CharClass;</syntax>
                    <constructors>
                        <constructor id="default_constructor_CharClass_4F299E04B214EFD79E3917A8DD73C5BE8A797ECF">
                            <name>CharClass()</name>
                            <syntax>public nothrow CharClass();</syntax>
                        </constructor>
                        <constructor id="constructor_CharClass_40A4F82B2A48D14DD89DAB0A9DF3B426A88687DE">
                            <name>CharClass(char c)</name>
                            <syntax>public CharClass(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.11565917"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_CharClass_CDA6DB40AADCBF95F6D36C8A19F6D10B6EC19254">
                            <name>CharClass(char first, char last)</name>
                            <syntax>public CharClass(char first, char last);</syntax>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="type.11565917"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="type.11565917"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_CharClass_25D571BDCAE49D770485EC5CE744557957ACDBE3">
                            <name>CharClass(const String&lt;char>&amp; ranges_, bool inverse_)</name>
                            <syntax>public CharClass(const String&lt;char>&amp; ranges_, bool inverse_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ranges_</name>
                                    <type ref="type.11567125"/>
                                </parameter>
                                <parameter>
                                    <name>inverse_</name>
                                    <type ref="type.11565906"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Bits_CharClass_9ECE69FD02C8D17B1F4BD73D01C86B19C96E8B05">
                            <name>Bits() const</name>
                            <syntax>public nothrow const Bitset&amp; Bits() const;</syntax>
                            <returnType ref="type.11566255"/>
                        </function>
                        <function id="member_function_Clear_CharClass_1C3772822A7788BD789A7112740E37BBFAE4014E">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Contains_CharClass_64AE527B23017CB93AA9B53F8662B10B343DD8D7">
                            <name>Contains(char c) const</name>
                            <syntax>public bool Contains(char c) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.11565917"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_Inverse_CharClass_4C38FA76EF0074E679704D9509E685B7799B62C8">
                            <name>Inverse() const</name>
                            <syntax>public nothrow bool Inverse() const;</syntax>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_Ranges_CharClass_25D624B4FD8DB9C0A342A5FDF9F50C326A707EEB">
                            <name>Ranges() const</name>
                            <syntax>public String&lt;char> Ranges() const;</syntax>
                            <returnType ref="type.11567120"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E">
                    <name>Dfa</name>
                    <groupName>Dfa</groupName>
                    <syntax> public class Dfa;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Dfa_07B3929613F3F1D3AC0F17C91AF2DD120D0F925B">
                            <name>Dfa()</name>
                            <syntax>public Dfa();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddState_Dfa_26E6A2488835D869B3AB7BDB7C552FA35EEA12DE">
                            <name>AddState(const DfaState&amp; state)</name>
                            <syntax>public void AddState(const DfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.11586734"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_GetState_Dfa_7254A2BD303B52356723E9DD6869544B191C42B1">
                            <name>GetState(int i) const</name>
                            <syntax>public nothrow inline const DfaState&amp; GetState(int i) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>i</name>
                                    <type ref="type.11565911"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11586734"/>
                        </function>
                        <function id="member_function_Next_Dfa_EE4D529688DA0296683B932FC977436566DBF5E8">
                            <name>Next(char c, int s)</name>
                            <syntax>public nothrow inline int Next(char c, int s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.11565917"/>
                                </parameter>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11565911"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11565911"/>
                        </function>
                        <function id="member_function_NumStates_Dfa_5FA197DF9994622390F95CEFCF924D9B21B22DBC">
                            <name>NumStates() const</name>
                            <syntax>public nothrow inline long NumStates() const;</syntax>
                            <returnType ref="type.11565913"/>
                        </function>
                        <function id="member_function_SetAccepting_Dfa_1AFD4EC4A55DA9F672AB8B7544CB52F4615D9B9A">
                            <name>SetAccepting(int s)</name>
                            <syntax>public void SetAccepting(int s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11565911"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetNext_Dfa_E8632C356CC711A2319B8F7E3DDAC03C17236C6F">
                            <name>SetNext(char c, int from, int to)</name>
                            <syntax>public nothrow void SetNext(char c, int from, int to);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.11565917"/>
                                </parameter>
                                <parameter>
                                    <name>from</name>
                                    <type ref="type.11565911"/>
                                </parameter>
                                <parameter>
                                    <name>to</name>
                                    <type ref="type.11565911"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228">
                    <name>DfaState</name>
                    <groupName>DfaState</groupName>
                    <syntax> public class DfaState;</syntax>
                    <constructors>
                        <constructor id="default_constructor_DfaState_19F186C1F03FBBEB052944628C3262031F52CE64">
                            <name>DfaState()</name>
                            <syntax>public DfaState();</syntax>
                        </constructor>
                        <constructor id="constructor_DfaState_379F9E98A9A3D7F7EEE2163E05F0EC00201C6C20">
                            <name>DfaState(int id_)</name>
                            <syntax>public DfaState(int id_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.11565911"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accepting_DfaState_A7310D3993BEA18C9F952F6F19A24B69F71F154F">
                            <name>Accepting() const</name>
                            <syntax>public nothrow inline bool Accepting() const;</syntax>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_Id_DfaState_97D5CBFA0C129D3C05DB810D88AB5C541BD314F7">
                            <name>Id() const</name>
                            <syntax>public nothrow inline int Id() const;</syntax>
                            <returnType ref="type.11565911"/>
                        </function>
                        <function id="member_function_Next_DfaState_9FD3599AACDA82803E14C9F11DD78FD3840E9228">
                            <name>Next(char c) const</name>
                            <syntax>public nothrow inline int Next(char c) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.11565917"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11565911"/>
                        </function>
                        <function id="member_function_SetAccepting_DfaState_225F14C713639CAB7CB363A38B33DC2ADB9AD4A1">
                            <name>SetAccepting()</name>
                            <syntax>public nothrow inline void SetAccepting();</syntax>
                        </function>
                        <function id="member_function_SetNext_DfaState_A1432436EB7B6E49C1D8319587D2482F770CF3EB">
                            <name>SetNext(char c, int n)</name>
                            <syntax>public nothrow inline void SetNext(char c, int n);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.11565917"/>
                                </parameter>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.11565911"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57">
                    <name>Nfa</name>
                    <groupName>Nfa</groupName>
                    <syntax> public class Nfa;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Nfa_C911A047871E46B502D94CE905FACFC250286635">
                            <name>Nfa()</name>
                            <syntax>public Nfa();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddState_Nfa_B04784C00A1F38D5975225A1819B2E7F80FC5524">
                            <name>AddState(const NfaState&amp; state)</name>
                            <syntax>public void AddState(const NfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.11586752"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_GetState_Nfa_69254B598DF5877CA3EEAF6EA75A9E56EB3A641F">
                            <name>GetState(long i) const</name>
                            <syntax>public nothrow inline const NfaState&amp; GetState(long i) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>i</name>
                                    <type ref="type.11565913"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11586752"/>
                        </function>
                        <function id="member_function_NumStates_Nfa_36BDB4B847FB98481B3F29F51A81C5BA63A4CA53">
                            <name>NumStates() const</name>
                            <syntax>public nothrow inline long NumStates() const;</syntax>
                            <returnType ref="type.11565913"/>
                        </function>
                        <function id="member_function_States_Nfa_02ACF5CE923C7145CB8872B14A9C917888A0A735">
                            <name>States() const</name>
                            <syntax>public nothrow inline const List&lt;System.Text.RegularExpressions.NfaState>&amp; States() const;</syntax>
                            <returnType ref="type.11587546"/>
                        </function>
                    </functions>
                </class>
                <class id="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662">
                    <name>NfaState</name>
                    <groupName>NfaState</groupName>
                    <syntax> public class NfaState;</syntax>
                    <constructors>
                        <constructor id="default_constructor_NfaState_CC4550AEE21C0EE53951230670CD03A47DA75FD7">
                            <name>NfaState()</name>
                            <syntax>public NfaState();</syntax>
                        </constructor>
                        <constructor id="constructor_NfaState_DC6741ACEDF986BED3E1D9E3E7AB3E6A929F3673">
                            <name>NfaState(int id_)</name>
                            <syntax>public NfaState(int id_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.11565911"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accepting_NfaState_AF5C02F9685E4F2B2F518875814539C115F74F16">
                            <name>Accepting()</name>
                            <syntax>public nothrow inline bool Accepting();</syntax>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_Epsilon_NfaState_D60F94B16132539AFC860863C4FE7AEF7249B326">
                            <name>Epsilon() const</name>
                            <syntax>public nothrow const NfaStateNumberSet&amp; Epsilon() const;</syntax>
                            <returnType ref="type.11586746"/>
                        </function>
                        <function id="member_function_Id_NfaState_1901DF43AE73062A31B45016F07FF2890C6B2D1E">
                            <name>Id() const</name>
                            <syntax>public nothrow inline int Id() const;</syntax>
                            <returnType ref="type.11565911"/>
                        </function>
                        <function id="member_function_Next_NfaState_F1C182E26DED97995E45DE94E7A7F66CBF61A74E">
                            <name>Next(char c) const</name>
                            <syntax>public nothrow const NfaStateNumberSet&amp; Next(char c) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.11565917"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11586746"/>
                        </function>
                        <function id="member_function_SetAccepting_NfaState_9F80C6A52F51B0940F68E65869F9F1A0B2D6DB93">
                            <name>SetAccepting()</name>
                            <syntax>public nothrow inline void SetAccepting();</syntax>
                        </function>
                        <function id="member_function_SetNext_NfaState_F96A4564E9D4510790B3FC80476BB34DC2701E05">
                            <name>SetNext(char c, const NfaStateNumberSet&amp; s)</name>
                            <syntax>public void SetNext(char c, const NfaStateNumberSet&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.11565917"/>
                                </parameter>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11586746"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3">
                    <name>NfaStateNumberSet</name>
                    <groupName>NfaStateNumberSet</groupName>
                    <syntax> public class NfaStateNumberSet;</syntax>
                    <constructors>
                        <constructor id="default_constructor_NfaStateNumberSet_4432F26437CB58C87A8E2FF4A904CFB34A567BCF">
                            <name>NfaStateNumberSet()</name>
                            <syntax>public nothrow NfaStateNumberSet();</syntax>
                        </constructor>
                        <constructor id="constructor_NfaStateNumberSet_520535118410C8EC3A9D6CDC97A44F3A6D1A3C1E">
                            <name>NfaStateNumberSet(int s)</name>
                            <syntax>public NfaStateNumberSet(int s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11565911"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Add_NfaStateNumberSet_649B6F8C53A15F573E66E01469E390EAEE74ACA5">
                            <name>Add(int stateNumber)</name>
                            <syntax>public void Add(int stateNumber);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stateNumber</name>
                                    <type ref="type.11565911"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CanonicalContains_NfaStateNumberSet_3E3C070606C453E2D88124FE922BB741DDB90AE0">
                            <name>CanonicalContains(int stateNumber)</name>
                            <syntax>public nothrow bool CanonicalContains(int stateNumber);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stateNumber</name>
                                    <type ref="type.11565911"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_Contains_NfaStateNumberSet_918B8C3DDADA5D4B238A2DD02349CE0FE0F1C45F">
                            <name>Contains(int stateNumber)</name>
                            <syntax>public nothrow bool Contains(int stateNumber);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stateNumber</name>
                                    <type ref="type.11565911"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_IsEmpty_NfaStateNumberSet_43645D0B37A3928867F888309EB8452A9B1BDBE3">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_MakeCanonical_NfaStateNumberSet_C42068B1DC4BA252151DD3777C00E7BE26039A0A">
                            <name>MakeCanonical()</name>
                            <syntax>public void MakeCanonical();</syntax>
                        </function>
                        <function id="member_function_Merge_NfaStateNumberSet_767CE8DDFEF6A5C7F29141A28ECA2172FC518E9D">
                            <name>Merge(const NfaStateNumberSet&amp; x)</name>
                            <syntax>public void Merge(const NfaStateNumberSet&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.11586746"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Rep_NfaStateNumberSet_291560AD89F4F0E7F7A1887C43F7F01374E29171">
                            <name>Rep() const</name>
                            <syntax>public nothrow const List&lt;int>&amp; Rep() const;</syntax>
                            <returnType ref="type.11587474"/>
                        </function>
                        <function id="member_function_ToString_NfaStateNumberSet_44BA3F2CB44C01913423DABA63C2B2A64E29D293">
                            <name>ToString() const</name>
                            <syntax>public String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.11567120"/>
                        </function>
                    </functions>
                </class>
                <class id="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB">
                    <name>PtrNfa</name>
                    <groupName>PtrNfa</groupName>
                    <syntax> public class PtrNfa;</syntax>
                    <constructors>
                        <constructor id="default_constructor_PtrNfa_71AA850786E0FF72DFAF4F76055420C328B7A1D0">
                            <name>PtrNfa()</name>
                            <syntax>public PtrNfa();</syntax>
                        </constructor>
                        <constructor id="constructor_PtrNfa_DD413467E32CD13263051E678D94CB3A79B3D1FB">
                            <name>PtrNfa(PtrNfaState* start_, PtrNfaState* end_)</name>
                            <syntax>public PtrNfa(PtrNfaState* start_, PtrNfaState* end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.11586763"/>
                                </parameter>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.11586763"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddState_PtrNfa_9ACE919104983EE7EE583D8D5896F65CD3A6924C">
                            <name>AddState(PtrNfaState* state)</name>
                            <syntax>public void AddState(PtrNfaState* state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.11586763"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_End_PtrNfa_9D0D4AEEB95A05FB49398DCDE44EE409822792A6">
                            <name>End() const</name>
                            <syntax>public nothrow inline PtrNfaState* End() const;</syntax>
                            <returnType ref="type.11586763"/>
                        </function>
                        <function id="member_function_NumberStates_PtrNfa_E15BF6BE88238C33876FB91272D03D3745BC472C">
                            <name>NumberStates()</name>
                            <syntax>public nothrow void NumberStates();</syntax>
                        </function>
                        <function id="member_function_SetEnd_PtrNfa_A046A4A4455872E5113117EBF6F958DBC5772A92">
                            <name>SetEnd(PtrNfaState* end_)</name>
                            <syntax>public inline void SetEnd(PtrNfaState* end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.11586763"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetStart_PtrNfa_68D8D18EE0BC53CE9761A4F7871A4756CC6CC579">
                            <name>SetStart(PtrNfaState* start_)</name>
                            <syntax>public inline void SetStart(PtrNfaState* start_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.11586763"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Start_PtrNfa_6B888DEA26A54DC8A3A86CADBB9DFAEA8D6B419C">
                            <name>Start() const</name>
                            <syntax>public nothrow inline PtrNfaState* Start() const;</syntax>
                            <returnType ref="type.11586763"/>
                        </function>
                        <function id="member_function_States_PtrNfa_1C5C73292FB6212598B84B2AFB46BD29214CF42F">
                            <name>States() const</name>
                            <syntax>public nothrow const List&lt;PtrNfaState*>&amp; States() const;</syntax>
                            <returnType ref="type.11587600"/>
                        </function>
                    </functions>
                </class>
                <class id="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3">
                    <name>PtrNfaEdge</name>
                    <groupName>PtrNfaEdge</groupName>
                    <syntax> public class PtrNfaEdge;</syntax>
                    <constructors>
                        <constructor id="default_constructor_PtrNfaEdge_4E5C4C7D81EF9451C225A411124357E80330BB28">
                            <name>PtrNfaEdge()</name>
                            <syntax>public PtrNfaEdge();</syntax>
                        </constructor>
                        <constructor id="constructor_PtrNfaEdge_B54320755C6D76958ED7659B24C92A774C008725">
                            <name>PtrNfaEdge(const CharClass&amp; cls_, PtrNfaState* next_)</name>
                            <syntax>public PtrNfaEdge(const CharClass&amp; cls_, PtrNfaState* next_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>cls_</name>
                                    <type ref="type.11586728"/>
                                </parameter>
                                <parameter>
                                    <name>next_</name>
                                    <type ref="type.11586763"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Chars_PtrNfaEdge_8DAE9F8CCBF632554AE355DD5114A3CE0362730F">
                            <name>Chars() const</name>
                            <syntax>public nothrow inline const CharClass&amp; Chars() const;</syntax>
                            <returnType ref="type.11586728"/>
                        </function>
                        <function id="member_function_Next_PtrNfaEdge_5C5682B5F4FEE0A942759DD67774745F253CEF68">
                            <name>Next() const</name>
                            <syntax>public nothrow inline PtrNfaState* Next() const;</syntax>
                            <returnType ref="type.11586763"/>
                        </function>
                    </functions>
                </class>
                <class id="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8">
                    <name>PtrNfaState</name>
                    <groupName>PtrNfaState</groupName>
                    <syntax> public class PtrNfaState;</syntax>
                    <constructors>
                        <constructor id="default_constructor_PtrNfaState_9DA055AE969B06DAD332DFB9B42ED7E157B2F4DD">
                            <name>PtrNfaState()</name>
                            <syntax>public PtrNfaState();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accepting_PtrNfaState_F855D1DD52E08421C0B4A21B3FC920F5D7745D77">
                            <name>Accepting() const</name>
                            <syntax>public nothrow inline bool Accepting() const;</syntax>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="function_group_AddEdge_8A34AC8F152910A6C8F61BD0CF5B8ABE0FF33E68">
                            <name>AddEdge</name>
                            <overloads>
                                <overload id="member_function_AddEdge_PtrNfaState_3A56537C6A7CC3B736C0B5DF95047218F306FFB1">
                                    <name>AddEdge(PtrNfaEdge&amp;&amp; edge)</name>
                                    <syntax>public void AddEdge(PtrNfaEdge&amp;&amp; edge);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>edge</name>
                                            <type ref="type.11587573"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_AddEdge_PtrNfaState_6265A90DB7DBA58239F893A386EAE44FA6DBA8CD">
                                    <name>AddEdge(const PtrNfaEdge&amp; edge)</name>
                                    <syntax>public void AddEdge(const PtrNfaEdge&amp; edge);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>edge</name>
                                            <type ref="type.11586773"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Clear_PtrNfaState_DC6DB92F580C0A613488896F73C48108A13070DB">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Edges_PtrNfaState_E20B01CFC9AD97DFCF490D9311EC7B565E359234">
                            <name>Edges() const</name>
                            <syntax>public nothrow inline const List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp; Edges() const;</syntax>
                            <returnType ref="type.11587579"/>
                        </function>
                        <function id="member_function_Id_PtrNfaState_68DE82FBD7784855DE6267B33EF7B2B6698A5384">
                            <name>Id() const</name>
                            <syntax>public nothrow inline int Id() const;</syntax>
                            <returnType ref="type.11565911"/>
                        </function>
                        <function id="member_function_Next_PtrNfaState_A090132D956B94CE56194DD7713206B8BA785B0A">
                            <name>Next(char c)</name>
                            <syntax>public List&lt;PtrNfaState*> Next(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.11565917"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11587595"/>
                        </function>
                        <function id="member_function_ResetAccepting_PtrNfaState_69E6A386FFB55E0B5498D7A8328B7B3D5167EF11">
                            <name>ResetAccepting()</name>
                            <syntax>public nothrow inline void ResetAccepting();</syntax>
                        </function>
                        <function id="member_function_SetAccepting_PtrNfaState_218FCA739C8EE65F4D88C8C0466F2EF6F78CE13D">
                            <name>SetAccepting()</name>
                            <syntax>public nothrow inline void SetAccepting();</syntax>
                        </function>
                        <function id="member_function_SetEdges_PtrNfaState_A96C1C104A95EB2D6C269685FF385287FA62D1BC">
                            <name>SetEdges(const List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp; edges_)</name>
                            <syntax>public void SetEdges(const List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp; edges_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>edges_</name>
                                    <type ref="type.11587579"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetId_PtrNfaState_532A57EB866393C4A1FC2910F7038BEE855DCA7D">
                            <name>SetId(int id_)</name>
                            <syntax>public nothrow inline void SetId(int id_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.11565911"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2">
                    <name>PtrNfaStateFactory</name>
                    <groupName>PtrNfaStateFactory</groupName>
                    <syntax> public class PtrNfaStateFactory;</syntax>
                    <functions>
                        <function id="member_function_Clear_PtrNfaStateFactory_B512A7C5924FC729EA3A04EDBAFBD22884889F6F">
                            <name>Clear()</name>
                            <syntax>public void Clear();</syntax>
                        </function>
                        <function id="member_function_FreeState_PtrNfaStateFactory_75536BA04D6F342070BCFDC70C600BF039030D9E">
                            <name>FreeState(PtrNfaState* state)</name>
                            <syntax>public void FreeState(PtrNfaState* state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.11586763"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_MakeState_PtrNfaStateFactory_29EB7C55E503DE112D5A16E05EBF1AA6F69D89A2">
                            <name>MakeState()</name>
                            <syntax>public PtrNfaState* MakeState();</syntax>
                            <returnType ref="type.11586763"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_PtrNfaStateFactory_FABCA8014FD1A3C260209F93CE0A1FC56DE53015">
                            <name>Instance()</name>
                            <syntax>public static PtrNfaStateFactory&amp; Instance();</syntax>
                            <returnType ref="type.11586776"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F">
                    <name>RegEx</name>
                    <groupName>RegEx</groupName>
                    <syntax> public class RegEx;</syntax>
                    <constructors>
                        <constructor id="constructor_RegEx_048A5AC6F13DA9ED011823E2E2E8820225A196C8">
                            <name>RegEx(const String&lt;char>&amp; pattern_)</name>
                            <syntax>public RegEx(const String&lt;char>&amp; pattern_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pattern_</name>
                                    <type ref="type.11567125"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_RegEx_80C0AB8F118532186C3778D5E11AA9A69CD4EC01">
                            <name>RegEx(const String&lt;char>&amp; pattern_, RegExFlags flags)</name>
                            <syntax>public RegEx(const String&lt;char>&amp; pattern_, RegExFlags flags);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pattern_</name>
                                    <type ref="type.11567125"/>
                                </parameter>
                                <parameter>
                                    <name>flags</name>
                                    <type ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Compiled_RegEx_661D620F09E6D141272FCABE143FE78A56C662EB">
                            <name>Compiled() const</name>
                            <syntax>public nothrow inline bool Compiled() const;</syntax>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_GetDfa_RegEx_4827339014C71AE442EEFCFED46D894EC77EA45E">
                            <name>GetDfa() const</name>
                            <syntax>public nothrow inline const Dfa&amp; GetDfa() const;</syntax>
                            <returnType ref="type.11586740"/>
                        </function>
                        <function id="member_function_GetNfa_RegEx_421BE8C85790708F9013444D8E7847B4887CAE76">
                            <name>GetNfa() const</name>
                            <syntax>public nothrow inline const Nfa&amp; GetNfa() const;</syntax>
                            <returnType ref="type.11586758"/>
                        </function>
                        <function id="member_function_Matches_RegEx_59E97BBCEE02267BB93B3A7BDB2A90148DB9D40A">
                            <name>Matches(const String&lt;char>&amp; s)</name>
                            <syntax>public bool Matches(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11567125"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11565906"/>
                        </function>
                        <function id="member_function_Pattern_RegEx_911BFB722C9A92651F1B3118FE55413E92546ADE">
                            <name>Pattern() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Pattern() const;</syntax>
                            <returnType ref="type.11567125"/>
                        </function>
                    </functions>
                </class>
                <class id="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC">
                    <name>RegExParser</name>
                    <groupName>RegExParser</groupName>
                    <syntax> public class RegExParser;</syntax>
                    <constructors>
                        <constructor id="default_constructor_RegExParser_8140C92D742EBE123151F6886D3472F9C11B1590">
                            <name>RegExParser()</name>
                            <syntax>public RegExParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Parse_RegExParser_01A06ACE0DC9C2175030CADE47EE763C8A0FA90A">
                            <name>Parse(const String&lt;char>&amp; regEx)</name>
                            <syntax>public PtrNfa Parse(const String&lt;char>&amp; regEx);</syntax>
                            <parameters>
                                <parameter>
                                    <name>regEx</name>
                                    <type ref="type.11567125"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_RegExParser_C24BF2834AEC9A218B0ED4D75F0828032116DA00">
                            <name>Instance()</name>
                            <syntax>public static RegExParser&amp; Instance();</syntax>
                            <returnType ref="type.11586761"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22">
                    <name>RegularExpressionGrammar</name>
                    <groupName>RegularExpressionGrammar</groupName>
                    <syntax> public class RegularExpressionGrammar;</syntax>
                    <baseClass ref="class_Grammar_2180D00808E7A786B21C35D11B36E77EC171A6C6"/>
                    <constructors>
                        <constructor id="default_constructor_RegularExpressionGrammar_F36ED07549A921E3839F0FE4EA4B1CF8C4F60484">
                            <name>RegularExpressionGrammar()</name>
                            <syntax>public RegularExpressionGrammar();</syntax>
                        </constructor>
                        <constructor id="constructor_RegularExpressionGrammar_6501A1B591C14B01B647F1F8B4D00B4731CD2A62">
                            <name>RegularExpressionGrammar(ParsingDomain* parsingDomain)</name>
                            <syntax>public RegularExpressionGrammar(ParsingDomain* parsingDomain);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parsingDomain</name>
                                    <type ref="type.11574532"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CreateRules_RegularExpressionGrammar_7A43A6B5AD3D3A39A6F71E515C7540C3389ED011">
                            <name>CreateRules()</name>
                            <syntax>public override void CreateRules();</syntax>
                        </function>
                        <function id="member_function_GetReferencedGrammars_RegularExpressionGrammar_2732FBB540D81C3CDDBE8F73366811FAA272766C">
                            <name>GetReferencedGrammars()</name>
                            <syntax>public override void GetReferencedGrammars();</syntax>
                        </function>
                        <function id="member_function_Parse_RegularExpressionGrammar_E529B0C217B5C1B88AEA848FB7B7A364CC28B2FF">
                            <name>Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName)</name>
                            <syntax>public PtrNfa Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start</name>
                                    <type ref="type.11567215"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="type.11567215"/>
                                </parameter>
                                <parameter>
                                    <name>fileIndex</name>
                                    <type ref="type.11565911"/>
                                </parameter>
                                <parameter>
                                    <name>fileName</name>
                                    <type ref="type.11567125"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_AddState_07F1E4FBD352758B79D1E725CC8F92F1D86E6A5F">
                    <name>AddState(int s, List&lt;int>&amp; newStates, Bitset&amp; alreadyOn, const Nfa&amp; nfa)</name>
                    <syntax>public void AddState(int s, List&lt;int>&amp; newStates, Bitset&amp; alreadyOn, const Nfa&amp; nfa);</syntax>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.11565911"/>
                        </parameter>
                        <parameter>
                            <name>newStates</name>
                            <type ref="type.11587471"/>
                        </parameter>
                        <parameter>
                            <name>alreadyOn</name>
                            <type ref="type.11566252"/>
                        </parameter>
                        <parameter>
                            <name>nfa</name>
                            <type ref="type.11586758"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_Alt_D5524DBAD9A12AD8D723443912874B636A784F1E">
                    <name>Alt(const PtrNfa&amp; left, const PtrNfa&amp; right)</name>
                    <syntax>public PtrNfa Alt(const PtrNfa&amp; left, const PtrNfa&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.11586782"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.11586782"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_Cat_0465226282EC3ABACE56D89A451378945115C788">
                    <name>Cat(const PtrNfa&amp; left, const PtrNfa&amp; right)</name>
                    <syntax>public PtrNfa Cat(const PtrNfa&amp; left, const PtrNfa&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.11586782"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.11586782"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_group_EpsilonClosure_4289D97C873E7B7EB7A7CC0946FBC68D1515C917">
                    <name>EpsilonClosure</name>
                    <overloads>
                        <overload id="function_EpsilonClosure_2920F52FDF4A51BCA9D33B76B0D92C2E57BE1BFC">
                            <name>EpsilonClosure(const NfaStateNumberSet&amp; states, const Nfa&amp; nfa)</name>
                            <syntax>public NfaStateNumberSet EpsilonClosure(const NfaStateNumberSet&amp; states, const Nfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>states</name>
                                    <type ref="type.11586746"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.11586758"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                        </overload>
                        <overload id="function_EpsilonClosure_C70736F90888A8A25B5030EDD28F95D54AC08E4A">
                            <name>EpsilonClosure(int s, const Nfa&amp; nfa)</name>
                            <syntax>public NfaStateNumberSet EpsilonClosure(int s, const Nfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11565911"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.11586758"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_FindState_6835210F08F0DAAF90AD37AC594DFE0DCA732DDF">
                    <name>FindState(RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*> begin, RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*> end, const NfaStateNumberSet&amp; s)</name>
                    <syntax>public int FindState(RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*> begin, RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*> end, const NfaStateNumberSet&amp; s);</syntax>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="type.11587498"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="type.11587498"/>
                        </parameter>
                        <parameter>
                            <name>s</name>
                            <type ref="type.11586746"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.11565911"/>
                </function>
                <function id="function_Kleene_7713A26D1A3F54B2092A897249CB5E39E3F1B53F">
                    <name>Kleene(const PtrNfa&amp; subject)</name>
                    <syntax>public PtrNfa Kleene(const PtrNfa&amp; subject);</syntax>
                    <parameters>
                        <parameter>
                            <name>subject</name>
                            <type ref="type.11586782"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_group_MakeNfa_8132CF2AF0EA5C0C6000822983BC1360BCCFD706">
                    <name>MakeNfa</name>
                    <overloads>
                        <overload id="function_MakeNfa_D79E15BE6BCAEB816164DD385F247B8F62B07957">
                            <name>MakeNfa(char c)</name>
                            <syntax>public PtrNfa MakeNfa(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.11565917"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                        </overload>
                        <overload id="function_MakeNfa_E488F2099F06822C021374D0EC23DD5E16D26A23">
                            <name>MakeNfa(const CharClass&amp; cls)</name>
                            <syntax>public PtrNfa MakeNfa(const CharClass&amp; cls);</syntax>
                            <parameters>
                                <parameter>
                                    <name>cls</name>
                                    <type ref="type.11586728"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Matches_8BAA67F5DC1921A919ED85B64CE0602EBC481F40">
                    <name>Matches</name>
                    <overloads>
                        <overload id="function_Matches_5ACF03A6FF47E999410B0148CF76C540DE97D0A8">
                            <name>Matches(const String&lt;char>&amp; s, const Dfa&amp; dfa)</name>
                            <syntax>public nothrow bool Matches(const String&lt;char>&amp; s, const Dfa&amp; dfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11567125"/>
                                </parameter>
                                <parameter>
                                    <name>dfa</name>
                                    <type ref="type.11586740"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11565906"/>
                        </overload>
                        <overload id="function_Matches_CABA9735ED4A5D89DEE37FCE1F80C710F4AA7501">
                            <name>Matches(const String&lt;char>&amp; s, const Nfa&amp; nfa)</name>
                            <syntax>public bool Matches(const String&lt;char>&amp; s, const Nfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11567125"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.11586758"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11565906"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_MatchesSlow_3283EC27B79209142A1A6F427314AD173B4B526F">
                    <name>MatchesSlow(const String&lt;char>&amp; s, const Nfa&amp; nfa)</name>
                    <syntax>public bool MatchesSlow(const String&lt;char>&amp; s, const Nfa&amp; nfa);</syntax>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.11567125"/>
                        </parameter>
                        <parameter>
                            <name>nfa</name>
                            <type ref="type.11586758"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.11565906"/>
                </function>
                <function id="function_Move_0EEDAF3B7AAF3C35467317B8AD4D7F35D2412BF0">
                    <name>Move(const NfaStateNumberSet&amp; states, char c, const Nfa&amp; nfa)</name>
                    <syntax>public NfaStateNumberSet Move(const NfaStateNumberSet&amp; states, char c, const Nfa&amp; nfa);</syntax>
                    <parameters>
                        <parameter>
                            <name>states</name>
                            <type ref="type.11586746"/>
                        </parameter>
                        <parameter>
                            <name>c</name>
                            <type ref="type.11565917"/>
                        </parameter>
                        <parameter>
                            <name>nfa</name>
                            <type ref="type.11586758"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                </function>
                <function id="function_Optional_A91AD05335DB0478FB38E926766295BAF36AED04">
                    <name>Optional(const PtrNfa&amp; subject)</name>
                    <syntax>public PtrNfa Optional(const PtrNfa&amp; subject);</syntax>
                    <parameters>
                        <parameter>
                            <name>subject</name>
                            <type ref="type.11586782"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_ParseRegEx_E19FFA4F71A38771F5578C338314BD5F8F10D655">
                    <name>ParseRegEx(const String&lt;char>&amp; pattern, RegExFlags flags)</name>
                    <syntax>public PtrNfa ParseRegEx(const String&lt;char>&amp; pattern, RegExFlags flags);</syntax>
                    <parameters>
                        <parameter>
                            <name>pattern</name>
                            <type ref="type.11567125"/>
                        </parameter>
                        <parameter>
                            <name>flags</name>
                            <type ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_Positive_EE60205EB0EC73B6B0BE6BCE863DD0D934FC17AA">
                    <name>Positive(const PtrNfa&amp; subject)</name>
                    <syntax>public PtrNfa Positive(const PtrNfa&amp; subject);</syntax>
                    <parameters>
                        <parameter>
                            <name>subject</name>
                            <type ref="type.11586782"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_ToDfa_3C137DA5A679038BEAFCE6E395241C01126DC1A7">
                    <name>ToDfa(const Nfa&amp; nfa)</name>
                    <syntax>public Dfa ToDfa(const Nfa&amp; nfa);</syntax>
                    <parameters>
                        <parameter>
                            <name>nfa</name>
                            <type ref="type.11586758"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                </function>
                <function id="function_group_ToNfa_4A30E6BE6D6A4FCB836B6EEDC9EC474A8A6A1B20">
                    <name>ToNfa</name>
                    <overloads>
                        <overload id="function_ToNfa_47B4C0C904524DB43CFF1A2180CBA8B70F84CA00">
                            <name>ToNfa(const PtrNfa&amp; ptrNfa)</name>
                            <syntax>public Nfa ToNfa(const PtrNfa&amp; ptrNfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ptrNfa</name>
                                    <type ref="type.11586782"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                        </overload>
                        <overload id="function_ToNfa_E93F77CDE077C3E57B1556A7A48371CBB10CD64D">
                            <name>ToNfa(const String&lt;char>&amp; pattern, RegExFlags flags)</name>
                            <syntax>public Nfa ToNfa(const String&lt;char>&amp; pattern, RegExFlags flags);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pattern</name>
                                    <type ref="type.11567125"/>
                                </parameter>
                                <parameter>
                                    <name>flags</name>
                                    <type ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ToRanges_3BECBF25B0A0C3200B2FC864696D656B87058250">
                    <name>ToRanges(Class cls)</name>
                    <syntax>public String&lt;char> ToRanges(Class cls);</syntax>
                    <parameters>
                        <parameter>
                            <name>cls</name>
                            <type ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.11567120"/>
                </function>
                <function id="function_Transform_A221E9D046B37DA540984D0A629132630378DA3C">
                    <name>Transform(char c, List&lt;int>&amp; oldStates, List&lt;int>&amp; newStates, Bitset&amp; alreadyOn, const Nfa&amp; nfa)</name>
                    <syntax>public void Transform(char c, List&lt;int>&amp; oldStates, List&lt;int>&amp; newStates, Bitset&amp; alreadyOn, const Nfa&amp; nfa);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.11565917"/>
                        </parameter>
                        <parameter>
                            <name>oldStates</name>
                            <type ref="type.11587471"/>
                        </parameter>
                        <parameter>
                            <name>newStates</name>
                            <type ref="type.11587471"/>
                        </parameter>
                        <parameter>
                            <name>alreadyOn</name>
                            <type ref="type.11566252"/>
                        </parameter>
                        <parameter>
                            <name>nfa</name>
                            <type ref="type.11586758"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_group_op_shl_637EF27F8E355AF9344F2DA639A81DA4E5ACB541">
                    <name>operator&lt;&lt;</name>
                    <overloads>
                        <overload id="function_op_shl_C1DEC1FF29229F2C2E24F7685ADF587A765B5947">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const CharClass&amp; cls)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const CharClass&amp; cls);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11566751"/>
                                </parameter>
                                <parameter>
                                    <name>cls</name>
                                    <type ref="type.11586728"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566751"/>
                        </overload>
                        <overload id="function_op_shl_529DAA6DAA82E134670BD473AD7269E2F37C94BA">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const Dfa&amp; dfa)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const Dfa&amp; dfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11566751"/>
                                </parameter>
                                <parameter>
                                    <name>dfa</name>
                                    <type ref="type.11586740"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566751"/>
                        </overload>
                        <overload id="function_op_shl_6FC8187D8A10228A2B234648D5813A2989EE986F">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const DfaState&amp; state)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const DfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11566751"/>
                                </parameter>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.11586734"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566751"/>
                        </overload>
                        <overload id="function_op_shl_4E5CAC0C1959738EA9F3D41EA8C384D0F55BEB02">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const Nfa&amp; nfa)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const Nfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11566751"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.11586758"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566751"/>
                        </overload>
                        <overload id="function_op_shl_F6A1C2C0E02B025CF998B4AF949CC63F52E49A24">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const NfaState&amp; state)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const NfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11566751"/>
                                </parameter>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.11586752"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566751"/>
                        </overload>
                        <overload id="function_op_shl_4708DEEF88C9580BCAB388C3AE502A8B4382BEC5">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const NfaStateNumberSet&amp; ns)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const NfaStateNumberSet&amp; ns);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11566751"/>
                                </parameter>
                                <parameter>
                                    <name>ns</name>
                                    <type ref="type.11586746"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566751"/>
                        </overload>
                        <overload id="function_op_shl_0C23222D819AC864A37182196D3EA36958DF633C">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const PtrNfa&amp; nfa)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const PtrNfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11566751"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.11586782"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566751"/>
                        </overload>
                        <overload id="function_op_shl_51AABFDB519D7C04C6F3C75CAAB1ABDC5313E49F">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const PtrNfaEdge&amp; edge)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const PtrNfaEdge&amp; edge);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11566751"/>
                                </parameter>
                                <parameter>
                                    <name>edge</name>
                                    <type ref="type.11586773"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566751"/>
                        </overload>
                        <overload id="function_op_shl_B16D0D64750AB09DA2A841C2F3AB1EDCF83E05A6">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const CharClass&amp; cls)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const CharClass&amp; cls);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11566763"/>
                                </parameter>
                                <parameter>
                                    <name>cls</name>
                                    <type ref="type.11586728"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566763"/>
                        </overload>
                        <overload id="function_op_shl_39E6DB77B3726EE382A4928DE8B747FCE82D55C9">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const Dfa&amp; dfa)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const Dfa&amp; dfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11566763"/>
                                </parameter>
                                <parameter>
                                    <name>dfa</name>
                                    <type ref="type.11586740"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566763"/>
                        </overload>
                        <overload id="function_op_shl_DDC9181576324064116CCA12EA81F494F4FD7671">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const DfaState&amp; state)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const DfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11566763"/>
                                </parameter>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.11586734"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566763"/>
                        </overload>
                        <overload id="function_op_shl_32B788139992A46133E1128EA68FE9705068391B">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const Nfa&amp; nfa)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const Nfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11566763"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.11586758"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566763"/>
                        </overload>
                        <overload id="function_op_shl_6485B9489611903D001C978ACF890102A19BB472">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const NfaState&amp; state)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const NfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11566763"/>
                                </parameter>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.11586752"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566763"/>
                        </overload>
                        <overload id="function_op_shl_825C28946705E8199F546560B5918AF74B4DCA0D">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const PtrNfa&amp; nfa)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const PtrNfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11566763"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.11586782"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566763"/>
                        </overload>
                        <overload id="function_op_shl_6F9AF13E509A9C210D030CEDBC6B253DC6568410">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const PtrNfaEdge&amp; edge)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const PtrNfaEdge&amp; edge);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.11566763"/>
                                </parameter>
                                <parameter>
                                    <name>edge</name>
                                    <type ref="type.11586773"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566763"/>
                        </overload>
                        <overload id="function_op_shl_1FAFC8A002E684C1701F2045817D6A3F812784C0">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const NfaStateNumberSet&amp; ns)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const NfaStateNumberSet&amp; ns);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.11566763"/>
                                </parameter>
                                <parameter>
                                    <name>ns</name>
                                    <type ref="type.11586746"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11566763"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_eq_1225FBF89BDAF45ABAD92A7A839964C8025299FA">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_8E43A7A9E8B02E781EBFC6C1D2DD2D8024FA6835">
                            <name>operator==(Class left, Class right)</name>
                            <syntax>public bool operator==(Class left, Class right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11565906"/>
                        </overload>
                        <overload id="function_op_eq_1657CC5F4F56C5764772DB14D167206EA3E61EA5">
                            <name>operator==(RegExFlags left, RegExFlags right)</name>
                            <syntax>public bool operator==(RegExFlags left, RegExFlags right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11565906"/>
                        </overload>
                        <overload id="function_op_eq_E167B657AE9463D25B3B65B5090C498284BDC388">
                            <name>operator==(const NfaStateNumberSet&amp; left, const NfaStateNumberSet&amp; right)</name>
                            <syntax>public nothrow bool operator==(const NfaStateNumberSet&amp; left, const NfaStateNumberSet&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.11586746"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.11586746"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.11565906"/>
                        </overload>
                    </overloads>
                </function>
            </functions>
            <constants>
                <constant id="constant_eps_F7D3432B47D7ADDBD0C715A5872E89F738895881">
                    <name>eps</name>
                    <syntax>public const char eps = 0;</syntax>
                    <type ref="type.11565917"/>
                    <value>0</value>
                </constant>
            </constants>
            <enumerations>
                <enumeration id="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB">
                    <name>Class</name>
                    <syntax>public enum Class;</syntax>
                    <underlyingType ref="type.11565911"/>
                    <enumConstant>
                        <name>alnum</name>
                        <value>0</value>
                    </enumConstant>
                    <enumConstant>
                        <name>alpha</name>
                        <value>1</value>
                    </enumConstant>
                    <enumConstant>
                        <name>blank</name>
                        <value>2</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cntrl</name>
                        <value>3</value>
                    </enumConstant>
                    <enumConstant>
                        <name>digit</name>
                        <value>4</value>
                    </enumConstant>
                    <enumConstant>
                        <name>graph</name>
                        <value>5</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lower</name>
                        <value>6</value>
                    </enumConstant>
                    <enumConstant>
                        <name>print</name>
                        <value>7</value>
                    </enumConstant>
                    <enumConstant>
                        <name>punct</name>
                        <value>8</value>
                    </enumConstant>
                    <enumConstant>
                        <name>space</name>
                        <value>9</value>
                    </enumConstant>
                    <enumConstant>
                        <name>upper</name>
                        <value>10</value>
                    </enumConstant>
                    <enumConstant>
                        <name>word</name>
                        <value>11</value>
                    </enumConstant>
                    <enumConstant>
                        <name>xdigit</name>
                        <value>12</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603">
                    <name>RegExFlags</name>
                    <syntax>public enum RegExFlags;</syntax>
                    <underlyingType ref="type.11565911"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0</value>
                    </enumConstant>
                    <enumConstant>
                        <name>compiled</name>
                        <value>1</value>
                    </enumConstant>
                    <enumConstant>
                        <name>matchLine</name>
                        <value>2</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
    </namespaces>
    <types>
        <type derived="true" id="type.6914">
            <name>AddressOf&amp;&amp;</name>
            <content>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_AlternativeExpressionRule_4A8E0A75B1E15D431953E1A2CC7001CE365A23BE">
            <name>AlternativeExpressionRule</name>
        </type>
        <type derived="true" id="type.11586801">
            <name>AlternativeExpressionRule&amp;</name>
            <content>
                <baseType ref="class_AlternativeExpressionRule_4A8E0A75B1E15D431953E1A2CC7001CE365A23BE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586800">
            <name>AlternativeExpressionRule*</name>
            <content>
                <baseType ref="class_AlternativeExpressionRule_4A8E0A75B1E15D431953E1A2CC7001CE365A23BE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587805">
            <name>AlternativeExpressionRule*&amp;</name>
            <content>
                <baseType ref="class_AlternativeExpressionRule_4A8E0A75B1E15D431953E1A2CC7001CE365A23BE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587804">
            <name>AlternativeExpressionRule**</name>
            <content>
                <baseType ref="class_AlternativeExpressionRule_4A8E0A75B1E15D431953E1A2CC7001CE365A23BE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6986">
            <name>AssertStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A" specialization="true">
            <name>BackInsertIterator&lt;C></name>
            <content>
                <primaryType ref="class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A"/>
                <argumentType ref="11566243"/>
            </content>
        </type>
        <type derived="true" id="type.6395">
            <name>BackInsertIterator&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6401">
            <name>BackInsertIterator&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD" specialization="true">
            <name>BackInsertProxy&lt;C></name>
            <content>
                <primaryType ref="class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
                <argumentType ref="11566240"/>
            </content>
        </type>
        <type derived="true" id="type.6391">
            <name>BackInsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6387">
            <name>BackInsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6398">
            <name>BackInsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11587725" specialization="true">
            <name>BinaryFun&lt;int, int, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="type.11565911"/>
                <argumentType ref="type.11565911"/>
                <argumentType ref="type.11565906"/>
            </content>
        </type>
        <type derived="true" id="type.11587727">
            <name>BinaryFun&lt;int, int, bool>&amp;</name>
            <content>
                <baseType ref="type.11587725"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587741">
            <name>BinaryFun&lt;int, int, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587725"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587726">
            <name>BinaryFun&lt;int, int, bool>*</name>
            <content>
                <baseType ref="type.11587725"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587724" specialization="true">
            <name>BinaryPred&lt;int, int></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="type.11565911"/>
                <argumentType ref="type.11565911"/>
            </content>
        </type>
        <type derived="true" id="type.11587729">
            <name>BinaryPred&lt;int, int>&amp;</name>
            <content>
                <baseType ref="type.11587724"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587738">
            <name>BinaryPred&lt;int, int>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587724"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587728">
            <name>BinaryPred&lt;int, int>*</name>
            <content>
                <baseType ref="type.11587724"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11566252">
            <name>Bitset&amp;</name>
            <content>
                <baseType ref="class_Bitset_BA1EE2E68426C5445CB6CAF7F957084ADAFD19CA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567958" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.6510">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.11567958"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="11566559"/>
            </content>
        </type>
        <type derived="true" id="type.6518">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="11566580"/>
            </content>
        </type>
        <type derived="true" id="type.6531">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544">
            <name>CharClass</name>
        </type>
        <type derived="true" id="type.11586725">
            <name>CharClass&amp;</name>
            <content>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587517">
            <name>CharClass&amp;&amp;</name>
            <content>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586724">
            <name>CharClass*</name>
            <content>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CharClassCharRule_A53117A13BF1152F840E4ABF3F80BB10F64CEC38">
            <name>CharClassCharRule</name>
        </type>
        <type derived="true" id="type.11586849">
            <name>CharClassCharRule&amp;</name>
            <content>
                <baseType ref="class_CharClassCharRule_A53117A13BF1152F840E4ABF3F80BB10F64CEC38"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586848">
            <name>CharClassCharRule*</name>
            <content>
                <baseType ref="class_CharClassCharRule_A53117A13BF1152F840E4ABF3F80BB10F64CEC38"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587862">
            <name>CharClassCharRule*&amp;</name>
            <content>
                <baseType ref="class_CharClassCharRule_A53117A13BF1152F840E4ABF3F80BB10F64CEC38"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587861">
            <name>CharClassCharRule**</name>
            <content>
                <baseType ref="class_CharClassCharRule_A53117A13BF1152F840E4ABF3F80BB10F64CEC38"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CharClassRule_4F146B0ADDD3D4BE0C73F0669E2FBBF45F3788EE">
            <name>CharClassRule</name>
        </type>
        <type derived="true" id="type.11586831">
            <name>CharClassRule&amp;</name>
            <content>
                <baseType ref="class_CharClassRule_4F146B0ADDD3D4BE0C73F0669E2FBBF45F3788EE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586830">
            <name>CharClassRule*</name>
            <content>
                <baseType ref="class_CharClassRule_4F146B0ADDD3D4BE0C73F0669E2FBBF45F3788EE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587838">
            <name>CharClassRule*&amp;</name>
            <content>
                <baseType ref="class_CharClassRule_4F146B0ADDD3D4BE0C73F0669E2FBBF45F3788EE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587837">
            <name>CharClassRule**</name>
            <content>
                <baseType ref="class_CharClassRule_4F146B0ADDD3D4BE0C73F0669E2FBBF45F3788EE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7010">
            <name>CharParser&amp;&amp;</name>
            <content>
                <baseType ref="class_CharParser_F30B4B7DDC9B8D3CD1476C03049B3C7189028FDA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_CharRangeRule_618435CFE0DB4BD0ABFBE4AFB8D7E8ED673F12F7">
            <name>CharRangeRule</name>
        </type>
        <type derived="true" id="type.11586843">
            <name>CharRangeRule&amp;</name>
            <content>
                <baseType ref="class_CharRangeRule_618435CFE0DB4BD0ABFBE4AFB8D7E8ED673F12F7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586842">
            <name>CharRangeRule*</name>
            <content>
                <baseType ref="class_CharRangeRule_618435CFE0DB4BD0ABFBE4AFB8D7E8ED673F12F7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587857">
            <name>CharRangeRule*&amp;</name>
            <content>
                <baseType ref="class_CharRangeRule_618435CFE0DB4BD0ABFBE4AFB8D7E8ED673F12F7"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587856">
            <name>CharRangeRule**</name>
            <content>
                <baseType ref="class_CharRangeRule_618435CFE0DB4BD0ABFBE4AFB8D7E8ED673F12F7"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CharRule_B7D4B34179E6B09B20AED1A5DC81494C02C4B5F2">
            <name>CharRule</name>
        </type>
        <type derived="true" id="type.11586825">
            <name>CharRule&amp;</name>
            <content>
                <baseType ref="class_CharRule_B7D4B34179E6B09B20AED1A5DC81494C02C4B5F2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586824">
            <name>CharRule*</name>
            <content>
                <baseType ref="class_CharRule_B7D4B34179E6B09B20AED1A5DC81494C02C4B5F2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587833">
            <name>CharRule*&amp;</name>
            <content>
                <baseType ref="class_CharRule_B7D4B34179E6B09B20AED1A5DC81494C02C4B5F2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587832">
            <name>CharRule**</name>
            <content>
                <baseType ref="class_CharRule_B7D4B34179E6B09B20AED1A5DC81494C02C4B5F2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB">
            <name>Class</name>
        </type>
        <type derived="true" id="type.11587515">
            <name>Class&amp;</name>
            <content>
                <baseType ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587516">
            <name>Class&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587514">
            <name>Class*</name>
            <content>
                <baseType ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ClassRule_CB84A917AD277E1C502ED913C6E87F636CB3D527">
            <name>ClassRule</name>
        </type>
        <type derived="true" id="type.11586837">
            <name>ClassRule&amp;</name>
            <content>
                <baseType ref="class_ClassRule_CB84A917AD277E1C502ED913C6E87F636CB3D527"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586836">
            <name>ClassRule*</name>
            <content>
                <baseType ref="class_ClassRule_CB84A917AD277E1C502ED913C6E87F636CB3D527"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587851">
            <name>ClassRule*&amp;</name>
            <content>
                <baseType ref="class_ClassRule_CB84A917AD277E1C502ED913C6E87F636CB3D527"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587850">
            <name>ClassRule**</name>
            <content>
                <baseType ref="class_ClassRule_CB84A917AD277E1C502ED913C6E87F636CB3D527"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6993">
            <name>CodeExpandingVisitor&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6892">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6929">
            <name>Complement&amp;&amp;</name>
            <content>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586682">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6380">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586682">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586681">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6379">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6987">
            <name>Const&amp;&amp;</name>
            <content>
                <baseType ref="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6947">
            <name>Construct&amp;&amp;</name>
            <content>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Context_0C61E182102956552E65E5786F357793121668DE">
            <name>Context</name>
        </type>
        <type id="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F">
            <name>Context</name>
        </type>
        <type id="class_Context_2995333F7FB4E575DF46CB6813BEB1F6F3A7E737">
            <name>Context</name>
        </type>
        <type id="class_Context_63EB906843D5D4373C35066FF5009683B089C34B">
            <name>Context</name>
        </type>
        <type id="class_Context_0C8D185307CAF62D15099706D5FE138E1B6E1288">
            <name>Context</name>
        </type>
        <type id="class_Context_C54426BCE970844EC5951E8505ABAD41E90D3B3C">
            <name>Context</name>
        </type>
        <type id="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2">
            <name>Context</name>
        </type>
        <type id="class_Context_0D46FA6C66A259182789E6D19E7461B00281875B">
            <name>Context</name>
        </type>
        <type id="class_Context_B08E85EEE770E2B21335C89CF53D58AB5087B3A6">
            <name>Context</name>
        </type>
        <type id="class_Context_8F48190AFFFA303A9B132F56189CDD4703FC16E1">
            <name>Context</name>
        </type>
        <type derived="true" id="type.11586852">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586822">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_0D46FA6C66A259182789E6D19E7461B00281875B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586810">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_B08E85EEE770E2B21335C89CF53D58AB5087B3A6"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586852">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586828">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_0C8D185307CAF62D15099706D5FE138E1B6E1288"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586834">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_63EB906843D5D4373C35066FF5009683B089C34B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586798">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_8F48190AFFFA303A9B132F56189CDD4703FC16E1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586840">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_2995333F7FB4E575DF46CB6813BEB1F6F3A7E737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586816">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_C54426BCE970844EC5951E8505ABAD41E90D3B3C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586846">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586804">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_0C61E182102956552E65E5786F357793121668DE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586827">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_0C8D185307CAF62D15099706D5FE138E1B6E1288"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586803">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_0C61E182102956552E65E5786F357793121668DE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586821">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_0D46FA6C66A259182789E6D19E7461B00281875B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586851">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586833">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_63EB906843D5D4373C35066FF5009683B089C34B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586851">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586839">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_2995333F7FB4E575DF46CB6813BEB1F6F3A7E737"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586845">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586815">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_C54426BCE970844EC5951E8505ABAD41E90D3B3C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586809">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_B08E85EEE770E2B21335C89CF53D58AB5087B3A6"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586797">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_8F48190AFFFA303A9B132F56189CDD4703FC16E1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587802">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_0C61E182102956552E65E5786F357793121668DE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587830">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_0C8D185307CAF62D15099706D5FE138E1B6E1288"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587797">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_8F48190AFFFA303A9B132F56189CDD4703FC16E1"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587818">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_0D46FA6C66A259182789E6D19E7461B00281875B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587859">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587835">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_63EB906843D5D4373C35066FF5009683B089C34B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587848">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_2995333F7FB4E575DF46CB6813BEB1F6F3A7E737"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587813">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_C54426BCE970844EC5951E8505ABAD41E90D3B3C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587854">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587808">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_B08E85EEE770E2B21335C89CF53D58AB5087B3A6"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587859">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587829">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_0C8D185307CAF62D15099706D5FE138E1B6E1288"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587801">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_0C61E182102956552E65E5786F357793121668DE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587807">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_B08E85EEE770E2B21335C89CF53D58AB5087B3A6"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587817">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_0D46FA6C66A259182789E6D19E7461B00281875B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587812">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_C54426BCE970844EC5951E8505ABAD41E90D3B3C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587858">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587796">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_8F48190AFFFA303A9B132F56189CDD4703FC16E1"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587858">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587853">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587834">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_63EB906843D5D4373C35066FF5009683B089C34B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587847">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_2995333F7FB4E575DF46CB6813BEB1F6F3A7E737"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11567094" specialization="true">
            <name>Counter&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type id="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30" specialization="true">
            <name>Counter&lt;T></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="11566721"/>
            </content>
        </type>
        <type derived="true" id="type.6618">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6659">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6637">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6621">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6630">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6652">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A" specialization="true">
            <name>Counter&lt;U></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="11566722"/>
            </content>
        </type>
        <type derived="true" id="type.6965">
            <name>DeleteStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6911">
            <name>Deref&amp;&amp;</name>
            <content>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6968">
            <name>DestroyStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E">
            <name>Dfa</name>
        </type>
        <type derived="true" id="type.11586737">
            <name>Dfa&amp;</name>
            <content>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587698">
            <name>Dfa&amp;&amp;</name>
            <content>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586736">
            <name>Dfa*</name>
            <content>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228">
            <name>DfaState</name>
        </type>
        <type derived="true" id="type.11586731">
            <name>DfaState&amp;</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587518">
            <name>DfaState&amp;&amp;</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586730">
            <name>DfaState*</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587700">
            <name>DfaState*&amp;</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587701">
            <name>DfaState*&amp;&amp;</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587699">
            <name>DfaState**</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6378">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586680">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6905">
            <name>DomObject&amp;&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6377">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586679">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7005">
            <name>ExpectationParser&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6971">
            <name>ExpressionStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <argumentType ref="11566463"/>
            </content>
        </type>
        <type derived="true" id="type.6451">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="11566456"/>
                <argumentType ref="11566457"/>
                <argumentType ref="11566458"/>
            </content>
        </type>
        <type derived="true" id="type.6447">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6448">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="11566464"/>
                <argumentType ref="type.11567453"/>
                <argumentType ref="type.11567455"/>
            </content>
        </type>
        <type derived="true" id="type.6450">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6453">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6455">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="11566465"/>
                <argumentType ref="type.11567470"/>
                <argumentType ref="type.11567471"/>
            </content>
        </type>
        <type derived="true" id="type.6449">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6452">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6454">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8" specialization="true">
            <name>FrontInsertIterator&lt;C></name>
            <content>
                <primaryType ref="class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8"/>
                <argumentType ref="11566470"/>
            </content>
        </type>
        <type derived="true" id="type.6472">
            <name>FrontInsertIterator&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6466">
            <name>FrontInsertIterator&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467" specialization="true">
            <name>FrontInsertProxy&lt;C></name>
            <content>
                <primaryType ref="class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
                <argumentType ref="11566467"/>
            </content>
        </type>
        <type derived="true" id="type.6458">
            <name>FrontInsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6469">
            <name>FrontInsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6462">
            <name>FrontInsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6875">
            <name>FunctionProfiler&amp;&amp;</name>
            <content>
                <baseType ref="class_FunctionProfiler_809E118D4757DEA417E0CB7F4E658DF7C4B79B00"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6977">
            <name>GotoCaseStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6962">
            <name>GotoStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="11566550"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <argumentType ref="11566552"/>
                <argumentType ref="11566553"/>
            </content>
        </type>
        <type derived="true" id="type.6506">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="11566579"/>
                <argumentType ref="11566580"/>
                <argumentType ref="11566581"/>
                <argumentType ref="11566582"/>
                <argumentType ref="11566583"/>
            </content>
        </type>
        <type derived="true" id="type.6526">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575828" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11575819"/>
                <argumentType ref="type.11575514"/>
                <argumentType ref="type.11575520"/>
            </content>
        </type>
        <type id="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="11566559"/>
                <argumentType ref="11566559"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="11566560"/>
                <argumentType ref="11566561"/>
            </content>
        </type>
        <type derived="true" id="type.6514">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11587266" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567210"/>
                <argumentType ref="type.11567209"/>
                <argumentType ref="type.11575828"/>
            </content>
        </type>
        <type id="type.6797" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567210"/>
                <argumentType ref="type.11567209"/>
                <argumentType ref="type.11575828"/>
            </content>
        </type>
        <type id="type.11587266" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567210"/>
                <argumentType ref="type.11567209"/>
                <argumentType ref="type.11575828"/>
            </content>
        </type>
        <type derived="true" id="type.6799">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.6797"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587268">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.11587266"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587267">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.11587266"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6798">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.6797"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587267">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.11587266"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587272" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567213"/>
                <argumentType ref="type.11567212"/>
                <argumentType ref="type.11575828"/>
            </content>
        </type>
        <type id="type.6803" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567213"/>
                <argumentType ref="type.11567212"/>
                <argumentType ref="type.11575828"/>
            </content>
        </type>
        <type derived="true" id="type.11587274">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.11587272"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6805">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.6803"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587274">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.11587272"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6804">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.6803"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587273">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.11587272"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6951">
            <name>Identifier&amp;&amp;</name>
            <content>
                <baseType ref="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A" specialization="true">
            <name>InsertProxy&lt;C></name>
            <content>
                <primaryType ref="class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
                <argumentType ref="11566587"/>
            </content>
        </type>
        <type derived="true" id="type.6542">
            <name>InsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6539">
            <name>InsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6535">
            <name>InsertProxy&lt;C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6932">
            <name>Invoke&amp;&amp;</name>
            <content>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7002">
            <name>KleeneStarParser&amp;&amp;</name>
            <content>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11587719" specialization="true">
            <name>Less&lt;int></name>
            <content>
                <primaryType ref="class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2"/>
                <argumentType ref="type.11565911"/>
            </content>
        </type>
        <type derived="true" id="type.11587733">
            <name>Less&lt;int>&amp;</name>
            <content>
                <baseType ref="type.11587719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587734">
            <name>Less&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587719"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587732">
            <name>Less&lt;int>*</name>
            <content>
                <baseType ref="type.11587719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <argumentType ref="11566595"/>
            </content>
        </type>
        <type derived="true" id="type.6545">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6546">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567977" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.11567959"/>
            </content>
        </type>
        <type derived="true" id="type.6509">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567977"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568130" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.11568113"/>
            </content>
        </type>
        <type derived="true" id="type.6517">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568130"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568315" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.11568296"/>
            </content>
        </type>
        <type derived="true" id="type.6530">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568315"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11587595" specialization="true">
            <name>List&lt;PtrNfaState*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.11586763"/>
            </content>
        </type>
        <type derived="true" id="type.11587597">
            <name>List&lt;PtrNfaState*>&amp;</name>
            <content>
                <baseType ref="type.11587595"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587619">
            <name>List&lt;PtrNfaState*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587595"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587596">
            <name>List&lt;PtrNfaState*>*</name>
            <content>
                <baseType ref="type.11587595"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11569841" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.6677">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569841"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11587519" specialization="true">
            <name>List&lt;System.Text.RegularExpressions.DfaState></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
            </content>
        </type>
        <type derived="true" id="type.11587521">
            <name>List&lt;System.Text.RegularExpressions.DfaState>&amp;</name>
            <content>
                <baseType ref="type.11587519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587539">
            <name>List&lt;System.Text.RegularExpressions.DfaState>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587519"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587520">
            <name>List&lt;System.Text.RegularExpressions.DfaState>*</name>
            <content>
                <baseType ref="type.11587519"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587541" specialization="true">
            <name>List&lt;System.Text.RegularExpressions.NfaState></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
            </content>
        </type>
        <type derived="true" id="type.11587543">
            <name>List&lt;System.Text.RegularExpressions.NfaState>&amp;</name>
            <content>
                <baseType ref="type.11587541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587561">
            <name>List&lt;System.Text.RegularExpressions.NfaState>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587541"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587542">
            <name>List&lt;System.Text.RegularExpressions.NfaState>*</name>
            <content>
                <baseType ref="type.11587541"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587492" specialization="true">
            <name>List&lt;System.Text.RegularExpressions.NfaStateNumberSet></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
            </content>
        </type>
        <type derived="true" id="type.11587494">
            <name>List&lt;System.Text.RegularExpressions.NfaStateNumberSet>&amp;</name>
            <content>
                <baseType ref="type.11587492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587512">
            <name>List&lt;System.Text.RegularExpressions.NfaStateNumberSet>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587493">
            <name>List&lt;System.Text.RegularExpressions.NfaStateNumberSet>*</name>
            <content>
                <baseType ref="type.11587492"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587574" specialization="true">
            <name>List&lt;System.Text.RegularExpressions.PtrNfaEdge></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
            </content>
        </type>
        <type derived="true" id="type.11587576">
            <name>List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp;</name>
            <content>
                <baseType ref="type.11587574"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587594">
            <name>List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587574"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587575">
            <name>List&lt;System.Text.RegularExpressions.PtrNfaEdge>*</name>
            <content>
                <baseType ref="type.11587574"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="11566742"/>
            </content>
        </type>
        <type derived="true" id="type.6549">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6589">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6671">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11587469" specialization="true">
            <name>List&lt;int></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.11565911"/>
            </content>
        </type>
        <type derived="true" id="type.11587471">
            <name>List&lt;int>&amp;</name>
            <content>
                <baseType ref="type.11587469"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587491">
            <name>List&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587469"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587470">
            <name>List&lt;int>*</name>
            <content>
                <baseType ref="type.11587469"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6955">
            <name>Literal&amp;&amp;</name>
            <content>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1" specialization="true">
            <name>LockGuard&lt;Mtx></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="11566637"/>
            </content>
        </type>
        <type derived="true" id="type.6577">
            <name>LockGuard&lt;Mtx>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572183" specialization="true">
            <name>LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.6764">
            <name>LockGuard&lt;System.Threading.Mutex>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572183"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6988">
            <name>LvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6574">
            <name>Mtx&amp;</name>
            <content>
                <baseType ref="11566637"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6950">
            <name>New&amp;&amp;</name>
            <content>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57">
            <name>Nfa</name>
        </type>
        <type derived="true" id="type.11586755">
            <name>Nfa&amp;</name>
            <content>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587660">
            <name>Nfa&amp;&amp;</name>
            <content>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586754">
            <name>Nfa*</name>
            <content>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662">
            <name>NfaState</name>
        </type>
        <type derived="true" id="type.11586749">
            <name>NfaState&amp;</name>
            <content>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587540">
            <name>NfaState&amp;&amp;</name>
            <content>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586748">
            <name>NfaState*</name>
            <content>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587673">
            <name>NfaState*&amp;</name>
            <content>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587672">
            <name>NfaState**</name>
            <content>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3">
            <name>NfaStateNumberSet</name>
        </type>
        <type derived="true" id="type.11586743">
            <name>NfaStateNumberSet&amp;</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587513">
            <name>NfaStateNumberSet&amp;&amp;</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586742">
            <name>NfaStateNumberSet*</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587667">
            <name>NfaStateNumberSet*&amp;</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587668">
            <name>NfaStateNumberSet*&amp;&amp;</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587666">
            <name>NfaStateNumberSet**</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6908">
            <name>Not&amp;&amp;</name>
            <content>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6996">
            <name>OptionalParser&amp;&amp;</name>
            <content>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11566751">
            <name>OutputStream&amp;</name>
            <content>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.11587278" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.11587266"/>
                <argumentType ref="type.11565906"/>
            </content>
        </type>
        <type id="type.6809" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.6797"/>
                <argumentType ref="type.11565906"/>
            </content>
        </type>
        <type derived="true" id="type.11587280">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.11587278"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6811">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.6809"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587279">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.11587278"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6810">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.6809"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587279">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.11587278"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="11566651"/>
                <argumentType ref="11566652"/>
            </content>
        </type>
        <type derived="true" id="type.11586684">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6382">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586684">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6381">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586683">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7009">
            <name>ParsingData&amp;&amp;</name>
            <content>
                <baseType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586686">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6384">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586686">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6383">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586685">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11574532">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586685">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6990">
            <name>Pointer&amp;&amp;</name>
            <content>
                <baseType ref="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6999">
            <name>PositiveParser&amp;&amp;</name>
            <content>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6938">
            <name>PostfixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_PostfixExpressionRule_54839DB8B1E97899D69C4D4C08ADD8922DA2C262">
            <name>PostfixExpressionRule</name>
        </type>
        <type derived="true" id="type.11586813">
            <name>PostfixExpressionRule&amp;</name>
            <content>
                <baseType ref="class_PostfixExpressionRule_54839DB8B1E97899D69C4D4C08ADD8922DA2C262"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586812">
            <name>PostfixExpressionRule*</name>
            <content>
                <baseType ref="class_PostfixExpressionRule_54839DB8B1E97899D69C4D4C08ADD8922DA2C262"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587816">
            <name>PostfixExpressionRule*&amp;</name>
            <content>
                <baseType ref="class_PostfixExpressionRule_54839DB8B1E97899D69C4D4C08ADD8922DA2C262"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587815">
            <name>PostfixExpressionRule**</name>
            <content>
                <baseType ref="class_PostfixExpressionRule_54839DB8B1E97899D69C4D4C08ADD8922DA2C262"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6935">
            <name>PostfixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6920">
            <name>PrefixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6917">
            <name>PrefixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_PrimaryExpressionRule_06E24805A354F46D89064514E21FF94363E8A751">
            <name>PrimaryExpressionRule</name>
        </type>
        <type derived="true" id="type.11586819">
            <name>PrimaryExpressionRule&amp;</name>
            <content>
                <baseType ref="class_PrimaryExpressionRule_06E24805A354F46D89064514E21FF94363E8A751"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586818">
            <name>PrimaryExpressionRule*</name>
            <content>
                <baseType ref="class_PrimaryExpressionRule_06E24805A354F46D89064514E21FF94363E8A751"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587821">
            <name>PrimaryExpressionRule*&amp;</name>
            <content>
                <baseType ref="class_PrimaryExpressionRule_06E24805A354F46D89064514E21FF94363E8A751"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587820">
            <name>PrimaryExpressionRule**</name>
            <content>
                <baseType ref="class_PrimaryExpressionRule_06E24805A354F46D89064514E21FF94363E8A751"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB">
            <name>PtrNfa</name>
        </type>
        <type derived="true" id="type.11586779">
            <name>PtrNfa&amp;</name>
            <content>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587675">
            <name>PtrNfa&amp;&amp;</name>
            <content>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586778">
            <name>PtrNfa*</name>
            <content>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3">
            <name>PtrNfaEdge</name>
        </type>
        <type derived="true" id="type.11586770">
            <name>PtrNfaEdge&amp;</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587573">
            <name>PtrNfaEdge&amp;&amp;</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586769">
            <name>PtrNfaEdge*</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587766">
            <name>PtrNfaEdge*&amp;</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587767">
            <name>PtrNfaEdge*&amp;&amp;</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587765">
            <name>PtrNfaEdge**</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8">
            <name>PtrNfaState</name>
        </type>
        <type derived="true" id="type.11586764">
            <name>PtrNfaState&amp;</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586763">
            <name>PtrNfaState*</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587610">
            <name>PtrNfaState*&amp;</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587620">
            <name>PtrNfaState*&amp;&amp;</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587611">
            <name>PtrNfaState**</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587648">
            <name>PtrNfaState**&amp;</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587649">
            <name>PtrNfaState**&amp;&amp;</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587647">
            <name>PtrNfaState***</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2">
            <name>PtrNfaStateFactory</name>
        </type>
        <type derived="true" id="type.11586776">
            <name>PtrNfaStateFactory&amp;</name>
            <content>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586775">
            <name>PtrNfaStateFactory*</name>
            <content>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587775">
            <name>PtrNfaStateFactory*&amp;</name>
            <content>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587774">
            <name>PtrNfaStateFactory**</name>
            <content>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11576247" specialization="true">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574389"/>
                <argumentType ref="type.11576245"/>
                <argumentType ref="type.11576246"/>
            </content>
        </type>
        <type derived="true" id="type.6829">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576247"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571024" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566857"/>
                <argumentType ref="type.11570867"/>
                <argumentType ref="type.11571023"/>
            </content>
        </type>
        <type derived="true" id="type.6721">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571024"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572064" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566928"/>
                <argumentType ref="type.11571907"/>
                <argumentType ref="type.11572063"/>
            </content>
        </type>
        <type derived="true" id="type.6746">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571648" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566902"/>
                <argumentType ref="type.11571491"/>
                <argumentType ref="type.11571647"/>
            </content>
        </type>
        <type derived="true" id="type.6736">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571648"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571856" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566915"/>
                <argumentType ref="type.11571699"/>
                <argumentType ref="type.11571855"/>
            </content>
        </type>
        <type derived="true" id="type.6741">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571856"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570387" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566827"/>
                <argumentType ref="type.11570216"/>
                <argumentType ref="type.11570386"/>
            </content>
        </type>
        <type derived="true" id="type.6706">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570387"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570605" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566837"/>
                <argumentType ref="type.11570448"/>
                <argumentType ref="type.11570604"/>
            </content>
        </type>
        <type derived="true" id="type.6711">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570605"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575789" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575756"/>
                <argumentType ref="type.11575787"/>
                <argumentType ref="type.11575788"/>
            </content>
        </type>
        <type derived="true" id="type.6796">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575789"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575780" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575756"/>
                <argumentType ref="type.11575778"/>
                <argumentType ref="type.11575779"/>
            </content>
        </type>
        <type derived="true" id="type.6795">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575780"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568072" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568038"/>
                <argumentType ref="type.11568070"/>
                <argumentType ref="type.11568071"/>
            </content>
        </type>
        <type id="type.11567994" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567959"/>
                <argumentType ref="type.11567992"/>
                <argumentType ref="type.11567993"/>
            </content>
        </type>
        <type derived="true" id="type.6508">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567994"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6513">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568072"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568063" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568038"/>
                <argumentType ref="type.11568061"/>
                <argumentType ref="type.11568062"/>
            </content>
        </type>
        <type id="type.11567985" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567959"/>
                <argumentType ref="type.11567983"/>
                <argumentType ref="type.11567984"/>
            </content>
        </type>
        <type derived="true" id="type.6507">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567985"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6512">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568063"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571001" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570967"/>
                <argumentType ref="type.11570999"/>
                <argumentType ref="type.11571000"/>
            </content>
        </type>
        <type derived="true" id="type.6720">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571001"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570992" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570967"/>
                <argumentType ref="type.11570990"/>
                <argumentType ref="type.11570991"/>
            </content>
        </type>
        <type derived="true" id="type.6719">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570992"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572041" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572007"/>
                <argumentType ref="type.11572039"/>
                <argumentType ref="type.11572040"/>
            </content>
        </type>
        <type derived="true" id="type.6745">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572041"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572032" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572007"/>
                <argumentType ref="type.11572030"/>
                <argumentType ref="type.11572031"/>
            </content>
        </type>
        <type derived="true" id="type.6744">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572032"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571625" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571591"/>
                <argumentType ref="type.11571623"/>
                <argumentType ref="type.11571624"/>
            </content>
        </type>
        <type derived="true" id="type.6735">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571625"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571616" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571591"/>
                <argumentType ref="type.11571614"/>
                <argumentType ref="type.11571615"/>
            </content>
        </type>
        <type derived="true" id="type.6734">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571616"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571833" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571799"/>
                <argumentType ref="type.11571831"/>
                <argumentType ref="type.11571832"/>
            </content>
        </type>
        <type derived="true" id="type.6740">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571833"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571824" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571799"/>
                <argumentType ref="type.11571822"/>
                <argumentType ref="type.11571823"/>
            </content>
        </type>
        <type derived="true" id="type.6739">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571824"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570371" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570337"/>
                <argumentType ref="type.11570369"/>
                <argumentType ref="type.11570370"/>
            </content>
        </type>
        <type derived="true" id="type.6705">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570371"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570362" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570337"/>
                <argumentType ref="type.11570360"/>
                <argumentType ref="type.11570361"/>
            </content>
        </type>
        <type derived="true" id="type.6704">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570362"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570582" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570548"/>
                <argumentType ref="type.11570580"/>
                <argumentType ref="type.11570581"/>
            </content>
        </type>
        <type derived="true" id="type.6710">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570582"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570573" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570548"/>
                <argumentType ref="type.11570571"/>
                <argumentType ref="type.11570572"/>
            </content>
        </type>
        <type derived="true" id="type.6709">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570573"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570793" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570759"/>
                <argumentType ref="type.11570791"/>
                <argumentType ref="type.11570792"/>
            </content>
        </type>
        <type derived="true" id="type.6715">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570793"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570784" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570759"/>
                <argumentType ref="type.11570782"/>
                <argumentType ref="type.11570783"/>
            </content>
        </type>
        <type derived="true" id="type.6714">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570784"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571417" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571383"/>
                <argumentType ref="type.11571415"/>
                <argumentType ref="type.11571416"/>
            </content>
        </type>
        <type derived="true" id="type.6730">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571417"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571408" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571383"/>
                <argumentType ref="type.11571406"/>
                <argumentType ref="type.11571407"/>
            </content>
        </type>
        <type derived="true" id="type.6729">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571408"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571209" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571175"/>
                <argumentType ref="type.11571207"/>
                <argumentType ref="type.11571208"/>
            </content>
        </type>
        <type derived="true" id="type.6725">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571209"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571200" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571175"/>
                <argumentType ref="type.11571198"/>
                <argumentType ref="type.11571199"/>
            </content>
        </type>
        <type derived="true" id="type.6724">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571200"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576035" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576001"/>
                <argumentType ref="type.11576033"/>
                <argumentType ref="type.11576034"/>
            </content>
        </type>
        <type derived="true" id="type.6820">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576035"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576026" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576001"/>
                <argumentType ref="type.11576024"/>
                <argumentType ref="type.11576025"/>
            </content>
        </type>
        <type derived="true" id="type.6819">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576026"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576111" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576077"/>
                <argumentType ref="type.11576109"/>
                <argumentType ref="type.11576110"/>
            </content>
        </type>
        <type derived="true" id="type.6822">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576111"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576102" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576077"/>
                <argumentType ref="type.11576100"/>
                <argumentType ref="type.11576101"/>
            </content>
        </type>
        <type derived="true" id="type.6821">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576102"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576358" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576324"/>
                <argumentType ref="type.11576356"/>
                <argumentType ref="type.11576357"/>
            </content>
        </type>
        <type derived="true" id="type.6832">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576349" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576324"/>
                <argumentType ref="type.11576347"/>
                <argumentType ref="type.11576348"/>
            </content>
        </type>
        <type derived="true" id="type.6831">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576349"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575601" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575567"/>
                <argumentType ref="type.11575599"/>
                <argumentType ref="type.11575600"/>
            </content>
        </type>
        <type derived="true" id="type.6791">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575601"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575592" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575567"/>
                <argumentType ref="type.11575590"/>
                <argumentType ref="type.11575591"/>
            </content>
        </type>
        <type derived="true" id="type.6790">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575592"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570925" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570891"/>
                <argumentType ref="type.11570923"/>
                <argumentType ref="type.11570924"/>
            </content>
        </type>
        <type derived="true" id="type.6718">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570925"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570916" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570891"/>
                <argumentType ref="type.11570914"/>
                <argumentType ref="type.11570915"/>
            </content>
        </type>
        <type derived="true" id="type.6717">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570916"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571965" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571931"/>
                <argumentType ref="type.11571963"/>
                <argumentType ref="type.11571964"/>
            </content>
        </type>
        <type derived="true" id="type.6743">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571965"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571956" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571931"/>
                <argumentType ref="type.11571954"/>
                <argumentType ref="type.11571955"/>
            </content>
        </type>
        <type derived="true" id="type.6742">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571956"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571549" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571515"/>
                <argumentType ref="type.11571547"/>
                <argumentType ref="type.11571548"/>
            </content>
        </type>
        <type derived="true" id="type.6733">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571549"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571540" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571515"/>
                <argumentType ref="type.11571538"/>
                <argumentType ref="type.11571539"/>
            </content>
        </type>
        <type derived="true" id="type.6732">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571540"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571757" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571723"/>
                <argumentType ref="type.11571755"/>
                <argumentType ref="type.11571756"/>
            </content>
        </type>
        <type derived="true" id="type.6738">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571757"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571748" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571723"/>
                <argumentType ref="type.11571746"/>
                <argumentType ref="type.11571747"/>
            </content>
        </type>
        <type derived="true" id="type.6737">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571748"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570274" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570240"/>
                <argumentType ref="type.11570272"/>
                <argumentType ref="type.11570273"/>
            </content>
        </type>
        <type derived="true" id="type.6703">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570274"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570265" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570240"/>
                <argumentType ref="type.11570263"/>
                <argumentType ref="type.11570264"/>
            </content>
        </type>
        <type derived="true" id="type.6702">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570265"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570506" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570472"/>
                <argumentType ref="type.11570504"/>
                <argumentType ref="type.11570505"/>
            </content>
        </type>
        <type derived="true" id="type.6708">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570506"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570497" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570472"/>
                <argumentType ref="type.11570495"/>
                <argumentType ref="type.11570496"/>
            </content>
        </type>
        <type derived="true" id="type.6707">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570497"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570717" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570683"/>
                <argumentType ref="type.11570715"/>
                <argumentType ref="type.11570716"/>
            </content>
        </type>
        <type derived="true" id="type.6713">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570717"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570708" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11570683"/>
                <argumentType ref="type.11570706"/>
                <argumentType ref="type.11570707"/>
            </content>
        </type>
        <type derived="true" id="type.6712">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570708"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571341" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571307"/>
                <argumentType ref="type.11571339"/>
                <argumentType ref="type.11571340"/>
            </content>
        </type>
        <type derived="true" id="type.6728">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571341"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571332" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571307"/>
                <argumentType ref="type.11571330"/>
                <argumentType ref="type.11571331"/>
            </content>
        </type>
        <type derived="true" id="type.6727">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571332"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571133" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571099"/>
                <argumentType ref="type.11571131"/>
                <argumentType ref="type.11571132"/>
            </content>
        </type>
        <type derived="true" id="type.6723">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571133"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571124" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11571099"/>
                <argumentType ref="type.11571122"/>
                <argumentType ref="type.11571123"/>
            </content>
        </type>
        <type derived="true" id="type.6722">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571124"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575873" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575841"/>
                <argumentType ref="type.11575871"/>
                <argumentType ref="type.11575872"/>
            </content>
        </type>
        <type derived="true" id="type.6813">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575873"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575864" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575841"/>
                <argumentType ref="type.11575862"/>
                <argumentType ref="type.11575863"/>
            </content>
        </type>
        <type derived="true" id="type.6812">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575864"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568221" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568187"/>
                <argumentType ref="type.11568219"/>
                <argumentType ref="type.11568220"/>
            </content>
        </type>
        <type id="type.11568147" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568113"/>
                <argumentType ref="type.11568145"/>
                <argumentType ref="type.11568146"/>
            </content>
        </type>
        <type derived="true" id="type.6520">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568221"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6516">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568147"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568212" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568187"/>
                <argumentType ref="type.11568210"/>
                <argumentType ref="type.11568211"/>
            </content>
        </type>
        <type id="type.11568138" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568113"/>
                <argumentType ref="type.11568136"/>
                <argumentType ref="type.11568137"/>
            </content>
        </type>
        <type derived="true" id="type.6515">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568138"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6519">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568212"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568332" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568296"/>
                <argumentType ref="type.11568330"/>
                <argumentType ref="type.11568331"/>
            </content>
        </type>
        <type derived="true" id="type.6529">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568332"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568323" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11568296"/>
                <argumentType ref="type.11568321"/>
                <argumentType ref="type.11568322"/>
            </content>
        </type>
        <type derived="true" id="type.6528">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568323"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="11566769"/>
                <argumentType ref="type.11570019"/>
                <argumentType ref="type.11570020"/>
            </content>
        </type>
        <type derived="true" id="type.6679">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6695">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6699">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6673">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6691">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6687">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6683">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="11566768"/>
                <argumentType ref="type.11569962"/>
                <argumentType ref="type.11569963"/>
            </content>
        </type>
        <type derived="true" id="type.6690">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6682">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6694">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6686">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6698">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6678">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6672">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570816" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566847"/>
                <argumentType ref="type.11570659"/>
                <argumentType ref="type.11570815"/>
            </content>
        </type>
        <type derived="true" id="type.6716">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570816"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576138" specialization="true">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574494"/>
                <argumentType ref="type.11576053"/>
                <argumentType ref="type.11576134"/>
            </content>
        </type>
        <type derived="true" id="type.6823">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576138"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576273" specialization="true">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574502"/>
                <argumentType ref="type.11576271"/>
                <argumentType ref="type.11576272"/>
            </content>
        </type>
        <type derived="true" id="type.6830">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576273"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571433" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566889"/>
                <argumentType ref="type.11571283"/>
                <argumentType ref="type.11571432"/>
            </content>
        </type>
        <type derived="true" id="type.6731">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571433"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567340" specialization="true">
            <name>RandomAccessIter&lt;Pair&lt;int, String&lt;char>>, Pair&lt;int, String&lt;char>>&amp;, Pair&lt;int, String&lt;char>>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567320"/>
                <argumentType ref="type.11567322"/>
                <argumentType ref="type.11567321"/>
            </content>
        </type>
        <type derived="true" id="type.6442">
            <name>RandomAccessIter&lt;Pair&lt;int, String&lt;char>>, Pair&lt;int, String&lt;char>>&amp;, Pair&lt;int, String&lt;char>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567340"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11587612" specialization="true">
            <name>RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11586763"/>
                <argumentType ref="type.11587610"/>
                <argumentType ref="type.11587611"/>
            </content>
        </type>
        <type derived="true" id="type.11587614">
            <name>RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**>&amp;</name>
            <content>
                <baseType ref="type.11587612"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587618">
            <name>RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587612"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587613">
            <name>RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**>*</name>
            <content>
                <baseType ref="type.11587612"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587603" specialization="true">
            <name>RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11586763"/>
                <argumentType ref="type.11587601"/>
                <argumentType ref="type.11587602"/>
            </content>
        </type>
        <type derived="true" id="type.11587605">
            <name>RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**>&amp;</name>
            <content>
                <baseType ref="type.11587603"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587609">
            <name>RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587604">
            <name>RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**>*</name>
            <content>
                <baseType ref="type.11587603"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11575686" specialization="true">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574733"/>
                <argumentType ref="type.11575684"/>
                <argumentType ref="type.11575685"/>
            </content>
        </type>
        <type derived="true" id="type.6794">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575686"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11571232" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11566870"/>
                <argumentType ref="type.11571075"/>
                <argumentType ref="type.11571231"/>
            </content>
        </type>
        <type derived="true" id="type.6726">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.11571232"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570089" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11570055"/>
                <argumentType ref="type.11570054"/>
            </content>
        </type>
        <type id="type.11569995" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569958"/>
                <argumentType ref="type.11569957"/>
            </content>
        </type>
        <type id="type.11569948" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569911"/>
                <argumentType ref="type.11569910"/>
            </content>
        </type>
        <type id="type.11569854" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569817"/>
                <argumentType ref="type.11569816"/>
            </content>
        </type>
        <type id="type.11570042" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11570005"/>
                <argumentType ref="type.11570004"/>
            </content>
        </type>
        <type id="type.11570136" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11570099"/>
                <argumentType ref="type.11570098"/>
            </content>
        </type>
        <type id="type.11569901" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569864"/>
                <argumentType ref="type.11569863"/>
            </content>
        </type>
        <type derived="true" id="type.6697">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570089"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6676">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569854"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6689">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569995"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6693">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570042"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6701">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570136"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6685">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6681">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569901"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11570129" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11570102"/>
                <argumentType ref="type.11570101"/>
            </content>
        </type>
        <type id="type.11569941" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569914"/>
                <argumentType ref="type.11569913"/>
            </content>
        </type>
        <type id="type.11570082" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11570058"/>
                <argumentType ref="type.11570057"/>
            </content>
        </type>
        <type id="type.11569894" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569867"/>
                <argumentType ref="type.11569866"/>
            </content>
        </type>
        <type id="type.11569847" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569820"/>
                <argumentType ref="type.11569819"/>
            </content>
        </type>
        <type id="type.11569988" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11569961"/>
                <argumentType ref="type.11569960"/>
            </content>
        </type>
        <type id="type.11570035" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11570008"/>
                <argumentType ref="type.11570007"/>
            </content>
        </type>
        <type id="type.11570082" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11570058"/>
                <argumentType ref="type.11570057"/>
            </content>
        </type>
        <type derived="true" id="type.6675">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569847"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6684">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569941"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6696">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570082"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6692">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570035"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6688">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569988"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6680">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569894"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6700">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11570129"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567155" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567120"/>
                <argumentType ref="type.11567122"/>
                <argumentType ref="type.11567121"/>
            </content>
        </type>
        <type derived="true" id="type.6412">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567155"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567148" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567120"/>
                <argumentType ref="type.11567125"/>
                <argumentType ref="type.11567124"/>
            </content>
        </type>
        <type derived="true" id="type.6411">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567148"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567245" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567210"/>
                <argumentType ref="type.11567209"/>
            </content>
        </type>
        <type derived="true" id="type.6431">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567245"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567238" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567208"/>
                <argumentType ref="type.11567213"/>
                <argumentType ref="type.11567212"/>
            </content>
        </type>
        <type derived="true" id="type.6430">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567238"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567200" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567163"/>
                <argumentType ref="type.11567165"/>
                <argumentType ref="type.11567164"/>
            </content>
        </type>
        <type derived="true" id="type.6421">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567200"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567193" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11567163"/>
                <argumentType ref="type.11567168"/>
                <argumentType ref="type.11567167"/>
            </content>
        </type>
        <type derived="true" id="type.6420">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567193"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576223" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_AttrOrVar_50B6EF23E232C2A406B7F5C94499D4CC0CC6D353"/>
                <argumentType ref="type.11574725"/>
                <argumentType ref="type.11574724"/>
            </content>
        </type>
        <type derived="true" id="type.6828">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576223"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576209" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.11574560"/>
                <argumentType ref="type.11574559"/>
            </content>
        </type>
        <type derived="true" id="type.6827">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576209"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576202" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.11574563"/>
                <argumentType ref="type.11574562"/>
            </content>
        </type>
        <type derived="true" id="type.6826">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576202"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575960" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.11575942"/>
                <argumentType ref="type.11575941"/>
            </content>
        </type>
        <type derived="true" id="type.6818">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575960"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575953" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.11575950"/>
                <argumentType ref="type.11575951"/>
            </content>
        </type>
        <type derived="true" id="type.6817">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575953"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11587532" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <argumentType ref="type.11586731"/>
                <argumentType ref="type.11586730"/>
            </content>
        </type>
        <type derived="true" id="type.11587534">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*>&amp;</name>
            <content>
                <baseType ref="type.11587532"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6867">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587532"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587533">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*>*</name>
            <content>
                <baseType ref="type.11587532"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587525" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <argumentType ref="type.11586734"/>
                <argumentType ref="type.11586733"/>
            </content>
        </type>
        <type derived="true" id="type.11587527">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*>&amp;</name>
            <content>
                <baseType ref="type.11587525"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6866">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587525"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587526">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*>*</name>
            <content>
                <baseType ref="type.11587525"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587554" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <argumentType ref="type.11586749"/>
                <argumentType ref="type.11586748"/>
            </content>
        </type>
        <type derived="true" id="type.11587556">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*>&amp;</name>
            <content>
                <baseType ref="type.11587554"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6868">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587554"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587555">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*>*</name>
            <content>
                <baseType ref="type.11587554"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587547" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <argumentType ref="type.11586752"/>
                <argumentType ref="type.11586751"/>
            </content>
        </type>
        <type derived="true" id="type.11587549">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*>&amp;</name>
            <content>
                <baseType ref="type.11587547"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587553">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587547"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587548">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*>*</name>
            <content>
                <baseType ref="type.11587547"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587505" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <argumentType ref="type.11586743"/>
                <argumentType ref="type.11586742"/>
            </content>
        </type>
        <type derived="true" id="type.11587507">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*>&amp;</name>
            <content>
                <baseType ref="type.11587505"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6865">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587505"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587506">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*>*</name>
            <content>
                <baseType ref="type.11587505"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587498" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <argumentType ref="type.11586746"/>
                <argumentType ref="type.11586745"/>
            </content>
        </type>
        <type derived="true" id="type.11587500">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*>&amp;</name>
            <content>
                <baseType ref="type.11587498"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587504">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587498"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587499">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*>*</name>
            <content>
                <baseType ref="type.11587498"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587587" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <argumentType ref="type.11586770"/>
                <argumentType ref="type.11586769"/>
            </content>
        </type>
        <type derived="true" id="type.11587589">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*>&amp;</name>
            <content>
                <baseType ref="type.11587587"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587593">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587587"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587588">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*>*</name>
            <content>
                <baseType ref="type.11587587"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587580" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <argumentType ref="type.11586773"/>
                <argumentType ref="type.11586772"/>
            </content>
        </type>
        <type derived="true" id="type.11587582">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*>&amp;</name>
            <content>
                <baseType ref="type.11587580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587586">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587580"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587581">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*>*</name>
            <content>
                <baseType ref="type.11587580"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11572094" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.11566941"/>
                <argumentType ref="type.11566940"/>
            </content>
        </type>
        <type derived="true" id="type.6748">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572094"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572087" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.11566944"/>
                <argumentType ref="type.11566943"/>
            </content>
        </type>
        <type derived="true" id="type.6747">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572087"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="11566678"/>
                <argumentType ref="11566679"/>
                <argumentType ref="11566680"/>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="11566675"/>
                <argumentType ref="11566676"/>
                <argumentType ref="11566677"/>
            </content>
        </type>
        <type derived="true" id="type.6596">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6595">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6594">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6593">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6592">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6591">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6590">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="11566658"/>
                <argumentType ref="type.11568941"/>
                <argumentType ref="type.11568942"/>
            </content>
        </type>
        <type derived="true" id="type.6670">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6548">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6552">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6554">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6588">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="11566606"/>
                <argumentType ref="type.11568556"/>
                <argumentType ref="type.11568557"/>
            </content>
        </type>
        <type derived="true" id="type.6669">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6547">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6551">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6553">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6587">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11574200" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574184"/>
                <argumentType ref="type.11574189"/>
                <argumentType ref="type.11574188"/>
            </content>
        </type>
        <type derived="true" id="type.6779">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574200"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11574260" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574244"/>
                <argumentType ref="type.11574249"/>
                <argumentType ref="type.11574248"/>
            </content>
        </type>
        <type derived="true" id="type.6780">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574260"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11574099" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574059"/>
                <argumentType ref="type.11574064"/>
                <argumentType ref="type.11574063"/>
            </content>
        </type>
        <type derived="true" id="type.6777">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574099"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11574151" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11574138"/>
                <argumentType ref="type.11574143"/>
                <argumentType ref="type.11574142"/>
            </content>
        </type>
        <type derived="true" id="type.6778">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574151"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575926" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575904"/>
                <argumentType ref="type.11575909"/>
                <argumentType ref="type.11575908"/>
            </content>
        </type>
        <type derived="true" id="type.6816">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575926"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575499" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575477"/>
                <argumentType ref="type.11575482"/>
                <argumentType ref="type.11575481"/>
            </content>
        </type>
        <type derived="true" id="type.6789">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575499"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576184" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576164"/>
                <argumentType ref="type.11576166"/>
                <argumentType ref="type.11576165"/>
            </content>
        </type>
        <type derived="true" id="type.6825">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576184"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576177" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11576164"/>
                <argumentType ref="type.11576169"/>
                <argumentType ref="type.11576168"/>
            </content>
        </type>
        <type derived="true" id="type.6824">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576177"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575468" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575448"/>
                <argumentType ref="type.11575450"/>
                <argumentType ref="type.11575449"/>
            </content>
        </type>
        <type derived="true" id="type.6788">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575468"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575461" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11575448"/>
                <argumentType ref="type.11575453"/>
                <argumentType ref="type.11575452"/>
            </content>
        </type>
        <type derived="true" id="type.6787">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575461"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572123" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572103"/>
                <argumentType ref="type.11572105"/>
                <argumentType ref="type.11572104"/>
            </content>
        </type>
        <type derived="true" id="type.6750">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572123"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572116" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572103"/>
                <argumentType ref="type.11572108"/>
                <argumentType ref="type.11572107"/>
            </content>
        </type>
        <type derived="true" id="type.6749">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572116"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572219" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572199"/>
                <argumentType ref="type.11572201"/>
                <argumentType ref="type.11572200"/>
            </content>
        </type>
        <type derived="true" id="type.6766">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572219"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572212" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572199"/>
                <argumentType ref="type.11572204"/>
                <argumentType ref="type.11572203"/>
            </content>
        </type>
        <type derived="true" id="type.6765">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572212"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572151" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572131"/>
                <argumentType ref="type.11572133"/>
                <argumentType ref="type.11572132"/>
            </content>
        </type>
        <type derived="true" id="type.6752">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572151"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572144" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572131"/>
                <argumentType ref="type.11572136"/>
                <argumentType ref="type.11572135"/>
            </content>
        </type>
        <type derived="true" id="type.6751">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572144"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572254" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572234"/>
                <argumentType ref="type.11572236"/>
                <argumentType ref="type.11572235"/>
            </content>
        </type>
        <type derived="true" id="type.6768">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572254"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572247" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11572234"/>
                <argumentType ref="type.11572239"/>
                <argumentType ref="type.11572238"/>
            </content>
        </type>
        <type derived="true" id="type.6767">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572247"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.6566" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565908"/>
                <argumentType ref="type.11565929"/>
                <argumentType ref="type.11565928"/>
            </content>
        </type>
        <type id="type.11587034" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565908"/>
                <argumentType ref="type.11565929"/>
                <argumentType ref="type.11565928"/>
            </content>
        </type>
        <type id="type.11573817" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565908"/>
                <argumentType ref="type.11565929"/>
                <argumentType ref="type.11565928"/>
            </content>
        </type>
        <type id="type.11575099" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565908"/>
                <argumentType ref="type.11565929"/>
                <argumentType ref="type.11565928"/>
            </content>
        </type>
        <type id="type.11568842" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565908"/>
                <argumentType ref="type.11565929"/>
                <argumentType ref="type.11565928"/>
            </content>
        </type>
        <type derived="true" id="type.11587036">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.11587034"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6568">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.6566"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6573">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568842"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6856">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587034"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6785">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575099"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6775">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11573817"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6572">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.6566"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6567">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.6566"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587035">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.11587034"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11586872" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565917"/>
                <argumentType ref="type.11565956"/>
                <argumentType ref="type.11565955"/>
            </content>
        </type>
        <type id="type.11573655" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565917"/>
                <argumentType ref="type.11565956"/>
                <argumentType ref="type.11565955"/>
            </content>
        </type>
        <type id="type.6404" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565917"/>
                <argumentType ref="type.11565956"/>
                <argumentType ref="type.11565955"/>
            </content>
        </type>
        <type id="type.11586872" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565917"/>
                <argumentType ref="type.11565956"/>
                <argumentType ref="type.11565955"/>
            </content>
        </type>
        <type id="type.11574937" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565917"/>
                <argumentType ref="type.11565956"/>
                <argumentType ref="type.11565955"/>
            </content>
        </type>
        <type derived="true" id="type.11586874">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.11586872"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6406">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.6404"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586878">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11586872"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6781">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574937"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6771">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11573655"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6410">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.6404"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586873">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.11586872"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6405">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.6404"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586873">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.11586872"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587477" specialization="true">
            <name>RandomAccessIter&lt;int, const int&amp;, const int*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565911"/>
                <argumentType ref="type.11567323"/>
                <argumentType ref="type.11587475"/>
            </content>
        </type>
        <type derived="true" id="type.11587479">
            <name>RandomAccessIter&lt;int, const int&amp;, const int*>&amp;</name>
            <content>
                <baseType ref="type.11587477"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587483">
            <name>RandomAccessIter&lt;int, const int&amp;, const int*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587477"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587478">
            <name>RandomAccessIter&lt;int, const int&amp;, const int*>*</name>
            <content>
                <baseType ref="type.11587477"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587484" specialization="true">
            <name>RandomAccessIter&lt;int, int&amp;, int*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565911"/>
                <argumentType ref="type.11565938"/>
                <argumentType ref="type.11565937"/>
            </content>
        </type>
        <type id="type.6858" specialization="true">
            <name>RandomAccessIter&lt;int, int&amp;, int*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565911"/>
                <argumentType ref="type.11565938"/>
                <argumentType ref="type.11565937"/>
            </content>
        </type>
        <type derived="true" id="type.11587486">
            <name>RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <baseType ref="type.11587484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6860">
            <name>RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <baseType ref="type.6858"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587490">
            <name>RandomAccessIter&lt;int, int&amp;, int*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6864">
            <name>RandomAccessIter&lt;int, int&amp;, int*>&amp;&amp;</name>
            <content>
                <baseType ref="type.6858"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587485">
            <name>RandomAccessIter&lt;int, int&amp;, int*>*</name>
            <content>
                <baseType ref="type.11587484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6859">
            <name>RandomAccessIter&lt;int, int&amp;, int*>*</name>
            <content>
                <baseType ref="type.6858"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.6423" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565919"/>
                <argumentType ref="type.11565962"/>
                <argumentType ref="type.11565961"/>
            </content>
        </type>
        <type id="type.11573674" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565919"/>
                <argumentType ref="type.11565962"/>
                <argumentType ref="type.11565961"/>
            </content>
        </type>
        <type id="type.11586891" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565919"/>
                <argumentType ref="type.11565962"/>
                <argumentType ref="type.11565961"/>
            </content>
        </type>
        <type id="type.11567224" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565919"/>
                <argumentType ref="type.11565962"/>
                <argumentType ref="type.11565961"/>
            </content>
        </type>
        <type id="type.11573674" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565919"/>
                <argumentType ref="type.11565962"/>
                <argumentType ref="type.11565961"/>
            </content>
        </type>
        <type id="type.11574956" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565919"/>
                <argumentType ref="type.11565962"/>
                <argumentType ref="type.11565961"/>
            </content>
        </type>
        <type derived="true" id="type.11586893">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.11586891"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6425">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.6423"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6432">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567224"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6773">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11573674"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6429">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.6423"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6783">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574956"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6854">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11586891"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586892">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.11586891"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6424">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.6423"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11572168" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565912"/>
                <argumentType ref="type.11572165"/>
                <argumentType ref="type.11572166"/>
            </content>
        </type>
        <type derived="true" id="type.6753">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572168"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11587223" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565912"/>
                <argumentType ref="type.11565941"/>
                <argumentType ref="type.11565940"/>
            </content>
        </type>
        <type id="type.6754" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565912"/>
                <argumentType ref="type.11565941"/>
                <argumentType ref="type.11565940"/>
            </content>
        </type>
        <type id="type.11572175" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565912"/>
                <argumentType ref="type.11565941"/>
                <argumentType ref="type.11565940"/>
            </content>
        </type>
        <type id="type.11587223" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565912"/>
                <argumentType ref="type.11565941"/>
                <argumentType ref="type.11565940"/>
            </content>
        </type>
        <type id="type.11575288" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565912"/>
                <argumentType ref="type.11565941"/>
                <argumentType ref="type.11565940"/>
            </content>
        </type>
        <type id="type.11574006" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565912"/>
                <argumentType ref="type.11565941"/>
                <argumentType ref="type.11565940"/>
            </content>
        </type>
        <type derived="true" id="type.11587225">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.11587223"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6756">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.6754"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587225">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.11587223"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6857">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587223"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6760">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.6754"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6776">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574006"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6761">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572175"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6786">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575288"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587224">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.11587223"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6755">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.6754"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587224">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.11587223"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11567267" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565914"/>
                <argumentType ref="type.11567264"/>
                <argumentType ref="type.11567265"/>
            </content>
        </type>
        <type derived="true" id="type.6433">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567267"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11573685" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565914"/>
                <argumentType ref="type.11565947"/>
                <argumentType ref="type.11565946"/>
            </content>
        </type>
        <type id="type.11574967" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565914"/>
                <argumentType ref="type.11565947"/>
                <argumentType ref="type.11565946"/>
            </content>
        </type>
        <type id="type.11586902" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565914"/>
                <argumentType ref="type.11565947"/>
                <argumentType ref="type.11565946"/>
            </content>
        </type>
        <type id="type.11567274" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565914"/>
                <argumentType ref="type.11565947"/>
                <argumentType ref="type.11565946"/>
            </content>
        </type>
        <type id="type.6434" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565914"/>
                <argumentType ref="type.11565947"/>
                <argumentType ref="type.11565946"/>
            </content>
        </type>
        <type id="type.11586902" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565914"/>
                <argumentType ref="type.11565947"/>
                <argumentType ref="type.11565946"/>
            </content>
        </type>
        <type derived="true" id="type.6436">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.6434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586904">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.11586902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6441">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567274"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6440">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.6434"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6784">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574967"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6774">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11573685"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6855">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11586902"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6435">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.6434"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586903">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.11586902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11574946" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565918"/>
                <argumentType ref="type.11565959"/>
                <argumentType ref="type.11565958"/>
            </content>
        </type>
        <type id="type.11586881" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565918"/>
                <argumentType ref="type.11565959"/>
                <argumentType ref="type.11565958"/>
            </content>
        </type>
        <type id="type.11573664" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565918"/>
                <argumentType ref="type.11565959"/>
                <argumentType ref="type.11565958"/>
            </content>
        </type>
        <type id="type.11567179" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565918"/>
                <argumentType ref="type.11565959"/>
                <argumentType ref="type.11565958"/>
            </content>
        </type>
        <type id="type.11573664" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565918"/>
                <argumentType ref="type.11565959"/>
                <argumentType ref="type.11565958"/>
            </content>
        </type>
        <type id="type.6413" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.11565918"/>
                <argumentType ref="type.11565959"/>
                <argumentType ref="type.11565958"/>
            </content>
        </type>
        <type derived="true" id="type.6415">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.6413"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586883">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.11586881"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6419">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.6413"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6772">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11573664"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6782">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11574946"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6853">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11586881"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6422">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567179"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6414">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.6413"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586882">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.11586881"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="11566613"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <argumentType ref="11566615"/>
            </content>
        </type>
        <type derived="true" id="type.6559">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="11566698"/>
                <argumentType ref="11566699"/>
                <argumentType ref="11566700"/>
                <argumentType ref="11566701"/>
            </content>
        </type>
        <type derived="true" id="type.6605">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="11566704"/>
                <argumentType ref="11566704"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="11566705"/>
            </content>
        </type>
        <type derived="true" id="type.6610">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586678">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6376">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6891">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6375">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586677">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11568684" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.11568645"/>
                <argumentType ref="type.11568644"/>
            </content>
        </type>
        <type id="type.11568806" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.11568772"/>
                <argumentType ref="type.11568771"/>
            </content>
        </type>
        <type id="type.11568745" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.11568711"/>
                <argumentType ref="type.11568710"/>
            </content>
        </type>
        <type derived="true" id="type.6565">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568806"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6563">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568745"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6558">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568684"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568732" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.11568721"/>
                <argumentType ref="type.11568730"/>
            </content>
        </type>
        <type id="type.11568666" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.11568655"/>
                <argumentType ref="type.11568664"/>
            </content>
        </type>
        <type id="type.11568793" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.11568782"/>
                <argumentType ref="type.11568791"/>
            </content>
        </type>
        <type derived="true" id="type.6564">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568793"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6562">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568732"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6557">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568666"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="11566694"/>
                <argumentType ref="11566695"/>
                <argumentType ref="11566696"/>
            </content>
        </type>
        <type derived="true" id="type.6602">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6601">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="11566706"/>
                <argumentType ref="type.11569175"/>
                <argumentType ref="type.11569177"/>
            </content>
        </type>
        <type derived="true" id="type.6609">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6613">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6615">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="11566706"/>
                <argumentType ref="type.11569152"/>
                <argumentType ref="type.11569161"/>
            </content>
        </type>
        <type derived="true" id="type.6608">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6612">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6614">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="11566699"/>
                <argumentType ref="type.11569059"/>
                <argumentType ref="type.11569061"/>
            </content>
        </type>
        <type derived="true" id="type.6604">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="11566699"/>
                <argumentType ref="type.11569044"/>
                <argumentType ref="type.11569045"/>
            </content>
        </type>
        <type derived="true" id="type.6603">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F">
            <name>RegEx</name>
        </type>
        <type derived="true" id="type.11586786">
            <name>RegEx&amp;</name>
            <content>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7014">
            <name>RegEx&amp;&amp;</name>
            <content>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586785">
            <name>RegEx*</name>
            <content>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603">
            <name>RegExFlags</name>
        </type>
        <type derived="true" id="type.11587638">
            <name>RegExFlags&amp;</name>
            <content>
                <baseType ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587639">
            <name>RegExFlags&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587637">
            <name>RegExFlags*</name>
            <content>
                <baseType ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC">
            <name>RegExParser</name>
        </type>
        <type derived="true" id="type.11586761">
            <name>RegExParser&amp;</name>
            <content>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587564">
            <name>RegExParser&amp;&amp;</name>
            <content>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586760">
            <name>RegExParser*</name>
            <content>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587759">
            <name>RegExParser*&amp;</name>
            <content>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587758">
            <name>RegExParser**</name>
            <content>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22">
            <name>RegularExpressionGrammar</name>
        </type>
        <type derived="true" id="type.11586792">
            <name>RegularExpressionGrammar&amp;</name>
            <content>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7017">
            <name>RegularExpressionGrammar&amp;&amp;</name>
            <content>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586791">
            <name>RegularExpressionGrammar*</name>
            <content>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587762">
            <name>RegularExpressionGrammar*&amp;</name>
            <content>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587761">
            <name>RegularExpressionGrammar**</name>
            <content>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_RegularExpressionRule_2B13F70B2A4FF7C115CB38005FA00CC5A61A8284">
            <name>RegularExpressionRule</name>
        </type>
        <type derived="true" id="type.11586795">
            <name>RegularExpressionRule&amp;</name>
            <content>
                <baseType ref="class_RegularExpressionRule_2B13F70B2A4FF7C115CB38005FA00CC5A61A8284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586794">
            <name>RegularExpressionRule*</name>
            <content>
                <baseType ref="class_RegularExpressionRule_2B13F70B2A4FF7C115CB38005FA00CC5A61A8284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587800">
            <name>RegularExpressionRule*&amp;</name>
            <content>
                <baseType ref="class_RegularExpressionRule_2B13F70B2A4FF7C115CB38005FA00CC5A61A8284"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587799">
            <name>RegularExpressionRule**</name>
            <content>
                <baseType ref="class_RegularExpressionRule_2B13F70B2A4FF7C115CB38005FA00CC5A61A8284"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587723" specialization="true">
            <name>Rel&lt;int></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="type.11565911"/>
            </content>
        </type>
        <type derived="true" id="type.11587731">
            <name>Rel&lt;int>&amp;</name>
            <content>
                <baseType ref="type.11587723"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587735">
            <name>Rel&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587723"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587730">
            <name>Rel&lt;int>*</name>
            <content>
                <baseType ref="type.11587723"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6959">
            <name>ReturnStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6989">
            <name>RvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_SequenceExpressionRule_60D359D8CE70B6B0937DCF203E2A5BCF6525CB46">
            <name>SequenceExpressionRule</name>
        </type>
        <type derived="true" id="type.11586807">
            <name>SequenceExpressionRule&amp;</name>
            <content>
                <baseType ref="class_SequenceExpressionRule_60D359D8CE70B6B0937DCF203E2A5BCF6525CB46"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586806">
            <name>SequenceExpressionRule*</name>
            <content>
                <baseType ref="class_SequenceExpressionRule_60D359D8CE70B6B0937DCF203E2A5BCF6525CB46"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587811">
            <name>SequenceExpressionRule*&amp;</name>
            <content>
                <baseType ref="class_SequenceExpressionRule_60D359D8CE70B6B0937DCF203E2A5BCF6525CB46"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587810">
            <name>SequenceExpressionRule**</name>
            <content>
                <baseType ref="class_SequenceExpressionRule_60D359D8CE70B6B0937DCF203E2A5BCF6525CB46"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076" specialization="true">
            <name>SharedCount&lt;T></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="11566737"/>
            </content>
        </type>
        <type derived="true" id="type.6632">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6654">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6660">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6622">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6638">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F" specialization="true">
            <name>SharedPtr&lt;T></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="11566737"/>
            </content>
        </type>
        <type derived="true" id="type.6655">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6640">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6662">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6941">
            <name>SizeOf&amp;&amp;</name>
            <content>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11587631" specialization="true">
            <name>Stack&lt;PtrNfaState*></name>
            <content>
                <primaryType ref="class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963"/>
                <argumentType ref="type.11586763"/>
            </content>
        </type>
        <type derived="true" id="type.11587636">
            <name>Stack&lt;PtrNfaState*>&amp;</name>
            <content>
                <baseType ref="type.11587631"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587635">
            <name>Stack&lt;PtrNfaState*>*</name>
            <content>
                <baseType ref="type.11587631"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587463" specialization="true">
            <name>Stack&lt;int></name>
            <content>
                <primaryType ref="class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963"/>
                <argumentType ref="type.11565911"/>
            </content>
        </type>
        <type derived="true" id="type.11587468">
            <name>Stack&lt;int>&amp;</name>
            <content>
                <baseType ref="type.11587463"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587467">
            <name>Stack&lt;int>*</name>
            <content>
                <baseType ref="type.11587463"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6956">
            <name>Statement&amp;&amp;</name>
            <content>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6878">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11566763">
            <name>StreamWriter&amp;</name>
            <content>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="11566765"/>
            </content>
        </type>
        <type derived="true" id="type.6674">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567120" specialization="true">
            <name>String&lt;char></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11565917"/>
            </content>
        </type>
        <type id="type.11567208" specialization="true">
            <name>String&lt;uchar></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.11565919"/>
            </content>
        </type>
        <type derived="true" id="type.11567210">
            <name>String&lt;uchar>&amp;</name>
            <content>
                <baseType ref="type.11567208"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11567209">
            <name>String&lt;uchar>*</name>
            <content>
                <baseType ref="type.11567208"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6974">
            <name>SwitchStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6544">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566593"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6525">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566570"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6598">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566689"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6523">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566568"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6600">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566691"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6511">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566551"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6446">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566456"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6444">
            <name>T&amp;</name>
            <content>
                <baseType ref="11566454"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6668">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="11566742"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6550">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="11566606"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6586">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="11566658"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6952">
            <name>TemplateId&amp;&amp;</name>
            <content>
                <baseType ref="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6980">
            <name>ThrowStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7008">
            <name>TokenParser&amp;&amp;</name>
            <content>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6983">
            <name>TryStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6904">
            <name>Type&amp;&amp;</name>
            <content>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6944">
            <name>TypeName&amp;&amp;</name>
            <content>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6926">
            <name>UnaryMinus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6923">
            <name>UnaryPlus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11568695" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.11568672"/>
            </content>
        </type>
        <type derived="true" id="type.6560">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11568695"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11569132" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.6611">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569132"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11569074" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
            </content>
        </type>
        <type derived="true" id="type.6607">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11569074"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11572328" specialization="true">
            <name>UniquePtr&lt;System.Exception></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
            </content>
        </type>
        <type derived="true" id="type.6770">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.11572328"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576434" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ExpectationFailure_EBDBB0FC1DDED5BE7E15008622BB34AFCA7E9A8C"/>
            </content>
        </type>
        <type derived="true" id="type.6833">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576434"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575638" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
            </content>
        </type>
        <type derived="true" id="type.6792">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575638"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576562" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingException_71361E1F1BFEB5E7F55F5F6E472A696283973396"/>
            </content>
        </type>
        <type derived="true" id="type.6834">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576562"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11575645" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XmlLog_8F1C6843100321A56502C0710D6A400B6E4C7704"/>
            </content>
        </type>
        <type derived="true" id="type.6793">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog>&amp;&amp;</name>
            <content>
                <baseType ref="type.11575645"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11587621" specialization="true">
            <name>UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
            </content>
        </type>
        <type derived="true" id="type.11587623">
            <name>UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory>&amp;</name>
            <content>
                <baseType ref="type.11587621"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587627">
            <name>UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587621"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587622">
            <name>UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory>*</name>
            <content>
                <baseType ref="type.11587621"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587565" specialization="true">
            <name>UniquePtr&lt;System.Text.RegularExpressions.RegExParser></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
            </content>
        </type>
        <type derived="true" id="type.11587567">
            <name>UniquePtr&lt;System.Text.RegularExpressions.RegExParser>&amp;</name>
            <content>
                <baseType ref="type.11587565"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587571">
            <name>UniquePtr&lt;System.Text.RegularExpressions.RegExParser>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587565"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587566">
            <name>UniquePtr&lt;System.Text.RegularExpressions.RegExParser>*</name>
            <content>
                <baseType ref="type.11587565"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="11566973"/>
            </content>
        </type>
        <type derived="true" id="type.6769">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6561">
            <name>Value&amp;</name>
            <content>
                <baseType ref="11566614"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576942" specialization="true">
            <name>ValueObject&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11567208"/>
            </content>
        </type>
        <type derived="true" id="type.6851">
            <name>ValueObject&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576942"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11587822" specialization="true">
            <name>ValueObject&lt;System.Text.RegularExpressions.CharClass></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
            </content>
        </type>
        <type derived="true" id="type.11587824">
            <name>ValueObject&lt;System.Text.RegularExpressions.CharClass>&amp;</name>
            <content>
                <baseType ref="type.11587822"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6870">
            <name>ValueObject&lt;System.Text.RegularExpressions.CharClass>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587822"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587823">
            <name>ValueObject&lt;System.Text.RegularExpressions.CharClass>*</name>
            <content>
                <baseType ref="type.11587822"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587839" specialization="true">
            <name>ValueObject&lt;System.Text.RegularExpressions.Class></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
            </content>
        </type>
        <type derived="true" id="type.11587841">
            <name>ValueObject&lt;System.Text.RegularExpressions.Class>&amp;</name>
            <content>
                <baseType ref="type.11587839"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6872">
            <name>ValueObject&lt;System.Text.RegularExpressions.Class>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587839"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587840">
            <name>ValueObject&lt;System.Text.RegularExpressions.Class>*</name>
            <content>
                <baseType ref="type.11587839"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.11587789" specialization="true">
            <name>ValueObject&lt;System.Text.RegularExpressions.PtrNfa></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
            </content>
        </type>
        <type derived="true" id="type.11587791">
            <name>ValueObject&lt;System.Text.RegularExpressions.PtrNfa>&amp;</name>
            <content>
                <baseType ref="type.11587789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6869">
            <name>ValueObject&lt;System.Text.RegularExpressions.PtrNfa>&amp;&amp;</name>
            <content>
                <baseType ref="type.11587789"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587790">
            <name>ValueObject&lt;System.Text.RegularExpressions.PtrNfa>*</name>
            <content>
                <baseType ref="type.11587789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79" specialization="true">
            <name>ValueObject&lt;ValueType></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="11574511"/>
            </content>
        </type>
        <type derived="true" id="type.6815">
            <name>ValueObject&lt;ValueType>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576930" specialization="true">
            <name>ValueObject&lt;bool></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565906"/>
            </content>
        </type>
        <type derived="true" id="type.6850">
            <name>ValueObject&lt;bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576930"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576767" specialization="true">
            <name>ValueObject&lt;byte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565908"/>
            </content>
        </type>
        <type derived="true" id="type.6837">
            <name>ValueObject&lt;byte>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576767"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576906" specialization="true">
            <name>ValueObject&lt;double></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565916"/>
            </content>
        </type>
        <type derived="true" id="type.6849">
            <name>ValueObject&lt;double>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576906"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576892" specialization="true">
            <name>ValueObject&lt;float></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565915"/>
            </content>
        </type>
        <type derived="true" id="type.6847">
            <name>ValueObject&lt;float>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576808" specialization="true">
            <name>ValueObject&lt;int></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565911"/>
            </content>
        </type>
        <type derived="true" id="type.6842">
            <name>ValueObject&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576808"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576833" specialization="true">
            <name>ValueObject&lt;long></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565913"/>
            </content>
        </type>
        <type derived="true" id="type.6844">
            <name>ValueObject&lt;long>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576833"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576750" specialization="true">
            <name>ValueObject&lt;sbyte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565907"/>
            </content>
        </type>
        <type derived="true" id="type.6836">
            <name>ValueObject&lt;sbyte>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576780" specialization="true">
            <name>ValueObject&lt;short></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565909"/>
            </content>
        </type>
        <type derived="true" id="type.6839">
            <name>ValueObject&lt;short>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576780"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576959" specialization="true">
            <name>ValueObject&lt;uchar></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565919"/>
            </content>
        </type>
        <type derived="true" id="type.6852">
            <name>ValueObject&lt;uchar>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576959"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576820" specialization="true">
            <name>ValueObject&lt;uint></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565912"/>
            </content>
        </type>
        <type derived="true" id="type.6843">
            <name>ValueObject&lt;uint>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576845" specialization="true">
            <name>ValueObject&lt;ulong></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565914"/>
            </content>
        </type>
        <type derived="true" id="type.6845">
            <name>ValueObject&lt;ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576845"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11576794" specialization="true">
            <name>ValueObject&lt;ushort></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.11565910"/>
            </content>
        </type>
        <type derived="true" id="type.6841">
            <name>ValueObject&lt;ushort>&amp;&amp;</name>
            <content>
                <baseType ref="type.11576794"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F" specialization="true">
            <name>WeakCount&lt;T></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="11566737"/>
            </content>
        </type>
        <type derived="true" id="type.6661">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6623">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6631">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6639">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6653">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.11567110" specialization="true">
            <name>WeakPtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.6403">
            <name>WeakPtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.11567110"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC" specialization="true">
            <name>WeakPtr&lt;T></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="11566729"/>
            </content>
        </type>
        <type derived="true" id="type.6641">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6663">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6666">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6645">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6656">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6643">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6647">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021" specialization="true">
            <name>WeakPtr&lt;U></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="11566732"/>
            </content>
        </type>
        <type derived="true" id="type.6649">
            <name>WeakPtr&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11565906">
            <name>bool</name>
        </type>
        <type basic="true" id="type.11565908">
            <name>byte</name>
        </type>
        <type derived="true" id="type.11565929">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.11565908"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11565928">
            <name>byte*</name>
            <content>
                <baseType ref="type.11565908"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11565917">
            <name>char</name>
        </type>
        <type derived="true" id="type.11565956">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.11565917"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11565955">
            <name>char*</name>
            <content>
                <baseType ref="type.11565917"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6912">
            <name>const AddressOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
            </content>
        </type>
        <type derived="true" id="type.6913">
            <name>const AddressOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6984">
            <name>const AssertStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
            </content>
        </type>
        <type derived="true" id="type.6985">
            <name>const AssertStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6393">
            <name>const BackInsertIterator&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A"/>
            </content>
        </type>
        <type derived="true" id="type.6399">
            <name>const BackInsertIterator&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A"/>
            </content>
        </type>
        <type derived="true" id="type.6400">
            <name>const BackInsertIterator&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6394">
            <name>const BackInsertIterator&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertIterator_C_32FDC69B4E447639FA50AF73E473F91CFA48F52A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6389">
            <name>const BackInsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
            </content>
        </type>
        <type derived="true" id="type.6385">
            <name>const BackInsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
            </content>
        </type>
        <type derived="true" id="type.6396">
            <name>const BackInsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
            </content>
        </type>
        <type derived="true" id="type.6386">
            <name>const BackInsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6390">
            <name>const BackInsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6397">
            <name>const BackInsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BackInsertProxy_C_0A915D77FDC3655A035DBFC5EEC23FB1CC1DA7DD"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587743">
            <name>const BinaryFun&lt;int, int, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587725"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587740">
            <name>const BinaryPred&lt;int, int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587724"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6879">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
            </content>
        </type>
        <type derived="true" id="type.6880">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6881">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
            </content>
        </type>
        <type derived="true" id="type.6882">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11566255">
            <name>const Bitset&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Bitset_BA1EE2E68426C5445CB6CAF7F957084ADAFD19CA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6883">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
            </content>
        </type>
        <type derived="true" id="type.6884">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.11586726">
            <name>const CharClass</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
            </content>
        </type>
        <type derived="true" id="type.11586728">
            <name>const CharClass&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586727">
            <name>const CharClass*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6871">
            <name>const Class&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6991">
            <name>const CodeExpandingVisitor</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
            </content>
        </type>
        <type derived="true" id="type.6992">
            <name>const CodeExpandingVisitor&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6927">
            <name>const Complement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
            </content>
        </type>
        <type derived="true" id="type.6928">
            <name>const Complement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6893">
            <name>const ConditionVariable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
            </content>
        </type>
        <type derived="true" id="type.6945">
            <name>const Construct</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
            </content>
        </type>
        <type derived="true" id="type.6946">
            <name>const Construct&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6898">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
            </content>
        </type>
        <type derived="true" id="type.6899">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6402">
            <name>const Counter&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11567094"/>
            </content>
        </type>
        <type derived="true" id="type.6625">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6624">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6644">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6628">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6619">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6616">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6650">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6642">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6635">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6634">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6633">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6657">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6646">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6664">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6665">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6626">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6658">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6617">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6620">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6636">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6629">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6651">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6627">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.6667">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.6648">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.6963">
            <name>const DeleteStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
            </content>
        </type>
        <type derived="true" id="type.6964">
            <name>const DeleteStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6909">
            <name>const Deref</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
            </content>
        </type>
        <type derived="true" id="type.6910">
            <name>const Deref&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6966">
            <name>const DestroyStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
            </content>
        </type>
        <type derived="true" id="type.6967">
            <name>const DestroyStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586738">
            <name>const Dfa</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
            </content>
        </type>
        <type derived="true" id="type.11586740">
            <name>const Dfa&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586739">
            <name>const Dfa*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586732">
            <name>const DfaState</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
            </content>
        </type>
        <type derived="true" id="type.11586734">
            <name>const DfaState&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586733">
            <name>const DfaState*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11566416">
            <name>const Exception*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587703">
            <name>const Exception*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587704">
            <name>const Exception**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7003">
            <name>const ExpectationParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
            </content>
        </type>
        <type derived="true" id="type.7004">
            <name>const ExpectationParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6969">
            <name>const ExpressionStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
            </content>
        </type>
        <type derived="true" id="type.6970">
            <name>const ExpressionStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6885">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
            </content>
        </type>
        <type derived="true" id="type.6886">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6464">
            <name>const FrontInsertIterator&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8"/>
            </content>
        </type>
        <type derived="true" id="type.6470">
            <name>const FrontInsertIterator&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8"/>
            </content>
        </type>
        <type derived="true" id="type.6471">
            <name>const FrontInsertIterator&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6465">
            <name>const FrontInsertIterator&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertIterator_C_D80A05FF34EEB87493396DB90644DA0FDBE71FB8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6456">
            <name>const FrontInsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
            </content>
        </type>
        <type derived="true" id="type.6460">
            <name>const FrontInsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
            </content>
        </type>
        <type derived="true" id="type.6467">
            <name>const FrontInsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
            </content>
        </type>
        <type derived="true" id="type.6468">
            <name>const FrontInsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6461">
            <name>const FrontInsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6457">
            <name>const FrontInsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_FrontInsertProxy_C_1406F688C6DEF21E4D2B7A33E82CAF1FBB721467"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6873">
            <name>const FunctionProfiler</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FunctionProfiler_809E118D4757DEA417E0CB7F4E658DF7C4B79B00"/>
            </content>
        </type>
        <type derived="true" id="type.6874">
            <name>const FunctionProfiler&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FunctionProfiler_809E118D4757DEA417E0CB7F4E658DF7C4B79B00"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6975">
            <name>const GotoCaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
            </content>
        </type>
        <type derived="true" id="type.6976">
            <name>const GotoCaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6960">
            <name>const GotoStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
            </content>
        </type>
        <type derived="true" id="type.6961">
            <name>const GotoStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587269">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587266"/>
            </content>
        </type>
        <type derived="true" id="type.6800">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6797"/>
            </content>
        </type>
        <type derived="true" id="type.11587269">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587266"/>
            </content>
        </type>
        <type derived="true" id="type.6802">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6797"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587271">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587266"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587270">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587266"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6801">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6797"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6806">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6803"/>
            </content>
        </type>
        <type derived="true" id="type.11587275">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587272"/>
            </content>
        </type>
        <type derived="true" id="type.11587277">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587272"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6808">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6803"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587276">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587272"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6807">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6803"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6533">
            <name>const InsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
            </content>
        </type>
        <type derived="true" id="type.6537">
            <name>const InsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
            </content>
        </type>
        <type derived="true" id="type.6540">
            <name>const InsertProxy&lt;C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
            </content>
        </type>
        <type derived="true" id="type.6541">
            <name>const InsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6538">
            <name>const InsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6534">
            <name>const InsertProxy&lt;C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_InsertProxy_C_CF849D7EBB4D0DDC638CF02E7360671994EC7F3A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6887">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
            </content>
        </type>
        <type derived="true" id="type.6888">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6930">
            <name>const Invoke</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
            </content>
        </type>
        <type derived="true" id="type.6931">
            <name>const Invoke&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6504">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6555">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566613"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6527">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566579"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6606">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566698"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7000">
            <name>const KleeneStarParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
            </content>
        </type>
        <type derived="true" id="type.7001">
            <name>const KleeneStarParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587720">
            <name>const Less&lt;int></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587719"/>
            </content>
        </type>
        <type derived="true" id="type.11587722">
            <name>const Less&lt;int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587721">
            <name>const Less&lt;int>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587598">
            <name>const List&lt;PtrNfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587595"/>
            </content>
        </type>
        <type derived="true" id="type.11587600">
            <name>const List&lt;PtrNfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587595"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587599">
            <name>const List&lt;PtrNfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587595"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587522">
            <name>const List&lt;System.Text.RegularExpressions.DfaState></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587519"/>
            </content>
        </type>
        <type derived="true" id="type.11587524">
            <name>const List&lt;System.Text.RegularExpressions.DfaState>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587523">
            <name>const List&lt;System.Text.RegularExpressions.DfaState>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587519"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587544">
            <name>const List&lt;System.Text.RegularExpressions.NfaState></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587541"/>
            </content>
        </type>
        <type derived="true" id="type.11587546">
            <name>const List&lt;System.Text.RegularExpressions.NfaState>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587545">
            <name>const List&lt;System.Text.RegularExpressions.NfaState>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587541"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587495">
            <name>const List&lt;System.Text.RegularExpressions.NfaStateNumberSet></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587492"/>
            </content>
        </type>
        <type derived="true" id="type.11587497">
            <name>const List&lt;System.Text.RegularExpressions.NfaStateNumberSet>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587496">
            <name>const List&lt;System.Text.RegularExpressions.NfaStateNumberSet>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587492"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587577">
            <name>const List&lt;System.Text.RegularExpressions.PtrNfaEdge></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587574"/>
            </content>
        </type>
        <type derived="true" id="type.11587579">
            <name>const List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587574"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587578">
            <name>const List&lt;System.Text.RegularExpressions.PtrNfaEdge>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587574"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587472">
            <name>const List&lt;int></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587469"/>
            </content>
        </type>
        <type derived="true" id="type.11587474">
            <name>const List&lt;int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587469"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587473">
            <name>const List&lt;int>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587469"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6953">
            <name>const Literal</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
            </content>
        </type>
        <type derived="true" id="type.6954">
            <name>const Literal&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6575">
            <name>const LockGuard&lt;Mtx></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
            </content>
        </type>
        <type derived="true" id="type.6576">
            <name>const LockGuard&lt;Mtx>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6762">
            <name>const LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11572183"/>
            </content>
        </type>
        <type derived="true" id="type.6763">
            <name>const LockGuard&lt;System.Threading.Mutex>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11572183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6894">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.6948">
            <name>const New</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
            </content>
        </type>
        <type derived="true" id="type.6949">
            <name>const New&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586756">
            <name>const Nfa</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
            </content>
        </type>
        <type derived="true" id="type.11586758">
            <name>const Nfa&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586757">
            <name>const Nfa*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586750">
            <name>const NfaState</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
            </content>
        </type>
        <type derived="true" id="type.11586752">
            <name>const NfaState&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586751">
            <name>const NfaState*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587684">
            <name>const NfaState*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587752">
            <name>const NfaState*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587751">
            <name>const NfaState**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586744">
            <name>const NfaStateNumberSet</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
            </content>
        </type>
        <type derived="true" id="type.11586746">
            <name>const NfaStateNumberSet&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586745">
            <name>const NfaStateNumberSet*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587696">
            <name>const NfaStateNumberSet*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587697">
            <name>const NfaStateNumberSet*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587695">
            <name>const NfaStateNumberSet**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6906">
            <name>const Not</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
            </content>
        </type>
        <type derived="true" id="type.6907">
            <name>const Not&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6994">
            <name>const OptionalParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
            </content>
        </type>
        <type derived="true" id="type.6995">
            <name>const OptionalParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6889">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
            </content>
        </type>
        <type derived="true" id="type.6585">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6582">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6997">
            <name>const PositiveParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
            </content>
        </type>
        <type derived="true" id="type.6998">
            <name>const PositiveParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6936">
            <name>const PostfixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
            </content>
        </type>
        <type derived="true" id="type.6937">
            <name>const PostfixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6933">
            <name>const PostfixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
            </content>
        </type>
        <type derived="true" id="type.6934">
            <name>const PostfixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6918">
            <name>const PrefixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
            </content>
        </type>
        <type derived="true" id="type.6919">
            <name>const PrefixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6915">
            <name>const PrefixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
            </content>
        </type>
        <type derived="true" id="type.6916">
            <name>const PrefixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586780">
            <name>const PtrNfa</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
            </content>
        </type>
        <type derived="true" id="type.11586782">
            <name>const PtrNfa&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586781">
            <name>const PtrNfa*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586771">
            <name>const PtrNfaEdge</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
            </content>
        </type>
        <type derived="true" id="type.11586773">
            <name>const PtrNfaEdge&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586772">
            <name>const PtrNfaEdge*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587773">
            <name>const PtrNfaEdge*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587778">
            <name>const PtrNfaEdge*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587777">
            <name>const PtrNfaEdge**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586765">
            <name>const PtrNfaState</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
            </content>
        </type>
        <type derived="true" id="type.11586767">
            <name>const PtrNfaState&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586766">
            <name>const PtrNfaState*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587601">
            <name>const PtrNfaState*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587602">
            <name>const PtrNfaState**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587645">
            <name>const PtrNfaState**&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587646">
            <name>const PtrNfaState**&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587644">
            <name>const PtrNfaState***</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587629">
            <name>const PtrNfaStateFactory</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
            </content>
        </type>
        <type derived="true" id="type.11587630">
            <name>const PtrNfaStateFactory&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587628">
            <name>const PtrNfaStateFactory*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587615">
            <name>const RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587612"/>
            </content>
        </type>
        <type derived="true" id="type.11587617">
            <name>const RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587612"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587616">
            <name>const RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587612"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587606">
            <name>const RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587603"/>
            </content>
        </type>
        <type derived="true" id="type.11587608">
            <name>const RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587603"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587607">
            <name>const RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587603"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587535">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587532"/>
            </content>
        </type>
        <type derived="true" id="type.11587537">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587532"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587536">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587532"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587528">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587525"/>
            </content>
        </type>
        <type derived="true" id="type.11587530">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587525"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587529">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587525"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587557">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587554"/>
            </content>
        </type>
        <type derived="true" id="type.11587559">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587554"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587558">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587554"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587550">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587547"/>
            </content>
        </type>
        <type derived="true" id="type.11587552">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587547"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587551">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587547"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587508">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587505"/>
            </content>
        </type>
        <type derived="true" id="type.11587510">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587505"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587509">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587505"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587501">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587498"/>
            </content>
        </type>
        <type derived="true" id="type.11587503">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587498"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587502">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587498"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587590">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587587"/>
            </content>
        </type>
        <type derived="true" id="type.11587592">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587587"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587591">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587587"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587583">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587580"/>
            </content>
        </type>
        <type derived="true" id="type.11587585">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587584">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587580"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6569">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6566"/>
            </content>
        </type>
        <type derived="true" id="type.11587037">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587034"/>
            </content>
        </type>
        <type derived="true" id="type.11587039">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587034"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6571">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6566"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587039">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587034"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587038">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587034"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6570">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6566"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586875">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11586872"/>
            </content>
        </type>
        <type derived="true" id="type.6407">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6404"/>
            </content>
        </type>
        <type derived="true" id="type.11586875">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11586872"/>
            </content>
        </type>
        <type derived="true" id="type.11586877">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11586872"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6409">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6404"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586877">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11586872"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586876">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11586872"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6408">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6404"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587480">
            <name>const RandomAccessIter&lt;int, const int&amp;, const int*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587477"/>
            </content>
        </type>
        <type derived="true" id="type.11587482">
            <name>const RandomAccessIter&lt;int, const int&amp;, const int*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587477"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587481">
            <name>const RandomAccessIter&lt;int, const int&amp;, const int*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587477"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587487">
            <name>const RandomAccessIter&lt;int, int&amp;, int*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587484"/>
            </content>
        </type>
        <type derived="true" id="type.6861">
            <name>const RandomAccessIter&lt;int, int&amp;, int*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6858"/>
            </content>
        </type>
        <type derived="true" id="type.11587489">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6863">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6858"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587489">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587488">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6862">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6858"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587488">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586894">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11586891"/>
            </content>
        </type>
        <type derived="true" id="type.6426">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6423"/>
            </content>
        </type>
        <type derived="true" id="type.11586894">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11586891"/>
            </content>
        </type>
        <type derived="true" id="type.11586896">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11586891"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6428">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6423"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586895">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11586891"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6427">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6423"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587226">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587223"/>
            </content>
        </type>
        <type derived="true" id="type.6757">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6754"/>
            </content>
        </type>
        <type derived="true" id="type.11587228">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587223"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6759">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6754"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6758">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6754"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587227">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587223"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6437">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6434"/>
            </content>
        </type>
        <type derived="true" id="type.11586905">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11586902"/>
            </content>
        </type>
        <type derived="true" id="type.11586907">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11586902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6439">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6438">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6434"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586906">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11586902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586884">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11586881"/>
            </content>
        </type>
        <type derived="true" id="type.6416">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6413"/>
            </content>
        </type>
        <type derived="true" id="type.11586886">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11586881"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6418">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6413"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586885">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11586881"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6417">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6413"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6895">
            <name>const RecursiveMutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
            </content>
        </type>
        <type derived="true" id="type.11586787">
            <name>const RegEx</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
            </content>
        </type>
        <type derived="true" id="type.11586789">
            <name>const RegEx&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11586788">
            <name>const RegEx*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587563">
            <name>const RegExParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
            </content>
        </type>
        <type derived="true" id="type.11587562">
            <name>const RegExParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587572">
            <name>const RegExParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7015">
            <name>const RegularExpressionGrammar</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
            </content>
        </type>
        <type derived="true" id="type.7016">
            <name>const RegularExpressionGrammar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587737">
            <name>const Rel&lt;int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587723"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6957">
            <name>const ReturnStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
            </content>
        </type>
        <type derived="true" id="type.6958">
            <name>const ReturnStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6939">
            <name>const SizeOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
            </content>
        </type>
        <type derived="true" id="type.6940">
            <name>const SizeOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587632">
            <name>const Stack&lt;PtrNfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587631"/>
            </content>
        </type>
        <type derived="true" id="type.11587634">
            <name>const Stack&lt;PtrNfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587631"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587633">
            <name>const Stack&lt;PtrNfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587631"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587464">
            <name>const Stack&lt;int></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587463"/>
            </content>
        </type>
        <type derived="true" id="type.11587466">
            <name>const Stack&lt;int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587463"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587465">
            <name>const Stack&lt;int>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587463"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6876">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
            </content>
        </type>
        <type derived="true" id="type.6877">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6890">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
            </content>
        </type>
        <type derived="true" id="type.11567125">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11567120"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11567213">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11567208"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11567212">
            <name>const String&lt;uchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11567208"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6972">
            <name>const SwitchStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
            </content>
        </type>
        <type derived="true" id="type.6973">
            <name>const SwitchStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6493">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6524">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566570"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6477">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566489"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6522">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566568"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6521">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566566"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6479">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566500"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6480">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6481">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566504"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6483">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566507"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6484">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566509"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6443">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566454"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6486">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6487">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566514"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6489">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566517"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6578">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566639"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6597">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566689"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6599">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566691"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6490">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6492">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6580">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566648"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6495">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566527"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6496">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566529"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6498">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566538"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6499">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566540"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6500">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566542"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6583">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566651"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6478">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566491"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6501">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6502">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566546"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6445">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566456"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6543">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566593"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6503">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6473">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566479"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6474">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566482"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6475">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6476">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566486"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6505">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566551"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6896">
            <name>const ThreadingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
            </content>
        </type>
        <type derived="true" id="type.6897">
            <name>const ThreadingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6978">
            <name>const ThrowStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
            </content>
        </type>
        <type derived="true" id="type.6979">
            <name>const ThrowStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7006">
            <name>const TokenParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
            </content>
        </type>
        <type derived="true" id="type.7007">
            <name>const TokenParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6981">
            <name>const TryStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
            </content>
        </type>
        <type derived="true" id="type.6982">
            <name>const TryStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6902">
            <name>const Type</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
            </content>
        </type>
        <type derived="true" id="type.6903">
            <name>const Type&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6942">
            <name>const TypeName</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
            </content>
        </type>
        <type derived="true" id="type.6943">
            <name>const TypeName&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6497">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566530"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6482">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566505"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6485">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566510"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6488">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566515"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6491">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566520"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6494">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566525"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6579">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566640"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6581">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566649"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6584">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6924">
            <name>const UnaryMinus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
            </content>
        </type>
        <type derived="true" id="type.6925">
            <name>const UnaryMinus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6921">
            <name>const UnaryPlus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
            </content>
        </type>
        <type derived="true" id="type.6922">
            <name>const UnaryPlus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6900">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
            </content>
        </type>
        <type derived="true" id="type.6901">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587624">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587621"/>
            </content>
        </type>
        <type derived="true" id="type.11587626">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587621"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587625">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587621"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587568">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.RegExParser></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587565"/>
            </content>
        </type>
        <type derived="true" id="type.11587570">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.RegExParser>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587565"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587569">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.RegExParser>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587565"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6556">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11566614"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587825">
            <name>const ValueObject&lt;System.Text.RegularExpressions.CharClass></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587822"/>
            </content>
        </type>
        <type derived="true" id="type.11587827">
            <name>const ValueObject&lt;System.Text.RegularExpressions.CharClass>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587822"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587826">
            <name>const ValueObject&lt;System.Text.RegularExpressions.CharClass>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587822"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587842">
            <name>const ValueObject&lt;System.Text.RegularExpressions.Class></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587839"/>
            </content>
        </type>
        <type derived="true" id="type.11587844">
            <name>const ValueObject&lt;System.Text.RegularExpressions.Class>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587839"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587843">
            <name>const ValueObject&lt;System.Text.RegularExpressions.Class>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587839"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587792">
            <name>const ValueObject&lt;System.Text.RegularExpressions.PtrNfa></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587789"/>
            </content>
        </type>
        <type derived="true" id="type.11587794">
            <name>const ValueObject&lt;System.Text.RegularExpressions.PtrNfa>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587793">
            <name>const ValueObject&lt;System.Text.RegularExpressions.PtrNfa>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11587789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6463">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11567512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6388">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11567043"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6814">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11574511"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6392">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11567056"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6536">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11568359"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6459">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11567499"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6532">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="11568345"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6848">
            <name>const double&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565916"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6846">
            <name>const float&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565915"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11567323">
            <name>const int&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565911"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587475">
            <name>const int*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565911"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587677">
            <name>const int*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565911"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587678">
            <name>const int*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565911"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587676">
            <name>const int**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565911"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6835">
            <name>const sbyte&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565907"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6838">
            <name>const short&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565909"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7011">
            <name>const stdlib</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
            </content>
        </type>
        <type derived="true" id="type.7012">
            <name>const stdlib&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11567215">
            <name>const uchar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565919"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6840">
            <name>const ushort&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11565910"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11565916">
            <name>double</name>
        </type>
        <type basic="true" id="type.11565915">
            <name>float</name>
        </type>
        <type basic="true" id="type.11565911">
            <name>int</name>
        </type>
        <type derived="true" id="type.11565938">
            <name>int&amp;</name>
            <content>
                <baseType ref="type.11565911"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11565937">
            <name>int*</name>
            <content>
                <baseType ref="type.11565911"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587662">
            <name>int*&amp;</name>
            <content>
                <baseType ref="type.11565911"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587663">
            <name>int*&amp;&amp;</name>
            <content>
                <baseType ref="type.11565911"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11587661">
            <name>int**</name>
            <content>
                <baseType ref="type.11565911"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11565913">
            <name>long</name>
        </type>
        <type basic="true" id="type.11565907">
            <name>sbyte</name>
        </type>
        <type basic="true" id="type.11565909">
            <name>short</name>
        </type>
        <type derived="true" id="type.7013">
            <name>stdlib&amp;&amp;</name>
            <content>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11565919">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.11565962">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.11565919"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11565961">
            <name>uchar*</name>
            <content>
                <baseType ref="type.11565919"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11565912">
            <name>uint</name>
        </type>
        <type derived="true" id="type.11565941">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.11565912"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11565940">
            <name>uint*</name>
            <content>
                <baseType ref="type.11565912"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11565914">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.11565947">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.11565914"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11565946">
            <name>ulong*</name>
            <content>
                <baseType ref="type.11565914"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11565910">
            <name>ushort</name>
        </type>
        <type basic="true" id="type.11565918">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.11565959">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.11565918"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11565958">
            <name>wchar*</name>
            <content>
                <baseType ref="type.11565918"/>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
