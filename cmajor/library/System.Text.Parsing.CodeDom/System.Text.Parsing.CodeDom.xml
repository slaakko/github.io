<library>
    <name>System.Text.Parsing.CodeDom</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Text.Parsing.CodeDom">
            <name>System.Text.Parsing.CodeDom</name>
            <classes>
                <class id="class_Add_D8266E0EBE7DB2DA07CF9189C1A15DF16E9823E3">
                    <name>Add</name>
                    <groupName>Add</groupName>
                    <syntax> public class Add;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_Add_FB6264E275DB7FAA75A8DEECA05C3D7403373A46">
                            <name>Add(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Add(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Add_2D13C056B5BA8CB3E35493F4D5573674782B9661">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492">
                    <name>AddressOf</name>
                    <groupName>AddressOf</groupName>
                    <syntax> public class AddressOf;</syntax>
                    <baseClass ref="class_PrefixExpression_54423C4D20F88D06F79420BDBE11404D5B729948"/>
                    <constructors>
                        <constructor id="constructor_AddressOf_106A3FBE271BDC73BFE07A3BC966D08FC4BB4E62">
                            <name>AddressOf(DomObject* subject_)</name>
                            <syntax>public AddressOf(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_AddressOf_1B8A59E3B79039952FA31FBE6693C655C7FBF600">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Array_01D2071770F4541CF86429091B229EF2950656B0">
                    <name>Array</name>
                    <groupName>Array</groupName>
                    <syntax> public class Array;</syntax>
                    <baseClass ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                    <constructors>
                        <constructor id="constructor_Array_4AC1FF82D6CB446F66567B8C8037440967CA386D">
                            <name>Array(DomObject* subject_, DomObject* size_)</name>
                            <syntax>public nothrow Array(DomObject* subject_, DomObject* size_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>size_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Array_CEDE9455D14D4C230B753D3647F78B91D1A93F97">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Name_Array_639333BF53AD47A20A5955223BE4B432A2A8036D">
                            <name>Name() const</name>
                            <syntax>public nothrow override String&lt;uchar> Name() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_Print_Array_8B4C206DEDC2348B5A6A366681FBA0BB785184A6">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Arrow_1A144572826274559F7125C012EDEF88A9F72FDB">
                    <name>Arrow</name>
                    <groupName>Arrow</groupName>
                    <syntax> public class Arrow;</syntax>
                    <baseClass ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                    <constructors>
                        <constructor id="constructor_Arrow_DAE8AA001897DBB081656F17CC7E872B386C5D86">
                            <name>Arrow(DomObject* subject_, const String&lt;uchar>&amp; memberId_)</name>
                            <syntax>public nothrow Arrow(DomObject* subject_, const String&lt;uchar>&amp; memberId_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>memberId_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Arrow_7506B42946B4C4C9499B64E0FE48276FA65FC12E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Name_Arrow_CD8F9745A9B386B065680CEE7FBEFF44DDB421B6">
                            <name>Name() const</name>
                            <syntax>public nothrow override String&lt;uchar> Name() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_Print_Arrow_ABF575422FE75204BD6DA7B387CA009E100D8A57">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_As_17FE45AC637C4950CB0B2BBFEE789A84A32233B8">
                    <name>As</name>
                    <groupName>As</groupName>
                    <syntax> public class As;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_As_5AAF0640A29ADE3AB28C8180BB6FD29186EF76A4">
                            <name>As(DomObject* expr_, DomObject* targetTypeExpr_)</name>
                            <syntax>public As(DomObject* expr_, DomObject* targetTypeExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expr_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>targetTypeExpr_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_As_1AA3F9C096B93BEE62C077FF71BC177622A9D4D3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696">
                    <name>AssertStatement</name>
                    <groupName>AssertStatement</groupName>
                    <syntax> public class AssertStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_AssertStatement_C362F17195DD7FE6CFCD0940CD90E7B36A295AE1">
                            <name>AssertStatement(DomObject* assertExpr_)</name>
                            <syntax>public AssertStatement(DomObject* assertExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>assertExpr_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_AssertStatement_2536451EA08D034B02C8D72B8EA89F54299673C8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_AssertStatement_07D9867C4438DA3198F57A99127AEEA143E0B6FD">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_AssignmentStatement_CD891DADD31EA0AD502EF64C3B188877E8D8CE3D">
                    <name>AssignmentStatement</name>
                    <groupName>AssignmentStatement</groupName>
                    <syntax> public class AssignmentStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_AssignmentStatement_E8EE9FFB12C0CFFAB328A860640333FA66453791">
                            <name>AssignmentStatement(DomObject* targetExpr_, DomObject* sourceExpr_)</name>
                            <syntax>public AssignmentStatement(DomObject* targetExpr_, DomObject* sourceExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>targetExpr_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>sourceExpr_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_AssignmentStatement_8EF79AEF23226DD42DD33229515C09C154848233">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_AssignmentStatement_A6ACA99E7DAC6430FE64F671EACA2B8D7AEC4541">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Base_73ED723570AFFF8A0EA419972F0FFFB15945ABDB">
                    <name>Base</name>
                    <groupName>Base</groupName>
                    <syntax> public class Base;</syntax>
                    <baseClass ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                    <constructors>
                        <constructor id="default_constructor_Base_DE88F544D7160BB0FD2947D66889A36A2D9DE160">
                            <name>Base()</name>
                            <syntax>public Base();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Base_21C2E74AB8182B277D6BA8CD00484B34096141D9">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C">
                    <name>BinaryExpression</name>
                    <groupName>BinaryExpression</groupName>
                    <syntax>abstract public class BinaryExpression;</syntax>
                    <baseClass ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                    <constructors>
                        <constructor id="constructor_BinaryExpression_4F625B4717FE668ACF5D4334BB0989210DC8EF36">
                            <name>BinaryExpression(Operator op_, DomObject* left_, DomObject* right_)</name>
                            <syntax>public BinaryExpression(Operator op_, DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>op_</name>
                                    <type ref="enumerated_type_Operator_4F0018C24F233767C89E790B72E5C84238A85A87"/>
                                </parameter>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BinaryExpression_9E40F1D4B944D025D86F3E3D79604DE9F3E55B6B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_BinaryExpression_3B36FE3D8BA26BA885CD9B3DC9CAA9760D82FD29">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_BitAnd_C18E427EDF0266B9DE4A7AF49DF7814F4508A300">
                    <name>BitAnd</name>
                    <groupName>BitAnd</groupName>
                    <syntax> public class BitAnd;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_BitAnd_AEA4947DC5EBF8C888BDCE349AE3034BA5C4D62E">
                            <name>BitAnd(DomObject* left_, DomObject* right_)</name>
                            <syntax>public BitAnd(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BitAnd_1EF91C9C8DBECD7438A3DA17C9023535E60EF14D">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_BitOr_7AFF6998C572E610457C1E96CEA6E60FE5F10EE5">
                    <name>BitOr</name>
                    <groupName>BitOr</groupName>
                    <syntax> public class BitOr;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_BitOr_9C775B941A03BDC339528929369C4F81C7A1C6C9">
                            <name>BitOr(DomObject* left_, DomObject* right_)</name>
                            <syntax>public BitOr(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BitOr_9D75CBEFF73717A9009153AFCD45C5B19E7551A5">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_BitXor_6E4A68B918EAF05039242CA6E5A108EDE3A875CC">
                    <name>BitXor</name>
                    <groupName>BitXor</groupName>
                    <syntax> public class BitXor;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_BitXor_77A2A8CB11E834056FDD0BCD840A413567F57BBC">
                            <name>BitXor(DomObject* left_, DomObject* right_)</name>
                            <syntax>public BitXor(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BitXor_18866FC5A019D039EE0BA64F6CA4C6BE8A6C4645">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_BoolType_CA99F7D292715338D750C5405548D95A95E200EC">
                    <name>BoolType</name>
                    <groupName>BoolType</groupName>
                    <syntax> public class BoolType;</syntax>
                    <baseClass ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                    <constructors>
                        <constructor id="default_constructor_BoolType_792AB2CC5CC32731C2FF3238D18586DD35D74ED2">
                            <name>BoolType()</name>
                            <syntax>public nothrow BoolType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BoolType_7B91C970F300714F894F70BE558AB667BD254819">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_BreakStatement_4B85AA125DCD9CEF1305B090C2F86B174A514580">
                    <name>BreakStatement</name>
                    <groupName>BreakStatement</groupName>
                    <syntax> public class BreakStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="default_constructor_BreakStatement_3FD764BB2173314CE967D7ABB7CC80AEDF014CCA">
                            <name>BreakStatement()</name>
                            <syntax>public BreakStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BreakStatement_6A49393BE27AB8B0A9674B09102302C12D58CBA3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_BreakStatement_EB526300E7ADDD88D17D7EB380AF0815B29CED46">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_ByteType_490AEA1EE94BBCC3A1DFB53231F83959E2168A77">
                    <name>ByteType</name>
                    <groupName>ByteType</groupName>
                    <syntax> public class ByteType;</syntax>
                    <baseClass ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                    <constructors>
                        <constructor id="default_constructor_ByteType_99FC6A7D77D465DDBE8BB7FFD9EE0F109121F52B">
                            <name>ByteType()</name>
                            <syntax>public nothrow ByteType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ByteType_6EBB20F251612E6BE6BC06564E07E298C0F7DA08">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_CaseStatement_C59D9EE2EB215BB01443FA26C029108CF42800A1">
                    <name>CaseStatement</name>
                    <groupName>CaseStatement</groupName>
                    <syntax> public class CaseStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="default_constructor_CaseStatement_7D895A97573B6ABF00749F321D3BCBD6B7BDC674">
                            <name>CaseStatement()</name>
                            <syntax>public CaseStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CaseStatement_3ED38BF29C4137EA0F55E89E2CC7ED735BEA7B3F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddCaseExpr_CaseStatement_F3489157DC1C30AE97C79D5ADC80E17E7DB0E525">
                            <name>AddCaseExpr(DomObject* caseExpr)</name>
                            <syntax>public void AddCaseExpr(DomObject* caseExpr);</syntax>
                            <parameters>
                                <parameter>
                                    <name>caseExpr</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddStatement_CaseStatement_6F1DC9BB34C8C90CA8F31148DD539877B1597DAD">
                            <name>AddStatement(Statement* statement)</name>
                            <syntax>public void AddStatement(Statement* statement);</syntax>
                            <parameters>
                                <parameter>
                                    <name>statement</name>
                                    <type ref="type.7396182"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_CaseStatement_770204373D050CAAB07D7482753E2A92CFF5FBEC">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Cast_9585B1B3446BC83A49E6CDB7486A782150BE11FC">
                    <name>Cast</name>
                    <groupName>Cast</groupName>
                    <syntax> public class Cast;</syntax>
                    <baseClass ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                    <constructors>
                        <constructor id="constructor_Cast_29308124D20BDBA0E7392E83F495EBB90856BFFE">
                            <name>Cast(DomObject* targetTypeExpr_, DomObject* sourceExpr_)</name>
                            <syntax>public Cast(DomObject* targetTypeExpr_, DomObject* sourceExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>targetTypeExpr_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>sourceExpr_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Cast_A4E54F9592C4E2A153CAC3B251D978671A90CDCD">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Cast_D1E4A5170E18662C0109A6F3A85265C8E980A62C">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Catch_0582D6C1CDCCCB626ECB14F1DA1432D9E2111A37">
                    <name>Catch</name>
                    <groupName>Catch</groupName>
                    <syntax> public class Catch;</syntax>
                    <baseClass ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                    <constructors>
                        <constructor id="constructor_Catch_8FA04C9C68E8230406061986187DFC621C8C02C2">
                            <name>Catch(DomObject* typeExpr_, DomObject* id_, CompoundStatement* catchBlock_)</name>
                            <syntax>public Catch(DomObject* typeExpr_, DomObject* id_, CompoundStatement* catchBlock_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeExpr_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>catchBlock_</name>
                                    <type ref="type.7396188"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Catch_1572006C4D0B812C7A3A535D6E99ABE0A11800AE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Catch_F9485E88285C81A73047AB394FB394EFBC83BBFC">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_CharType_779EBB19F92F0A89BF9304EC9025AA8E9CEC1C15">
                    <name>CharType</name>
                    <groupName>CharType</groupName>
                    <syntax> public class CharType;</syntax>
                    <baseClass ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                    <constructors>
                        <constructor id="default_constructor_CharType_E1B7A1E44A259B89E2E6097CC72D0E814AED0904">
                            <name>CharType()</name>
                            <syntax>public nothrow CharType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CharType_CDCAD88D6976C04C9DD661DCDA7254865EE31A0C">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5">
                    <name>Complement</name>
                    <groupName>Complement</groupName>
                    <syntax> public class Complement;</syntax>
                    <baseClass ref="class_PrefixExpression_54423C4D20F88D06F79420BDBE11404D5B729948"/>
                    <constructors>
                        <constructor id="constructor_Complement_651BB4CB810D97C5BC7406A830DDA1C5343F7DFA">
                            <name>Complement(DomObject* subject_)</name>
                            <syntax>public Complement(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Complement_6A7106D46D68F50FED6EC9A7EEAD5EBBC3880568">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9">
                    <name>CompoundStatement</name>
                    <groupName>CompoundStatement</groupName>
                    <syntax> public class CompoundStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="default_constructor_CompoundStatement_35FB9F27ED1250559E3297CA012112EFF2F0EE32">
                            <name>CompoundStatement()</name>
                            <syntax>public CompoundStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CompoundStatement_0D71EBB712C6FCE2948772BFC7E17C7625C7923E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddStatement_CompoundStatement_6F389D25143A65C1ECD5D2752F54D206560443DA">
                            <name>AddStatement(Statement* statement)</name>
                            <syntax>public void AddStatement(Statement* statement);</syntax>
                            <parameters>
                                <parameter>
                                    <name>statement</name>
                                    <type ref="type.7396182"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_CompoundStatement_FCC85205CD991E1ED9600E7DB9F88E6763D6F448">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Conjunction_0132C4E38ACB57C960C99B8800089A5ED52CB3AD">
                    <name>Conjunction</name>
                    <groupName>Conjunction</groupName>
                    <syntax> public class Conjunction;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_Conjunction_B180AB2ED6DE790A39F6075AE7D9EC71E0821B37">
                            <name>Conjunction(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Conjunction(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Conjunction_07E7C98DC6C6219B169982C0FF255808DB98B5B2">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A">
                    <name>Const</name>
                    <groupName>Const</groupName>
                    <syntax> public class Const;</syntax>
                    <baseClass ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                    <constructors>
                        <constructor id="constructor_Const_A36B9AC5AC815B85CBDD049E38905A8245727ECD">
                            <name>Const(DomObject* subject_)</name>
                            <syntax>public nothrow Const(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Const_B23F75E42AA8D53ABE7D4213D909DA494DE8BEF9">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Name_Const_6526262D38A73227D8E0606BE200F16047FD923E">
                            <name>Name() const</name>
                            <syntax>public nothrow override String&lt;uchar> Name() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_Print_Const_72279CD6C965F9E586D3EBDF39128EBCE1B03848">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8">
                    <name>Construct</name>
                    <groupName>Construct</groupName>
                    <syntax> public class Construct;</syntax>
                    <baseClass ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                    <constructors>
                        <constructor id="constructor_Construct_0D34FA7963949A42BB3FA6946B89F8CF090ED4C9">
                            <name>Construct(DomObject* typeExpr_)</name>
                            <syntax>public Construct(DomObject* typeExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeExpr_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Construct_97D335DCC83CEAAB93666256F7CE2D724C9EB653">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_Construct_E46ADD53FB8ACFFF654CF7F5681C691DC41CB7A6">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public override void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Construct_DC05CDF4E7292AFC426F54CCE1ABA1053AD13624">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_ConstructionStatement_0E8F6D33B33CABF85AEE993CBB0F609D7E941AEA">
                    <name>ConstructionStatement</name>
                    <groupName>ConstructionStatement</groupName>
                    <syntax> public class ConstructionStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_ConstructionStatement_A3706F0577B21E5D71EF0A20AF1E8BD155CB5ABF">
                            <name>ConstructionStatement(DomObject* typeExpr_, DomObject* id_)</name>
                            <syntax>public ConstructionStatement(DomObject* typeExpr_, DomObject* id_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeExpr_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ConstructionStatement_5FB3CE625510F056D2FD2A567C6B14DCE5C92F37">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_ConstructionStatement_A6BB930B4F5AC87F7F78DF11836312464196EBBE">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public override void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ConstructionStatement_138A4E32294704D1C23C48CE6D73862A01E125C6">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetParens_ConstructionStatement_E07BC32EC1EEEAACF01D7CFCDBF3CDD998A209F5">
                            <name>SetParens()</name>
                            <syntax>public nothrow void SetParens();</syntax>
                        </function>
                    </functions>
                </class>
                <class id="class_ContinueStatement_42B62A34F11C57D46CBD9B9E4C6DC070CA7E1CFC">
                    <name>ContinueStatement</name>
                    <groupName>ContinueStatement</groupName>
                    <syntax> public class ContinueStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="default_constructor_ContinueStatement_9F7D50B0337CF0CCC235B31AE9DE89119E885233">
                            <name>ContinueStatement()</name>
                            <syntax>public ContinueStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ContinueStatement_9B6818853C7F45C850C62180181707D7EA8E0663">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ContinueStatement_9E9B1D4720C003FA34157E18AE2D391FE9516165">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DefaultStatement_431BBB02B62D93DF15B8BA112275D930065BD749">
                    <name>DefaultStatement</name>
                    <groupName>DefaultStatement</groupName>
                    <syntax> public class DefaultStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="default_constructor_DefaultStatement_5C2BD34156F53E58A73DF84B2D65A396C5F13892">
                            <name>DefaultStatement()</name>
                            <syntax>public DefaultStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DefaultStatement_33E13FFDF81A52D5988D2253BDF89D356F7E8C7F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddStatement_DefaultStatement_AE9DBBDA956204A9665A6075B40860E0406989B7">
                            <name>AddStatement(Statement* statement)</name>
                            <syntax>public void AddStatement(Statement* statement);</syntax>
                            <parameters>
                                <parameter>
                                    <name>statement</name>
                                    <type ref="type.7396182"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_DefaultStatement_B5CA6ACB809DE4B499DE1C6C9FBA0D926E4C9DC2">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A">
                    <name>DeleteStatement</name>
                    <groupName>DeleteStatement</groupName>
                    <syntax> public class DeleteStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_DeleteStatement_25B7ADB6431D2A504EA2C15134C0E9681F438218">
                            <name>DeleteStatement(DomObject* expression_)</name>
                            <syntax>public DeleteStatement(DomObject* expression_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expression_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DeleteStatement_DEB0A761C3FDFF0F297800C8367E17384B347EA8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_DeleteStatement_C25506CD8D6C409801F827F7E7EEBF79A4528589">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594">
                    <name>Deref</name>
                    <groupName>Deref</groupName>
                    <syntax> public class Deref;</syntax>
                    <baseClass ref="class_PrefixExpression_54423C4D20F88D06F79420BDBE11404D5B729948"/>
                    <constructors>
                        <constructor id="constructor_Deref_FF28839199F4E2C2DEC28AAD4F495CF556BA8480">
                            <name>Deref(DomObject* subject_)</name>
                            <syntax>public Deref(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Deref_99FFA7F4F973D7840CDD7BB09A8E27C7DB31F505">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550">
                    <name>DestroyStatement</name>
                    <groupName>DestroyStatement</groupName>
                    <syntax> public class DestroyStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_DestroyStatement_9F2CFF93B4AF1C0F1A21E92D90ADA807A3E1702D">
                            <name>DestroyStatement(DomObject* expression_)</name>
                            <syntax>public DestroyStatement(DomObject* expression_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expression_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DestroyStatement_E90F18047AA6DB785DCCA25296610B2207CC1600">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_DestroyStatement_B006144A691DBAF3E7E4F827B440C588E5F528B5">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Disjunction_F31E3B03B7D35E04D91C7E729F2351D3957CC86E">
                    <name>Disjunction</name>
                    <groupName>Disjunction</groupName>
                    <syntax> public class Disjunction;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_Disjunction_1B5EE0E4EA6770F90BBA7757083AD3AE44208277">
                            <name>Disjunction(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Disjunction(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Disjunction_AA1155E2C1F466D85041177BE18E605556F5F773">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Div_870BC7AD6CF194517E350C8AF37CEAA3E22F8231">
                    <name>Div</name>
                    <groupName>Div</groupName>
                    <syntax> public class Div;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_Div_53B798EAF23879F742A8CD086C250067649F056C">
                            <name>Div(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Div(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Div_9BF48920D9B109813CB790FA1E2C9E1C928282DF">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DoStatement_2DE84CAC1D895D9020F0342FAD7D807D41BC6D0E">
                    <name>DoStatement</name>
                    <groupName>DoStatement</groupName>
                    <syntax> public class DoStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_DoStatement_5EF42A6681B009E37BE9405448BCEA8EFA04F7E8">
                            <name>DoStatement(DomObject* condition_, Statement* statement_)</name>
                            <syntax>public DoStatement(DomObject* condition_, Statement* statement_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>condition_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>statement_</name>
                                    <type ref="type.7396182"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DoStatement_8FFAF0D96F83556BDE9A3BD083E669AC57ED95DD">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_DoStatement_FFA320A5A8D61175626A25E560105289CD07BCCE">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF">
                    <name>DomObject</name>
                    <groupName>DomObject</groupName>
                    <syntax>abstract public class DomObject;</syntax>
                    <constructors>
                        <constructor id="constructor_DomObject_BB42E44FB17A2C144C36E5C531EB57955DB9B6ED">
                            <name>DomObject(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow DomObject(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomObject_4CA8814E15131A836452A9E7C1283F75EB49AA78">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public abstract void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_DomObject_4002324F52B1814870A359D13BF3F41033690D39">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public virtual void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Name_DomObject_6D0E0D534FDE9AEFE0AA0D92489FC8CDD8DC7839">
                            <name>Name() const</name>
                            <syntax>public nothrow virtual String&lt;uchar> Name() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_Parens_DomObject_5762B876F810623A5AA19DB8D3E8E9A546F2EE32">
                            <name>Parens() const</name>
                            <syntax>public nothrow inline bool Parens() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_Print_DomObject_1246D42C75EE05BDA21694F1AA36881375183A9B">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public virtual void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Rank_DomObject_2686A5B4BCE675013EC2424D0603072B2A15D2EE">
                            <name>Rank() const</name>
                            <syntax>public nothrow virtual int Rank() const;</syntax>
                            <returnType ref="type.7388900"/>
                        </function>
                        <function id="member_function_SetName_DomObject_2F016D62E3F95490A58FCD802C70C53E5379D659">
                            <name>SetName(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow void SetName(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetParens_DomObject_E242CDA6377C17AB88F8975E04006D60BFA6B353">
                            <name>SetParens()</name>
                            <syntax>public nothrow inline void SetParens();</syntax>
                        </function>
                    </functions>
                </class>
                <class id="class_Dot_3DBFB45CB93A3D81709E97835834A09CB64DBFD8">
                    <name>Dot</name>
                    <groupName>Dot</groupName>
                    <syntax> public class Dot;</syntax>
                    <baseClass ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                    <constructors>
                        <constructor id="constructor_Dot_C2692D1EB06D2B442F0D9855769E507DB30D03EE">
                            <name>Dot(DomObject* subject_, const String&lt;uchar>&amp; memberId_)</name>
                            <syntax>public nothrow Dot(DomObject* subject_, const String&lt;uchar>&amp; memberId_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>memberId_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Dot_FA64586D4849A65088EECCF457C7B54458FDBCF9">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Name_Dot_27A6F1521DFA2F36C8378955073963DDFE7E9F8F">
                            <name>Name() const</name>
                            <syntax>public nothrow override String&lt;uchar> Name() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_Print_Dot_4C64FBE740DD174226181C1C295B38741FA93CFE">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DoubleType_2F54DB2225723BF66747F0EE8930D97AEAC3087B">
                    <name>DoubleType</name>
                    <groupName>DoubleType</groupName>
                    <syntax> public class DoubleType;</syntax>
                    <baseClass ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                    <constructors>
                        <constructor id="default_constructor_DoubleType_7B9BFB3336061617206E6A35728A51C5C9D4E55A">
                            <name>DoubleType()</name>
                            <syntax>public nothrow DoubleType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DoubleType_245B71EA11A749DD434979D14D1DBEC84783CAE5">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_EmptyStatement_6FB774F9105B54DBC81384D86B6519B51F8CEC1A">
                    <name>EmptyStatement</name>
                    <groupName>EmptyStatement</groupName>
                    <syntax> public class EmptyStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="default_constructor_EmptyStatement_D3FA4A5E7EA5A75A679D4A1F755F0D8F01AB2E74">
                            <name>EmptyStatement()</name>
                            <syntax>public EmptyStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_EmptyStatement_AA42B316DA65EA1A6595E2057BAD0A41AFD3DF60">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_EmptyStatement_FC2B1B707E0D475DB7B9315C050D309C5F02025B">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Equal_3EF4BE86B509FD01F694F7C4806B5C900557528A">
                    <name>Equal</name>
                    <groupName>Equal</groupName>
                    <syntax> public class Equal;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_Equal_85A86E2AE844984246B05A7ED2EC4DFB5F1DF85F">
                            <name>Equal(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Equal(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Equal_EF179A960A81918528869543603655C0038043EE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Expression_63F45770E98CB553F848612A60783A045B1137F7">
                    <name>Expression</name>
                    <groupName>Expression</groupName>
                    <syntax>abstract public class Expression;</syntax>
                    <baseClass ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                    <constructors>
                        <constructor id="constructor_Expression_F3EC2994CDFCE8518383F792F79C6BFC4DF3D6AF">
                            <name>Expression(const String&lt;uchar>&amp; name_, int rank_)</name>
                            <syntax>public nothrow Expression(const String&lt;uchar>&amp; name_, int rank_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                                <parameter>
                                    <name>rank_</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Rank_Expression_73E7C240E1CE1146B2CDDFA7FC21373807437118">
                            <name>Rank() const</name>
                            <syntax>public nothrow override int Rank() const;</syntax>
                            <returnType ref="type.7388900"/>
                        </function>
                    </functions>
                </class>
                <class id="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54">
                    <name>ExpressionStatement</name>
                    <groupName>ExpressionStatement</groupName>
                    <syntax> public class ExpressionStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_ExpressionStatement_A0E12EC88A1ECCCBAE1E320F273D742E42296764">
                            <name>ExpressionStatement(DomObject* expression_)</name>
                            <syntax>public ExpressionStatement(DomObject* expression_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expression_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ExpressionStatement_77A835CCC88201B3C5B2E539F41619FE743E3CDC">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ExpressionStatement_73C53117C30BD50EFBCF054B2949D8B7FD7CDD27">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_FloatType_F56BE7D1812AE8764A94A3C4A98DBCACB5F6BD11">
                    <name>FloatType</name>
                    <groupName>FloatType</groupName>
                    <syntax> public class FloatType;</syntax>
                    <baseClass ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                    <constructors>
                        <constructor id="default_constructor_FloatType_72515A0BE0D1F56C8F44B939479584C8D0D6A8E7">
                            <name>FloatType()</name>
                            <syntax>public nothrow FloatType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_FloatType_A2FD85ABBAEEC2CA6A59D0BDC55622D4946AFB7F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_ForStatement_2C9CB31D518BF6F5E055FFE544F154898DB891FC">
                    <name>ForStatement</name>
                    <groupName>ForStatement</groupName>
                    <syntax> public class ForStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_ForStatement_F302E1B3B9EB52C899DE40C159DD5066BD5A463C">
                            <name>ForStatement(Statement* initS_, DomObject* condition_, Statement* loopS_, Statement* actionS_)</name>
                            <syntax>public ForStatement(Statement* initS_, DomObject* condition_, Statement* loopS_, Statement* actionS_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>initS_</name>
                                    <type ref="type.7396182"/>
                                </parameter>
                                <parameter>
                                    <name>condition_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>loopS_</name>
                                    <type ref="type.7396182"/>
                                </parameter>
                                <parameter>
                                    <name>actionS_</name>
                                    <type ref="type.7396182"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ForStatement_12CB382271601C3DA47D1984BBF825FF498AEA66">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ForStatement_356ED241B53FCA2587B8123C5F55690718D2C52C">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D">
                    <name>GotoCaseStatement</name>
                    <groupName>GotoCaseStatement</groupName>
                    <syntax> public class GotoCaseStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_GotoCaseStatement_E3DF862620B8A365411F81E72C1B362C0DDAB4D2">
                            <name>GotoCaseStatement(DomObject* targetCase_)</name>
                            <syntax>public GotoCaseStatement(DomObject* targetCase_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>targetCase_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_GotoCaseStatement_965BDBC033F3602B8F35D11B89DB256C302C2EC3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_GotoCaseStatement_34B2C09F51D8FB8AB8F4BB985E9A447E2BB0635C">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_GotoDefaultStatement_A0F05081B3A8A0CF31277B3E9AB698FF523E7B9F">
                    <name>GotoDefaultStatement</name>
                    <groupName>GotoDefaultStatement</groupName>
                    <syntax> public class GotoDefaultStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="default_constructor_GotoDefaultStatement_239546857706AB0793095FDCFC352ABE0EC39465">
                            <name>GotoDefaultStatement()</name>
                            <syntax>public GotoDefaultStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_GotoDefaultStatement_47F65BA43864B18B67C3D6C46B73EAF31FAB4A45">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_GotoDefaultStatement_C47EB42FF7C8BED74EFC5DDFA2B38FB56401AFCC">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E">
                    <name>GotoStatement</name>
                    <groupName>GotoStatement</groupName>
                    <syntax> public class GotoStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_GotoStatement_AC111BA558E2D63E81821C990B9FE1B129BEE2D0">
                            <name>GotoStatement(const String&lt;uchar>&amp; target_)</name>
                            <syntax>public GotoStatement(const String&lt;uchar>&amp; target_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>target_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_GotoStatement_56A12340897DBB13D73A72BC1EA125E8718ED92C">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_GotoStatement_B6D5606A0FA9BC236AB3DE717B0C508A9B95C5C9">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Greater_615FAE96F23C7D50557A473DB2E1090BB39F1311">
                    <name>Greater</name>
                    <groupName>Greater</groupName>
                    <syntax> public class Greater;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_Greater_CB9A0699459A3B33E06350B1D1821176C456ABDD">
                            <name>Greater(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Greater(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Greater_EE70BF855E54AB427D41A7ABF66FDB31DEF742DE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_GreaterOrEqual_4400FB33354DC18FE0061555E68C302AD3CE11E6">
                    <name>GreaterOrEqual</name>
                    <groupName>GreaterOrEqual</groupName>
                    <syntax> public class GreaterOrEqual;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_GreaterOrEqual_1DFC83CB62EEB8DB53E7895737F8E974C343631D">
                            <name>GreaterOrEqual(DomObject* left_, DomObject* right_)</name>
                            <syntax>public GreaterOrEqual(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_GreaterOrEqual_C80615229A0C0E9F9D9BC3BB5DA86A4F12E1C833">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7">
                    <name>Identifier</name>
                    <groupName>Identifier</groupName>
                    <syntax> public class Identifier;</syntax>
                    <baseClass ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                    <constructors>
                        <constructor id="constructor_Identifier_06EA8057993C062B3EF81A9500303464A3F0FFAD">
                            <name>Identifier(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow Identifier(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Identifier_8B2EE033F2E7DD641EA5FC1659DE772FD876C998">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Rank_Identifier_DD14320B57C2C28BD9E7EE654A1D6650A33F433B">
                            <name>Rank() const</name>
                            <syntax>public nothrow override int Rank() const;</syntax>
                            <returnType ref="type.7388900"/>
                        </function>
                    </functions>
                </class>
                <class id="class_IfStatement_C1EF6483EAB3986BA6A34F9E4C9ED4C0F2F824DE">
                    <name>IfStatement</name>
                    <groupName>IfStatement</groupName>
                    <syntax> public class IfStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_IfStatement_2F5F523924C37FEC1EEE677D441DAF48AE1D1E6D">
                            <name>IfStatement(DomObject* condition_, Statement* thenS_, Statement* elseS_)</name>
                            <syntax>public IfStatement(DomObject* condition_, Statement* thenS_, Statement* elseS_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>condition_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>thenS_</name>
                                    <type ref="type.7396182"/>
                                </parameter>
                                <parameter>
                                    <name>elseS_</name>
                                    <type ref="type.7396182"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_IfStatement_7CDCB83B87B6DDB0BA9BA03B13F1295B1572CE2F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_IfStatement_60BC87DAC2FB3CB2DFEB3428719EC2EE5F549A96">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Indexing_F06FD2A01CA08D73D3B848268E78E8185020CBA4">
                    <name>Indexing</name>
                    <groupName>Indexing</groupName>
                    <syntax> public class Indexing;</syntax>
                    <baseClass ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                    <constructors>
                        <constructor id="constructor_Indexing_234AD633DABEC36EFC3E84A553611FF6B16DCE1B">
                            <name>Indexing(DomObject* subject_, DomObject* index_)</name>
                            <syntax>public Indexing(DomObject* subject_, DomObject* index_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>index_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Indexing_1F4CD2105D19BE5EFA2D58AB374588433A2DDF71">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Indexing_0A36B0A85C4CB87F78ABA0AE30F90D3D6006D24F">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_IntType_40DD4EEE7B839A4874F17F4DF4577431DCA81D97">
                    <name>IntType</name>
                    <groupName>IntType</groupName>
                    <syntax> public class IntType;</syntax>
                    <baseClass ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                    <constructors>
                        <constructor id="default_constructor_IntType_65CE78B0FC0B4F39E48BB85ED17DE93500572E2F">
                            <name>IntType()</name>
                            <syntax>public nothrow IntType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_IntType_A0BEB0435086A9FB6D1238A32DA6E60C24355168">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5">
                    <name>Invoke</name>
                    <groupName>Invoke</groupName>
                    <syntax> public class Invoke;</syntax>
                    <baseClass ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                    <constructors>
                        <constructor id="constructor_Invoke_92B72739DB687F71DA4EF207BFF0F32F2C4FCC46">
                            <name>Invoke(DomObject* subject_)</name>
                            <syntax>public Invoke(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Invoke_67603DECCFDB8F8885DEAD1F07BD40922EE08CFE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_Invoke_22164B46D53BD15F327B0CC593BEDBD713B8FB5E">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public override void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Invoke_8C51DD2578441380A2934C5B2F3849BD32B02AFC">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Is_EC0C6DA58F33941C0957B3F764732D8472F6E088">
                    <name>Is</name>
                    <groupName>Is</groupName>
                    <syntax> public class Is;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_Is_B4956514C353D3F636675280CB953A1AFA712187">
                            <name>Is(DomObject* expr_, DomObject* targetTypeExpr_)</name>
                            <syntax>public Is(DomObject* expr_, DomObject* targetTypeExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expr_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>targetTypeExpr_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Is_A6ACA04F445E754031A14D7F5AA5DCEA459DABC3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Less_1580A37986A6536C269A3DC15DC3E14E4C0804EA">
                    <name>Less</name>
                    <groupName>Less</groupName>
                    <syntax> public class Less;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_Less_4778D13997E4BD55ACE54DB44560F58157FFBFBE">
                            <name>Less(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Less(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Less_111DA2A52F16CDEC383AD77BADE1925B191A5B3A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_LessOrEqual_9091963D31C6715767D56C999742B7722B15871F">
                    <name>LessOrEqual</name>
                    <groupName>LessOrEqual</groupName>
                    <syntax> public class LessOrEqual;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_LessOrEqual_1B5F718D3785EB324F9109519DB1B017DDDDE4C2">
                            <name>LessOrEqual(DomObject* left_, DomObject* right_)</name>
                            <syntax>public LessOrEqual(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LessOrEqual_D5A25F3B0E6B498F802EBA943BB181C4A87DBEB4">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77">
                    <name>Literal</name>
                    <groupName>Literal</groupName>
                    <syntax> public class Literal;</syntax>
                    <baseClass ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                    <constructors>
                        <constructor id="constructor_Literal_C02938AFB06C9B321096C8EEECD38495C005318E">
                            <name>Literal(const String&lt;uchar>&amp; text)</name>
                            <syntax>public nothrow Literal(const String&lt;uchar>&amp; text);</syntax>
                            <parameters>
                                <parameter>
                                    <name>text</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Literal_14339607FA8681E34F2FB6F8BC7C45BAF78FDB7E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_LongType_F67B8047273646A168685FD9A0A063CEDFF5131C">
                    <name>LongType</name>
                    <groupName>LongType</groupName>
                    <syntax> public class LongType;</syntax>
                    <baseClass ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                    <constructors>
                        <constructor id="default_constructor_LongType_85E88EFF30C2511112CC4C29F3B4B008C5500C9C">
                            <name>LongType()</name>
                            <syntax>public nothrow LongType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LongType_C2C43539F32B952471DADDA66190DFEFF664B560">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05">
                    <name>LvalueRef</name>
                    <groupName>LvalueRef</groupName>
                    <syntax> public class LvalueRef;</syntax>
                    <baseClass ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                    <constructors>
                        <constructor id="constructor_LvalueRef_33268CEFAE38C6A1C99C84C80C5FA7C195201347">
                            <name>LvalueRef(DomObject* subject_)</name>
                            <syntax>public nothrow LvalueRef(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LvalueRef_9113257276B3B5EC54A97BD6A9F433B5B97DCADC">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Name_LvalueRef_F9357CDF8C56E06C69E4098F2B49638B42A2E61F">
                            <name>Name() const</name>
                            <syntax>public nothrow override String&lt;uchar> Name() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_Print_LvalueRef_F6FD9A9334444797F38356301D1D325AD17EA49B">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Mul_34532DF2D76B7BA144AA0E44CCBF15EA39D37CCF">
                    <name>Mul</name>
                    <groupName>Mul</groupName>
                    <syntax> public class Mul;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_Mul_49633C50D9434A3D47265BD0E483210C35DAAF3E">
                            <name>Mul(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Mul(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Mul_8824CBD274EA8FB4FF9BEE22CB073277D46EE709">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21">
                    <name>New</name>
                    <groupName>New</groupName>
                    <syntax> public class New;</syntax>
                    <baseClass ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                    <constructors>
                        <constructor id="constructor_New_21CBB6331DCA5324034437D42FFD77E43CA3977C">
                            <name>New(DomObject* typeExpr_)</name>
                            <syntax>public New(DomObject* typeExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeExpr_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_New_563D3F417AC64BF2787B487CC34D285156FC8791">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_New_E48425D2132CCF6DCC7570381290B98D8299591A">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public override void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_New_28A2BAC49C1E769BE6A4903626E913A481E2C429">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187">
                    <name>Not</name>
                    <groupName>Not</groupName>
                    <syntax> public class Not;</syntax>
                    <baseClass ref="class_PrefixExpression_54423C4D20F88D06F79420BDBE11404D5B729948"/>
                    <constructors>
                        <constructor id="constructor_Not_E09D73F3998C8D1BE4FCB7F3CBD9D508E3D4A39A">
                            <name>Not(DomObject* subject_)</name>
                            <syntax>public Not(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Not_938BB9975D21A33622CC79FA41C9EF7708620A1B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_NotEqual_57BE2D644B155B649C949C1AB40D6F621FE9F457">
                    <name>NotEqual</name>
                    <groupName>NotEqual</groupName>
                    <syntax> public class NotEqual;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_NotEqual_66053AB87D8351FCFD9F0A420310301B830C5FDC">
                            <name>NotEqual(DomObject* left_, DomObject* right_)</name>
                            <syntax>public NotEqual(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_NotEqual_4319FDDE20899513DCF292A96A975A1E64E98558">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6">
                    <name>Pointer</name>
                    <groupName>Pointer</groupName>
                    <syntax> public class Pointer;</syntax>
                    <baseClass ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                    <constructors>
                        <constructor id="constructor_Pointer_F5C199343647D691F54D1FF572745C55D1F0667D">
                            <name>Pointer(DomObject* subject_)</name>
                            <syntax>public nothrow Pointer(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Pointer_EF9550CE6336357EF9FFACA7FA5E8715BFA0356A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Name_Pointer_D5600FA2F4ECD234D77DABF5F31B6C583F3F2716">
                            <name>Name() const</name>
                            <syntax>public nothrow override String&lt;uchar> Name() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_Print_Pointer_F25245A4547E9820AAB2D2BB5E704C0EEB2FC2BD">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392">
                    <name>PostfixDecrement</name>
                    <groupName>PostfixDecrement</groupName>
                    <syntax> public class PostfixDecrement;</syntax>
                    <baseClass ref="class_PostfixExpression_09A9F6851C2A6B2C5C4B926050A1F22378DE15A3"/>
                    <constructors>
                        <constructor id="constructor_PostfixDecrement_DC7474395CF5CDAE9DAD1E2FD86BFC05F0B51A00">
                            <name>PostfixDecrement(DomObject* subject_)</name>
                            <syntax>public PostfixDecrement(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PostfixDecrement_90E778C7672B1E09D16EAAF23A7E7C1AD5B642AB">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_PostfixExpression_09A9F6851C2A6B2C5C4B926050A1F22378DE15A3">
                    <name>PostfixExpression</name>
                    <groupName>PostfixExpression</groupName>
                    <syntax>abstract public class PostfixExpression;</syntax>
                    <baseClass ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                    <constructors>
                        <constructor id="constructor_PostfixExpression_CB4FDDC5858E6036F8A9CBB1607BA2F5D39BDD01">
                            <name>PostfixExpression(DomObject* subject_, Operator op_)</name>
                            <syntax>public PostfixExpression(DomObject* subject_, Operator op_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>op_</name>
                                    <type ref="enumerated_type_Operator_4F0018C24F233767C89E790B72E5C84238A85A87"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PostfixExpression_33A0537C68AE78FE90382A2860C2C83E388FA6A8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_PostfixExpression_F643C3E8F731E55A6EB9CEF8C9F5A13636E5F177">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9">
                    <name>PostfixIncrement</name>
                    <groupName>PostfixIncrement</groupName>
                    <syntax> public class PostfixIncrement;</syntax>
                    <baseClass ref="class_PostfixExpression_09A9F6851C2A6B2C5C4B926050A1F22378DE15A3"/>
                    <constructors>
                        <constructor id="constructor_PostfixIncrement_90C8FBA27B48C0C99938F23A1AFB1D2C590CBB18">
                            <name>PostfixIncrement(DomObject* subject_)</name>
                            <syntax>public PostfixIncrement(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PostfixIncrement_3FD1090D67FC659751C6828D84B0B2D4627288BE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0">
                    <name>PrefixDecrement</name>
                    <groupName>PrefixDecrement</groupName>
                    <syntax> public class PrefixDecrement;</syntax>
                    <baseClass ref="class_PrefixExpression_54423C4D20F88D06F79420BDBE11404D5B729948"/>
                    <constructors>
                        <constructor id="constructor_PrefixDecrement_9BA86A49C7BF0B604DEE1BAA953CD14D29FD4269">
                            <name>PrefixDecrement(DomObject* subject_)</name>
                            <syntax>public PrefixDecrement(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PrefixDecrement_7C3753C3450F67663628EDDC528087D36A5228F8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_PrefixExpression_54423C4D20F88D06F79420BDBE11404D5B729948">
                    <name>PrefixExpression</name>
                    <groupName>PrefixExpression</groupName>
                    <syntax>abstract public class PrefixExpression;</syntax>
                    <baseClass ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                    <constructors>
                        <constructor id="constructor_PrefixExpression_55BB390293B66B433E77F50FE7CCBAC01799D294">
                            <name>PrefixExpression(Operator op_, DomObject* subject_)</name>
                            <syntax>public PrefixExpression(Operator op_, DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>op_</name>
                                    <type ref="enumerated_type_Operator_4F0018C24F233767C89E790B72E5C84238A85A87"/>
                                </parameter>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PrefixExpression_ABBE3DF62BBFA881B067C644CBAA563667E3EDC5">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_PrefixExpression_7C3C5C5B839C2ACE36E4562CC9A51AFD905501C3">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D">
                    <name>PrefixIncrement</name>
                    <groupName>PrefixIncrement</groupName>
                    <syntax> public class PrefixIncrement;</syntax>
                    <baseClass ref="class_PrefixExpression_54423C4D20F88D06F79420BDBE11404D5B729948"/>
                    <constructors>
                        <constructor id="constructor_PrefixIncrement_9ED02493F3284F1C7E14159E1FB486E44EFACBE7">
                            <name>PrefixIncrement(DomObject* subject_)</name>
                            <syntax>public PrefixIncrement(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PrefixIncrement_3B4D1A0B64F9DB0F100DDB3962DA6AC432359CF0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_RangeForStatement_785371970BF070388FB222CA14A1494243EB9D3E">
                    <name>RangeForStatement</name>
                    <groupName>RangeForStatement</groupName>
                    <syntax> public class RangeForStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_RangeForStatement_57E7A7535F9C92CF526AFDD1F0D4670794795222">
                            <name>RangeForStatement(DomObject* typeExpr_, DomObject* id_, DomObject* container_, Statement* action_)</name>
                            <syntax>public RangeForStatement(DomObject* typeExpr_, DomObject* id_, DomObject* container_, Statement* action_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeExpr_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>container_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>action_</name>
                                    <type ref="type.7396182"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_RangeForStatement_41B21DC84F65DD51A9063B80B77ED127BF914D2B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_RangeForStatement_F60E0AC3DBCC0201404F903E827606D56EEFCA0D">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Rem_B6CCE54FD2D032B79B8776E88368A5362BF0845F">
                    <name>Rem</name>
                    <groupName>Rem</groupName>
                    <syntax> public class Rem;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_Rem_E096A4C2C1D4E88D581CC75CCF03F8314CA201FE">
                            <name>Rem(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Rem(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Rem_DACEF65994A3EFD7A4FB48A7DA77C7BB98344705">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750">
                    <name>ReturnStatement</name>
                    <groupName>ReturnStatement</groupName>
                    <syntax> public class ReturnStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_ReturnStatement_732BE4EA9A3E5E17B44648C08B1BE691079F903D">
                            <name>ReturnStatement(DomObject* expression_)</name>
                            <syntax>public ReturnStatement(DomObject* expression_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expression_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ReturnStatement_D9D1C2B0CDC1733E47DEBE4C05F21B62F5AE3A5F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ReturnStatement_1CEF02004856480C0E37E0A7BBB8A180F32306F9">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229">
                    <name>RvalueRef</name>
                    <groupName>RvalueRef</groupName>
                    <syntax> public class RvalueRef;</syntax>
                    <baseClass ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                    <constructors>
                        <constructor id="constructor_RvalueRef_C850BD48D7191DB271CC8B042F31F85D91E83A0D">
                            <name>RvalueRef(DomObject* subject_)</name>
                            <syntax>public nothrow RvalueRef(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_RvalueRef_BCDBFBB4C211A5BF48F8469AE783D803BAFEDC26">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Name_RvalueRef_7E7B571CFA547EEEC11F344E4B7D0925AF369A48">
                            <name>Name() const</name>
                            <syntax>public nothrow override String&lt;uchar> Name() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_Print_RvalueRef_AB27ED472E64C64FE0013A2D27DC47D2F9ECA5F0">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_SByteType_D39AD49CAA300FB82912697D32C1F0DA20E1CDE8">
                    <name>SByteType</name>
                    <groupName>SByteType</groupName>
                    <syntax> public class SByteType;</syntax>
                    <baseClass ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                    <constructors>
                        <constructor id="default_constructor_SByteType_E1FFD26EF6FB7EA54C3262FD8683FAED7FE2A7E2">
                            <name>SByteType()</name>
                            <syntax>public nothrow SByteType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SByteType_1EB5449A7EA6370A590CB85DD21E7E4655F03227">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_ShiftLeft_0C58636617E67D99E2D4B947D93C487C9EC0EEAE">
                    <name>ShiftLeft</name>
                    <groupName>ShiftLeft</groupName>
                    <syntax> public class ShiftLeft;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_ShiftLeft_AAAB5549C228798366C5B43A7FCD7A4D26FEAEFE">
                            <name>ShiftLeft(DomObject* left_, DomObject* right_)</name>
                            <syntax>public ShiftLeft(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ShiftLeft_EB4CC737C0B0C2AC9C16B24B604539A7FB19D9D1">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_ShiftRight_27E7AC65159A3C02A710CE1FA049B105D3C389B9">
                    <name>ShiftRight</name>
                    <groupName>ShiftRight</groupName>
                    <syntax> public class ShiftRight;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_ShiftRight_EB0F780EDEEFEB894514EEFE24F8A208DB24E751">
                            <name>ShiftRight(DomObject* left_, DomObject* right_)</name>
                            <syntax>public ShiftRight(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ShiftRight_1D90E3CCF113308E0F4289CB8C5A44C79160A1B7">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_ShortType_F0B48C067139B7007831773D521E957F39E48196">
                    <name>ShortType</name>
                    <groupName>ShortType</groupName>
                    <syntax> public class ShortType;</syntax>
                    <baseClass ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                    <constructors>
                        <constructor id="default_constructor_ShortType_CBAD1184637ECF108C83860332EBCAAC270AD420">
                            <name>ShortType()</name>
                            <syntax>public nothrow ShortType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ShortType_60A135E86AC0A13E8ADBDE4384AE51F3802BEF56">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B">
                    <name>SizeOf</name>
                    <groupName>SizeOf</groupName>
                    <syntax> public class SizeOf;</syntax>
                    <baseClass ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                    <constructors>
                        <constructor id="constructor_SizeOf_80EA00B08359A555AF76FF76C2F0C1A44F9C11A6">
                            <name>SizeOf(DomObject* subject_)</name>
                            <syntax>public SizeOf(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SizeOf_3B8A538C207F525B50CA40A9B1A7C83DAFFE5704">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_SizeOf_1CCAA2FBEAE9694C8F8F3F5EC34444159527E7EF">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0">
                    <name>Statement</name>
                    <groupName>Statement</groupName>
                    <syntax>abstract public class Statement;</syntax>
                    <baseClass ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                    <constructors>
                        <constructor id="constructor_Statement_74B13AFABA362F759545E017C915BB60B0EBCDB2">
                            <name>Statement(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public Statement(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Label_Statement_D7E8D4477CF7D94F2C23541FCC40F45BB6AE38C5">
                            <name>Label() const</name>
                            <syntax>public const String&lt;uchar>&amp; Label() const;</syntax>
                            <returnType ref="type.7390129"/>
                        </function>
                        <function id="member_function_NoNewLine_Statement_C83E8D12172AD188ACD5C9EC1E66230C25656986">
                            <name>NoNewLine() const</name>
                            <syntax>public bool NoNewLine() const;</syntax>
                            <returnType ref="type.7388895"/>
                        </function>
                        <function id="member_function_SetLabel_Statement_AA2A73F102EFB3EBA16C5396EBC58C1BEF9A84FF">
                            <name>SetLabel(const String&lt;uchar>&amp; label_)</name>
                            <syntax>public void SetLabel(const String&lt;uchar>&amp; label_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>label_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetNoNewLine_Statement_DAF1937FBD23C9FC3C00C0F6879ECD17763639B8">
                            <name>SetNoNewLine()</name>
                            <syntax>public void SetNoNewLine();</syntax>
                        </function>
                    </functions>
                </class>
                <class id="class_Sub_66511E41AA55D3A9AFDEFA0F4167C1D40E23242C">
                    <name>Sub</name>
                    <groupName>Sub</groupName>
                    <syntax> public class Sub;</syntax>
                    <baseClass ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                    <constructors>
                        <constructor id="constructor_Sub_6E8C0D86F99A34B82B35757DE1B27D3E662887B3">
                            <name>Sub(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Sub(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Sub_D08EC79D2D95A13E6CC5F672A43B5C3A910CBD94">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E">
                    <name>SwitchStatement</name>
                    <groupName>SwitchStatement</groupName>
                    <syntax> public class SwitchStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_SwitchStatement_5B5983EA00EC2FF44A1EB734B584D9FD8D3BE7E9">
                            <name>SwitchStatement(DomObject* condition_)</name>
                            <syntax>public SwitchStatement(DomObject* condition_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>condition_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SwitchStatement_7680211634D2C2A46D292370497409DFE3B35DFD">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddCase_SwitchStatement_145079D1FFDE578D8EEE71258ABAA0C81236AD41">
                            <name>AddCase(CaseStatement* caseS)</name>
                            <syntax>public void AddCase(CaseStatement* caseS);</syntax>
                            <parameters>
                                <parameter>
                                    <name>caseS</name>
                                    <type ref="type.7396236"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_SwitchStatement_33408582BE269AF5EFF205B07F476D187284C1CA">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetDefault_SwitchStatement_DCC7A782721DDBF0594739B6617BDBDD9BBCEF28">
                            <name>SetDefault(DefaultStatement* defaultS_)</name>
                            <syntax>public void SetDefault(DefaultStatement* defaultS_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>defaultS_</name>
                                    <type ref="type.7396239"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5">
                    <name>TemplateId</name>
                    <groupName>TemplateId</groupName>
                    <syntax> public class TemplateId;</syntax>
                    <baseClass ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                    <constructors>
                        <constructor id="constructor_TemplateId_ED4A4C2FC2654243E0B2E689B5F1AC7AD019904C">
                            <name>TemplateId(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow TemplateId(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_TemplateId_A3C3493BCD2D26A0518B9AB047186E9D48037B9B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddTemplateArg_TemplateId_E13EA04BD4F2173FBE332CB288362C7457CE81E7">
                            <name>AddTemplateArg(DomObject* templateArg)</name>
                            <syntax>public void AddTemplateArg(DomObject* templateArg);</syntax>
                            <parameters>
                                <parameter>
                                    <name>templateArg</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Name_TemplateId_A23FC861D06F4C323F305678D8A748022F10E946">
                            <name>Name() const</name>
                            <syntax>public nothrow override String&lt;uchar> Name() const;</syntax>
                            <returnType ref="type.7390124"/>
                        </function>
                        <function id="member_function_Print_TemplateId_8249820E981760EF40A9186A229550FCEA9AF594">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Rank_TemplateId_A44A4F1B8285173E28F32247805DD64F60B354B5">
                            <name>Rank() const</name>
                            <syntax>public nothrow override int Rank() const;</syntax>
                            <returnType ref="type.7388900"/>
                        </function>
                    </functions>
                </class>
                <class id="class_This_BF8A82301679DE71FF71944DBBFC35FC189B2A08">
                    <name>This</name>
                    <groupName>This</groupName>
                    <syntax> public class This;</syntax>
                    <baseClass ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                    <constructors>
                        <constructor id="default_constructor_This_457D8657BA6727CEBBA3B226B5C5AE221FC6567F">
                            <name>This()</name>
                            <syntax>public This();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_This_4F1E23E7F738953B666A27C03250150B3F1059DA">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7">
                    <name>ThrowStatement</name>
                    <groupName>ThrowStatement</groupName>
                    <syntax> public class ThrowStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_ThrowStatement_B47DBD2021DF645DB40647E4176E808A0230F26D">
                            <name>ThrowStatement(DomObject* expression_)</name>
                            <syntax>public ThrowStatement(DomObject* expression_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expression_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ThrowStatement_7392CE8B6D0F0FA6FAEC28E761FD393C39A03B8E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ThrowStatement_9A9B82A1A71E0BCCFCD9754567D23A4056861CE2">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96">
                    <name>TryStatement</name>
                    <groupName>TryStatement</groupName>
                    <syntax> public class TryStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_TryStatement_EBC83DE64EB4CB6FD6F926871AA1EECA21192F75">
                            <name>TryStatement(CompoundStatement* tryBlock_)</name>
                            <syntax>public TryStatement(CompoundStatement* tryBlock_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>tryBlock_</name>
                                    <type ref="type.7396188"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_TryStatement_A89A3AA77E19E797C37720414B366D80A3C70BFF">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddCatch_TryStatement_7458A53970C51B0D699A7D988408F238B37BBD42">
                            <name>AddCatch(Catch* catch_)</name>
                            <syntax>public void AddCatch(Catch* catch_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>catch_</name>
                                    <type ref="type.7396254"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_TryStatement_641AA7A6822F4B0ABC7A80ACE7F355C9E84D0030">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3">
                    <name>Type</name>
                    <groupName>Type</groupName>
                    <syntax>abstract public class Type;</syntax>
                    <baseClass ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                    <constructors>
                        <constructor id="constructor_Type_B303B86671D6CB6D5EEA32107CD9DDD13764D47B">
                            <name>Type(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow Type(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.7390129"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB">
                    <name>TypeName</name>
                    <groupName>TypeName</groupName>
                    <syntax> public class TypeName;</syntax>
                    <baseClass ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                    <constructors>
                        <constructor id="constructor_TypeName_F996002831E5187DA6B02FCF91E526AF5A62A894">
                            <name>TypeName(DomObject* subject_)</name>
                            <syntax>public TypeName(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_TypeName_3199B1BBF3CB383BCD71810C515EFC584362301B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_TypeName_0B8E9CE526EE6810D2F4F902AF4089BB0B48EFAE">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_UCharType_74BA7B3E41E59E7C17C07A7B6CD92191F1E76A13">
                    <name>UCharType</name>
                    <groupName>UCharType</groupName>
                    <syntax> public class UCharType;</syntax>
                    <baseClass ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                    <constructors>
                        <constructor id="default_constructor_UCharType_55927AEB46DDBBB9673D48E0C4E528510BC0F76B">
                            <name>UCharType()</name>
                            <syntax>public nothrow UCharType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UCharType_19F6A00A1A7684639AC6C6CFF7CD4AA547C69AEA">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_UIntType_DB3E1F90B7FE1BC815B68BB1953CE0A8495E3D24">
                    <name>UIntType</name>
                    <groupName>UIntType</groupName>
                    <syntax> public class UIntType;</syntax>
                    <baseClass ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                    <constructors>
                        <constructor id="default_constructor_UIntType_B7BFDBCEC6C8C967FC69F81DBA2CB8719639F76A">
                            <name>UIntType()</name>
                            <syntax>public nothrow UIntType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UIntType_4B2B5CF5613FE5AAEAC382E5405839777352740B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_ULongType_5010BECDDEC8CE9D9573F3789BC52249D9F2FA7C">
                    <name>ULongType</name>
                    <groupName>ULongType</groupName>
                    <syntax> public class ULongType;</syntax>
                    <baseClass ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                    <constructors>
                        <constructor id="default_constructor_ULongType_AF725CA8E9D472301292BCC031B9FBD6F950CC55">
                            <name>ULongType()</name>
                            <syntax>public nothrow ULongType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ULongType_3AE24932A279F74188F31E1C9432715CB35E2DD6">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_UShortType_CD493F6AAE316F9E9C75A94CD714D34E9C1CD54F">
                    <name>UShortType</name>
                    <groupName>UShortType</groupName>
                    <syntax> public class UShortType;</syntax>
                    <baseClass ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                    <constructors>
                        <constructor id="default_constructor_UShortType_71010419314BCE47091A9FCA172BC70F1EC65AE7">
                            <name>UShortType()</name>
                            <syntax>public nothrow UShortType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UShortType_6E436A39550867DD6AB5E0E86FD13FE955CD5F34">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F">
                    <name>UnaryMinus</name>
                    <groupName>UnaryMinus</groupName>
                    <syntax> public class UnaryMinus;</syntax>
                    <baseClass ref="class_PrefixExpression_54423C4D20F88D06F79420BDBE11404D5B729948"/>
                    <constructors>
                        <constructor id="constructor_UnaryMinus_2222612418F7A159AD9199788EA89A170B0B2D74">
                            <name>UnaryMinus(DomObject* subject_)</name>
                            <syntax>public UnaryMinus(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UnaryMinus_A3B80D54A36F6C9082B9A7227D400D24AE731A3C">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2">
                    <name>UnaryPlus</name>
                    <groupName>UnaryPlus</groupName>
                    <syntax> public class UnaryPlus;</syntax>
                    <baseClass ref="class_PrefixExpression_54423C4D20F88D06F79420BDBE11404D5B729948"/>
                    <constructors>
                        <constructor id="constructor_UnaryPlus_2B326BA9D6196DC0CA0D3A0219F961C5B92B7500">
                            <name>UnaryPlus(DomObject* subject_)</name>
                            <syntax>public UnaryPlus(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UnaryPlus_A2A49AB332F20D114CA806DEF99AA71AF43A3B70">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Visitor_20FFECD046DAE045FE9E47404AA9013F309AFDED">
                    <name>Visitor</name>
                    <groupName>Visitor</groupName>
                    <syntax> public class Visitor;</syntax>
                    <functions>
                        <function id="function_group_Visit_C70DAD81AEA92968DDC755106A5EA0CE350437F1">
                            <name>Visit</name>
                            <overloads>
                                <overload id="member_function_Visit_Visitor_0789948E9F966221696C405170523CBD9D8FB7FE">
                                    <name>Visit(Add&amp; add)</name>
                                    <syntax>public virtual void Visit(Add&amp; add);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>add</name>
                                            <type ref="type.7396111"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B7FC29A95DB6FC426BB8F56BC1F3D0019AAD0009">
                                    <name>Visit(AddressOf&amp; addressOf)</name>
                                    <syntax>public virtual void Visit(AddressOf&amp; addressOf);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>addressOf</name>
                                            <type ref="type.7396039"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6790D02F10CB74718DCEA50BDC12AD124518A0E3">
                                    <name>Visit(Array&amp; array)</name>
                                    <syntax>public virtual void Visit(Array&amp; array);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>array</name>
                                            <type ref="type.7396288"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_41D1286C7468DD1834015190F77FD85AC277296E">
                                    <name>Visit(Arrow&amp; arrow)</name>
                                    <syntax>public virtual void Visit(Arrow&amp; arrow);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>arrow</name>
                                            <type ref="type.7396063"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A7D43685851CD2D781FBF4BFBAE233C22F62F317">
                                    <name>Visit(As&amp; as_)</name>
                                    <syntax>public virtual void Visit(As&amp; as_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>as_</name>
                                            <type ref="type.7396129"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_BB462344D9057BD5B402132DE8B40CDA457C4B0B">
                                    <name>Visit(AssertStatement&amp; assertStatement)</name>
                                    <syntax>public virtual void Visit(AssertStatement&amp; assertStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>assertStatement</name>
                                            <type ref="type.7396261"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0942547ABC6D83EC5E6E1357B2C0DEC1154E124C">
                                    <name>Visit(AssignmentStatement&amp; assignmentStatement)</name>
                                    <syntax>public virtual void Visit(AssignmentStatement&amp; assignmentStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>assignmentStatement</name>
                                            <type ref="type.7396225"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_28FD0EEDE7BEA0B60246063A5A870A61BAE9C3C1">
                                    <name>Visit(Base&amp; base_)</name>
                                    <syntax>public virtual void Visit(Base&amp; base_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>base_</name>
                                            <type ref="type.7396165"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_FF190CDC2B8BABD2EA2D03F221CA912E52221AF7">
                                    <name>Visit(BitAnd&amp; bitAnd)</name>
                                    <syntax>public virtual void Visit(BitAnd&amp; bitAnd);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>bitAnd</name>
                                            <type ref="type.7396084"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CF12672ACCBC04C669111FA2050B290BDAF6D3F5">
                                    <name>Visit(BitOr&amp; bitOr)</name>
                                    <syntax>public virtual void Visit(BitOr&amp; bitOr);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>bitOr</name>
                                            <type ref="type.7396078"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6357C2E9393348094047A2F1F1B79BD0C69E2EA9">
                                    <name>Visit(BitXor&amp; bitXor)</name>
                                    <syntax>public virtual void Visit(BitXor&amp; bitXor);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>bitXor</name>
                                            <type ref="type.7396081"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7B9481A99AF6A82796DAE60FA810FBBBFCD78D15">
                                    <name>Visit(BoolType&amp; boolType)</name>
                                    <syntax>public virtual void Visit(BoolType&amp; boolType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>boolType</name>
                                            <type ref="type.7395972"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_340CF7CF2AD5F18E8A21ED63D47D2699A0CC867A">
                                    <name>Visit(BreakStatement&amp; breakStatement)</name>
                                    <syntax>public virtual void Visit(BreakStatement&amp; breakStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>breakStatement</name>
                                            <type ref="type.7396207"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CEB478500603DD8B7BA7555807104710BCB1FAB5">
                                    <name>Visit(ByteType&amp; byteType)</name>
                                    <syntax>public virtual void Visit(ByteType&amp; byteType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>byteType</name>
                                            <type ref="type.7395987"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_DA46B59F81DC227014BE970630F322653229F511">
                                    <name>Visit(CaseStatement&amp; caseStatement)</name>
                                    <syntax>public virtual void Visit(CaseStatement&amp; caseStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>caseStatement</name>
                                            <type ref="type.7396237"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7B00DB5C66D1D6768BC33EEA51D05E71D6E4821C">
                                    <name>Visit(Cast&amp; cast_)</name>
                                    <syntax>public virtual void Visit(Cast&amp; cast_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>cast_</name>
                                            <type ref="type.7396153"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B16EFB072A13B89C76B9C2295F1F3F0D865105BE">
                                    <name>Visit(Catch&amp; catch_)</name>
                                    <syntax>public virtual void Visit(Catch&amp; catch_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>catch_</name>
                                            <type ref="type.7396255"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_68142FC5BE67DDC4F9E18C83D07B419B4A525769">
                                    <name>Visit(CharType&amp; charType)</name>
                                    <syntax>public virtual void Visit(CharType&amp; charType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>charType</name>
                                            <type ref="type.7395975"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A64912B10DAD6052727DBD1734646CA5C10EB926">
                                    <name>Visit(Complement&amp; complement)</name>
                                    <syntax>public virtual void Visit(Complement&amp; complement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>complement</name>
                                            <type ref="type.7396054"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CD32C031A3BFE406065C0EB275CFE1297952E7EC">
                                    <name>Visit(CompoundStatement&amp; compoundStatement)</name>
                                    <syntax>public virtual void Visit(CompoundStatement&amp; compoundStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>compoundStatement</name>
                                            <type ref="type.7396189"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B41616607C59BC152935C07B7940B0F9810D3E66">
                                    <name>Visit(Conjunction&amp; conjunction)</name>
                                    <syntax>public virtual void Visit(Conjunction&amp; conjunction);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>conjunction</name>
                                            <type ref="type.7396075"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_2607F2E2D5292BB10ECBD838EC7281E921B39E4F">
                                    <name>Visit(Const&amp; const_)</name>
                                    <syntax>public virtual void Visit(Const&amp; const_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>const_</name>
                                            <type ref="type.7396264"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_50FED16EC5D9D1A2096DE87C271380BAADBD5D08">
                                    <name>Visit(Construct&amp; construct_)</name>
                                    <syntax>public virtual void Visit(Construct&amp; construct_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>construct_</name>
                                            <type ref="type.7396156"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_88B39263F414C14FE79B8B038B258905DCE4F5E0">
                                    <name>Visit(ConstructionStatement&amp; constructionStatement)</name>
                                    <syntax>public virtual void Visit(ConstructionStatement&amp; constructionStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>constructionStatement</name>
                                            <type ref="type.7396216"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0BB172B597CB17C3BF8C85431A247B95B81241B6">
                                    <name>Visit(ContinueStatement&amp; continueStatement)</name>
                                    <syntax>public virtual void Visit(ContinueStatement&amp; continueStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>continueStatement</name>
                                            <type ref="type.7396210"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_03A4710A1C39ED239A767F3AA291FB000CD680D6">
                                    <name>Visit(DefaultStatement&amp; defaultStatement)</name>
                                    <syntax>public virtual void Visit(DefaultStatement&amp; defaultStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>defaultStatement</name>
                                            <type ref="type.7396240"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_D37042BF2C3DD0756855A3B557B3058902D983EC">
                                    <name>Visit(DeleteStatement&amp; deleteStatement)</name>
                                    <syntax>public virtual void Visit(DeleteStatement&amp; deleteStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>deleteStatement</name>
                                            <type ref="type.7396219"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_280382812463BCAE665FEA8AB2E11C7661B82202">
                                    <name>Visit(Deref&amp; deref)</name>
                                    <syntax>public virtual void Visit(Deref&amp; deref);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>deref</name>
                                            <type ref="type.7396036"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CAB491A63162CBFC893C3DC7A71A90A20F3D6126">
                                    <name>Visit(DestroyStatement&amp; destroyStatement)</name>
                                    <syntax>public virtual void Visit(DestroyStatement&amp; destroyStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>destroyStatement</name>
                                            <type ref="type.7396222"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_D241765948E494F31661F9D086C8484B37093056">
                                    <name>Visit(Disjunction&amp; disjunction)</name>
                                    <syntax>public virtual void Visit(Disjunction&amp; disjunction);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>disjunction</name>
                                            <type ref="type.7396072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_219C0CA351D8AB2210A0775409DBC05DB244635E">
                                    <name>Visit(Div&amp; div)</name>
                                    <syntax>public virtual void Visit(Div&amp; div);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>div</name>
                                            <type ref="type.7396120"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_DE75BE2E5DCA79E57D3A95C0D9CD5024C3744FA8">
                                    <name>Visit(DoStatement&amp; doStatement)</name>
                                    <syntax>public virtual void Visit(DoStatement&amp; doStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>doStatement</name>
                                            <type ref="type.7396201"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_91ED66CADEF340BBCD3088D943821A79698EF509">
                                    <name>Visit(Dot&amp; dot)</name>
                                    <syntax>public virtual void Visit(Dot&amp; dot);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>dot</name>
                                            <type ref="type.7396057"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_1DC966AA1A2C3ABD5E1BF1CA8B0C886981B6BD8B">
                                    <name>Visit(DoubleType&amp; doubleType)</name>
                                    <syntax>public virtual void Visit(DoubleType&amp; doubleType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>doubleType</name>
                                            <type ref="type.7396011"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8FD55B7DC51BB803C49A652985306788516ED133">
                                    <name>Visit(EmptyStatement&amp; emptyStatement)</name>
                                    <syntax>public virtual void Visit(EmptyStatement&amp; emptyStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>emptyStatement</name>
                                            <type ref="type.7396231"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E8002EA1632204B8ABBB920FD571F561B04A1FB2">
                                    <name>Visit(Equal&amp; equal)</name>
                                    <syntax>public virtual void Visit(Equal&amp; equal);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>equal</name>
                                            <type ref="type.7396087"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8D7E58DA70FAC989C8A1EF654B03BA5FD0879588">
                                    <name>Visit(ExpressionStatement&amp; expressionStatement)</name>
                                    <syntax>public virtual void Visit(ExpressionStatement&amp; expressionStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>expressionStatement</name>
                                            <type ref="type.7396228"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B21129F5AFD85D32927D89AFC8148C2AC1073CF1">
                                    <name>Visit(FloatType&amp; floatType)</name>
                                    <syntax>public virtual void Visit(FloatType&amp; floatType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>floatType</name>
                                            <type ref="type.7396008"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6CBC3B42FA2FE2CE6F52933429CB696240B71015">
                                    <name>Visit(ForStatement&amp; forStatement)</name>
                                    <syntax>public virtual void Visit(ForStatement&amp; forStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>forStatement</name>
                                            <type ref="type.7396204"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_97D12C3A68DF35D6D2F0B8601334A3BB67D44F7F">
                                    <name>Visit(GotoCaseStatement&amp; gotoCaseStatement)</name>
                                    <syntax>public virtual void Visit(GotoCaseStatement&amp; gotoCaseStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>gotoCaseStatement</name>
                                            <type ref="type.7396246"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B5EF70FF27DE9081BA03A98701E9EFF6FC89C2F1">
                                    <name>Visit(GotoDefaultStatement&amp; gotoDefaultStatement)</name>
                                    <syntax>public virtual void Visit(GotoDefaultStatement&amp; gotoDefaultStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>gotoDefaultStatement</name>
                                            <type ref="type.7396249"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0701E2DC68AFFA096276B3B8836FB4C40FD84D60">
                                    <name>Visit(GotoStatement&amp; gotoStatement)</name>
                                    <syntax>public virtual void Visit(GotoStatement&amp; gotoStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>gotoStatement</name>
                                            <type ref="type.7396213"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_BDCB831141529F121755E5E8400EB43264D368B6">
                                    <name>Visit(Greater&amp; greater)</name>
                                    <syntax>public virtual void Visit(Greater&amp; greater);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>greater</name>
                                            <type ref="type.7396096"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_48EB4C9C696CA0D9239EFCB0654A0CA0A99C1705">
                                    <name>Visit(GreaterOrEqual&amp; greaterOrEqual)</name>
                                    <syntax>public virtual void Visit(GreaterOrEqual&amp; greaterOrEqual);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>greaterOrEqual</name>
                                            <type ref="type.7396102"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E0769B3932F3EB98F43008BAAE46F34297C364D8">
                                    <name>Visit(Identifier&amp; identifier)</name>
                                    <syntax>public virtual void Visit(Identifier&amp; identifier);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>identifier</name>
                                            <type ref="type.7396168"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7D88F1D45BD30EF66543B910BA537741C5A19012">
                                    <name>Visit(IfStatement&amp; ifStatement)</name>
                                    <syntax>public virtual void Visit(IfStatement&amp; ifStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ifStatement</name>
                                            <type ref="type.7396195"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_5CB8643757D700752CD9D5EB41CEDF0A2D11D8C6">
                                    <name>Visit(Indexing&amp; indexing)</name>
                                    <syntax>public virtual void Visit(Indexing&amp; indexing);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>indexing</name>
                                            <type ref="type.7396132"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A2C783612A56E83BC0FE75009029220D1B6F0B97">
                                    <name>Visit(IntType&amp; intType)</name>
                                    <syntax>public virtual void Visit(IntType&amp; intType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>intType</name>
                                            <type ref="type.7395996"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_967D0A92822BEDDB877FB771FB4B930354CC4851">
                                    <name>Visit(Invoke&amp; invoke)</name>
                                    <syntax>public virtual void Visit(Invoke&amp; invoke);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>invoke</name>
                                            <type ref="type.7396135"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CF54F1ABDFD1D883A5EB26F11992FA6EDE3F5769">
                                    <name>Visit(Is&amp; is_)</name>
                                    <syntax>public virtual void Visit(Is&amp; is_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>is_</name>
                                            <type ref="type.7396126"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_BCBDF8A932AC3ACAC8B2F13D4249690C7EDADE9B">
                                    <name>Visit(Less&amp; less)</name>
                                    <syntax>public virtual void Visit(Less&amp; less);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>less</name>
                                            <type ref="type.7396093"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_AFDF0C6CD98664ADE9EC7B2A47D8DDEF4C73149C">
                                    <name>Visit(LessOrEqual&amp; lessOrEqual)</name>
                                    <syntax>public virtual void Visit(LessOrEqual&amp; lessOrEqual);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>lessOrEqual</name>
                                            <type ref="type.7396099"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CE16541429EE3ADA4F6F7CB29B42807BF3C7900A">
                                    <name>Visit(Literal&amp; literal)</name>
                                    <syntax>public virtual void Visit(Literal&amp; literal);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>literal</name>
                                            <type ref="type.7396180"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_24E049654FA4850CC5920E9D919C9165C6C2C334">
                                    <name>Visit(LongType&amp; longType)</name>
                                    <syntax>public virtual void Visit(LongType&amp; longType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>longType</name>
                                            <type ref="type.7396002"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8D7DC3C0459344F0B1C69B655D48B70061B0E37B">
                                    <name>Visit(LvalueRef&amp; lvalueRef)</name>
                                    <syntax>public virtual void Visit(LvalueRef&amp; lvalueRef);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>lvalueRef</name>
                                            <type ref="type.7396270"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_3A90620F108D9068E9F8EC4DE928F62004CE074F">
                                    <name>Visit(Mul&amp; mul)</name>
                                    <syntax>public virtual void Visit(Mul&amp; mul);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>mul</name>
                                            <type ref="type.7396117"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_319541A4B279C09FF0A083970339A6C516B007F2">
                                    <name>Visit(New&amp; new_)</name>
                                    <syntax>public virtual void Visit(New&amp; new_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>new_</name>
                                            <type ref="type.7396159"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_F8BD2118606D1E6BE7F5BC4E0CBD6D475519BA04">
                                    <name>Visit(Not&amp; not_)</name>
                                    <syntax>public virtual void Visit(Not&amp; not_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>not_</name>
                                            <type ref="type.7396033"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C1BF57DDE1351085C0208B72ED3A45B18382AF49">
                                    <name>Visit(NotEqual&amp; notEqual)</name>
                                    <syntax>public virtual void Visit(NotEqual&amp; notEqual);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>notEqual</name>
                                            <type ref="type.7396090"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CC914D02BF74C000FAB3E92007E660C3C34350C2">
                                    <name>Visit(Pointer&amp; pointer)</name>
                                    <syntax>public virtual void Visit(Pointer&amp; pointer);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pointer</name>
                                            <type ref="type.7396282"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CA9CC61841F4D3070F4044760118D8AC9D10D468">
                                    <name>Visit(PostfixDecrement&amp; postfixDecrement)</name>
                                    <syntax>public virtual void Visit(PostfixDecrement&amp; postfixDecrement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>postfixDecrement</name>
                                            <type ref="type.7396144"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E5DC808B60F46AAD97FF40F07EC3315FA1EC95E2">
                                    <name>Visit(PostfixIncrement&amp; postfixIncrement)</name>
                                    <syntax>public virtual void Visit(PostfixIncrement&amp; postfixIncrement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>postfixIncrement</name>
                                            <type ref="type.7396141"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E356A607D1E00821F4C223AB6AEDB8F3AE34D24D">
                                    <name>Visit(PrefixDecrement&amp; prefixDecrement)</name>
                                    <syntax>public virtual void Visit(PrefixDecrement&amp; prefixDecrement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>prefixDecrement</name>
                                            <type ref="type.7396045"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7BF2D82E33C18E26BB92077FFE1DC12000C2B616">
                                    <name>Visit(PrefixIncrement&amp; prefixIncrement)</name>
                                    <syntax>public virtual void Visit(PrefixIncrement&amp; prefixIncrement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>prefixIncrement</name>
                                            <type ref="type.7396042"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_9AA520081FF6F746884A3FA221A1AA6515048CEF">
                                    <name>Visit(RangeForStatement&amp; rangeForStatement)</name>
                                    <syntax>public virtual void Visit(RangeForStatement&amp; rangeForStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rangeForStatement</name>
                                            <type ref="type.7396234"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_EED4C734205C9BA3DE800A56D6CABFA6F704A9DA">
                                    <name>Visit(Rem&amp; rem)</name>
                                    <syntax>public virtual void Visit(Rem&amp; rem);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rem</name>
                                            <type ref="type.7396123"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A55020B5383EA9D46EA1D284637498256019BBB1">
                                    <name>Visit(ReturnStatement&amp; returnStatement)</name>
                                    <syntax>public virtual void Visit(ReturnStatement&amp; returnStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>returnStatement</name>
                                            <type ref="type.7396192"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_19CD26E83F19DF1389FDFF4B063CA82EAC7B34D9">
                                    <name>Visit(RvalueRef&amp; rvalueRef)</name>
                                    <syntax>public virtual void Visit(RvalueRef&amp; rvalueRef);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rvalueRef</name>
                                            <type ref="type.7396276"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_3B8937371654B5334421B5811EE92AAB09C12F35">
                                    <name>Visit(SByteType&amp; sbyteType)</name>
                                    <syntax>public virtual void Visit(SByteType&amp; sbyteType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>sbyteType</name>
                                            <type ref="type.7395984"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_ECB50C7731E255C02E6A983C68A2F2C772F76D29">
                                    <name>Visit(ShiftLeft&amp; shiftLeft)</name>
                                    <syntax>public virtual void Visit(ShiftLeft&amp; shiftLeft);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>shiftLeft</name>
                                            <type ref="type.7396105"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_AC20D5262DBCB8A077E9DC7BFF22F5E5DCB496E8">
                                    <name>Visit(ShiftRight&amp; shiftRight)</name>
                                    <syntax>public virtual void Visit(ShiftRight&amp; shiftRight);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>shiftRight</name>
                                            <type ref="type.7396108"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_9C1B883CE273D6A8287E5A1DD0320B851B803796">
                                    <name>Visit(ShortType&amp; shortType)</name>
                                    <syntax>public virtual void Visit(ShortType&amp; shortType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>shortType</name>
                                            <type ref="type.7395990"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_1D11CD37D9E3C054585364E3F146C70A8A2CFD53">
                                    <name>Visit(SizeOf&amp; sizeOf)</name>
                                    <syntax>public virtual void Visit(SizeOf&amp; sizeOf);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>sizeOf</name>
                                            <type ref="type.7396147"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_075400A45DC5C1534DCBCF2382E11ADA1D15AA6E">
                                    <name>Visit(Sub&amp; sub)</name>
                                    <syntax>public virtual void Visit(Sub&amp; sub);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>sub</name>
                                            <type ref="type.7396114"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C35482BE7A44D7BC07AD6314B5DBA83C79E98E75">
                                    <name>Visit(SwitchStatement&amp; switchStatement)</name>
                                    <syntax>public virtual void Visit(SwitchStatement&amp; switchStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>switchStatement</name>
                                            <type ref="type.7396243"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CE6AEA08FEDB45DBDC2EBBC60F33EBC0086E18A7">
                                    <name>Visit(TemplateId&amp; templateId)</name>
                                    <syntax>public virtual void Visit(TemplateId&amp; templateId);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>templateId</name>
                                            <type ref="type.7396174"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B22620481E19E5DF0AC49B9DA76C8098A8642C19">
                                    <name>Visit(This&amp; this_)</name>
                                    <syntax>public virtual void Visit(This&amp; this_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>this_</name>
                                            <type ref="type.7396162"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E47BC201FE16901F71609542EE03226428CFCF00">
                                    <name>Visit(ThrowStatement&amp; throwStatement)</name>
                                    <syntax>public virtual void Visit(ThrowStatement&amp; throwStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>throwStatement</name>
                                            <type ref="type.7396252"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_1951CFAEB61C83AF7A78ABA6468CF8B13B37C438">
                                    <name>Visit(TryStatement&amp; tryStatement)</name>
                                    <syntax>public virtual void Visit(TryStatement&amp; tryStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>tryStatement</name>
                                            <type ref="type.7396258"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E4762E1F0B8D6BC1B131E3247AA55873AAFA1B01">
                                    <name>Visit(TypeName&amp; typeName)</name>
                                    <syntax>public virtual void Visit(TypeName&amp; typeName);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>typeName</name>
                                            <type ref="type.7396150"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_18D081EB3D72FB1E970F1FB84537C1988DB70E4E">
                                    <name>Visit(UCharType&amp; ucharType)</name>
                                    <syntax>public virtual void Visit(UCharType&amp; ucharType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ucharType</name>
                                            <type ref="type.7395981"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C51190D1D5AB7CF8250E4867961649FEC0A2CB57">
                                    <name>Visit(UIntType&amp; uintType)</name>
                                    <syntax>public virtual void Visit(UIntType&amp; uintType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>uintType</name>
                                            <type ref="type.7395999"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_FBF14EB9917578F9705C98DF7563B78F1816E5A5">
                                    <name>Visit(ULongType&amp; ulongType)</name>
                                    <syntax>public virtual void Visit(ULongType&amp; ulongType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ulongType</name>
                                            <type ref="type.7396005"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_1DFED039450AED76833BB98F61404A434CF55B50">
                                    <name>Visit(UShortType&amp; ushortType)</name>
                                    <syntax>public virtual void Visit(UShortType&amp; ushortType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ushortType</name>
                                            <type ref="type.7395993"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_469A13B8811792D7388816F01766EA0C559BE941">
                                    <name>Visit(UnaryMinus&amp; unaryMinus)</name>
                                    <syntax>public virtual void Visit(UnaryMinus&amp; unaryMinus);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>unaryMinus</name>
                                            <type ref="type.7396051"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8AC89CD7B8B94961FC77DA51C152384BA205F1D6">
                                    <name>Visit(UnaryPlus&amp; unaryPlus)</name>
                                    <syntax>public virtual void Visit(UnaryPlus&amp; unaryPlus);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>unaryPlus</name>
                                            <type ref="type.7396048"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C2A9BEC66BA42E6CE859781327EFA651C556105C">
                                    <name>Visit(VoidType&amp; voidType)</name>
                                    <syntax>public virtual void Visit(VoidType&amp; voidType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>voidType</name>
                                            <type ref="type.7396014"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B75FAB11477E12DD5D6F09B5C0C7D1FA5D38FC0C">
                                    <name>Visit(WCharType&amp; wcharType)</name>
                                    <syntax>public virtual void Visit(WCharType&amp; wcharType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>wcharType</name>
                                            <type ref="type.7395978"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_32F344C982BD5DB73A8E9DEA06A52C52016D2866">
                                    <name>Visit(WhileStatement&amp; whileStatement)</name>
                                    <syntax>public virtual void Visit(WhileStatement&amp; whileStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>whileStatement</name>
                                            <type ref="type.7396198"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_VoidType_F2D7E59A076EE94BAEF44C2456DB40E6BFD77B0F">
                    <name>VoidType</name>
                    <groupName>VoidType</groupName>
                    <syntax> public class VoidType;</syntax>
                    <baseClass ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                    <constructors>
                        <constructor id="default_constructor_VoidType_C39A19C686824E5CFA431F1CD2606B709CB0B187">
                            <name>VoidType()</name>
                            <syntax>public nothrow VoidType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_VoidType_6075A55A783CD2850F7E92E14CCA3BC8DEB4BB76">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_WCharType_37CA4173121AAEC55D38A900C4F4DD90FFB9655E">
                    <name>WCharType</name>
                    <groupName>WCharType</groupName>
                    <syntax> public class WCharType;</syntax>
                    <baseClass ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                    <constructors>
                        <constructor id="default_constructor_WCharType_566EC0706401885DADD0AFFAB38275BEF7A6440A">
                            <name>WCharType()</name>
                            <syntax>public nothrow WCharType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_WCharType_4FFA2F9556CE4E37E83680CEBDBBBD1838B4AE30">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_WhileStatement_73BA811E542035F6EB0CDBB6874FA3BEF573C0F3">
                    <name>WhileStatement</name>
                    <groupName>WhileStatement</groupName>
                    <syntax> public class WhileStatement;</syntax>
                    <baseClass ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                    <constructors>
                        <constructor id="constructor_WhileStatement_E0EAB2EED2F6A4A12324621B9BAEADC3B92829A7">
                            <name>WhileStatement(DomObject* condition_, Statement* statement_)</name>
                            <syntax>public WhileStatement(DomObject* condition_, Statement* statement_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>condition_</name>
                                    <type ref="type.7396016"/>
                                </parameter>
                                <parameter>
                                    <name>statement_</name>
                                    <type ref="type.7396182"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_WhileStatement_5B9D2F6C9907076FAA595EE6CA228E7181CF1D0F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7396294"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_WhileStatement_B54C9BDD7F57D7367ACDB8B677F47423254BFD71">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.7389243"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_GetBinOpRank_1C24D42F4A9DC2C2883C43076F0E2683AC00C593">
                    <name>GetBinOpRank(Operator op)</name>
                    <syntax>public nothrow int GetBinOpRank(Operator op);</syntax>
                    <parameters>
                        <parameter>
                            <name>op</name>
                            <type ref="enumerated_type_Operator_4F0018C24F233767C89E790B72E5C84238A85A87"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7388900"/>
                </function>
                <function id="function_MakeBinOpName_7116D8612E30043694F7E2D7E0F09C829642681B">
                    <name>MakeBinOpName(Operator op)</name>
                    <syntax>public nothrow String&lt;char> MakeBinOpName(Operator op);</syntax>
                    <parameters>
                        <parameter>
                            <name>op</name>
                            <type ref="enumerated_type_Operator_4F0018C24F233767C89E790B72E5C84238A85A87"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7390036"/>
                </function>
                <function id="function_MakePostfixOpName_C35EAB3DFB07FEA5D4A0FBF1924F51852EE04E25">
                    <name>MakePostfixOpName(Operator op)</name>
                    <syntax>public nothrow String&lt;char> MakePostfixOpName(Operator op);</syntax>
                    <parameters>
                        <parameter>
                            <name>op</name>
                            <type ref="enumerated_type_Operator_4F0018C24F233767C89E790B72E5C84238A85A87"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7390036"/>
                </function>
                <function id="function_MakePrefixOpName_9C5BA91466A36EBDE9324B32691A9107D010E2BA">
                    <name>MakePrefixOpName(Operator op)</name>
                    <syntax>public nothrow String&lt;char> MakePrefixOpName(Operator op);</syntax>
                    <parameters>
                        <parameter>
                            <name>op</name>
                            <type ref="enumerated_type_Operator_4F0018C24F233767C89E790B72E5C84238A85A87"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7390036"/>
                </function>
                <function id="function_op_eq_563965FE6E3299477616A93C6AA10F266ED8038F">
                    <name>operator==(Operator left, Operator right)</name>
                    <syntax>public bool operator==(Operator left, Operator right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="enumerated_type_Operator_4F0018C24F233767C89E790B72E5C84238A85A87"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="enumerated_type_Operator_4F0018C24F233767C89E790B72E5C84238A85A87"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7388895"/>
                </function>
            </functions>
            <enumerations>
                <enumeration id="enumerated_type_Operator_4F0018C24F233767C89E790B72E5C84238A85A87">
                    <name>Operator</name>
                    <syntax>public enum Operator;</syntax>
                    <underlyingType ref="type.7388900"/>
                    <enumConstant>
                        <name>disjunction</name>
                        <value>0</value>
                    </enumConstant>
                    <enumConstant>
                        <name>conjunction</name>
                        <value>1</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bitOr</name>
                        <value>2</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bitXor</name>
                        <value>3</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bitAnd</name>
                        <value>4</value>
                    </enumConstant>
                    <enumConstant>
                        <name>equal</name>
                        <value>5</value>
                    </enumConstant>
                    <enumConstant>
                        <name>notEqual</name>
                        <value>6</value>
                    </enumConstant>
                    <enumConstant>
                        <name>less</name>
                        <value>7</value>
                    </enumConstant>
                    <enumConstant>
                        <name>greater</name>
                        <value>8</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lessOrEqual</name>
                        <value>9</value>
                    </enumConstant>
                    <enumConstant>
                        <name>greaterOrEqual</name>
                        <value>10</value>
                    </enumConstant>
                    <enumConstant>
                        <name>shiftLeft</name>
                        <value>11</value>
                    </enumConstant>
                    <enumConstant>
                        <name>shiftRight</name>
                        <value>12</value>
                    </enumConstant>
                    <enumConstant>
                        <name>add</name>
                        <value>13</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sub</name>
                        <value>14</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mul</name>
                        <value>15</value>
                    </enumConstant>
                    <enumConstant>
                        <name>div</name>
                        <value>16</value>
                    </enumConstant>
                    <enumConstant>
                        <name>rem</name>
                        <value>17</value>
                    </enumConstant>
                    <enumConstant>
                        <name>not_</name>
                        <value>18</value>
                    </enumConstant>
                    <enumConstant>
                        <name>deref</name>
                        <value>19</value>
                    </enumConstant>
                    <enumConstant>
                        <name>addressOf</name>
                        <value>20</value>
                    </enumConstant>
                    <enumConstant>
                        <name>increment</name>
                        <value>21</value>
                    </enumConstant>
                    <enumConstant>
                        <name>decrement</name>
                        <value>22</value>
                    </enumConstant>
                    <enumConstant>
                        <name>unaryPlus</name>
                        <value>23</value>
                    </enumConstant>
                    <enumConstant>
                        <name>unaryMinus</name>
                        <value>24</value>
                    </enumConstant>
                    <enumConstant>
                        <name>complement</name>
                        <value>25</value>
                    </enumConstant>
                    <enumConstant>
                        <name>is_</name>
                        <value>26</value>
                    </enumConstant>
                    <enumConstant>
                        <name>as_</name>
                        <value>27</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
    </namespaces>
    <types>
        <type id="class_Add_D8266E0EBE7DB2DA07CF9189C1A15DF16E9823E3">
            <name>Add</name>
        </type>
        <type derived="true" id="type.7396111">
            <name>Add&amp;</name>
            <content>
                <baseType ref="class_Add_D8266E0EBE7DB2DA07CF9189C1A15DF16E9823E3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396110">
            <name>Add*</name>
            <content>
                <baseType ref="class_Add_D8266E0EBE7DB2DA07CF9189C1A15DF16E9823E3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492">
            <name>AddressOf</name>
        </type>
        <type derived="true" id="type.7396039">
            <name>AddressOf&amp;</name>
            <content>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.790">
            <name>AddressOf&amp;&amp;</name>
            <content>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396038">
            <name>AddressOf*</name>
            <content>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Array_01D2071770F4541CF86429091B229EF2950656B0">
            <name>Array</name>
        </type>
        <type derived="true" id="type.7396288">
            <name>Array&amp;</name>
            <content>
                <baseType ref="class_Array_01D2071770F4541CF86429091B229EF2950656B0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396287">
            <name>Array*</name>
            <content>
                <baseType ref="class_Array_01D2071770F4541CF86429091B229EF2950656B0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Arrow_1A144572826274559F7125C012EDEF88A9F72FDB">
            <name>Arrow</name>
        </type>
        <type derived="true" id="type.7396063">
            <name>Arrow&amp;</name>
            <content>
                <baseType ref="class_Arrow_1A144572826274559F7125C012EDEF88A9F72FDB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396062">
            <name>Arrow*</name>
            <content>
                <baseType ref="class_Arrow_1A144572826274559F7125C012EDEF88A9F72FDB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_As_17FE45AC637C4950CB0B2BBFEE789A84A32233B8">
            <name>As</name>
        </type>
        <type derived="true" id="type.7396129">
            <name>As&amp;</name>
            <content>
                <baseType ref="class_As_17FE45AC637C4950CB0B2BBFEE789A84A32233B8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396128">
            <name>As*</name>
            <content>
                <baseType ref="class_As_17FE45AC637C4950CB0B2BBFEE789A84A32233B8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696">
            <name>AssertStatement</name>
        </type>
        <type derived="true" id="type.7396261">
            <name>AssertStatement&amp;</name>
            <content>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.862">
            <name>AssertStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396260">
            <name>AssertStatement*</name>
            <content>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_AssignmentStatement_CD891DADD31EA0AD502EF64C3B188877E8D8CE3D">
            <name>AssignmentStatement</name>
        </type>
        <type derived="true" id="type.7396225">
            <name>AssignmentStatement&amp;</name>
            <content>
                <baseType ref="class_AssignmentStatement_CD891DADD31EA0AD502EF64C3B188877E8D8CE3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396224">
            <name>AssignmentStatement*</name>
            <content>
                <baseType ref="class_AssignmentStatement_CD891DADD31EA0AD502EF64C3B188877E8D8CE3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Base_73ED723570AFFF8A0EA419972F0FFFB15945ABDB">
            <name>Base</name>
        </type>
        <type derived="true" id="type.7396165">
            <name>Base&amp;</name>
            <content>
                <baseType ref="class_Base_73ED723570AFFF8A0EA419972F0FFFB15945ABDB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396164">
            <name>Base*</name>
            <content>
                <baseType ref="class_Base_73ED723570AFFF8A0EA419972F0FFFB15945ABDB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C">
            <name>BinaryExpression</name>
        </type>
        <type derived="true" id="type.7396069">
            <name>BinaryExpression&amp;</name>
            <content>
                <baseType ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396068">
            <name>BinaryExpression*</name>
            <content>
                <baseType ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396895">
            <name>BinaryExpression*&amp;</name>
            <content>
                <baseType ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396894">
            <name>BinaryExpression**</name>
            <content>
                <baseType ref="class_BinaryExpression_93262124EF63CBB063122FD6670BB1C7FA5AF80C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BitAnd_C18E427EDF0266B9DE4A7AF49DF7814F4508A300">
            <name>BitAnd</name>
        </type>
        <type derived="true" id="type.7396084">
            <name>BitAnd&amp;</name>
            <content>
                <baseType ref="class_BitAnd_C18E427EDF0266B9DE4A7AF49DF7814F4508A300"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396083">
            <name>BitAnd*</name>
            <content>
                <baseType ref="class_BitAnd_C18E427EDF0266B9DE4A7AF49DF7814F4508A300"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BitOr_7AFF6998C572E610457C1E96CEA6E60FE5F10EE5">
            <name>BitOr</name>
        </type>
        <type derived="true" id="type.7396078">
            <name>BitOr&amp;</name>
            <content>
                <baseType ref="class_BitOr_7AFF6998C572E610457C1E96CEA6E60FE5F10EE5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396077">
            <name>BitOr*</name>
            <content>
                <baseType ref="class_BitOr_7AFF6998C572E610457C1E96CEA6E60FE5F10EE5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BitXor_6E4A68B918EAF05039242CA6E5A108EDE3A875CC">
            <name>BitXor</name>
        </type>
        <type derived="true" id="type.7396081">
            <name>BitXor&amp;</name>
            <content>
                <baseType ref="class_BitXor_6E4A68B918EAF05039242CA6E5A108EDE3A875CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396080">
            <name>BitXor*</name>
            <content>
                <baseType ref="class_BitXor_6E4A68B918EAF05039242CA6E5A108EDE3A875CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BoolType_CA99F7D292715338D750C5405548D95A95E200EC">
            <name>BoolType</name>
        </type>
        <type derived="true" id="type.7395972">
            <name>BoolType&amp;</name>
            <content>
                <baseType ref="class_BoolType_CA99F7D292715338D750C5405548D95A95E200EC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7395971">
            <name>BoolType*</name>
            <content>
                <baseType ref="class_BoolType_CA99F7D292715338D750C5405548D95A95E200EC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BreakStatement_4B85AA125DCD9CEF1305B090C2F86B174A514580">
            <name>BreakStatement</name>
        </type>
        <type derived="true" id="type.7396207">
            <name>BreakStatement&amp;</name>
            <content>
                <baseType ref="class_BreakStatement_4B85AA125DCD9CEF1305B090C2F86B174A514580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396206">
            <name>BreakStatement*</name>
            <content>
                <baseType ref="class_BreakStatement_4B85AA125DCD9CEF1305B090C2F86B174A514580"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390801" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.496">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7390801"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="7389532"/>
            </content>
        </type>
        <type derived="true" id="type.504">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="7389553"/>
            </content>
        </type>
        <type derived="true" id="type.517">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_ByteType_490AEA1EE94BBCC3A1DFB53231F83959E2168A77">
            <name>ByteType</name>
        </type>
        <type derived="true" id="type.7395987">
            <name>ByteType&amp;</name>
            <content>
                <baseType ref="class_ByteType_490AEA1EE94BBCC3A1DFB53231F83959E2168A77"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7395986">
            <name>ByteType*</name>
            <content>
                <baseType ref="class_ByteType_490AEA1EE94BBCC3A1DFB53231F83959E2168A77"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CaseStatement_C59D9EE2EB215BB01443FA26C029108CF42800A1">
            <name>CaseStatement</name>
        </type>
        <type derived="true" id="type.7396237">
            <name>CaseStatement&amp;</name>
            <content>
                <baseType ref="class_CaseStatement_C59D9EE2EB215BB01443FA26C029108CF42800A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396236">
            <name>CaseStatement*</name>
            <content>
                <baseType ref="class_CaseStatement_C59D9EE2EB215BB01443FA26C029108CF42800A1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396926">
            <name>CaseStatement*&amp;</name>
            <content>
                <baseType ref="class_CaseStatement_C59D9EE2EB215BB01443FA26C029108CF42800A1"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396925">
            <name>CaseStatement**</name>
            <content>
                <baseType ref="class_CaseStatement_C59D9EE2EB215BB01443FA26C029108CF42800A1"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Cast_9585B1B3446BC83A49E6CDB7486A782150BE11FC">
            <name>Cast</name>
        </type>
        <type derived="true" id="type.7396153">
            <name>Cast&amp;</name>
            <content>
                <baseType ref="class_Cast_9585B1B3446BC83A49E6CDB7486A782150BE11FC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396152">
            <name>Cast*</name>
            <content>
                <baseType ref="class_Cast_9585B1B3446BC83A49E6CDB7486A782150BE11FC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Catch_0582D6C1CDCCCB626ECB14F1DA1432D9E2111A37">
            <name>Catch</name>
        </type>
        <type derived="true" id="type.7396255">
            <name>Catch&amp;</name>
            <content>
                <baseType ref="class_Catch_0582D6C1CDCCCB626ECB14F1DA1432D9E2111A37"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396254">
            <name>Catch*</name>
            <content>
                <baseType ref="class_Catch_0582D6C1CDCCCB626ECB14F1DA1432D9E2111A37"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396940">
            <name>Catch*&amp;</name>
            <content>
                <baseType ref="class_Catch_0582D6C1CDCCCB626ECB14F1DA1432D9E2111A37"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396939">
            <name>Catch**</name>
            <content>
                <baseType ref="class_Catch_0582D6C1CDCCCB626ECB14F1DA1432D9E2111A37"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CharType_779EBB19F92F0A89BF9304EC9025AA8E9CEC1C15">
            <name>CharType</name>
        </type>
        <type derived="true" id="type.7395975">
            <name>CharType&amp;</name>
            <content>
                <baseType ref="class_CharType_779EBB19F92F0A89BF9304EC9025AA8E9CEC1C15"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7395974">
            <name>CharType*</name>
            <content>
                <baseType ref="class_CharType_779EBB19F92F0A89BF9304EC9025AA8E9CEC1C15"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7389243">
            <name>CodeFormatter&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.768">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5">
            <name>Complement</name>
        </type>
        <type derived="true" id="type.7396054">
            <name>Complement&amp;</name>
            <content>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.805">
            <name>Complement&amp;&amp;</name>
            <content>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396053">
            <name>Complement*</name>
            <content>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9">
            <name>CompoundStatement</name>
        </type>
        <type derived="true" id="type.405">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396189">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396188">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.404">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396188">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396934">
            <name>CompoundStatement*&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396933">
            <name>CompoundStatement**</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Conjunction_0132C4E38ACB57C960C99B8800089A5ED52CB3AD">
            <name>Conjunction</name>
        </type>
        <type derived="true" id="type.7396075">
            <name>Conjunction&amp;</name>
            <content>
                <baseType ref="class_Conjunction_0132C4E38ACB57C960C99B8800089A5ED52CB3AD"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396074">
            <name>Conjunction*</name>
            <content>
                <baseType ref="class_Conjunction_0132C4E38ACB57C960C99B8800089A5ED52CB3AD"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A">
            <name>Const</name>
        </type>
        <type derived="true" id="type.7396264">
            <name>Const&amp;</name>
            <content>
                <baseType ref="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.863">
            <name>Const&amp;&amp;</name>
            <content>
                <baseType ref="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396263">
            <name>Const*</name>
            <content>
                <baseType ref="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8">
            <name>Construct</name>
        </type>
        <type derived="true" id="type.7396156">
            <name>Construct&amp;</name>
            <content>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.823">
            <name>Construct&amp;&amp;</name>
            <content>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396155">
            <name>Construct*</name>
            <content>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ConstructionStatement_0E8F6D33B33CABF85AEE993CBB0F609D7E941AEA">
            <name>ConstructionStatement</name>
        </type>
        <type derived="true" id="type.7396216">
            <name>ConstructionStatement&amp;</name>
            <content>
                <baseType ref="class_ConstructionStatement_0E8F6D33B33CABF85AEE993CBB0F609D7E941AEA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396215">
            <name>ConstructionStatement*</name>
            <content>
                <baseType ref="class_ConstructionStatement_0E8F6D33B33CABF85AEE993CBB0F609D7E941AEA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ContinueStatement_42B62A34F11C57D46CBD9B9E4C6DC070CA7E1CFC">
            <name>ContinueStatement</name>
        </type>
        <type derived="true" id="type.7396210">
            <name>ContinueStatement&amp;</name>
            <content>
                <baseType ref="class_ContinueStatement_42B62A34F11C57D46CBD9B9E4C6DC070CA7E1CFC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396209">
            <name>ContinueStatement*</name>
            <content>
                <baseType ref="class_ContinueStatement_42B62A34F11C57D46CBD9B9E4C6DC070CA7E1CFC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390010" specialization="true">
            <name>Counter&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type id="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30" specialization="true">
            <name>Counter&lt;T></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="7389694"/>
            </content>
        </type>
        <type derived="true" id="type.623">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.630">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.589">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.592">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.601">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.608">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A" specialization="true">
            <name>Counter&lt;U></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="7389683"/>
            </content>
        </type>
        <type id="class_DefaultStatement_431BBB02B62D93DF15B8BA112275D930065BD749">
            <name>DefaultStatement</name>
        </type>
        <type derived="true" id="type.7396240">
            <name>DefaultStatement&amp;</name>
            <content>
                <baseType ref="class_DefaultStatement_431BBB02B62D93DF15B8BA112275D930065BD749"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396239">
            <name>DefaultStatement*</name>
            <content>
                <baseType ref="class_DefaultStatement_431BBB02B62D93DF15B8BA112275D930065BD749"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396923">
            <name>DefaultStatement*&amp;</name>
            <content>
                <baseType ref="class_DefaultStatement_431BBB02B62D93DF15B8BA112275D930065BD749"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396922">
            <name>DefaultStatement**</name>
            <content>
                <baseType ref="class_DefaultStatement_431BBB02B62D93DF15B8BA112275D930065BD749"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A">
            <name>DeleteStatement</name>
        </type>
        <type derived="true" id="type.7396219">
            <name>DeleteStatement&amp;</name>
            <content>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.841">
            <name>DeleteStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396218">
            <name>DeleteStatement*</name>
            <content>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594">
            <name>Deref</name>
        </type>
        <type derived="true" id="type.7396036">
            <name>Deref&amp;</name>
            <content>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.787">
            <name>Deref&amp;&amp;</name>
            <content>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396035">
            <name>Deref*</name>
            <content>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550">
            <name>DestroyStatement</name>
        </type>
        <type derived="true" id="type.7396222">
            <name>DestroyStatement&amp;</name>
            <content>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.844">
            <name>DestroyStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396221">
            <name>DestroyStatement*</name>
            <content>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Disjunction_F31E3B03B7D35E04D91C7E729F2351D3957CC86E">
            <name>Disjunction</name>
        </type>
        <type derived="true" id="type.7396072">
            <name>Disjunction&amp;</name>
            <content>
                <baseType ref="class_Disjunction_F31E3B03B7D35E04D91C7E729F2351D3957CC86E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396071">
            <name>Disjunction*</name>
            <content>
                <baseType ref="class_Disjunction_F31E3B03B7D35E04D91C7E729F2351D3957CC86E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Div_870BC7AD6CF194517E350C8AF37CEAA3E22F8231">
            <name>Div</name>
        </type>
        <type derived="true" id="type.7396120">
            <name>Div&amp;</name>
            <content>
                <baseType ref="class_Div_870BC7AD6CF194517E350C8AF37CEAA3E22F8231"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396119">
            <name>Div*</name>
            <content>
                <baseType ref="class_Div_870BC7AD6CF194517E350C8AF37CEAA3E22F8231"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DoStatement_2DE84CAC1D895D9020F0342FAD7D807D41BC6D0E">
            <name>DoStatement</name>
        </type>
        <type derived="true" id="type.7396201">
            <name>DoStatement&amp;</name>
            <content>
                <baseType ref="class_DoStatement_2DE84CAC1D895D9020F0342FAD7D807D41BC6D0E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396200">
            <name>DoStatement*</name>
            <content>
                <baseType ref="class_DoStatement_2DE84CAC1D895D9020F0342FAD7D807D41BC6D0E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF">
            <name>DomObject</name>
        </type>
        <type derived="true" id="type.403">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396017">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.781">
            <name>DomObject&amp;&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.402">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396016">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396890">
            <name>DomObject*&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396889">
            <name>DomObject**</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Dot_3DBFB45CB93A3D81709E97835834A09CB64DBFD8">
            <name>Dot</name>
        </type>
        <type derived="true" id="type.7396057">
            <name>Dot&amp;</name>
            <content>
                <baseType ref="class_Dot_3DBFB45CB93A3D81709E97835834A09CB64DBFD8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396056">
            <name>Dot*</name>
            <content>
                <baseType ref="class_Dot_3DBFB45CB93A3D81709E97835834A09CB64DBFD8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DoubleType_2F54DB2225723BF66747F0EE8930D97AEAC3087B">
            <name>DoubleType</name>
        </type>
        <type derived="true" id="type.7396011">
            <name>DoubleType&amp;</name>
            <content>
                <baseType ref="class_DoubleType_2F54DB2225723BF66747F0EE8930D97AEAC3087B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396010">
            <name>DoubleType*</name>
            <content>
                <baseType ref="class_DoubleType_2F54DB2225723BF66747F0EE8930D97AEAC3087B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_EmptyStatement_6FB774F9105B54DBC81384D86B6519B51F8CEC1A">
            <name>EmptyStatement</name>
        </type>
        <type derived="true" id="type.7396231">
            <name>EmptyStatement&amp;</name>
            <content>
                <baseType ref="class_EmptyStatement_6FB774F9105B54DBC81384D86B6519B51F8CEC1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396230">
            <name>EmptyStatement*</name>
            <content>
                <baseType ref="class_EmptyStatement_6FB774F9105B54DBC81384D86B6519B51F8CEC1A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Equal_3EF4BE86B509FD01F694F7C4806B5C900557528A">
            <name>Equal</name>
        </type>
        <type derived="true" id="type.7396087">
            <name>Equal&amp;</name>
            <content>
                <baseType ref="class_Equal_3EF4BE86B509FD01F694F7C4806B5C900557528A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396086">
            <name>Equal*</name>
            <content>
                <baseType ref="class_Equal_3EF4BE86B509FD01F694F7C4806B5C900557528A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Expression_63F45770E98CB553F848612A60783A045B1137F7">
            <name>Expression</name>
        </type>
        <type derived="true" id="type.7396024">
            <name>Expression&amp;</name>
            <content>
                <baseType ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396023">
            <name>Expression*</name>
            <content>
                <baseType ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54">
            <name>ExpressionStatement</name>
        </type>
        <type derived="true" id="type.7396228">
            <name>ExpressionStatement&amp;</name>
            <content>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.847">
            <name>ExpressionStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396227">
            <name>ExpressionStatement*</name>
            <content>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_FloatType_F56BE7D1812AE8764A94A3C4A98DBCACB5F6BD11">
            <name>FloatType</name>
        </type>
        <type derived="true" id="type.7396008">
            <name>FloatType&amp;</name>
            <content>
                <baseType ref="class_FloatType_F56BE7D1812AE8764A94A3C4A98DBCACB5F6BD11"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396007">
            <name>FloatType*</name>
            <content>
                <baseType ref="class_FloatType_F56BE7D1812AE8764A94A3C4A98DBCACB5F6BD11"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ForStatement_2C9CB31D518BF6F5E055FFE544F154898DB891FC">
            <name>ForStatement</name>
        </type>
        <type derived="true" id="type.7396204">
            <name>ForStatement&amp;</name>
            <content>
                <baseType ref="class_ForStatement_2C9CB31D518BF6F5E055FFE544F154898DB891FC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396203">
            <name>ForStatement*</name>
            <content>
                <baseType ref="class_ForStatement_2C9CB31D518BF6F5E055FFE544F154898DB891FC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <argumentType ref="7389441"/>
            </content>
        </type>
        <type derived="true" id="type.454">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="7389434"/>
                <argumentType ref="7389435"/>
                <argumentType ref="7389436"/>
            </content>
        </type>
        <type derived="true" id="type.450">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.451">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="7389442"/>
                <argumentType ref="type.7390338"/>
                <argumentType ref="type.7390340"/>
            </content>
        </type>
        <type derived="true" id="type.453">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.456">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.458">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="7389443"/>
                <argumentType ref="type.7390355"/>
                <argumentType ref="type.7390356"/>
            </content>
        </type>
        <type derived="true" id="type.457">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.452">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.455">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D">
            <name>GotoCaseStatement</name>
        </type>
        <type derived="true" id="type.7396246">
            <name>GotoCaseStatement&amp;</name>
            <content>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.853">
            <name>GotoCaseStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396245">
            <name>GotoCaseStatement*</name>
            <content>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_GotoDefaultStatement_A0F05081B3A8A0CF31277B3E9AB698FF523E7B9F">
            <name>GotoDefaultStatement</name>
        </type>
        <type derived="true" id="type.7396249">
            <name>GotoDefaultStatement&amp;</name>
            <content>
                <baseType ref="class_GotoDefaultStatement_A0F05081B3A8A0CF31277B3E9AB698FF523E7B9F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396248">
            <name>GotoDefaultStatement*</name>
            <content>
                <baseType ref="class_GotoDefaultStatement_A0F05081B3A8A0CF31277B3E9AB698FF523E7B9F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E">
            <name>GotoStatement</name>
        </type>
        <type derived="true" id="type.7396213">
            <name>GotoStatement&amp;</name>
            <content>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.838">
            <name>GotoStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396212">
            <name>GotoStatement*</name>
            <content>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Greater_615FAE96F23C7D50557A473DB2E1090BB39F1311">
            <name>Greater</name>
        </type>
        <type derived="true" id="type.7396096">
            <name>Greater&amp;</name>
            <content>
                <baseType ref="class_Greater_615FAE96F23C7D50557A473DB2E1090BB39F1311"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396095">
            <name>Greater*</name>
            <content>
                <baseType ref="class_Greater_615FAE96F23C7D50557A473DB2E1090BB39F1311"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_GreaterOrEqual_4400FB33354DC18FE0061555E68C302AD3CE11E6">
            <name>GreaterOrEqual</name>
        </type>
        <type derived="true" id="type.7396102">
            <name>GreaterOrEqual&amp;</name>
            <content>
                <baseType ref="class_GreaterOrEqual_4400FB33354DC18FE0061555E68C302AD3CE11E6"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396101">
            <name>GreaterOrEqual*</name>
            <content>
                <baseType ref="class_GreaterOrEqual_4400FB33354DC18FE0061555E68C302AD3CE11E6"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="7389523"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <argumentType ref="7389525"/>
                <argumentType ref="7389526"/>
            </content>
        </type>
        <type derived="true" id="type.492">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="7389552"/>
                <argumentType ref="7389553"/>
                <argumentType ref="7389554"/>
                <argumentType ref="7389555"/>
                <argumentType ref="7389556"/>
            </content>
        </type>
        <type derived="true" id="type.512">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="7389532"/>
                <argumentType ref="7389532"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="7389533"/>
                <argumentType ref="7389534"/>
            </content>
        </type>
        <type derived="true" id="type.500">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7">
            <name>Identifier</name>
        </type>
        <type derived="true" id="type.7396168">
            <name>Identifier&amp;</name>
            <content>
                <baseType ref="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.827">
            <name>Identifier&amp;&amp;</name>
            <content>
                <baseType ref="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396167">
            <name>Identifier*</name>
            <content>
                <baseType ref="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_IfStatement_C1EF6483EAB3986BA6A34F9E4C9ED4C0F2F824DE">
            <name>IfStatement</name>
        </type>
        <type derived="true" id="type.7396195">
            <name>IfStatement&amp;</name>
            <content>
                <baseType ref="class_IfStatement_C1EF6483EAB3986BA6A34F9E4C9ED4C0F2F824DE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396194">
            <name>IfStatement*</name>
            <content>
                <baseType ref="class_IfStatement_C1EF6483EAB3986BA6A34F9E4C9ED4C0F2F824DE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Indexing_F06FD2A01CA08D73D3B848268E78E8185020CBA4">
            <name>Indexing</name>
        </type>
        <type derived="true" id="type.7396132">
            <name>Indexing&amp;</name>
            <content>
                <baseType ref="class_Indexing_F06FD2A01CA08D73D3B848268E78E8185020CBA4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396131">
            <name>Indexing*</name>
            <content>
                <baseType ref="class_Indexing_F06FD2A01CA08D73D3B848268E78E8185020CBA4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_IntType_40DD4EEE7B839A4874F17F4DF4577431DCA81D97">
            <name>IntType</name>
        </type>
        <type derived="true" id="type.7395996">
            <name>IntType&amp;</name>
            <content>
                <baseType ref="class_IntType_40DD4EEE7B839A4874F17F4DF4577431DCA81D97"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7395995">
            <name>IntType*</name>
            <content>
                <baseType ref="class_IntType_40DD4EEE7B839A4874F17F4DF4577431DCA81D97"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5">
            <name>Invoke</name>
        </type>
        <type derived="true" id="type.7396135">
            <name>Invoke&amp;</name>
            <content>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.808">
            <name>Invoke&amp;&amp;</name>
            <content>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396134">
            <name>Invoke*</name>
            <content>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Is_EC0C6DA58F33941C0957B3F764732D8472F6E088">
            <name>Is</name>
        </type>
        <type derived="true" id="type.7396126">
            <name>Is&amp;</name>
            <content>
                <baseType ref="class_Is_EC0C6DA58F33941C0957B3F764732D8472F6E088"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396125">
            <name>Is*</name>
            <content>
                <baseType ref="class_Is_EC0C6DA58F33941C0957B3F764732D8472F6E088"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Less_1580A37986A6536C269A3DC15DC3E14E4C0804EA">
            <name>Less</name>
        </type>
        <type derived="true" id="type.7396093">
            <name>Less&amp;</name>
            <content>
                <baseType ref="class_Less_1580A37986A6536C269A3DC15DC3E14E4C0804EA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396092">
            <name>Less*</name>
            <content>
                <baseType ref="class_Less_1580A37986A6536C269A3DC15DC3E14E4C0804EA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_LessOrEqual_9091963D31C6715767D56C999742B7722B15871F">
            <name>LessOrEqual</name>
        </type>
        <type derived="true" id="type.7396099">
            <name>LessOrEqual&amp;</name>
            <content>
                <baseType ref="class_LessOrEqual_9091963D31C6715767D56C999742B7722B15871F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396098">
            <name>LessOrEqual*</name>
            <content>
                <baseType ref="class_LessOrEqual_9091963D31C6715767D56C999742B7722B15871F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <argumentType ref="7389569"/>
            </content>
        </type>
        <type derived="true" id="type.520">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.521">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390820" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390802"/>
            </content>
        </type>
        <type derived="true" id="type.495">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390973" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390956"/>
            </content>
        </type>
        <type derived="true" id="type.503">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390973"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391158" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7391139"/>
            </content>
        </type>
        <type derived="true" id="type.516">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391158"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392525" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.648">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392525"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="7389573"/>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="7389619"/>
            </content>
        </type>
        <type derived="true" id="type.524">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.642">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.560">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396800" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7396790"/>
            </content>
        </type>
        <type derived="true" id="type.7396802">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>>&amp;</name>
            <content>
                <baseType ref="type.7396800"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396820">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396800"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396801">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>>*</name>
            <content>
                <baseType ref="type.7396800"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396860" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7396850"/>
            </content>
        </type>
        <type derived="true" id="type.7396862">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>>&amp;</name>
            <content>
                <baseType ref="type.7396860"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396880">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396860"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396861">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>>*</name>
            <content>
                <baseType ref="type.7396860"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396699" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7396665"/>
            </content>
        </type>
        <type derived="true" id="type.7396701">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp;</name>
            <content>
                <baseType ref="type.7396699"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396719">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396699"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396700">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>*</name>
            <content>
                <baseType ref="type.7396699"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396751" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7396744"/>
            </content>
        </type>
        <type derived="true" id="type.7396753">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>>&amp;</name>
            <content>
                <baseType ref="type.7396751"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396771">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396751"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396752">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>>*</name>
            <content>
                <baseType ref="type.7396751"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77">
            <name>Literal</name>
        </type>
        <type derived="true" id="type.7396180">
            <name>Literal&amp;</name>
            <content>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.831">
            <name>Literal&amp;&amp;</name>
            <content>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396179">
            <name>Literal*</name>
            <content>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1" specialization="true">
            <name>LockGuard&lt;Mtx></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="7389598"/>
            </content>
        </type>
        <type derived="true" id="type.548">
            <name>LockGuard&lt;Mtx>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394867" specialization="true">
            <name>LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.735">
            <name>LockGuard&lt;System.Threading.Mutex>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394867"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_LongType_F67B8047273646A168685FD9A0A063CEDFF5131C">
            <name>LongType</name>
        </type>
        <type derived="true" id="type.7396002">
            <name>LongType&amp;</name>
            <content>
                <baseType ref="class_LongType_F67B8047273646A168685FD9A0A063CEDFF5131C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396001">
            <name>LongType*</name>
            <content>
                <baseType ref="class_LongType_F67B8047273646A168685FD9A0A063CEDFF5131C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05">
            <name>LvalueRef</name>
        </type>
        <type derived="true" id="type.7396270">
            <name>LvalueRef&amp;</name>
            <content>
                <baseType ref="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.864">
            <name>LvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396269">
            <name>LvalueRef*</name>
            <content>
                <baseType ref="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.545">
            <name>Mtx&amp;</name>
            <content>
                <baseType ref="7389598"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="class_Mul_34532DF2D76B7BA144AA0E44CCBF15EA39D37CCF">
            <name>Mul</name>
        </type>
        <type derived="true" id="type.7396117">
            <name>Mul&amp;</name>
            <content>
                <baseType ref="class_Mul_34532DF2D76B7BA144AA0E44CCBF15EA39D37CCF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396116">
            <name>Mul*</name>
            <content>
                <baseType ref="class_Mul_34532DF2D76B7BA144AA0E44CCBF15EA39D37CCF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21">
            <name>New</name>
        </type>
        <type derived="true" id="type.7396159">
            <name>New&amp;</name>
            <content>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.826">
            <name>New&amp;&amp;</name>
            <content>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396158">
            <name>New*</name>
            <content>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187">
            <name>Not</name>
        </type>
        <type derived="true" id="type.7396033">
            <name>Not&amp;</name>
            <content>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.784">
            <name>Not&amp;&amp;</name>
            <content>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396032">
            <name>Not*</name>
            <content>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NotEqual_57BE2D644B155B649C949C1AB40D6F621FE9F457">
            <name>NotEqual</name>
        </type>
        <type derived="true" id="type.7396090">
            <name>NotEqual&amp;</name>
            <content>
                <baseType ref="class_NotEqual_57BE2D644B155B649C949C1AB40D6F621FE9F457"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396089">
            <name>NotEqual*</name>
            <content>
                <baseType ref="class_NotEqual_57BE2D644B155B649C949C1AB40D6F621FE9F457"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_Operator_4F0018C24F233767C89E790B72E5C84238A85A87">
            <name>Operator</name>
        </type>
        <type derived="true" id="type.7396663">
            <name>Operator&amp;</name>
            <content>
                <baseType ref="enumerated_type_Operator_4F0018C24F233767C89E790B72E5C84238A85A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396664">
            <name>Operator&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_Operator_4F0018C24F233767C89E790B72E5C84238A85A87"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396662">
            <name>Operator*</name>
            <content>
                <baseType ref="enumerated_type_Operator_4F0018C24F233767C89E790B72E5C84238A85A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="7389612"/>
                <argumentType ref="7389613"/>
            </content>
        </type>
        <type id="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6">
            <name>Pointer</name>
        </type>
        <type derived="true" id="type.7396282">
            <name>Pointer&amp;</name>
            <content>
                <baseType ref="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.866">
            <name>Pointer&amp;&amp;</name>
            <content>
                <baseType ref="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396281">
            <name>Pointer*</name>
            <content>
                <baseType ref="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392">
            <name>PostfixDecrement</name>
        </type>
        <type derived="true" id="type.7396144">
            <name>PostfixDecrement&amp;</name>
            <content>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.814">
            <name>PostfixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396143">
            <name>PostfixDecrement*</name>
            <content>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PostfixExpression_09A9F6851C2A6B2C5C4B926050A1F22378DE15A3">
            <name>PostfixExpression</name>
        </type>
        <type derived="true" id="type.7396138">
            <name>PostfixExpression&amp;</name>
            <content>
                <baseType ref="class_PostfixExpression_09A9F6851C2A6B2C5C4B926050A1F22378DE15A3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396137">
            <name>PostfixExpression*</name>
            <content>
                <baseType ref="class_PostfixExpression_09A9F6851C2A6B2C5C4B926050A1F22378DE15A3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396905">
            <name>PostfixExpression*&amp;</name>
            <content>
                <baseType ref="class_PostfixExpression_09A9F6851C2A6B2C5C4B926050A1F22378DE15A3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396904">
            <name>PostfixExpression**</name>
            <content>
                <baseType ref="class_PostfixExpression_09A9F6851C2A6B2C5C4B926050A1F22378DE15A3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9">
            <name>PostfixIncrement</name>
        </type>
        <type derived="true" id="type.7396141">
            <name>PostfixIncrement&amp;</name>
            <content>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.811">
            <name>PostfixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396140">
            <name>PostfixIncrement*</name>
            <content>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0">
            <name>PrefixDecrement</name>
        </type>
        <type derived="true" id="type.7396045">
            <name>PrefixDecrement&amp;</name>
            <content>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.796">
            <name>PrefixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396044">
            <name>PrefixDecrement*</name>
            <content>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PrefixExpression_54423C4D20F88D06F79420BDBE11404D5B729948">
            <name>PrefixExpression</name>
        </type>
        <type derived="true" id="type.7396030">
            <name>PrefixExpression&amp;</name>
            <content>
                <baseType ref="class_PrefixExpression_54423C4D20F88D06F79420BDBE11404D5B729948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396029">
            <name>PrefixExpression*</name>
            <content>
                <baseType ref="class_PrefixExpression_54423C4D20F88D06F79420BDBE11404D5B729948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396893">
            <name>PrefixExpression*&amp;</name>
            <content>
                <baseType ref="class_PrefixExpression_54423C4D20F88D06F79420BDBE11404D5B729948"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396892">
            <name>PrefixExpression**</name>
            <content>
                <baseType ref="class_PrefixExpression_54423C4D20F88D06F79420BDBE11404D5B729948"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D">
            <name>PrefixIncrement</name>
        </type>
        <type derived="true" id="type.7396042">
            <name>PrefixIncrement&amp;</name>
            <content>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.793">
            <name>PrefixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396041">
            <name>PrefixIncrement*</name>
            <content>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7393708" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389818"/>
                <argumentType ref="type.7393551"/>
                <argumentType ref="type.7393707"/>
            </content>
        </type>
        <type derived="true" id="type.692">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393708"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394748" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389889"/>
                <argumentType ref="type.7394591"/>
                <argumentType ref="type.7394747"/>
            </content>
        </type>
        <type derived="true" id="type.717">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394748"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394332" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389863"/>
                <argumentType ref="type.7394175"/>
                <argumentType ref="type.7394331"/>
            </content>
        </type>
        <type derived="true" id="type.707">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394332"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394540" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389876"/>
                <argumentType ref="type.7394383"/>
                <argumentType ref="type.7394539"/>
            </content>
        </type>
        <type derived="true" id="type.712">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394540"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393071" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389788"/>
                <argumentType ref="type.7392900"/>
                <argumentType ref="type.7393070"/>
            </content>
        </type>
        <type derived="true" id="type.677">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393289" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389798"/>
                <argumentType ref="type.7393132"/>
                <argumentType ref="type.7393288"/>
            </content>
        </type>
        <type derived="true" id="type.682">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393289"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390837" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390802"/>
                <argumentType ref="type.7390835"/>
                <argumentType ref="type.7390836"/>
            </content>
        </type>
        <type id="type.7390915" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390881"/>
                <argumentType ref="type.7390913"/>
                <argumentType ref="type.7390914"/>
            </content>
        </type>
        <type derived="true" id="type.499">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390915"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.494">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390837"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390828" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390802"/>
                <argumentType ref="type.7390826"/>
                <argumentType ref="type.7390827"/>
            </content>
        </type>
        <type id="type.7390906" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390881"/>
                <argumentType ref="type.7390904"/>
                <argumentType ref="type.7390905"/>
            </content>
        </type>
        <type derived="true" id="type.498">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390906"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.493">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390828"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393685" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393651"/>
                <argumentType ref="type.7393683"/>
                <argumentType ref="type.7393684"/>
            </content>
        </type>
        <type derived="true" id="type.691">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393685"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393676" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393651"/>
                <argumentType ref="type.7393674"/>
                <argumentType ref="type.7393675"/>
            </content>
        </type>
        <type derived="true" id="type.690">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393676"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394725" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394691"/>
                <argumentType ref="type.7394723"/>
                <argumentType ref="type.7394724"/>
            </content>
        </type>
        <type derived="true" id="type.716">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394725"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394716" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394691"/>
                <argumentType ref="type.7394714"/>
                <argumentType ref="type.7394715"/>
            </content>
        </type>
        <type derived="true" id="type.715">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394716"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394309" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394275"/>
                <argumentType ref="type.7394307"/>
                <argumentType ref="type.7394308"/>
            </content>
        </type>
        <type derived="true" id="type.706">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394300" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394275"/>
                <argumentType ref="type.7394298"/>
                <argumentType ref="type.7394299"/>
            </content>
        </type>
        <type derived="true" id="type.705">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394300"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394517" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394483"/>
                <argumentType ref="type.7394515"/>
                <argumentType ref="type.7394516"/>
            </content>
        </type>
        <type derived="true" id="type.711">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394517"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394508" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394483"/>
                <argumentType ref="type.7394506"/>
                <argumentType ref="type.7394507"/>
            </content>
        </type>
        <type derived="true" id="type.710">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394508"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393055" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393021"/>
                <argumentType ref="type.7393053"/>
                <argumentType ref="type.7393054"/>
            </content>
        </type>
        <type derived="true" id="type.676">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393046" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393021"/>
                <argumentType ref="type.7393044"/>
                <argumentType ref="type.7393045"/>
            </content>
        </type>
        <type derived="true" id="type.675">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393046"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393266" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393232"/>
                <argumentType ref="type.7393264"/>
                <argumentType ref="type.7393265"/>
            </content>
        </type>
        <type derived="true" id="type.681">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393266"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393257" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393232"/>
                <argumentType ref="type.7393255"/>
                <argumentType ref="type.7393256"/>
            </content>
        </type>
        <type derived="true" id="type.680">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393257"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393477" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393443"/>
                <argumentType ref="type.7393475"/>
                <argumentType ref="type.7393476"/>
            </content>
        </type>
        <type derived="true" id="type.686">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393477"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393468" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393443"/>
                <argumentType ref="type.7393466"/>
                <argumentType ref="type.7393467"/>
            </content>
        </type>
        <type derived="true" id="type.685">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393468"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394101" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394067"/>
                <argumentType ref="type.7394099"/>
                <argumentType ref="type.7394100"/>
            </content>
        </type>
        <type derived="true" id="type.701">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394101"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394092" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394067"/>
                <argumentType ref="type.7394090"/>
                <argumentType ref="type.7394091"/>
            </content>
        </type>
        <type derived="true" id="type.700">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394092"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393893" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393859"/>
                <argumentType ref="type.7393891"/>
                <argumentType ref="type.7393892"/>
            </content>
        </type>
        <type derived="true" id="type.696">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393893"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393884" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393859"/>
                <argumentType ref="type.7393882"/>
                <argumentType ref="type.7393883"/>
            </content>
        </type>
        <type derived="true" id="type.695">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393884"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393609" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393575"/>
                <argumentType ref="type.7393607"/>
                <argumentType ref="type.7393608"/>
            </content>
        </type>
        <type derived="true" id="type.689">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393609"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393600" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393575"/>
                <argumentType ref="type.7393598"/>
                <argumentType ref="type.7393599"/>
            </content>
        </type>
        <type derived="true" id="type.688">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393600"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394649" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394615"/>
                <argumentType ref="type.7394647"/>
                <argumentType ref="type.7394648"/>
            </content>
        </type>
        <type derived="true" id="type.714">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394649"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394640" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394615"/>
                <argumentType ref="type.7394638"/>
                <argumentType ref="type.7394639"/>
            </content>
        </type>
        <type derived="true" id="type.713">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394640"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394233" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394199"/>
                <argumentType ref="type.7394231"/>
                <argumentType ref="type.7394232"/>
            </content>
        </type>
        <type derived="true" id="type.704">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394233"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394224" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394199"/>
                <argumentType ref="type.7394222"/>
                <argumentType ref="type.7394223"/>
            </content>
        </type>
        <type derived="true" id="type.703">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394224"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394441" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394407"/>
                <argumentType ref="type.7394439"/>
                <argumentType ref="type.7394440"/>
            </content>
        </type>
        <type derived="true" id="type.709">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394441"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394432" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394407"/>
                <argumentType ref="type.7394430"/>
                <argumentType ref="type.7394431"/>
            </content>
        </type>
        <type derived="true" id="type.708">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394432"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392958" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7392924"/>
                <argumentType ref="type.7392956"/>
                <argumentType ref="type.7392957"/>
            </content>
        </type>
        <type derived="true" id="type.674">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392958"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392949" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7392924"/>
                <argumentType ref="type.7392947"/>
                <argumentType ref="type.7392948"/>
            </content>
        </type>
        <type derived="true" id="type.673">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392949"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393190" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393156"/>
                <argumentType ref="type.7393188"/>
                <argumentType ref="type.7393189"/>
            </content>
        </type>
        <type derived="true" id="type.679">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393190"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393181" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393156"/>
                <argumentType ref="type.7393179"/>
                <argumentType ref="type.7393180"/>
            </content>
        </type>
        <type derived="true" id="type.678">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393181"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393401" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393367"/>
                <argumentType ref="type.7393399"/>
                <argumentType ref="type.7393400"/>
            </content>
        </type>
        <type derived="true" id="type.684">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393401"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393392" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393367"/>
                <argumentType ref="type.7393390"/>
                <argumentType ref="type.7393391"/>
            </content>
        </type>
        <type derived="true" id="type.683">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394025" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393991"/>
                <argumentType ref="type.7394023"/>
                <argumentType ref="type.7394024"/>
            </content>
        </type>
        <type derived="true" id="type.699">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394025"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394016" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393991"/>
                <argumentType ref="type.7394014"/>
                <argumentType ref="type.7394015"/>
            </content>
        </type>
        <type derived="true" id="type.698">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394016"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393817" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393783"/>
                <argumentType ref="type.7393815"/>
                <argumentType ref="type.7393816"/>
            </content>
        </type>
        <type derived="true" id="type.694">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393817"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393808" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393783"/>
                <argumentType ref="type.7393806"/>
                <argumentType ref="type.7393807"/>
            </content>
        </type>
        <type derived="true" id="type.693">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393808"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391064" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391030"/>
                <argumentType ref="type.7391062"/>
                <argumentType ref="type.7391063"/>
            </content>
        </type>
        <type id="type.7390990" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390956"/>
                <argumentType ref="type.7390988"/>
                <argumentType ref="type.7390989"/>
            </content>
        </type>
        <type derived="true" id="type.506">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.502">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390981" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390956"/>
                <argumentType ref="type.7390979"/>
                <argumentType ref="type.7390980"/>
            </content>
        </type>
        <type id="type.7391055" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391030"/>
                <argumentType ref="type.7391053"/>
                <argumentType ref="type.7391054"/>
            </content>
        </type>
        <type derived="true" id="type.501">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.505">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391175" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391139"/>
                <argumentType ref="type.7391173"/>
                <argumentType ref="type.7391174"/>
            </content>
        </type>
        <type derived="true" id="type.515">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391175"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391166" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391139"/>
                <argumentType ref="type.7391164"/>
                <argumentType ref="type.7391165"/>
            </content>
        </type>
        <type derived="true" id="type.514">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391166"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389727"/>
                <argumentType ref="type.7392562"/>
                <argumentType ref="type.7392563"/>
            </content>
        </type>
        <type derived="true" id="type.644">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.650">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.654">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.666">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.658">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.662">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.670">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389726"/>
                <argumentType ref="type.7392505"/>
                <argumentType ref="type.7392506"/>
            </content>
        </type>
        <type derived="true" id="type.669">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.653">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.649">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.661">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.665">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.657">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.643">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393500" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389808"/>
                <argumentType ref="type.7393343"/>
                <argumentType ref="type.7393499"/>
            </content>
        </type>
        <type derived="true" id="type.687">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393500"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394117" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389850"/>
                <argumentType ref="type.7393967"/>
                <argumentType ref="type.7394116"/>
            </content>
        </type>
        <type derived="true" id="type.702">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394117"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393916" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389831"/>
                <argumentType ref="type.7393759"/>
                <argumentType ref="type.7393915"/>
            </content>
        </type>
        <type derived="true" id="type.697">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393916"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392632" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392595"/>
                <argumentType ref="type.7392594"/>
            </content>
        </type>
        <type id="type.7392679" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392642"/>
                <argumentType ref="type.7392641"/>
            </content>
        </type>
        <type id="type.7392773" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392739"/>
                <argumentType ref="type.7392738"/>
            </content>
        </type>
        <type id="type.7392538" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392501"/>
                <argumentType ref="type.7392500"/>
            </content>
        </type>
        <type id="type.7392585" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392548"/>
                <argumentType ref="type.7392547"/>
            </content>
        </type>
        <type id="type.7392820" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392783"/>
                <argumentType ref="type.7392782"/>
            </content>
        </type>
        <type id="type.7392538" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392501"/>
                <argumentType ref="type.7392500"/>
            </content>
        </type>
        <type id="type.7392726" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392689"/>
                <argumentType ref="type.7392688"/>
            </content>
        </type>
        <type derived="true" id="type.656">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392632"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.660">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392679"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.668">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392773"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.664">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392726"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.647">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392538"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.672">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.652">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392585"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392625" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392598"/>
                <argumentType ref="type.7392597"/>
            </content>
        </type>
        <type id="type.7392531" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392504"/>
                <argumentType ref="type.7392503"/>
            </content>
        </type>
        <type id="type.7392672" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392645"/>
                <argumentType ref="type.7392644"/>
            </content>
        </type>
        <type id="type.7392719" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392692"/>
                <argumentType ref="type.7392691"/>
            </content>
        </type>
        <type id="type.7392813" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392786"/>
                <argumentType ref="type.7392785"/>
            </content>
        </type>
        <type id="type.7392766" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392742"/>
                <argumentType ref="type.7392741"/>
            </content>
        </type>
        <type id="type.7392578" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392551"/>
                <argumentType ref="type.7392550"/>
            </content>
        </type>
        <type derived="true" id="type.651">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392578"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.663">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392719"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.667">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392766"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.659">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392672"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.655">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392625"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.646">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392531"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.671">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392813"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390071" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390036"/>
                <argumentType ref="type.7390038"/>
                <argumentType ref="type.7390037"/>
            </content>
        </type>
        <type derived="true" id="type.416">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390064" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390036"/>
                <argumentType ref="type.7390041"/>
                <argumentType ref="type.7390040"/>
            </content>
        </type>
        <type derived="true" id="type.415">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390161" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390126"/>
                <argumentType ref="type.7390125"/>
            </content>
        </type>
        <type derived="true" id="type.435">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390161"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390154" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390129"/>
                <argumentType ref="type.7390128"/>
            </content>
        </type>
        <type derived="true" id="type.434">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390154"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390116" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390079"/>
                <argumentType ref="type.7390081"/>
                <argumentType ref="type.7390080"/>
            </content>
        </type>
        <type derived="true" id="type.425">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390116"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390109" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390079"/>
                <argumentType ref="type.7390084"/>
                <argumentType ref="type.7390083"/>
            </content>
        </type>
        <type derived="true" id="type.424">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390109"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394778" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.7389902"/>
                <argumentType ref="type.7389901"/>
            </content>
        </type>
        <type derived="true" id="type.719">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394778"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394771" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.7389905"/>
                <argumentType ref="type.7389904"/>
            </content>
        </type>
        <type derived="true" id="type.718">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394771"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389639"/>
                <argumentType ref="7389640"/>
                <argumentType ref="7389641"/>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389636"/>
                <argumentType ref="7389637"/>
                <argumentType ref="7389638"/>
            </content>
        </type>
        <type derived="true" id="type.566">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.567">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.564">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.561">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.562">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.563">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.565">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389575"/>
                <argumentType ref="type.7391424"/>
                <argumentType ref="type.7391425"/>
            </content>
        </type>
        <type derived="true" id="type.527">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.641">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.529">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.559">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.523">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389574"/>
                <argumentType ref="type.7391387"/>
                <argumentType ref="type.7391388"/>
            </content>
        </type>
        <type derived="true" id="type.558">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.528">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.522">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.640">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.526">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396813" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396790"/>
                <argumentType ref="type.7396792"/>
                <argumentType ref="type.7396791"/>
            </content>
        </type>
        <type derived="true" id="type.7396815">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;</name>
            <content>
                <baseType ref="type.7396813"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396819">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396813"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396814">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>*</name>
            <content>
                <baseType ref="type.7396813"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396806" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396790"/>
                <argumentType ref="type.7396795"/>
                <argumentType ref="type.7396794"/>
            </content>
        </type>
        <type derived="true" id="type.7396808">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;</name>
            <content>
                <baseType ref="type.7396806"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.750">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396806"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396807">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>*</name>
            <content>
                <baseType ref="type.7396806"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396873" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396850"/>
                <argumentType ref="type.7396852"/>
                <argumentType ref="type.7396851"/>
            </content>
        </type>
        <type derived="true" id="type.7396875">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;</name>
            <content>
                <baseType ref="type.7396873"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396879">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396873"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396874">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>*</name>
            <content>
                <baseType ref="type.7396873"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396866" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396850"/>
                <argumentType ref="type.7396855"/>
                <argumentType ref="type.7396854"/>
            </content>
        </type>
        <type derived="true" id="type.7396868">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;</name>
            <content>
                <baseType ref="type.7396866"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.751">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396866"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396867">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>*</name>
            <content>
                <baseType ref="type.7396866"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396712" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396665"/>
                <argumentType ref="type.7396667"/>
                <argumentType ref="type.7396666"/>
            </content>
        </type>
        <type derived="true" id="type.7396714">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;</name>
            <content>
                <baseType ref="type.7396712"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396718">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396712"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396713">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>*</name>
            <content>
                <baseType ref="type.7396712"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396705" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396665"/>
                <argumentType ref="type.7396670"/>
                <argumentType ref="type.7396669"/>
            </content>
        </type>
        <type derived="true" id="type.7396707">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;</name>
            <content>
                <baseType ref="type.7396705"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.748">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396705"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396706">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>*</name>
            <content>
                <baseType ref="type.7396705"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396764" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396744"/>
                <argumentType ref="type.7396746"/>
                <argumentType ref="type.7396745"/>
            </content>
        </type>
        <type derived="true" id="type.7396766">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;</name>
            <content>
                <baseType ref="type.7396764"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396770">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396764"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396765">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>*</name>
            <content>
                <baseType ref="type.7396764"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396757" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7396744"/>
                <argumentType ref="type.7396749"/>
                <argumentType ref="type.7396748"/>
            </content>
        </type>
        <type derived="true" id="type.7396759">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;</name>
            <content>
                <baseType ref="type.7396757"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.749">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396757"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396758">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>*</name>
            <content>
                <baseType ref="type.7396757"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7394807" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394787"/>
                <argumentType ref="type.7394789"/>
                <argumentType ref="type.7394788"/>
            </content>
        </type>
        <type derived="true" id="type.721">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394807"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394800" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394787"/>
                <argumentType ref="type.7394792"/>
                <argumentType ref="type.7394791"/>
            </content>
        </type>
        <type derived="true" id="type.720">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394800"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394903" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394883"/>
                <argumentType ref="type.7394885"/>
                <argumentType ref="type.7394884"/>
            </content>
        </type>
        <type derived="true" id="type.737">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394903"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394896" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394883"/>
                <argumentType ref="type.7394888"/>
                <argumentType ref="type.7394887"/>
            </content>
        </type>
        <type derived="true" id="type.736">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394896"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394835" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394815"/>
                <argumentType ref="type.7394817"/>
                <argumentType ref="type.7394816"/>
            </content>
        </type>
        <type derived="true" id="type.723">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394835"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394828" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394815"/>
                <argumentType ref="type.7394820"/>
                <argumentType ref="type.7394819"/>
            </content>
        </type>
        <type derived="true" id="type.722">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394828"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394938" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394918"/>
                <argumentType ref="type.7394920"/>
                <argumentType ref="type.7394919"/>
            </content>
        </type>
        <type derived="true" id="type.739">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394938"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394931" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394918"/>
                <argumentType ref="type.7394923"/>
                <argumentType ref="type.7394922"/>
            </content>
        </type>
        <type derived="true" id="type.738">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394931"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.537" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7396426" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7391524" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type derived="true" id="type.7396428">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.7396426"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.539">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.537"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.544">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391524"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.746">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396426"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.543">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.537"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396427">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.7396426"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.538">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.537"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396297" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.408" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type derived="true" id="type.7396299">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.7396297"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.410">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.408"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396299">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.7396297"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.742">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396297"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.414">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.408"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396298">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.7396297"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.409">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.408"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396316" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7390140" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7396316" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.427" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type derived="true" id="type.429">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.427"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396318">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.7396316"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.433">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.427"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.436">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390140"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.744">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396316"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396317">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.7396316"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.428">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.427"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396317">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.7396316"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7394852" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7394849"/>
                <argumentType ref="type.7394850"/>
            </content>
        </type>
        <type derived="true" id="type.724">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394852"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.725" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7394859" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7396615" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type derived="true" id="type.7396617">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.7396615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.727">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.725"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.747">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396615"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.732">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394859"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.731">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.725"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396616">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.7396615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.726">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.725"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396616">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.7396615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390183" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7390180"/>
                <argumentType ref="type.7390181"/>
            </content>
        </type>
        <type derived="true" id="type.437">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390183"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390190" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7396327" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.438" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7396327" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type derived="true" id="type.440">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.438"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396329">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.7396327"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.444">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.438"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.745">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396327"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.445">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390190"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.439">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.438"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396328">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.7396327"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390095" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7396306" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.417" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type derived="true" id="type.7396308">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.7396306"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.419">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.417"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396308">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.7396306"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.423">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.417"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.426">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390095"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.743">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396306"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396307">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.7396306"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.418">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.417"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_RangeForStatement_785371970BF070388FB222CA14A1494243EB9D3E">
            <name>RangeForStatement</name>
        </type>
        <type derived="true" id="type.7396234">
            <name>RangeForStatement&amp;</name>
            <content>
                <baseType ref="class_RangeForStatement_785371970BF070388FB222CA14A1494243EB9D3E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396233">
            <name>RangeForStatement*</name>
            <content>
                <baseType ref="class_RangeForStatement_785371970BF070388FB222CA14A1494243EB9D3E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389580"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <argumentType ref="7389582"/>
            </content>
        </type>
        <type derived="true" id="type.534">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389659"/>
                <argumentType ref="7389660"/>
                <argumentType ref="7389661"/>
                <argumentType ref="7389662"/>
            </content>
        </type>
        <type derived="true" id="type.576">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389665"/>
                <argumentType ref="7389665"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="7389666"/>
            </content>
        </type>
        <type derived="true" id="type.581">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7395931">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.401">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.767">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7395930">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.400">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7395930">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7391488" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.7391449"/>
                <argumentType ref="type.7391448"/>
            </content>
        </type>
        <type derived="true" id="type.533">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391488"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391470" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.7391459"/>
                <argumentType ref="type.7391468"/>
            </content>
        </type>
        <type derived="true" id="type.532">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391470"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389655"/>
                <argumentType ref="7389656"/>
                <argumentType ref="7389657"/>
            </content>
        </type>
        <type derived="true" id="type.572">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.573">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389665"/>
                <argumentType ref="type.7391800"/>
                <argumentType ref="type.7391802"/>
            </content>
        </type>
        <type derived="true" id="type.584">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.586">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.580">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389665"/>
                <argumentType ref="type.7391777"/>
                <argumentType ref="type.7391786"/>
            </content>
        </type>
        <type derived="true" id="type.583">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.585">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.579">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389660"/>
                <argumentType ref="type.7391741"/>
                <argumentType ref="type.7391743"/>
            </content>
        </type>
        <type derived="true" id="type.575">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389660"/>
                <argumentType ref="type.7391726"/>
                <argumentType ref="type.7391727"/>
            </content>
        </type>
        <type derived="true" id="type.574">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Rem_B6CCE54FD2D032B79B8776E88368A5362BF0845F">
            <name>Rem</name>
        </type>
        <type derived="true" id="type.7396123">
            <name>Rem&amp;</name>
            <content>
                <baseType ref="class_Rem_B6CCE54FD2D032B79B8776E88368A5362BF0845F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396122">
            <name>Rem*</name>
            <content>
                <baseType ref="class_Rem_B6CCE54FD2D032B79B8776E88368A5362BF0845F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750">
            <name>ReturnStatement</name>
        </type>
        <type derived="true" id="type.7396192">
            <name>ReturnStatement&amp;</name>
            <content>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.835">
            <name>ReturnStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396191">
            <name>ReturnStatement*</name>
            <content>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229">
            <name>RvalueRef</name>
        </type>
        <type derived="true" id="type.7396276">
            <name>RvalueRef&amp;</name>
            <content>
                <baseType ref="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.865">
            <name>RvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396275">
            <name>RvalueRef*</name>
            <content>
                <baseType ref="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_SByteType_D39AD49CAA300FB82912697D32C1F0DA20E1CDE8">
            <name>SByteType</name>
        </type>
        <type derived="true" id="type.7395984">
            <name>SByteType&amp;</name>
            <content>
                <baseType ref="class_SByteType_D39AD49CAA300FB82912697D32C1F0DA20E1CDE8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7395983">
            <name>SByteType*</name>
            <content>
                <baseType ref="class_SByteType_D39AD49CAA300FB82912697D32C1F0DA20E1CDE8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076" specialization="true">
            <name>SharedCount&lt;T></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="7389698"/>
            </content>
        </type>
        <type derived="true" id="type.631">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.593">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.625">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.603">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.609">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F" specialization="true">
            <name>SharedPtr&lt;T></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="7389696"/>
            </content>
        </type>
        <type derived="true" id="type.633">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.626">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.611">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_ShiftLeft_0C58636617E67D99E2D4B947D93C487C9EC0EEAE">
            <name>ShiftLeft</name>
        </type>
        <type derived="true" id="type.7396105">
            <name>ShiftLeft&amp;</name>
            <content>
                <baseType ref="class_ShiftLeft_0C58636617E67D99E2D4B947D93C487C9EC0EEAE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396104">
            <name>ShiftLeft*</name>
            <content>
                <baseType ref="class_ShiftLeft_0C58636617E67D99E2D4B947D93C487C9EC0EEAE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ShiftRight_27E7AC65159A3C02A710CE1FA049B105D3C389B9">
            <name>ShiftRight</name>
        </type>
        <type derived="true" id="type.7396108">
            <name>ShiftRight&amp;</name>
            <content>
                <baseType ref="class_ShiftRight_27E7AC65159A3C02A710CE1FA049B105D3C389B9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396107">
            <name>ShiftRight*</name>
            <content>
                <baseType ref="class_ShiftRight_27E7AC65159A3C02A710CE1FA049B105D3C389B9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ShortType_F0B48C067139B7007831773D521E957F39E48196">
            <name>ShortType</name>
        </type>
        <type derived="true" id="type.7395990">
            <name>ShortType&amp;</name>
            <content>
                <baseType ref="class_ShortType_F0B48C067139B7007831773D521E957F39E48196"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7395989">
            <name>ShortType*</name>
            <content>
                <baseType ref="class_ShortType_F0B48C067139B7007831773D521E957F39E48196"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B">
            <name>SizeOf</name>
        </type>
        <type derived="true" id="type.7396147">
            <name>SizeOf&amp;</name>
            <content>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.817">
            <name>SizeOf&amp;&amp;</name>
            <content>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396146">
            <name>SizeOf*</name>
            <content>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0">
            <name>Statement</name>
        </type>
        <type derived="true" id="type.7396183">
            <name>Statement&amp;</name>
            <content>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.832">
            <name>Statement&amp;&amp;</name>
            <content>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396182">
            <name>Statement*</name>
            <content>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396912">
            <name>Statement*&amp;</name>
            <content>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396911">
            <name>Statement**</name>
            <content>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.754">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="7389726"/>
            </content>
        </type>
        <type derived="true" id="type.645">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390036" specialization="true">
            <name>String&lt;char></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7388906"/>
            </content>
        </type>
        <type id="type.7390124" specialization="true">
            <name>String&lt;uchar></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7388908"/>
            </content>
        </type>
        <type id="class_Sub_66511E41AA55D3A9AFDEFA0F4167C1D40E23242C">
            <name>Sub</name>
        </type>
        <type derived="true" id="type.7396114">
            <name>Sub&amp;</name>
            <content>
                <baseType ref="class_Sub_66511E41AA55D3A9AFDEFA0F4167C1D40E23242C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396113">
            <name>Sub*</name>
            <content>
                <baseType ref="class_Sub_66511E41AA55D3A9AFDEFA0F4167C1D40E23242C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E">
            <name>SwitchStatement</name>
        </type>
        <type derived="true" id="type.7396243">
            <name>SwitchStatement&amp;</name>
            <content>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.850">
            <name>SwitchStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396242">
            <name>SwitchStatement*</name>
            <content>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.497">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.509">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.511">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389543"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.519">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389560"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.571">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.449">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.447">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389432"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.569">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.639">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="7389703"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.557">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="7389619"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.525">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="7389573"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5">
            <name>TemplateId</name>
        </type>
        <type derived="true" id="type.7396174">
            <name>TemplateId&amp;</name>
            <content>
                <baseType ref="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.828">
            <name>TemplateId&amp;&amp;</name>
            <content>
                <baseType ref="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396173">
            <name>TemplateId*</name>
            <content>
                <baseType ref="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_This_BF8A82301679DE71FF71944DBBFC35FC189B2A08">
            <name>This</name>
        </type>
        <type derived="true" id="type.7396162">
            <name>This&amp;</name>
            <content>
                <baseType ref="class_This_BF8A82301679DE71FF71944DBBFC35FC189B2A08"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396161">
            <name>This*</name>
            <content>
                <baseType ref="class_This_BF8A82301679DE71FF71944DBBFC35FC189B2A08"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7">
            <name>ThrowStatement</name>
        </type>
        <type derived="true" id="type.7396252">
            <name>ThrowStatement&amp;</name>
            <content>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.856">
            <name>ThrowStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396251">
            <name>ThrowStatement*</name>
            <content>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96">
            <name>TryStatement</name>
        </type>
        <type derived="true" id="type.7396258">
            <name>TryStatement&amp;</name>
            <content>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.859">
            <name>TryStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396257">
            <name>TryStatement*</name>
            <content>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3">
            <name>Type</name>
        </type>
        <type derived="true" id="type.7395969">
            <name>Type&amp;</name>
            <content>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.780">
            <name>Type&amp;&amp;</name>
            <content>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7395968">
            <name>Type*</name>
            <content>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB">
            <name>TypeName</name>
        </type>
        <type derived="true" id="type.7396150">
            <name>TypeName&amp;</name>
            <content>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.820">
            <name>TypeName&amp;&amp;</name>
            <content>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396149">
            <name>TypeName*</name>
            <content>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_UCharType_74BA7B3E41E59E7C17C07A7B6CD92191F1E76A13">
            <name>UCharType</name>
        </type>
        <type derived="true" id="type.7395981">
            <name>UCharType&amp;</name>
            <content>
                <baseType ref="class_UCharType_74BA7B3E41E59E7C17C07A7B6CD92191F1E76A13"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7395980">
            <name>UCharType*</name>
            <content>
                <baseType ref="class_UCharType_74BA7B3E41E59E7C17C07A7B6CD92191F1E76A13"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_UIntType_DB3E1F90B7FE1BC815B68BB1953CE0A8495E3D24">
            <name>UIntType</name>
        </type>
        <type derived="true" id="type.7395999">
            <name>UIntType&amp;</name>
            <content>
                <baseType ref="class_UIntType_DB3E1F90B7FE1BC815B68BB1953CE0A8495E3D24"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7395998">
            <name>UIntType*</name>
            <content>
                <baseType ref="class_UIntType_DB3E1F90B7FE1BC815B68BB1953CE0A8495E3D24"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ULongType_5010BECDDEC8CE9D9573F3789BC52249D9F2FA7C">
            <name>ULongType</name>
        </type>
        <type derived="true" id="type.7396005">
            <name>ULongType&amp;</name>
            <content>
                <baseType ref="class_ULongType_5010BECDDEC8CE9D9573F3789BC52249D9F2FA7C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396004">
            <name>ULongType*</name>
            <content>
                <baseType ref="class_ULongType_5010BECDDEC8CE9D9573F3789BC52249D9F2FA7C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_UShortType_CD493F6AAE316F9E9C75A94CD714D34E9C1CD54F">
            <name>UShortType</name>
        </type>
        <type derived="true" id="type.7395993">
            <name>UShortType&amp;</name>
            <content>
                <baseType ref="class_UShortType_CD493F6AAE316F9E9C75A94CD714D34E9C1CD54F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7395992">
            <name>UShortType*</name>
            <content>
                <baseType ref="class_UShortType_CD493F6AAE316F9E9C75A94CD714D34E9C1CD54F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F">
            <name>UnaryMinus</name>
        </type>
        <type derived="true" id="type.7396051">
            <name>UnaryMinus&amp;</name>
            <content>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.802">
            <name>UnaryMinus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396050">
            <name>UnaryMinus*</name>
            <content>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2">
            <name>UnaryPlus</name>
        </type>
        <type derived="true" id="type.7396048">
            <name>UnaryPlus&amp;</name>
            <content>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.799">
            <name>UnaryPlus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396047">
            <name>UnaryPlus*</name>
            <content>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7391499" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.7391476"/>
            </content>
        </type>
        <type derived="true" id="type.535">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391499"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391814" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.582">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391814"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391756" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
            </content>
        </type>
        <type derived="true" id="type.578">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391756"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7395012" specialization="true">
            <name>UniquePtr&lt;System.Exception></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
            </content>
        </type>
        <type derived="true" id="type.741">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.7395012"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7396790" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_CaseStatement_C59D9EE2EB215BB01443FA26C029108CF42800A1"/>
            </content>
        </type>
        <type derived="true" id="type.7396792">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;</name>
            <content>
                <baseType ref="type.7396790"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396796">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396790"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396791">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*</name>
            <content>
                <baseType ref="type.7396790"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396920">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*&amp;</name>
            <content>
                <baseType ref="type.7396790"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396921">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7396790"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396919">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>**</name>
            <content>
                <baseType ref="type.7396790"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396850" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Catch_0582D6C1CDCCCB626ECB14F1DA1432D9E2111A37"/>
            </content>
        </type>
        <type derived="true" id="type.7396852">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;</name>
            <content>
                <baseType ref="type.7396850"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396856">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396850"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396851">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*</name>
            <content>
                <baseType ref="type.7396850"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396937">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*&amp;</name>
            <content>
                <baseType ref="type.7396850"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396938">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7396850"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396936">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>**</name>
            <content>
                <baseType ref="type.7396850"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396837" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
            </content>
        </type>
        <type derived="true" id="type.7396839">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement>&amp;</name>
            <content>
                <baseType ref="type.7396837"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396843">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396837"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396838">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement>*</name>
            <content>
                <baseType ref="type.7396837"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396821" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_DefaultStatement_431BBB02B62D93DF15B8BA112275D930065BD749"/>
            </content>
        </type>
        <type derived="true" id="type.7396823">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement>&amp;</name>
            <content>
                <baseType ref="type.7396821"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396827">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396821"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396822">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement>*</name>
            <content>
                <baseType ref="type.7396821"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396665" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
            </content>
        </type>
        <type derived="true" id="type.7396667">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;</name>
            <content>
                <baseType ref="type.7396665"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396671">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396665"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396666">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*</name>
            <content>
                <baseType ref="type.7396665"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396897">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*&amp;</name>
            <content>
                <baseType ref="type.7396665"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396898">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7396665"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396896">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>**</name>
            <content>
                <baseType ref="type.7396665"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7396744" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
            </content>
        </type>
        <type derived="true" id="type.7396746">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;</name>
            <content>
                <baseType ref="type.7396744"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396750">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;&amp;</name>
            <content>
                <baseType ref="type.7396744"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396745">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*</name>
            <content>
                <baseType ref="type.7396744"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396909">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*&amp;</name>
            <content>
                <baseType ref="type.7396744"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396910">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7396744"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396908">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>**</name>
            <content>
                <baseType ref="type.7396744"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="7389934"/>
            </content>
        </type>
        <type derived="true" id="type.740">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.536">
            <name>Value&amp;</name>
            <content>
                <baseType ref="7389581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="class_Visitor_20FFECD046DAE045FE9E47404AA9013F309AFDED">
            <name>Visitor</name>
        </type>
        <type derived="true" id="type.7396294">
            <name>Visitor&amp;</name>
            <content>
                <baseType ref="class_Visitor_20FFECD046DAE045FE9E47404AA9013F309AFDED"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396293">
            <name>Visitor*</name>
            <content>
                <baseType ref="class_Visitor_20FFECD046DAE045FE9E47404AA9013F309AFDED"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_VoidType_F2D7E59A076EE94BAEF44C2456DB40E6BFD77B0F">
            <name>VoidType</name>
        </type>
        <type derived="true" id="type.7396014">
            <name>VoidType&amp;</name>
            <content>
                <baseType ref="class_VoidType_F2D7E59A076EE94BAEF44C2456DB40E6BFD77B0F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396013">
            <name>VoidType*</name>
            <content>
                <baseType ref="class_VoidType_F2D7E59A076EE94BAEF44C2456DB40E6BFD77B0F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_WCharType_37CA4173121AAEC55D38A900C4F4DD90FFB9655E">
            <name>WCharType</name>
        </type>
        <type derived="true" id="type.7395978">
            <name>WCharType&amp;</name>
            <content>
                <baseType ref="class_WCharType_37CA4173121AAEC55D38A900C4F4DD90FFB9655E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7395977">
            <name>WCharType*</name>
            <content>
                <baseType ref="class_WCharType_37CA4173121AAEC55D38A900C4F4DD90FFB9655E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F" specialization="true">
            <name>WeakCount&lt;T></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="7389690"/>
            </content>
        </type>
        <type derived="true" id="type.624">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.594">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.632">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.610">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.602">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390026" specialization="true">
            <name>WeakPtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.407">
            <name>WeakPtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390026"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC" specialization="true">
            <name>WeakPtr&lt;T></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="7389690"/>
            </content>
        </type>
        <type derived="true" id="type.612">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.627">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.634">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.637">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.616">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.614">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.618">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021" specialization="true">
            <name>WeakPtr&lt;U></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="7389693"/>
            </content>
        </type>
        <type derived="true" id="type.620">
            <name>WeakPtr&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_WhileStatement_73BA811E542035F6EB0CDBB6874FA3BEF573C0F3">
            <name>WhileStatement</name>
        </type>
        <type derived="true" id="type.7396198">
            <name>WhileStatement&amp;</name>
            <content>
                <baseType ref="class_WhileStatement_73BA811E542035F6EB0CDBB6874FA3BEF573C0F3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396197">
            <name>WhileStatement*</name>
            <content>
                <baseType ref="class_WhileStatement_73BA811E542035F6EB0CDBB6874FA3BEF573C0F3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388895">
            <name>bool</name>
        </type>
        <type basic="true" id="type.7388897">
            <name>byte</name>
        </type>
        <type derived="true" id="type.7388918">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.7388897"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388917">
            <name>byte*</name>
            <content>
                <baseType ref="type.7388897"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388906">
            <name>char</name>
        </type>
        <type derived="true" id="type.7388945">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.7388906"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388944">
            <name>char*</name>
            <content>
                <baseType ref="type.7388906"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.788">
            <name>const AddressOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
            </content>
        </type>
        <type derived="true" id="type.789">
            <name>const AddressOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396289">
            <name>const Array</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Array_01D2071770F4541CF86429091B229EF2950656B0"/>
            </content>
        </type>
        <type derived="true" id="type.7396291">
            <name>const Array&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Array_01D2071770F4541CF86429091B229EF2950656B0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396290">
            <name>const Array*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Array_01D2071770F4541CF86429091B229EF2950656B0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396064">
            <name>const Arrow</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Arrow_1A144572826274559F7125C012EDEF88A9F72FDB"/>
            </content>
        </type>
        <type derived="true" id="type.7396066">
            <name>const Arrow&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Arrow_1A144572826274559F7125C012EDEF88A9F72FDB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396065">
            <name>const Arrow*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Arrow_1A144572826274559F7125C012EDEF88A9F72FDB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.860">
            <name>const AssertStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
            </content>
        </type>
        <type derived="true" id="type.861">
            <name>const AssertStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.755">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
            </content>
        </type>
        <type derived="true" id="type.756">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.757">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
            </content>
        </type>
        <type derived="true" id="type.758">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.759">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
            </content>
        </type>
        <type derived="true" id="type.760">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.7396798">
            <name>const CaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CaseStatement_C59D9EE2EB215BB01443FA26C029108CF42800A1"/>
            </content>
        </type>
        <type derived="true" id="type.7396799">
            <name>const CaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CaseStatement_C59D9EE2EB215BB01443FA26C029108CF42800A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396797">
            <name>const CaseStatement*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CaseStatement_C59D9EE2EB215BB01443FA26C029108CF42800A1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396858">
            <name>const Catch</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Catch_0582D6C1CDCCCB626ECB14F1DA1432D9E2111A37"/>
            </content>
        </type>
        <type derived="true" id="type.7396859">
            <name>const Catch&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Catch_0582D6C1CDCCCB626ECB14F1DA1432D9E2111A37"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396857">
            <name>const Catch*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Catch_0582D6C1CDCCCB626ECB14F1DA1432D9E2111A37"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.803">
            <name>const Complement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
            </content>
        </type>
        <type derived="true" id="type.804">
            <name>const Complement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396845">
            <name>const CompoundStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
            </content>
        </type>
        <type derived="true" id="type.7396846">
            <name>const CompoundStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396844">
            <name>const CompoundStatement*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.769">
            <name>const ConditionVariable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
            </content>
        </type>
        <type derived="true" id="type.7396265">
            <name>const Const</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A"/>
            </content>
        </type>
        <type derived="true" id="type.7396267">
            <name>const Const&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396266">
            <name>const Const*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.821">
            <name>const Construct</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
            </content>
        </type>
        <type derived="true" id="type.822">
            <name>const Construct&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.774">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
            </content>
        </type>
        <type derived="true" id="type.775">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.406">
            <name>const Counter&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390010"/>
            </content>
        </type>
        <type derived="true" id="type.597">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.596">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.595">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.604">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.590">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.605">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.587">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.606">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.615">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.621">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.635">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.636">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.628">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.617">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.599">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.613">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.591">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.588">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.622">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.600">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.629">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.607">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.598">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.619">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.638">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.7396829">
            <name>const DefaultStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DefaultStatement_431BBB02B62D93DF15B8BA112275D930065BD749"/>
            </content>
        </type>
        <type derived="true" id="type.7396830">
            <name>const DefaultStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DefaultStatement_431BBB02B62D93DF15B8BA112275D930065BD749"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396828">
            <name>const DefaultStatement*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DefaultStatement_431BBB02B62D93DF15B8BA112275D930065BD749"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.839">
            <name>const DeleteStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
            </content>
        </type>
        <type derived="true" id="type.840">
            <name>const DeleteStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.785">
            <name>const Deref</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
            </content>
        </type>
        <type derived="true" id="type.786">
            <name>const Deref&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.842">
            <name>const DestroyStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
            </content>
        </type>
        <type derived="true" id="type.843">
            <name>const DestroyStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396018">
            <name>const DomObject</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
            </content>
        </type>
        <type derived="true" id="type.7396020">
            <name>const DomObject&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396019">
            <name>const DomObject*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396907">
            <name>const DomObject*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396906">
            <name>const DomObject**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396058">
            <name>const Dot</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Dot_3DBFB45CB93A3D81709E97835834A09CB64DBFD8"/>
            </content>
        </type>
        <type derived="true" id="type.7396060">
            <name>const Dot&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Dot_3DBFB45CB93A3D81709E97835834A09CB64DBFD8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396059">
            <name>const Dot*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Dot_3DBFB45CB93A3D81709E97835834A09CB64DBFD8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396025">
            <name>const Expression</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
            </content>
        </type>
        <type derived="true" id="type.7396027">
            <name>const Expression&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396026">
            <name>const Expression*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Expression_63F45770E98CB553F848612A60783A045B1137F7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.845">
            <name>const ExpressionStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
            </content>
        </type>
        <type derived="true" id="type.846">
            <name>const ExpressionStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.761">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
            </content>
        </type>
        <type derived="true" id="type.762">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.851">
            <name>const GotoCaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
            </content>
        </type>
        <type derived="true" id="type.852">
            <name>const GotoCaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.836">
            <name>const GotoStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
            </content>
        </type>
        <type derived="true" id="type.837">
            <name>const GotoStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396169">
            <name>const Identifier</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7"/>
            </content>
        </type>
        <type derived="true" id="type.7396171">
            <name>const Identifier&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396170">
            <name>const Identifier*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.763">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
            </content>
        </type>
        <type derived="true" id="type.764">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.806">
            <name>const Invoke</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
            </content>
        </type>
        <type derived="true" id="type.807">
            <name>const Invoke&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.490">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.530">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.513">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389552"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.577">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389659"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396803">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396800"/>
            </content>
        </type>
        <type derived="true" id="type.7396805">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396800"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396804">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396800"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396863">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396860"/>
            </content>
        </type>
        <type derived="true" id="type.7396865">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396860"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396864">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396860"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396702">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396699"/>
            </content>
        </type>
        <type derived="true" id="type.7396704">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396699"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396703">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396699"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396754">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396751"/>
            </content>
        </type>
        <type derived="true" id="type.7396756">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396751"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396755">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396751"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.829">
            <name>const Literal</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
            </content>
        </type>
        <type derived="true" id="type.830">
            <name>const Literal&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.546">
            <name>const LockGuard&lt;Mtx></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
            </content>
        </type>
        <type derived="true" id="type.547">
            <name>const LockGuard&lt;Mtx>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.733">
            <name>const LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7394867"/>
            </content>
        </type>
        <type derived="true" id="type.734">
            <name>const LockGuard&lt;System.Threading.Mutex>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7394867"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396271">
            <name>const LvalueRef</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05"/>
            </content>
        </type>
        <type derived="true" id="type.7396273">
            <name>const LvalueRef&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396272">
            <name>const LvalueRef*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.770">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.824">
            <name>const New</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
            </content>
        </type>
        <type derived="true" id="type.825">
            <name>const New&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.782">
            <name>const Not</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
            </content>
        </type>
        <type derived="true" id="type.783">
            <name>const Not&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.765">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
            </content>
        </type>
        <type derived="true" id="type.556">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.553">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396283">
            <name>const Pointer</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6"/>
            </content>
        </type>
        <type derived="true" id="type.7396285">
            <name>const Pointer&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396284">
            <name>const Pointer*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.812">
            <name>const PostfixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
            </content>
        </type>
        <type derived="true" id="type.813">
            <name>const PostfixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.809">
            <name>const PostfixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
            </content>
        </type>
        <type derived="true" id="type.810">
            <name>const PostfixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.794">
            <name>const PrefixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
            </content>
        </type>
        <type derived="true" id="type.795">
            <name>const PrefixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.791">
            <name>const PrefixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
            </content>
        </type>
        <type derived="true" id="type.792">
            <name>const PrefixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396816">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396813"/>
            </content>
        </type>
        <type derived="true" id="type.7396818">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396813"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396817">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396813"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396809">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396806"/>
            </content>
        </type>
        <type derived="true" id="type.7396811">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396806"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396810">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396806"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396876">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396873"/>
            </content>
        </type>
        <type derived="true" id="type.7396878">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396873"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396877">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396873"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396869">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396866"/>
            </content>
        </type>
        <type derived="true" id="type.7396871">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396866"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396870">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396866"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396715">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396712"/>
            </content>
        </type>
        <type derived="true" id="type.7396717">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396712"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396716">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396712"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396708">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396705"/>
            </content>
        </type>
        <type derived="true" id="type.7396710">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396705"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396709">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396705"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396767">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396764"/>
            </content>
        </type>
        <type derived="true" id="type.7396769">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396764"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396768">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396764"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396760">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396757"/>
            </content>
        </type>
        <type derived="true" id="type.7396762">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396757"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396761">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396757"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396429">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396426"/>
            </content>
        </type>
        <type derived="true" id="type.540">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.537"/>
            </content>
        </type>
        <type derived="true" id="type.7396429">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396426"/>
            </content>
        </type>
        <type derived="true" id="type.7396431">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396426"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.542">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.537"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396431">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396426"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.541">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.537"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396430">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396426"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396300">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396297"/>
            </content>
        </type>
        <type derived="true" id="type.411">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.408"/>
            </content>
        </type>
        <type derived="true" id="type.7396300">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396297"/>
            </content>
        </type>
        <type derived="true" id="type.7396302">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396297"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.413">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.408"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396301">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396297"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.412">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.408"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396301">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396297"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396319">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396316"/>
            </content>
        </type>
        <type derived="true" id="type.430">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.427"/>
            </content>
        </type>
        <type derived="true" id="type.7396319">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396316"/>
            </content>
        </type>
        <type derived="true" id="type.7396321">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396316"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.432">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.427"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396321">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396316"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.431">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.427"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396320">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396316"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.728">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.725"/>
            </content>
        </type>
        <type derived="true" id="type.7396618">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396615"/>
            </content>
        </type>
        <type derived="true" id="type.7396620">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.730">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.725"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396619">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.729">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.725"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396619">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396330">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396327"/>
            </content>
        </type>
        <type derived="true" id="type.441">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.438"/>
            </content>
        </type>
        <type derived="true" id="type.7396332">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396327"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.443">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.438"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396332">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396327"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.442">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.438"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396331">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396327"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396309">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396306"/>
            </content>
        </type>
        <type derived="true" id="type.420">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.417"/>
            </content>
        </type>
        <type derived="true" id="type.422">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.417"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396311">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396306"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396310">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396306"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.421">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.417"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.771">
            <name>const RecursiveMutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
            </content>
        </type>
        <type derived="true" id="type.833">
            <name>const ReturnStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
            </content>
        </type>
        <type derived="true" id="type.834">
            <name>const ReturnStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396277">
            <name>const RvalueRef</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229"/>
            </content>
        </type>
        <type derived="true" id="type.7396279">
            <name>const RvalueRef&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396278">
            <name>const RvalueRef*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.815">
            <name>const SizeOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
            </content>
        </type>
        <type derived="true" id="type.816">
            <name>const SizeOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396184">
            <name>const Statement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
            </content>
        </type>
        <type derived="true" id="type.7396186">
            <name>const Statement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396185">
            <name>const Statement*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.752">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
            </content>
        </type>
        <type derived="true" id="type.753">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.766">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
            </content>
        </type>
        <type derived="true" id="type.7390129">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390124"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.848">
            <name>const SwitchStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
            </content>
        </type>
        <type derived="true" id="type.849">
            <name>const SwitchStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.466">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389475"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.467">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389477"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.469">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.470">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389482"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.472">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.473">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389487"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.475">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389490"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.476">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.478">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389495"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.570">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.479">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389497"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.481">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389500"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.482">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.484">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389511"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.485">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389513"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.486">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389515"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.487">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389517"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.568">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.554">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389612"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.551">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389609"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.488">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.549">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.508">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.489">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389521"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.446">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389432"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.491">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.448">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.459">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.460">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389455"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.461">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389457"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.510">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389543"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.518">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389560"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.462">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389459"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.463">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389462"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.464">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389464"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.465">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389473"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.507">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389539"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396175">
            <name>const TemplateId</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5"/>
            </content>
        </type>
        <type derived="true" id="type.7396177">
            <name>const TemplateId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396176">
            <name>const TemplateId*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.772">
            <name>const ThreadingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
            </content>
        </type>
        <type derived="true" id="type.773">
            <name>const ThreadingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.854">
            <name>const ThrowStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
            </content>
        </type>
        <type derived="true" id="type.855">
            <name>const ThrowStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.857">
            <name>const TryStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
            </content>
        </type>
        <type derived="true" id="type.858">
            <name>const TryStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.778">
            <name>const Type</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
            </content>
        </type>
        <type derived="true" id="type.779">
            <name>const Type&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.818">
            <name>const TypeName</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
            </content>
        </type>
        <type derived="true" id="type.819">
            <name>const TypeName&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.474">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389488"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.483">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389503"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.468">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389478"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.477">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389493"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.555">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389613"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.550">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389601"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.552">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389610"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.471">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389483"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.480">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389498"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.800">
            <name>const UnaryMinus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
            </content>
        </type>
        <type derived="true" id="type.801">
            <name>const UnaryMinus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.797">
            <name>const UnaryPlus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
            </content>
        </type>
        <type derived="true" id="type.798">
            <name>const UnaryPlus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.776">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
            </content>
        </type>
        <type derived="true" id="type.777">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396793">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396790"/>
            </content>
        </type>
        <type derived="true" id="type.7396795">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396790"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396794">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396790"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396853">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396850"/>
            </content>
        </type>
        <type derived="true" id="type.7396855">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396850"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396854">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396850"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396840">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396837"/>
            </content>
        </type>
        <type derived="true" id="type.7396842">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396837"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396841">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396837"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396824">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396821"/>
            </content>
        </type>
        <type derived="true" id="type.7396826">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396821"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396825">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396821"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396668">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396665"/>
            </content>
        </type>
        <type derived="true" id="type.7396670">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396665"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396669">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396665"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396747">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396744"/>
            </content>
        </type>
        <type derived="true" id="type.7396749">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396744"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7396748">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7396744"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.531">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388900">
            <name>int</name>
        </type>
        <type basic="true" id="type.7388908">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.7388951">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.7388908"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388950">
            <name>uchar*</name>
            <content>
                <baseType ref="type.7388908"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388901">
            <name>uint</name>
        </type>
        <type derived="true" id="type.7388930">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.7388901"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388929">
            <name>uint*</name>
            <content>
                <baseType ref="type.7388901"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388903">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.7388936">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.7388903"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388935">
            <name>ulong*</name>
            <content>
                <baseType ref="type.7388903"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388907">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.7388948">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.7388907"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388947">
            <name>wchar*</name>
            <content>
                <baseType ref="type.7388907"/>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
