<library>
    <name>System.Text.Parsing.CodeDom</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Text.Parsing.CodeDom">
            <name>System.Text.Parsing.CodeDom</name>
            <classes>
                <class id="2203770">
                    <name>Add</name>
                    <groupName>Add</groupName>
                    <syntax> public class Add;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_Add_FB6264E275DB7FAA75A8DEECA05C3D7403373A46">
                            <name>Add(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Add(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Add_2D13C056B5BA8CB3E35493F4D5573674782B9661">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203704">
                    <name>AddressOf</name>
                    <groupName>AddressOf</groupName>
                    <syntax> public class AddressOf;</syntax>
                    <baseClass ref="2203695"/>
                    <constructors>
                        <constructor id="constructor_AddressOf_106A3FBE271BDC73BFE07A3BC966D08FC4BB4E62">
                            <name>AddressOf(DomObject* subject_)</name>
                            <syntax>public AddressOf(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_AddressOf_1B8A59E3B79039952FA31FBE6693C655C7FBF600">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203935">
                    <name>Array</name>
                    <groupName>Array</groupName>
                    <syntax> public class Array;</syntax>
                    <baseClass ref="2203682"/>
                    <constructors>
                        <constructor id="constructor_Array_4AC1FF82D6CB446F66567B8C8037440967CA386D">
                            <name>Array(DomObject* subject_, DomObject* size_)</name>
                            <syntax>public nothrow Array(DomObject* subject_, DomObject* size_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>size_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Array_CEDE9455D14D4C230B753D3647F78B91D1A93F97">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Array_8B4C206DEDC2348B5A6A366681FBA0BB785184A6">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203725">
                    <name>Arrow</name>
                    <groupName>Arrow</groupName>
                    <syntax> public class Arrow;</syntax>
                    <baseClass ref="2203689"/>
                    <constructors>
                        <constructor id="constructor_Arrow_DAE8AA001897DBB081656F17CC7E872B386C5D86">
                            <name>Arrow(DomObject* subject_, const String&lt;uchar>&amp; memberId_)</name>
                            <syntax>public nothrow Arrow(DomObject* subject_, const String&lt;uchar>&amp; memberId_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>memberId_</name>
                                    <type ref="type.2198358"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Arrow_7506B42946B4C4C9499B64E0FE48276FA65FC12E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Arrow_ABF575422FE75204BD6DA7B387CA009E100D8A57">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203788">
                    <name>As</name>
                    <groupName>As</groupName>
                    <syntax> public class As;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_As_5AAF0640A29ADE3AB28C8180BB6FD29186EF76A4">
                            <name>As(DomObject* expr_, DomObject* targetTypeExpr_)</name>
                            <syntax>public As(DomObject* expr_, DomObject* targetTypeExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expr_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>targetTypeExpr_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_As_1AA3F9C096B93BEE62C077FF71BC177622A9D4D3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203920">
                    <name>AssertStatement</name>
                    <groupName>AssertStatement</groupName>
                    <syntax> public class AssertStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_AssertStatement_C362F17195DD7FE6CFCD0940CD90E7B36A295AE1">
                            <name>AssertStatement(DomObject* assertExpr_)</name>
                            <syntax>public AssertStatement(DomObject* assertExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>assertExpr_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_AssertStatement_2536451EA08D034B02C8D72B8EA89F54299673C8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_AssertStatement_07D9867C4438DA3198F57A99127AEEA143E0B6FD">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203884">
                    <name>AssignmentStatement</name>
                    <groupName>AssignmentStatement</groupName>
                    <syntax> public class AssignmentStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_AssignmentStatement_E8EE9FFB12C0CFFAB328A860640333FA66453791">
                            <name>AssignmentStatement(DomObject* targetExpr_, DomObject* sourceExpr_)</name>
                            <syntax>public AssignmentStatement(DomObject* targetExpr_, DomObject* sourceExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>targetExpr_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>sourceExpr_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_AssignmentStatement_8EF79AEF23226DD42DD33229515C09C154848233">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_AssignmentStatement_A6ACA99E7DAC6430FE64F671EACA2B8D7AEC4541">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203824">
                    <name>Base</name>
                    <groupName>Base</groupName>
                    <syntax> public class Base;</syntax>
                    <baseClass ref="2203689"/>
                    <constructors>
                        <constructor id="default_constructor_Base_DE88F544D7160BB0FD2947D66889A36A2D9DE160">
                            <name>Base()</name>
                            <syntax>public Base();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Base_21C2E74AB8182B277D6BA8CD00484B34096141D9">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203728">
                    <name>BinaryExpression</name>
                    <groupName>BinaryExpression</groupName>
                    <syntax>abstract public class BinaryExpression;</syntax>
                    <baseClass ref="2203689"/>
                    <constructors>
                        <constructor id="constructor_BinaryExpression_4F625B4717FE668ACF5D4334BB0989210DC8EF36">
                            <name>BinaryExpression(Operator op_, DomObject* left_, DomObject* right_)</name>
                            <syntax>public BinaryExpression(Operator op_, DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>op_</name>
                                    <type ref="2203688"/>
                                </parameter>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BinaryExpression_9E40F1D4B944D025D86F3E3D79604DE9F3E55B6B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_BinaryExpression_3B36FE3D8BA26BA885CD9B3DC9CAA9760D82FD29">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203743">
                    <name>BitAnd</name>
                    <groupName>BitAnd</groupName>
                    <syntax> public class BitAnd;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_BitAnd_AEA4947DC5EBF8C888BDCE349AE3034BA5C4D62E">
                            <name>BitAnd(DomObject* left_, DomObject* right_)</name>
                            <syntax>public BitAnd(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BitAnd_1EF91C9C8DBECD7438A3DA17C9023535E60EF14D">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203737">
                    <name>BitOr</name>
                    <groupName>BitOr</groupName>
                    <syntax> public class BitOr;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_BitOr_9C775B941A03BDC339528929369C4F81C7A1C6C9">
                            <name>BitOr(DomObject* left_, DomObject* right_)</name>
                            <syntax>public BitOr(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BitOr_9D75CBEFF73717A9009153AFCD45C5B19E7551A5">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203740">
                    <name>BitXor</name>
                    <groupName>BitXor</groupName>
                    <syntax> public class BitXor;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_BitXor_77A2A8CB11E834056FDD0BCD840A413567F57BBC">
                            <name>BitXor(DomObject* left_, DomObject* right_)</name>
                            <syntax>public BitXor(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BitXor_18866FC5A019D039EE0BA64F6CA4C6BE8A6C4645">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203637">
                    <name>BoolType</name>
                    <groupName>BoolType</groupName>
                    <syntax> public class BoolType;</syntax>
                    <baseClass ref="2203634"/>
                    <constructors>
                        <constructor id="default_constructor_BoolType_792AB2CC5CC32731C2FF3238D18586DD35D74ED2">
                            <name>BoolType()</name>
                            <syntax>public nothrow BoolType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BoolType_7B91C970F300714F894F70BE558AB667BD254819">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203866">
                    <name>BreakStatement</name>
                    <groupName>BreakStatement</groupName>
                    <syntax> public class BreakStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="default_constructor_BreakStatement_3FD764BB2173314CE967D7ABB7CC80AEDF014CCA">
                            <name>BreakStatement()</name>
                            <syntax>public BreakStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BreakStatement_6A49393BE27AB8B0A9674B09102302C12D58CBA3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_BreakStatement_EB526300E7ADDD88D17D7EB380AF0815B29CED46">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203652">
                    <name>ByteType</name>
                    <groupName>ByteType</groupName>
                    <syntax> public class ByteType;</syntax>
                    <baseClass ref="2203634"/>
                    <constructors>
                        <constructor id="default_constructor_ByteType_99FC6A7D77D465DDBE8BB7FFD9EE0F109121F52B">
                            <name>ByteType()</name>
                            <syntax>public nothrow ByteType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ByteType_6EBB20F251612E6BE6BC06564E07E298C0F7DA08">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203896">
                    <name>CaseStatement</name>
                    <groupName>CaseStatement</groupName>
                    <syntax> public class CaseStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="default_constructor_CaseStatement_7D895A97573B6ABF00749F321D3BCBD6B7BDC674">
                            <name>CaseStatement()</name>
                            <syntax>public CaseStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CaseStatement_3ED38BF29C4137EA0F55E89E2CC7ED735BEA7B3F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddCaseExpr_CaseStatement_F3489157DC1C30AE97C79D5ADC80E17E7DB0E525">
                            <name>AddCaseExpr(DomObject* caseExpr)</name>
                            <syntax>public void AddCaseExpr(DomObject* caseExpr);</syntax>
                            <parameters>
                                <parameter>
                                    <name>caseExpr</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddStatement_CaseStatement_6F1DC9BB34C8C90CA8F31148DD539877B1597DAD">
                            <name>AddStatement(Statement* statement)</name>
                            <syntax>public void AddStatement(Statement* statement);</syntax>
                            <parameters>
                                <parameter>
                                    <name>statement</name>
                                    <type ref="type.2203843"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_CaseStatement_770204373D050CAAB07D7482753E2A92CFF5FBEC">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203812">
                    <name>Cast</name>
                    <groupName>Cast</groupName>
                    <syntax> public class Cast;</syntax>
                    <baseClass ref="2203689"/>
                    <constructors>
                        <constructor id="constructor_Cast_29308124D20BDBA0E7392E83F495EBB90856BFFE">
                            <name>Cast(DomObject* targetTypeExpr_, DomObject* sourceExpr_)</name>
                            <syntax>public Cast(DomObject* targetTypeExpr_, DomObject* sourceExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>targetTypeExpr_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>sourceExpr_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Cast_A4E54F9592C4E2A153CAC3B251D978671A90CDCD">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Cast_D1E4A5170E18662C0109A6F3A85265C8E980A62C">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203914">
                    <name>Catch</name>
                    <groupName>Catch</groupName>
                    <syntax> public class Catch;</syntax>
                    <baseClass ref="2203682"/>
                    <constructors>
                        <constructor id="constructor_Catch_8FA04C9C68E8230406061986187DFC621C8C02C2">
                            <name>Catch(DomObject* typeExpr_, DomObject* id_, CompoundStatement* catchBlock_)</name>
                            <syntax>public Catch(DomObject* typeExpr_, DomObject* id_, CompoundStatement* catchBlock_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeExpr_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>catchBlock_</name>
                                    <type ref="type.2203849"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Catch_1572006C4D0B812C7A3A535D6E99ABE0A11800AE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Catch_F9485E88285C81A73047AB394FB394EFBC83BBFC">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203640">
                    <name>CharType</name>
                    <groupName>CharType</groupName>
                    <syntax> public class CharType;</syntax>
                    <baseClass ref="2203634"/>
                    <constructors>
                        <constructor id="default_constructor_CharType_E1B7A1E44A259B89E2E6097CC72D0E814AED0904">
                            <name>CharType()</name>
                            <syntax>public nothrow CharType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CharType_CDCAD88D6976C04C9DD661DCDA7254865EE31A0C">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203719">
                    <name>Complement</name>
                    <groupName>Complement</groupName>
                    <syntax> public class Complement;</syntax>
                    <baseClass ref="2203695"/>
                    <constructors>
                        <constructor id="constructor_Complement_651BB4CB810D97C5BC7406A830DDA1C5343F7DFA">
                            <name>Complement(DomObject* subject_)</name>
                            <syntax>public Complement(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Complement_6A7106D46D68F50FED6EC9A7EEAD5EBBC3880568">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203848">
                    <name>CompoundStatement</name>
                    <groupName>CompoundStatement</groupName>
                    <syntax> public class CompoundStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="default_constructor_CompoundStatement_35FB9F27ED1250559E3297CA012112EFF2F0EE32">
                            <name>CompoundStatement()</name>
                            <syntax>public CompoundStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CompoundStatement_0D71EBB712C6FCE2948772BFC7E17C7625C7923E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddStatement_CompoundStatement_6F389D25143A65C1ECD5D2752F54D206560443DA">
                            <name>AddStatement(Statement* statement)</name>
                            <syntax>public void AddStatement(Statement* statement);</syntax>
                            <parameters>
                                <parameter>
                                    <name>statement</name>
                                    <type ref="type.2203843"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_CompoundStatement_FCC85205CD991E1ED9600E7DB9F88E6763D6F448">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203734">
                    <name>Conjunction</name>
                    <groupName>Conjunction</groupName>
                    <syntax> public class Conjunction;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_Conjunction_B180AB2ED6DE790A39F6075AE7D9EC71E0821B37">
                            <name>Conjunction(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Conjunction(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Conjunction_07E7C98DC6C6219B169982C0FF255808DB98B5B2">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203923">
                    <name>Const</name>
                    <groupName>Const</groupName>
                    <syntax> public class Const;</syntax>
                    <baseClass ref="2203682"/>
                    <constructors>
                        <constructor id="constructor_Const_A36B9AC5AC815B85CBDD049E38905A8245727ECD">
                            <name>Const(DomObject* subject_)</name>
                            <syntax>public nothrow Const(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Const_B23F75E42AA8D53ABE7D4213D909DA494DE8BEF9">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Const_72279CD6C965F9E586D3EBDF39128EBCE1B03848">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203815">
                    <name>Construct</name>
                    <groupName>Construct</groupName>
                    <syntax> public class Construct;</syntax>
                    <baseClass ref="2203689"/>
                    <constructors>
                        <constructor id="constructor_Construct_0D34FA7963949A42BB3FA6946B89F8CF090ED4C9">
                            <name>Construct(DomObject* typeExpr_)</name>
                            <syntax>public Construct(DomObject* typeExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeExpr_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Construct_97D335DCC83CEAAB93666256F7CE2D724C9EB653">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_Construct_E46ADD53FB8ACFFF654CF7F5681C691DC41CB7A6">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public override void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Construct_DC05CDF4E7292AFC426F54CCE1ABA1053AD13624">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203875">
                    <name>ConstructionStatement</name>
                    <groupName>ConstructionStatement</groupName>
                    <syntax> public class ConstructionStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_ConstructionStatement_A3706F0577B21E5D71EF0A20AF1E8BD155CB5ABF">
                            <name>ConstructionStatement(DomObject* typeExpr_, DomObject* id_)</name>
                            <syntax>public ConstructionStatement(DomObject* typeExpr_, DomObject* id_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeExpr_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ConstructionStatement_5FB3CE625510F056D2FD2A567C6B14DCE5C92F37">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_ConstructionStatement_A6BB930B4F5AC87F7F78DF11836312464196EBBE">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public override void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ConstructionStatement_138A4E32294704D1C23C48CE6D73862A01E125C6">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetParens_ConstructionStatement_E07BC32EC1EEEAACF01D7CFCDBF3CDD998A209F5">
                            <name>SetParens()</name>
                            <syntax>public nothrow void SetParens();</syntax>
                        </function>
                    </functions>
                </class>
                <class id="2203869">
                    <name>ContinueStatement</name>
                    <groupName>ContinueStatement</groupName>
                    <syntax> public class ContinueStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="default_constructor_ContinueStatement_9F7D50B0337CF0CCC235B31AE9DE89119E885233">
                            <name>ContinueStatement()</name>
                            <syntax>public ContinueStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ContinueStatement_9B6818853C7F45C850C62180181707D7EA8E0663">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ContinueStatement_9E9B1D4720C003FA34157E18AE2D391FE9516165">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203899">
                    <name>DefaultStatement</name>
                    <groupName>DefaultStatement</groupName>
                    <syntax> public class DefaultStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="default_constructor_DefaultStatement_5C2BD34156F53E58A73DF84B2D65A396C5F13892">
                            <name>DefaultStatement()</name>
                            <syntax>public DefaultStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DefaultStatement_33E13FFDF81A52D5988D2253BDF89D356F7E8C7F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddStatement_DefaultStatement_AE9DBBDA956204A9665A6075B40860E0406989B7">
                            <name>AddStatement(Statement* statement)</name>
                            <syntax>public void AddStatement(Statement* statement);</syntax>
                            <parameters>
                                <parameter>
                                    <name>statement</name>
                                    <type ref="type.2203843"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_DefaultStatement_B5CA6ACB809DE4B499DE1C6C9FBA0D926E4C9DC2">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203878">
                    <name>DeleteStatement</name>
                    <groupName>DeleteStatement</groupName>
                    <syntax> public class DeleteStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_DeleteStatement_25B7ADB6431D2A504EA2C15134C0E9681F438218">
                            <name>DeleteStatement(DomObject* expression_)</name>
                            <syntax>public DeleteStatement(DomObject* expression_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expression_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DeleteStatement_DEB0A761C3FDFF0F297800C8367E17384B347EA8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_DeleteStatement_C25506CD8D6C409801F827F7E7EEBF79A4528589">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203701">
                    <name>Deref</name>
                    <groupName>Deref</groupName>
                    <syntax> public class Deref;</syntax>
                    <baseClass ref="2203695"/>
                    <constructors>
                        <constructor id="constructor_Deref_FF28839199F4E2C2DEC28AAD4F495CF556BA8480">
                            <name>Deref(DomObject* subject_)</name>
                            <syntax>public Deref(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Deref_99FFA7F4F973D7840CDD7BB09A8E27C7DB31F505">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203881">
                    <name>DestroyStatement</name>
                    <groupName>DestroyStatement</groupName>
                    <syntax> public class DestroyStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_DestroyStatement_9F2CFF93B4AF1C0F1A21E92D90ADA807A3E1702D">
                            <name>DestroyStatement(DomObject* expression_)</name>
                            <syntax>public DestroyStatement(DomObject* expression_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expression_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DestroyStatement_E90F18047AA6DB785DCCA25296610B2207CC1600">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_DestroyStatement_B006144A691DBAF3E7E4F827B440C588E5F528B5">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203731">
                    <name>Disjunction</name>
                    <groupName>Disjunction</groupName>
                    <syntax> public class Disjunction;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_Disjunction_1B5EE0E4EA6770F90BBA7757083AD3AE44208277">
                            <name>Disjunction(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Disjunction(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Disjunction_AA1155E2C1F466D85041177BE18E605556F5F773">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203779">
                    <name>Div</name>
                    <groupName>Div</groupName>
                    <syntax> public class Div;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_Div_53B798EAF23879F742A8CD086C250067649F056C">
                            <name>Div(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Div(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Div_9BF48920D9B109813CB790FA1E2C9E1C928282DF">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203860">
                    <name>DoStatement</name>
                    <groupName>DoStatement</groupName>
                    <syntax> public class DoStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_DoStatement_5EF42A6681B009E37BE9405448BCEA8EFA04F7E8">
                            <name>DoStatement(DomObject* condition_, Statement* statement_)</name>
                            <syntax>public DoStatement(DomObject* condition_, Statement* statement_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>condition_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>statement_</name>
                                    <type ref="type.2203843"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DoStatement_8FFAF0D96F83556BDE9A3BD083E669AC57ED95DD">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_DoStatement_FFA320A5A8D61175626A25E560105289CD07BCCE">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203682">
                    <name>DomObject</name>
                    <groupName>DomObject</groupName>
                    <syntax>abstract public class DomObject;</syntax>
                    <constructors>
                        <constructor id="constructor_DomObject_BB42E44FB17A2C144C36E5C531EB57955DB9B6ED">
                            <name>DomObject(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow DomObject(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.2198358"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomObject_4CA8814E15131A836452A9E7C1283F75EB49AA78">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public abstract void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_DomObject_4002324F52B1814870A359D13BF3F41033690D39">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public virtual void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Name_DomObject_CA9065A71FF05D194F82A3E27465C5B8A8D1B739">
                            <name>Name() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Name() const;</syntax>
                            <returnType ref="type.2198358"/>
                        </function>
                        <function id="member_function_Parens_DomObject_5762B876F810623A5AA19DB8D3E8E9A546F2EE32">
                            <name>Parens() const</name>
                            <syntax>public nothrow inline bool Parens() const;</syntax>
                            <returnType ref="type.2197239"/>
                        </function>
                        <function id="member_function_Print_DomObject_1246D42C75EE05BDA21694F1AA36881375183A9B">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public virtual void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Rank_DomObject_2686A5B4BCE675013EC2424D0603072B2A15D2EE">
                            <name>Rank() const</name>
                            <syntax>public nothrow virtual int Rank() const;</syntax>
                            <returnType ref="type.2197244"/>
                        </function>
                        <function id="member_function_SetName_DomObject_2F016D62E3F95490A58FCD802C70C53E5379D659">
                            <name>SetName(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow void SetName(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.2198358"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetParens_DomObject_E242CDA6377C17AB88F8975E04006D60BFA6B353">
                            <name>SetParens()</name>
                            <syntax>public nothrow inline void SetParens();</syntax>
                        </function>
                    </functions>
                </class>
                <class id="2203722">
                    <name>Dot</name>
                    <groupName>Dot</groupName>
                    <syntax> public class Dot;</syntax>
                    <baseClass ref="2203689"/>
                    <constructors>
                        <constructor id="constructor_Dot_C2692D1EB06D2B442F0D9855769E507DB30D03EE">
                            <name>Dot(DomObject* subject_, const String&lt;uchar>&amp; memberId_)</name>
                            <syntax>public nothrow Dot(DomObject* subject_, const String&lt;uchar>&amp; memberId_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>memberId_</name>
                                    <type ref="type.2198358"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Dot_FA64586D4849A65088EECCF457C7B54458FDBCF9">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Dot_4C64FBE740DD174226181C1C295B38741FA93CFE">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203676">
                    <name>DoubleType</name>
                    <groupName>DoubleType</groupName>
                    <syntax> public class DoubleType;</syntax>
                    <baseClass ref="2203634"/>
                    <constructors>
                        <constructor id="default_constructor_DoubleType_7B9BFB3336061617206E6A35728A51C5C9D4E55A">
                            <name>DoubleType()</name>
                            <syntax>public nothrow DoubleType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DoubleType_245B71EA11A749DD434979D14D1DBEC84783CAE5">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203890">
                    <name>EmptyStatement</name>
                    <groupName>EmptyStatement</groupName>
                    <syntax> public class EmptyStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="default_constructor_EmptyStatement_D3FA4A5E7EA5A75A679D4A1F755F0D8F01AB2E74">
                            <name>EmptyStatement()</name>
                            <syntax>public EmptyStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_EmptyStatement_AA42B316DA65EA1A6595E2057BAD0A41AFD3DF60">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_EmptyStatement_FC2B1B707E0D475DB7B9315C050D309C5F02025B">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203746">
                    <name>Equal</name>
                    <groupName>Equal</groupName>
                    <syntax> public class Equal;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_Equal_85A86E2AE844984246B05A7ED2EC4DFB5F1DF85F">
                            <name>Equal(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Equal(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Equal_EF179A960A81918528869543603655C0038043EE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203689">
                    <name>Expression</name>
                    <groupName>Expression</groupName>
                    <syntax>abstract public class Expression;</syntax>
                    <baseClass ref="2203682"/>
                    <constructors>
                        <constructor id="constructor_Expression_F3EC2994CDFCE8518383F792F79C6BFC4DF3D6AF">
                            <name>Expression(const String&lt;uchar>&amp; name_, int rank_)</name>
                            <syntax>public nothrow Expression(const String&lt;uchar>&amp; name_, int rank_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.2198358"/>
                                </parameter>
                                <parameter>
                                    <name>rank_</name>
                                    <type ref="type.2197244"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Rank_Expression_73E7C240E1CE1146B2CDDFA7FC21373807437118">
                            <name>Rank() const</name>
                            <syntax>public nothrow override int Rank() const;</syntax>
                            <returnType ref="type.2197244"/>
                        </function>
                    </functions>
                </class>
                <class id="2203887">
                    <name>ExpressionStatement</name>
                    <groupName>ExpressionStatement</groupName>
                    <syntax> public class ExpressionStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_ExpressionStatement_A0E12EC88A1ECCCBAE1E320F273D742E42296764">
                            <name>ExpressionStatement(DomObject* expression_)</name>
                            <syntax>public ExpressionStatement(DomObject* expression_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expression_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ExpressionStatement_77A835CCC88201B3C5B2E539F41619FE743E3CDC">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ExpressionStatement_73C53117C30BD50EFBCF054B2949D8B7FD7CDD27">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203673">
                    <name>FloatType</name>
                    <groupName>FloatType</groupName>
                    <syntax> public class FloatType;</syntax>
                    <baseClass ref="2203634"/>
                    <constructors>
                        <constructor id="default_constructor_FloatType_72515A0BE0D1F56C8F44B939479584C8D0D6A8E7">
                            <name>FloatType()</name>
                            <syntax>public nothrow FloatType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_FloatType_A2FD85ABBAEEC2CA6A59D0BDC55622D4946AFB7F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203863">
                    <name>ForStatement</name>
                    <groupName>ForStatement</groupName>
                    <syntax> public class ForStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_ForStatement_F302E1B3B9EB52C899DE40C159DD5066BD5A463C">
                            <name>ForStatement(Statement* initS_, DomObject* condition_, Statement* loopS_, Statement* actionS_)</name>
                            <syntax>public ForStatement(Statement* initS_, DomObject* condition_, Statement* loopS_, Statement* actionS_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>initS_</name>
                                    <type ref="type.2203843"/>
                                </parameter>
                                <parameter>
                                    <name>condition_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>loopS_</name>
                                    <type ref="type.2203843"/>
                                </parameter>
                                <parameter>
                                    <name>actionS_</name>
                                    <type ref="type.2203843"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ForStatement_12CB382271601C3DA47D1984BBF825FF498AEA66">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ForStatement_356ED241B53FCA2587B8123C5F55690718D2C52C">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203905">
                    <name>GotoCaseStatement</name>
                    <groupName>GotoCaseStatement</groupName>
                    <syntax> public class GotoCaseStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_GotoCaseStatement_E3DF862620B8A365411F81E72C1B362C0DDAB4D2">
                            <name>GotoCaseStatement(DomObject* targetCase_)</name>
                            <syntax>public GotoCaseStatement(DomObject* targetCase_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>targetCase_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_GotoCaseStatement_965BDBC033F3602B8F35D11B89DB256C302C2EC3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_GotoCaseStatement_34B2C09F51D8FB8AB8F4BB985E9A447E2BB0635C">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203908">
                    <name>GotoDefaultStatement</name>
                    <groupName>GotoDefaultStatement</groupName>
                    <syntax> public class GotoDefaultStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="default_constructor_GotoDefaultStatement_239546857706AB0793095FDCFC352ABE0EC39465">
                            <name>GotoDefaultStatement()</name>
                            <syntax>public GotoDefaultStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_GotoDefaultStatement_47F65BA43864B18B67C3D6C46B73EAF31FAB4A45">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_GotoDefaultStatement_C47EB42FF7C8BED74EFC5DDFA2B38FB56401AFCC">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203872">
                    <name>GotoStatement</name>
                    <groupName>GotoStatement</groupName>
                    <syntax> public class GotoStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_GotoStatement_AC111BA558E2D63E81821C990B9FE1B129BEE2D0">
                            <name>GotoStatement(const String&lt;uchar>&amp; target_)</name>
                            <syntax>public GotoStatement(const String&lt;uchar>&amp; target_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>target_</name>
                                    <type ref="type.2198358"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_GotoStatement_56A12340897DBB13D73A72BC1EA125E8718ED92C">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_GotoStatement_B6D5606A0FA9BC236AB3DE717B0C508A9B95C5C9">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203755">
                    <name>Greater</name>
                    <groupName>Greater</groupName>
                    <syntax> public class Greater;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_Greater_CB9A0699459A3B33E06350B1D1821176C456ABDD">
                            <name>Greater(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Greater(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Greater_EE70BF855E54AB427D41A7ABF66FDB31DEF742DE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203761">
                    <name>GreaterOrEqual</name>
                    <groupName>GreaterOrEqual</groupName>
                    <syntax> public class GreaterOrEqual;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_GreaterOrEqual_1DFC83CB62EEB8DB53E7895737F8E974C343631D">
                            <name>GreaterOrEqual(DomObject* left_, DomObject* right_)</name>
                            <syntax>public GreaterOrEqual(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_GreaterOrEqual_C80615229A0C0E9F9D9BC3BB5DA86A4F12E1C833">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203827">
                    <name>Identifier</name>
                    <groupName>Identifier</groupName>
                    <syntax> public class Identifier;</syntax>
                    <baseClass ref="2203682"/>
                    <constructors>
                        <constructor id="constructor_Identifier_06EA8057993C062B3EF81A9500303464A3F0FFAD">
                            <name>Identifier(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow Identifier(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.2198358"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Identifier_8B2EE033F2E7DD641EA5FC1659DE772FD876C998">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Rank_Identifier_DD14320B57C2C28BD9E7EE654A1D6650A33F433B">
                            <name>Rank() const</name>
                            <syntax>public nothrow override int Rank() const;</syntax>
                            <returnType ref="type.2197244"/>
                        </function>
                    </functions>
                </class>
                <class id="2203854">
                    <name>IfStatement</name>
                    <groupName>IfStatement</groupName>
                    <syntax> public class IfStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_IfStatement_2F5F523924C37FEC1EEE677D441DAF48AE1D1E6D">
                            <name>IfStatement(DomObject* condition_, Statement* thenS_, Statement* elseS_)</name>
                            <syntax>public IfStatement(DomObject* condition_, Statement* thenS_, Statement* elseS_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>condition_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>thenS_</name>
                                    <type ref="type.2203843"/>
                                </parameter>
                                <parameter>
                                    <name>elseS_</name>
                                    <type ref="type.2203843"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_IfStatement_7CDCB83B87B6DDB0BA9BA03B13F1295B1572CE2F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_IfStatement_60BC87DAC2FB3CB2DFEB3428719EC2EE5F549A96">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203791">
                    <name>Indexing</name>
                    <groupName>Indexing</groupName>
                    <syntax> public class Indexing;</syntax>
                    <baseClass ref="2203689"/>
                    <constructors>
                        <constructor id="constructor_Indexing_234AD633DABEC36EFC3E84A553611FF6B16DCE1B">
                            <name>Indexing(DomObject* subject_, DomObject* index_)</name>
                            <syntax>public Indexing(DomObject* subject_, DomObject* index_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>index_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Indexing_1F4CD2105D19BE5EFA2D58AB374588433A2DDF71">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Indexing_0A36B0A85C4CB87F78ABA0AE30F90D3D6006D24F">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203661">
                    <name>IntType</name>
                    <groupName>IntType</groupName>
                    <syntax> public class IntType;</syntax>
                    <baseClass ref="2203634"/>
                    <constructors>
                        <constructor id="default_constructor_IntType_65CE78B0FC0B4F39E48BB85ED17DE93500572E2F">
                            <name>IntType()</name>
                            <syntax>public nothrow IntType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_IntType_A0BEB0435086A9FB6D1238A32DA6E60C24355168">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203794">
                    <name>Invoke</name>
                    <groupName>Invoke</groupName>
                    <syntax> public class Invoke;</syntax>
                    <baseClass ref="2203689"/>
                    <constructors>
                        <constructor id="constructor_Invoke_92B72739DB687F71DA4EF207BFF0F32F2C4FCC46">
                            <name>Invoke(DomObject* subject_)</name>
                            <syntax>public Invoke(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Invoke_67603DECCFDB8F8885DEAD1F07BD40922EE08CFE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_Invoke_22164B46D53BD15F327B0CC593BEDBD713B8FB5E">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public override void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Invoke_8C51DD2578441380A2934C5B2F3849BD32B02AFC">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203785">
                    <name>Is</name>
                    <groupName>Is</groupName>
                    <syntax> public class Is;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_Is_B4956514C353D3F636675280CB953A1AFA712187">
                            <name>Is(DomObject* expr_, DomObject* targetTypeExpr_)</name>
                            <syntax>public Is(DomObject* expr_, DomObject* targetTypeExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expr_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>targetTypeExpr_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Is_A6ACA04F445E754031A14D7F5AA5DCEA459DABC3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203752">
                    <name>Less</name>
                    <groupName>Less</groupName>
                    <syntax> public class Less;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_Less_4778D13997E4BD55ACE54DB44560F58157FFBFBE">
                            <name>Less(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Less(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Less_111DA2A52F16CDEC383AD77BADE1925B191A5B3A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203758">
                    <name>LessOrEqual</name>
                    <groupName>LessOrEqual</groupName>
                    <syntax> public class LessOrEqual;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_LessOrEqual_1B5F718D3785EB324F9109519DB1B017DDDDE4C2">
                            <name>LessOrEqual(DomObject* left_, DomObject* right_)</name>
                            <syntax>public LessOrEqual(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LessOrEqual_D5A25F3B0E6B498F802EBA943BB181C4A87DBEB4">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203839">
                    <name>Literal</name>
                    <groupName>Literal</groupName>
                    <syntax> public class Literal;</syntax>
                    <baseClass ref="2203682"/>
                    <constructors>
                        <constructor id="constructor_Literal_C02938AFB06C9B321096C8EEECD38495C005318E">
                            <name>Literal(const String&lt;uchar>&amp; text)</name>
                            <syntax>public nothrow Literal(const String&lt;uchar>&amp; text);</syntax>
                            <parameters>
                                <parameter>
                                    <name>text</name>
                                    <type ref="type.2198358"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Literal_14339607FA8681E34F2FB6F8BC7C45BAF78FDB7E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203667">
                    <name>LongType</name>
                    <groupName>LongType</groupName>
                    <syntax> public class LongType;</syntax>
                    <baseClass ref="2203634"/>
                    <constructors>
                        <constructor id="default_constructor_LongType_85E88EFF30C2511112CC4C29F3B4B008C5500C9C">
                            <name>LongType()</name>
                            <syntax>public nothrow LongType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LongType_C2C43539F32B952471DADDA66190DFEFF664B560">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203926">
                    <name>LvalueRef</name>
                    <groupName>LvalueRef</groupName>
                    <syntax> public class LvalueRef;</syntax>
                    <baseClass ref="2203682"/>
                    <constructors>
                        <constructor id="constructor_LvalueRef_33268CEFAE38C6A1C99C84C80C5FA7C195201347">
                            <name>LvalueRef(DomObject* subject_)</name>
                            <syntax>public nothrow LvalueRef(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LvalueRef_9113257276B3B5EC54A97BD6A9F433B5B97DCADC">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_LvalueRef_F6FD9A9334444797F38356301D1D325AD17EA49B">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203776">
                    <name>Mul</name>
                    <groupName>Mul</groupName>
                    <syntax> public class Mul;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_Mul_49633C50D9434A3D47265BD0E483210C35DAAF3E">
                            <name>Mul(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Mul(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Mul_8824CBD274EA8FB4FF9BEE22CB073277D46EE709">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203818">
                    <name>New</name>
                    <groupName>New</groupName>
                    <syntax> public class New;</syntax>
                    <baseClass ref="2203689"/>
                    <constructors>
                        <constructor id="constructor_New_21CBB6331DCA5324034437D42FFD77E43CA3977C">
                            <name>New(DomObject* typeExpr_)</name>
                            <syntax>public New(DomObject* typeExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeExpr_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_New_563D3F417AC64BF2787B487CC34D285156FC8791">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_New_E48425D2132CCF6DCC7570381290B98D8299591A">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public override void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_New_28A2BAC49C1E769BE6A4903626E913A481E2C429">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203698">
                    <name>Not</name>
                    <groupName>Not</groupName>
                    <syntax> public class Not;</syntax>
                    <baseClass ref="2203695"/>
                    <constructors>
                        <constructor id="constructor_Not_E09D73F3998C8D1BE4FCB7F3CBD9D508E3D4A39A">
                            <name>Not(DomObject* subject_)</name>
                            <syntax>public Not(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Not_938BB9975D21A33622CC79FA41C9EF7708620A1B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203749">
                    <name>NotEqual</name>
                    <groupName>NotEqual</groupName>
                    <syntax> public class NotEqual;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_NotEqual_66053AB87D8351FCFD9F0A420310301B830C5FDC">
                            <name>NotEqual(DomObject* left_, DomObject* right_)</name>
                            <syntax>public NotEqual(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_NotEqual_4319FDDE20899513DCF292A96A975A1E64E98558">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203932">
                    <name>Pointer</name>
                    <groupName>Pointer</groupName>
                    <syntax> public class Pointer;</syntax>
                    <baseClass ref="2203682"/>
                    <constructors>
                        <constructor id="constructor_Pointer_F5C199343647D691F54D1FF572745C55D1F0667D">
                            <name>Pointer(DomObject* subject_)</name>
                            <syntax>public nothrow Pointer(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Pointer_EF9550CE6336357EF9FFACA7FA5E8715BFA0356A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Pointer_F25245A4547E9820AAB2D2BB5E704C0EEB2FC2BD">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203803">
                    <name>PostfixDecrement</name>
                    <groupName>PostfixDecrement</groupName>
                    <syntax> public class PostfixDecrement;</syntax>
                    <baseClass ref="2203797"/>
                    <constructors>
                        <constructor id="constructor_PostfixDecrement_DC7474395CF5CDAE9DAD1E2FD86BFC05F0B51A00">
                            <name>PostfixDecrement(DomObject* subject_)</name>
                            <syntax>public PostfixDecrement(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PostfixDecrement_90E778C7672B1E09D16EAAF23A7E7C1AD5B642AB">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203797">
                    <name>PostfixExpression</name>
                    <groupName>PostfixExpression</groupName>
                    <syntax>abstract public class PostfixExpression;</syntax>
                    <baseClass ref="2203689"/>
                    <constructors>
                        <constructor id="constructor_PostfixExpression_CB4FDDC5858E6036F8A9CBB1607BA2F5D39BDD01">
                            <name>PostfixExpression(DomObject* subject_, Operator op_)</name>
                            <syntax>public PostfixExpression(DomObject* subject_, Operator op_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>op_</name>
                                    <type ref="2203688"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PostfixExpression_33A0537C68AE78FE90382A2860C2C83E388FA6A8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_PostfixExpression_F643C3E8F731E55A6EB9CEF8C9F5A13636E5F177">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203800">
                    <name>PostfixIncrement</name>
                    <groupName>PostfixIncrement</groupName>
                    <syntax> public class PostfixIncrement;</syntax>
                    <baseClass ref="2203797"/>
                    <constructors>
                        <constructor id="constructor_PostfixIncrement_90C8FBA27B48C0C99938F23A1AFB1D2C590CBB18">
                            <name>PostfixIncrement(DomObject* subject_)</name>
                            <syntax>public PostfixIncrement(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PostfixIncrement_3FD1090D67FC659751C6828D84B0B2D4627288BE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203710">
                    <name>PrefixDecrement</name>
                    <groupName>PrefixDecrement</groupName>
                    <syntax> public class PrefixDecrement;</syntax>
                    <baseClass ref="2203695"/>
                    <constructors>
                        <constructor id="constructor_PrefixDecrement_9BA86A49C7BF0B604DEE1BAA953CD14D29FD4269">
                            <name>PrefixDecrement(DomObject* subject_)</name>
                            <syntax>public PrefixDecrement(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PrefixDecrement_7C3753C3450F67663628EDDC528087D36A5228F8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203695">
                    <name>PrefixExpression</name>
                    <groupName>PrefixExpression</groupName>
                    <syntax>abstract public class PrefixExpression;</syntax>
                    <baseClass ref="2203689"/>
                    <constructors>
                        <constructor id="constructor_PrefixExpression_55BB390293B66B433E77F50FE7CCBAC01799D294">
                            <name>PrefixExpression(Operator op_, DomObject* subject_)</name>
                            <syntax>public PrefixExpression(Operator op_, DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>op_</name>
                                    <type ref="2203688"/>
                                </parameter>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PrefixExpression_ABBE3DF62BBFA881B067C644CBAA563667E3EDC5">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_PrefixExpression_7C3C5C5B839C2ACE36E4562CC9A51AFD905501C3">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203707">
                    <name>PrefixIncrement</name>
                    <groupName>PrefixIncrement</groupName>
                    <syntax> public class PrefixIncrement;</syntax>
                    <baseClass ref="2203695"/>
                    <constructors>
                        <constructor id="constructor_PrefixIncrement_9ED02493F3284F1C7E14159E1FB486E44EFACBE7">
                            <name>PrefixIncrement(DomObject* subject_)</name>
                            <syntax>public PrefixIncrement(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PrefixIncrement_3B4D1A0B64F9DB0F100DDB3962DA6AC432359CF0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203893">
                    <name>RangeForStatement</name>
                    <groupName>RangeForStatement</groupName>
                    <syntax> public class RangeForStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_RangeForStatement_57E7A7535F9C92CF526AFDD1F0D4670794795222">
                            <name>RangeForStatement(DomObject* typeExpr_, DomObject* id_, DomObject* container_, Statement* action_)</name>
                            <syntax>public RangeForStatement(DomObject* typeExpr_, DomObject* id_, DomObject* container_, Statement* action_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeExpr_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>container_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>action_</name>
                                    <type ref="type.2203843"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_RangeForStatement_41B21DC84F65DD51A9063B80B77ED127BF914D2B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_RangeForStatement_F60E0AC3DBCC0201404F903E827606D56EEFCA0D">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203782">
                    <name>Rem</name>
                    <groupName>Rem</groupName>
                    <syntax> public class Rem;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_Rem_E096A4C2C1D4E88D581CC75CCF03F8314CA201FE">
                            <name>Rem(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Rem(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Rem_DACEF65994A3EFD7A4FB48A7DA77C7BB98344705">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203851">
                    <name>ReturnStatement</name>
                    <groupName>ReturnStatement</groupName>
                    <syntax> public class ReturnStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_ReturnStatement_732BE4EA9A3E5E17B44648C08B1BE691079F903D">
                            <name>ReturnStatement(DomObject* expression_)</name>
                            <syntax>public ReturnStatement(DomObject* expression_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expression_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ReturnStatement_D9D1C2B0CDC1733E47DEBE4C05F21B62F5AE3A5F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ReturnStatement_1CEF02004856480C0E37E0A7BBB8A180F32306F9">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203929">
                    <name>RvalueRef</name>
                    <groupName>RvalueRef</groupName>
                    <syntax> public class RvalueRef;</syntax>
                    <baseClass ref="2203682"/>
                    <constructors>
                        <constructor id="constructor_RvalueRef_C850BD48D7191DB271CC8B042F31F85D91E83A0D">
                            <name>RvalueRef(DomObject* subject_)</name>
                            <syntax>public nothrow RvalueRef(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_RvalueRef_BCDBFBB4C211A5BF48F8469AE783D803BAFEDC26">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_RvalueRef_AB27ED472E64C64FE0013A2D27DC47D2F9ECA5F0">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203649">
                    <name>SByteType</name>
                    <groupName>SByteType</groupName>
                    <syntax> public class SByteType;</syntax>
                    <baseClass ref="2203634"/>
                    <constructors>
                        <constructor id="default_constructor_SByteType_E1FFD26EF6FB7EA54C3262FD8683FAED7FE2A7E2">
                            <name>SByteType()</name>
                            <syntax>public nothrow SByteType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SByteType_1EB5449A7EA6370A590CB85DD21E7E4655F03227">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203764">
                    <name>ShiftLeft</name>
                    <groupName>ShiftLeft</groupName>
                    <syntax> public class ShiftLeft;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_ShiftLeft_AAAB5549C228798366C5B43A7FCD7A4D26FEAEFE">
                            <name>ShiftLeft(DomObject* left_, DomObject* right_)</name>
                            <syntax>public ShiftLeft(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ShiftLeft_EB4CC737C0B0C2AC9C16B24B604539A7FB19D9D1">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203767">
                    <name>ShiftRight</name>
                    <groupName>ShiftRight</groupName>
                    <syntax> public class ShiftRight;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_ShiftRight_EB0F780EDEEFEB894514EEFE24F8A208DB24E751">
                            <name>ShiftRight(DomObject* left_, DomObject* right_)</name>
                            <syntax>public ShiftRight(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ShiftRight_1D90E3CCF113308E0F4289CB8C5A44C79160A1B7">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203655">
                    <name>ShortType</name>
                    <groupName>ShortType</groupName>
                    <syntax> public class ShortType;</syntax>
                    <baseClass ref="2203634"/>
                    <constructors>
                        <constructor id="default_constructor_ShortType_CBAD1184637ECF108C83860332EBCAAC270AD420">
                            <name>ShortType()</name>
                            <syntax>public nothrow ShortType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ShortType_60A135E86AC0A13E8ADBDE4384AE51F3802BEF56">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203806">
                    <name>SizeOf</name>
                    <groupName>SizeOf</groupName>
                    <syntax> public class SizeOf;</syntax>
                    <baseClass ref="2203689"/>
                    <constructors>
                        <constructor id="constructor_SizeOf_80EA00B08359A555AF76FF76C2F0C1A44F9C11A6">
                            <name>SizeOf(DomObject* subject_)</name>
                            <syntax>public SizeOf(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SizeOf_3B8A538C207F525B50CA40A9B1A7C83DAFFE5704">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_SizeOf_1CCAA2FBEAE9694C8F8F3F5EC34444159527E7EF">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203842">
                    <name>Statement</name>
                    <groupName>Statement</groupName>
                    <syntax>abstract public class Statement;</syntax>
                    <baseClass ref="2203682"/>
                    <constructors>
                        <constructor id="constructor_Statement_74B13AFABA362F759545E017C915BB60B0EBCDB2">
                            <name>Statement(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public Statement(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.2198358"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Label_Statement_D7E8D4477CF7D94F2C23541FCC40F45BB6AE38C5">
                            <name>Label() const</name>
                            <syntax>public const String&lt;uchar>&amp; Label() const;</syntax>
                            <returnType ref="type.2198358"/>
                        </function>
                        <function id="member_function_NoNewLine_Statement_C83E8D12172AD188ACD5C9EC1E66230C25656986">
                            <name>NoNewLine() const</name>
                            <syntax>public bool NoNewLine() const;</syntax>
                            <returnType ref="type.2197239"/>
                        </function>
                        <function id="member_function_SetLabel_Statement_AA2A73F102EFB3EBA16C5396EBC58C1BEF9A84FF">
                            <name>SetLabel(const String&lt;uchar>&amp; label_)</name>
                            <syntax>public void SetLabel(const String&lt;uchar>&amp; label_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>label_</name>
                                    <type ref="type.2198358"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetNoNewLine_Statement_DAF1937FBD23C9FC3C00C0F6879ECD17763639B8">
                            <name>SetNoNewLine()</name>
                            <syntax>public void SetNoNewLine();</syntax>
                        </function>
                    </functions>
                </class>
                <class id="2203773">
                    <name>Sub</name>
                    <groupName>Sub</groupName>
                    <syntax> public class Sub;</syntax>
                    <baseClass ref="2203728"/>
                    <constructors>
                        <constructor id="constructor_Sub_6E8C0D86F99A34B82B35757DE1B27D3E662887B3">
                            <name>Sub(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Sub(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Sub_D08EC79D2D95A13E6CC5F672A43B5C3A910CBD94">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203902">
                    <name>SwitchStatement</name>
                    <groupName>SwitchStatement</groupName>
                    <syntax> public class SwitchStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_SwitchStatement_5B5983EA00EC2FF44A1EB734B584D9FD8D3BE7E9">
                            <name>SwitchStatement(DomObject* condition_)</name>
                            <syntax>public SwitchStatement(DomObject* condition_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>condition_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SwitchStatement_7680211634D2C2A46D292370497409DFE3B35DFD">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddCase_SwitchStatement_145079D1FFDE578D8EEE71258ABAA0C81236AD41">
                            <name>AddCase(CaseStatement* caseS)</name>
                            <syntax>public void AddCase(CaseStatement* caseS);</syntax>
                            <parameters>
                                <parameter>
                                    <name>caseS</name>
                                    <type ref="type.2203897"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_SwitchStatement_33408582BE269AF5EFF205B07F476D187284C1CA">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetDefault_SwitchStatement_DCC7A782721DDBF0594739B6617BDBDD9BBCEF28">
                            <name>SetDefault(DefaultStatement* defaultS_)</name>
                            <syntax>public void SetDefault(DefaultStatement* defaultS_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>defaultS_</name>
                                    <type ref="type.2203900"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203833">
                    <name>TemplateId</name>
                    <groupName>TemplateId</groupName>
                    <syntax> public class TemplateId;</syntax>
                    <baseClass ref="2203682"/>
                    <constructors>
                        <constructor id="constructor_TemplateId_ED4A4C2FC2654243E0B2E689B5F1AC7AD019904C">
                            <name>TemplateId(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow TemplateId(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.2198358"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_TemplateId_A3C3493BCD2D26A0518B9AB047186E9D48037B9B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddTemplateArg_TemplateId_E13EA04BD4F2173FBE332CB288362C7457CE81E7">
                            <name>AddTemplateArg(DomObject* templateArg)</name>
                            <syntax>public void AddTemplateArg(DomObject* templateArg);</syntax>
                            <parameters>
                                <parameter>
                                    <name>templateArg</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_TemplateId_8249820E981760EF40A9186A229550FCEA9AF594">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Rank_TemplateId_A44A4F1B8285173E28F32247805DD64F60B354B5">
                            <name>Rank() const</name>
                            <syntax>public nothrow override int Rank() const;</syntax>
                            <returnType ref="type.2197244"/>
                        </function>
                    </functions>
                </class>
                <class id="2203821">
                    <name>This</name>
                    <groupName>This</groupName>
                    <syntax> public class This;</syntax>
                    <baseClass ref="2203689"/>
                    <constructors>
                        <constructor id="default_constructor_This_457D8657BA6727CEBBA3B226B5C5AE221FC6567F">
                            <name>This()</name>
                            <syntax>public This();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_This_4F1E23E7F738953B666A27C03250150B3F1059DA">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203911">
                    <name>ThrowStatement</name>
                    <groupName>ThrowStatement</groupName>
                    <syntax> public class ThrowStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_ThrowStatement_B47DBD2021DF645DB40647E4176E808A0230F26D">
                            <name>ThrowStatement(DomObject* expression_)</name>
                            <syntax>public ThrowStatement(DomObject* expression_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expression_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ThrowStatement_7392CE8B6D0F0FA6FAEC28E761FD393C39A03B8E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ThrowStatement_9A9B82A1A71E0BCCFCD9754567D23A4056861CE2">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203917">
                    <name>TryStatement</name>
                    <groupName>TryStatement</groupName>
                    <syntax> public class TryStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_TryStatement_EBC83DE64EB4CB6FD6F926871AA1EECA21192F75">
                            <name>TryStatement(CompoundStatement* tryBlock_)</name>
                            <syntax>public TryStatement(CompoundStatement* tryBlock_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>tryBlock_</name>
                                    <type ref="type.2203849"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_TryStatement_A89A3AA77E19E797C37720414B366D80A3C70BFF">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddCatch_TryStatement_7458A53970C51B0D699A7D988408F238B37BBD42">
                            <name>AddCatch(Catch* catch_)</name>
                            <syntax>public void AddCatch(Catch* catch_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>catch_</name>
                                    <type ref="type.2203915"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_TryStatement_641AA7A6822F4B0ABC7A80ACE7F355C9E84D0030">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203634">
                    <name>Type</name>
                    <groupName>Type</groupName>
                    <syntax>abstract public class Type;</syntax>
                    <baseClass ref="2203682"/>
                    <constructors>
                        <constructor id="constructor_Type_B303B86671D6CB6D5EEA32107CD9DDD13764D47B">
                            <name>Type(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow Type(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.2198358"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="2203809">
                    <name>TypeName</name>
                    <groupName>TypeName</groupName>
                    <syntax> public class TypeName;</syntax>
                    <baseClass ref="2203689"/>
                    <constructors>
                        <constructor id="constructor_TypeName_F996002831E5187DA6B02FCF91E526AF5A62A894">
                            <name>TypeName(DomObject* subject_)</name>
                            <syntax>public TypeName(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_TypeName_3199B1BBF3CB383BCD71810C515EFC584362301B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_TypeName_0B8E9CE526EE6810D2F4F902AF4089BB0B48EFAE">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203646">
                    <name>UCharType</name>
                    <groupName>UCharType</groupName>
                    <syntax> public class UCharType;</syntax>
                    <baseClass ref="2203634"/>
                    <constructors>
                        <constructor id="default_constructor_UCharType_55927AEB46DDBBB9673D48E0C4E528510BC0F76B">
                            <name>UCharType()</name>
                            <syntax>public nothrow UCharType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UCharType_19F6A00A1A7684639AC6C6CFF7CD4AA547C69AEA">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203664">
                    <name>UIntType</name>
                    <groupName>UIntType</groupName>
                    <syntax> public class UIntType;</syntax>
                    <baseClass ref="2203634"/>
                    <constructors>
                        <constructor id="default_constructor_UIntType_B7BFDBCEC6C8C967FC69F81DBA2CB8719639F76A">
                            <name>UIntType()</name>
                            <syntax>public nothrow UIntType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UIntType_4B2B5CF5613FE5AAEAC382E5405839777352740B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203670">
                    <name>ULongType</name>
                    <groupName>ULongType</groupName>
                    <syntax> public class ULongType;</syntax>
                    <baseClass ref="2203634"/>
                    <constructors>
                        <constructor id="default_constructor_ULongType_AF725CA8E9D472301292BCC031B9FBD6F950CC55">
                            <name>ULongType()</name>
                            <syntax>public nothrow ULongType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ULongType_3AE24932A279F74188F31E1C9432715CB35E2DD6">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203658">
                    <name>UShortType</name>
                    <groupName>UShortType</groupName>
                    <syntax> public class UShortType;</syntax>
                    <baseClass ref="2203634"/>
                    <constructors>
                        <constructor id="default_constructor_UShortType_71010419314BCE47091A9FCA172BC70F1EC65AE7">
                            <name>UShortType()</name>
                            <syntax>public nothrow UShortType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UShortType_6E436A39550867DD6AB5E0E86FD13FE955CD5F34">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203716">
                    <name>UnaryMinus</name>
                    <groupName>UnaryMinus</groupName>
                    <syntax> public class UnaryMinus;</syntax>
                    <baseClass ref="2203695"/>
                    <constructors>
                        <constructor id="constructor_UnaryMinus_2222612418F7A159AD9199788EA89A170B0B2D74">
                            <name>UnaryMinus(DomObject* subject_)</name>
                            <syntax>public UnaryMinus(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UnaryMinus_A3B80D54A36F6C9082B9A7227D400D24AE731A3C">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203713">
                    <name>UnaryPlus</name>
                    <groupName>UnaryPlus</groupName>
                    <syntax> public class UnaryPlus;</syntax>
                    <baseClass ref="2203695"/>
                    <constructors>
                        <constructor id="constructor_UnaryPlus_2B326BA9D6196DC0CA0D3A0219F961C5B92B7500">
                            <name>UnaryPlus(DomObject* subject_)</name>
                            <syntax>public UnaryPlus(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UnaryPlus_A2A49AB332F20D114CA806DEF99AA71AF43A3B70">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203938">
                    <name>Visitor</name>
                    <groupName>Visitor</groupName>
                    <syntax> public class Visitor;</syntax>
                    <functions>
                        <function id="function_group_Visit_C70DAD81AEA92968DDC755106A5EA0CE350437F1">
                            <name>Visit</name>
                            <overloads>
                                <overload id="member_function_Visit_Visitor_0789948E9F966221696C405170523CBD9D8FB7FE">
                                    <name>Visit(Add&amp; add)</name>
                                    <syntax>public virtual void Visit(Add&amp; add);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>add</name>
                                            <type ref="type.2203772"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B7FC29A95DB6FC426BB8F56BC1F3D0019AAD0009">
                                    <name>Visit(AddressOf&amp; addressOf)</name>
                                    <syntax>public virtual void Visit(AddressOf&amp; addressOf);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>addressOf</name>
                                            <type ref="type.2203706"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6790D02F10CB74718DCEA50BDC12AD124518A0E3">
                                    <name>Visit(Array&amp; array)</name>
                                    <syntax>public virtual void Visit(Array&amp; array);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>array</name>
                                            <type ref="type.2203937"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_41D1286C7468DD1834015190F77FD85AC277296E">
                                    <name>Visit(Arrow&amp; arrow)</name>
                                    <syntax>public virtual void Visit(Arrow&amp; arrow);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>arrow</name>
                                            <type ref="type.2203727"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A7D43685851CD2D781FBF4BFBAE233C22F62F317">
                                    <name>Visit(As&amp; as_)</name>
                                    <syntax>public virtual void Visit(As&amp; as_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>as_</name>
                                            <type ref="type.2203790"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_BB462344D9057BD5B402132DE8B40CDA457C4B0B">
                                    <name>Visit(AssertStatement&amp; assertStatement)</name>
                                    <syntax>public virtual void Visit(AssertStatement&amp; assertStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>assertStatement</name>
                                            <type ref="type.2203922"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0942547ABC6D83EC5E6E1357B2C0DEC1154E124C">
                                    <name>Visit(AssignmentStatement&amp; assignmentStatement)</name>
                                    <syntax>public virtual void Visit(AssignmentStatement&amp; assignmentStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>assignmentStatement</name>
                                            <type ref="type.2203886"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_28FD0EEDE7BEA0B60246063A5A870A61BAE9C3C1">
                                    <name>Visit(Base&amp; base_)</name>
                                    <syntax>public virtual void Visit(Base&amp; base_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>base_</name>
                                            <type ref="type.2203826"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_FF190CDC2B8BABD2EA2D03F221CA912E52221AF7">
                                    <name>Visit(BitAnd&amp; bitAnd)</name>
                                    <syntax>public virtual void Visit(BitAnd&amp; bitAnd);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>bitAnd</name>
                                            <type ref="type.2203745"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CF12672ACCBC04C669111FA2050B290BDAF6D3F5">
                                    <name>Visit(BitOr&amp; bitOr)</name>
                                    <syntax>public virtual void Visit(BitOr&amp; bitOr);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>bitOr</name>
                                            <type ref="type.2203739"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6357C2E9393348094047A2F1F1B79BD0C69E2EA9">
                                    <name>Visit(BitXor&amp; bitXor)</name>
                                    <syntax>public virtual void Visit(BitXor&amp; bitXor);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>bitXor</name>
                                            <type ref="type.2203742"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7B9481A99AF6A82796DAE60FA810FBBBFCD78D15">
                                    <name>Visit(BoolType&amp; boolType)</name>
                                    <syntax>public virtual void Visit(BoolType&amp; boolType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>boolType</name>
                                            <type ref="type.2203639"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_340CF7CF2AD5F18E8A21ED63D47D2699A0CC867A">
                                    <name>Visit(BreakStatement&amp; breakStatement)</name>
                                    <syntax>public virtual void Visit(BreakStatement&amp; breakStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>breakStatement</name>
                                            <type ref="type.2203868"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CEB478500603DD8B7BA7555807104710BCB1FAB5">
                                    <name>Visit(ByteType&amp; byteType)</name>
                                    <syntax>public virtual void Visit(ByteType&amp; byteType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>byteType</name>
                                            <type ref="type.2203654"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_DA46B59F81DC227014BE970630F322653229F511">
                                    <name>Visit(CaseStatement&amp; caseStatement)</name>
                                    <syntax>public virtual void Visit(CaseStatement&amp; caseStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>caseStatement</name>
                                            <type ref="type.2203898"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7B00DB5C66D1D6768BC33EEA51D05E71D6E4821C">
                                    <name>Visit(Cast&amp; cast_)</name>
                                    <syntax>public virtual void Visit(Cast&amp; cast_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>cast_</name>
                                            <type ref="type.2203814"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B16EFB072A13B89C76B9C2295F1F3F0D865105BE">
                                    <name>Visit(Catch&amp; catch_)</name>
                                    <syntax>public virtual void Visit(Catch&amp; catch_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>catch_</name>
                                            <type ref="type.2203916"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_68142FC5BE67DDC4F9E18C83D07B419B4A525769">
                                    <name>Visit(CharType&amp; charType)</name>
                                    <syntax>public virtual void Visit(CharType&amp; charType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>charType</name>
                                            <type ref="type.2203642"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A64912B10DAD6052727DBD1734646CA5C10EB926">
                                    <name>Visit(Complement&amp; complement)</name>
                                    <syntax>public virtual void Visit(Complement&amp; complement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>complement</name>
                                            <type ref="type.2203721"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CD32C031A3BFE406065C0EB275CFE1297952E7EC">
                                    <name>Visit(CompoundStatement&amp; compoundStatement)</name>
                                    <syntax>public virtual void Visit(CompoundStatement&amp; compoundStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>compoundStatement</name>
                                            <type ref="type.2203850"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B41616607C59BC152935C07B7940B0F9810D3E66">
                                    <name>Visit(Conjunction&amp; conjunction)</name>
                                    <syntax>public virtual void Visit(Conjunction&amp; conjunction);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>conjunction</name>
                                            <type ref="type.2203736"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_2607F2E2D5292BB10ECBD838EC7281E921B39E4F">
                                    <name>Visit(Const&amp; const_)</name>
                                    <syntax>public virtual void Visit(Const&amp; const_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>const_</name>
                                            <type ref="type.2203925"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_50FED16EC5D9D1A2096DE87C271380BAADBD5D08">
                                    <name>Visit(Construct&amp; construct_)</name>
                                    <syntax>public virtual void Visit(Construct&amp; construct_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>construct_</name>
                                            <type ref="type.2203817"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_88B39263F414C14FE79B8B038B258905DCE4F5E0">
                                    <name>Visit(ConstructionStatement&amp; constructionStatement)</name>
                                    <syntax>public virtual void Visit(ConstructionStatement&amp; constructionStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>constructionStatement</name>
                                            <type ref="type.2203877"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0BB172B597CB17C3BF8C85431A247B95B81241B6">
                                    <name>Visit(ContinueStatement&amp; continueStatement)</name>
                                    <syntax>public virtual void Visit(ContinueStatement&amp; continueStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>continueStatement</name>
                                            <type ref="type.2203871"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_03A4710A1C39ED239A767F3AA291FB000CD680D6">
                                    <name>Visit(DefaultStatement&amp; defaultStatement)</name>
                                    <syntax>public virtual void Visit(DefaultStatement&amp; defaultStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>defaultStatement</name>
                                            <type ref="type.2203901"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_D37042BF2C3DD0756855A3B557B3058902D983EC">
                                    <name>Visit(DeleteStatement&amp; deleteStatement)</name>
                                    <syntax>public virtual void Visit(DeleteStatement&amp; deleteStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>deleteStatement</name>
                                            <type ref="type.2203880"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_280382812463BCAE665FEA8AB2E11C7661B82202">
                                    <name>Visit(Deref&amp; deref)</name>
                                    <syntax>public virtual void Visit(Deref&amp; deref);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>deref</name>
                                            <type ref="type.2203703"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CAB491A63162CBFC893C3DC7A71A90A20F3D6126">
                                    <name>Visit(DestroyStatement&amp; destroyStatement)</name>
                                    <syntax>public virtual void Visit(DestroyStatement&amp; destroyStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>destroyStatement</name>
                                            <type ref="type.2203883"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_D241765948E494F31661F9D086C8484B37093056">
                                    <name>Visit(Disjunction&amp; disjunction)</name>
                                    <syntax>public virtual void Visit(Disjunction&amp; disjunction);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>disjunction</name>
                                            <type ref="type.2203733"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_219C0CA351D8AB2210A0775409DBC05DB244635E">
                                    <name>Visit(Div&amp; div)</name>
                                    <syntax>public virtual void Visit(Div&amp; div);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>div</name>
                                            <type ref="type.2203781"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_DE75BE2E5DCA79E57D3A95C0D9CD5024C3744FA8">
                                    <name>Visit(DoStatement&amp; doStatement)</name>
                                    <syntax>public virtual void Visit(DoStatement&amp; doStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>doStatement</name>
                                            <type ref="type.2203862"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_91ED66CADEF340BBCD3088D943821A79698EF509">
                                    <name>Visit(Dot&amp; dot)</name>
                                    <syntax>public virtual void Visit(Dot&amp; dot);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>dot</name>
                                            <type ref="type.2203724"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_1DC966AA1A2C3ABD5E1BF1CA8B0C886981B6BD8B">
                                    <name>Visit(DoubleType&amp; doubleType)</name>
                                    <syntax>public virtual void Visit(DoubleType&amp; doubleType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>doubleType</name>
                                            <type ref="type.2203678"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8FD55B7DC51BB803C49A652985306788516ED133">
                                    <name>Visit(EmptyStatement&amp; emptyStatement)</name>
                                    <syntax>public virtual void Visit(EmptyStatement&amp; emptyStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>emptyStatement</name>
                                            <type ref="type.2203892"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E8002EA1632204B8ABBB920FD571F561B04A1FB2">
                                    <name>Visit(Equal&amp; equal)</name>
                                    <syntax>public virtual void Visit(Equal&amp; equal);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>equal</name>
                                            <type ref="type.2203748"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8D7E58DA70FAC989C8A1EF654B03BA5FD0879588">
                                    <name>Visit(ExpressionStatement&amp; expressionStatement)</name>
                                    <syntax>public virtual void Visit(ExpressionStatement&amp; expressionStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>expressionStatement</name>
                                            <type ref="type.2203889"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B21129F5AFD85D32927D89AFC8148C2AC1073CF1">
                                    <name>Visit(FloatType&amp; floatType)</name>
                                    <syntax>public virtual void Visit(FloatType&amp; floatType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>floatType</name>
                                            <type ref="type.2203675"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6CBC3B42FA2FE2CE6F52933429CB696240B71015">
                                    <name>Visit(ForStatement&amp; forStatement)</name>
                                    <syntax>public virtual void Visit(ForStatement&amp; forStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>forStatement</name>
                                            <type ref="type.2203865"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_97D12C3A68DF35D6D2F0B8601334A3BB67D44F7F">
                                    <name>Visit(GotoCaseStatement&amp; gotoCaseStatement)</name>
                                    <syntax>public virtual void Visit(GotoCaseStatement&amp; gotoCaseStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>gotoCaseStatement</name>
                                            <type ref="type.2203907"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B5EF70FF27DE9081BA03A98701E9EFF6FC89C2F1">
                                    <name>Visit(GotoDefaultStatement&amp; gotoDefaultStatement)</name>
                                    <syntax>public virtual void Visit(GotoDefaultStatement&amp; gotoDefaultStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>gotoDefaultStatement</name>
                                            <type ref="type.2203910"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0701E2DC68AFFA096276B3B8836FB4C40FD84D60">
                                    <name>Visit(GotoStatement&amp; gotoStatement)</name>
                                    <syntax>public virtual void Visit(GotoStatement&amp; gotoStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>gotoStatement</name>
                                            <type ref="type.2203874"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_BDCB831141529F121755E5E8400EB43264D368B6">
                                    <name>Visit(Greater&amp; greater)</name>
                                    <syntax>public virtual void Visit(Greater&amp; greater);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>greater</name>
                                            <type ref="type.2203757"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_48EB4C9C696CA0D9239EFCB0654A0CA0A99C1705">
                                    <name>Visit(GreaterOrEqual&amp; greaterOrEqual)</name>
                                    <syntax>public virtual void Visit(GreaterOrEqual&amp; greaterOrEqual);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>greaterOrEqual</name>
                                            <type ref="type.2203763"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E0769B3932F3EB98F43008BAAE46F34297C364D8">
                                    <name>Visit(Identifier&amp; identifier)</name>
                                    <syntax>public virtual void Visit(Identifier&amp; identifier);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>identifier</name>
                                            <type ref="type.2203829"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7D88F1D45BD30EF66543B910BA537741C5A19012">
                                    <name>Visit(IfStatement&amp; ifStatement)</name>
                                    <syntax>public virtual void Visit(IfStatement&amp; ifStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ifStatement</name>
                                            <type ref="type.2203856"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_5CB8643757D700752CD9D5EB41CEDF0A2D11D8C6">
                                    <name>Visit(Indexing&amp; indexing)</name>
                                    <syntax>public virtual void Visit(Indexing&amp; indexing);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>indexing</name>
                                            <type ref="type.2203793"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A2C783612A56E83BC0FE75009029220D1B6F0B97">
                                    <name>Visit(IntType&amp; intType)</name>
                                    <syntax>public virtual void Visit(IntType&amp; intType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>intType</name>
                                            <type ref="type.2203663"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_967D0A92822BEDDB877FB771FB4B930354CC4851">
                                    <name>Visit(Invoke&amp; invoke)</name>
                                    <syntax>public virtual void Visit(Invoke&amp; invoke);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>invoke</name>
                                            <type ref="type.2203796"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CF54F1ABDFD1D883A5EB26F11992FA6EDE3F5769">
                                    <name>Visit(Is&amp; is_)</name>
                                    <syntax>public virtual void Visit(Is&amp; is_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>is_</name>
                                            <type ref="type.2203787"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_BCBDF8A932AC3ACAC8B2F13D4249690C7EDADE9B">
                                    <name>Visit(Less&amp; less)</name>
                                    <syntax>public virtual void Visit(Less&amp; less);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>less</name>
                                            <type ref="type.2203754"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_AFDF0C6CD98664ADE9EC7B2A47D8DDEF4C73149C">
                                    <name>Visit(LessOrEqual&amp; lessOrEqual)</name>
                                    <syntax>public virtual void Visit(LessOrEqual&amp; lessOrEqual);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>lessOrEqual</name>
                                            <type ref="type.2203760"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CE16541429EE3ADA4F6F7CB29B42807BF3C7900A">
                                    <name>Visit(Literal&amp; literal)</name>
                                    <syntax>public virtual void Visit(Literal&amp; literal);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>literal</name>
                                            <type ref="type.2203841"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_24E049654FA4850CC5920E9D919C9165C6C2C334">
                                    <name>Visit(LongType&amp; longType)</name>
                                    <syntax>public virtual void Visit(LongType&amp; longType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>longType</name>
                                            <type ref="type.2203669"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8D7DC3C0459344F0B1C69B655D48B70061B0E37B">
                                    <name>Visit(LvalueRef&amp; lvalueRef)</name>
                                    <syntax>public virtual void Visit(LvalueRef&amp; lvalueRef);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>lvalueRef</name>
                                            <type ref="type.2203928"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_3A90620F108D9068E9F8EC4DE928F62004CE074F">
                                    <name>Visit(Mul&amp; mul)</name>
                                    <syntax>public virtual void Visit(Mul&amp; mul);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>mul</name>
                                            <type ref="type.2203778"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_319541A4B279C09FF0A083970339A6C516B007F2">
                                    <name>Visit(New&amp; new_)</name>
                                    <syntax>public virtual void Visit(New&amp; new_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>new_</name>
                                            <type ref="type.2203820"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_F8BD2118606D1E6BE7F5BC4E0CBD6D475519BA04">
                                    <name>Visit(Not&amp; not_)</name>
                                    <syntax>public virtual void Visit(Not&amp; not_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>not_</name>
                                            <type ref="type.2203700"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C1BF57DDE1351085C0208B72ED3A45B18382AF49">
                                    <name>Visit(NotEqual&amp; notEqual)</name>
                                    <syntax>public virtual void Visit(NotEqual&amp; notEqual);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>notEqual</name>
                                            <type ref="type.2203751"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CC914D02BF74C000FAB3E92007E660C3C34350C2">
                                    <name>Visit(Pointer&amp; pointer)</name>
                                    <syntax>public virtual void Visit(Pointer&amp; pointer);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pointer</name>
                                            <type ref="type.2203934"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CA9CC61841F4D3070F4044760118D8AC9D10D468">
                                    <name>Visit(PostfixDecrement&amp; postfixDecrement)</name>
                                    <syntax>public virtual void Visit(PostfixDecrement&amp; postfixDecrement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>postfixDecrement</name>
                                            <type ref="type.2203805"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E5DC808B60F46AAD97FF40F07EC3315FA1EC95E2">
                                    <name>Visit(PostfixIncrement&amp; postfixIncrement)</name>
                                    <syntax>public virtual void Visit(PostfixIncrement&amp; postfixIncrement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>postfixIncrement</name>
                                            <type ref="type.2203802"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E356A607D1E00821F4C223AB6AEDB8F3AE34D24D">
                                    <name>Visit(PrefixDecrement&amp; prefixDecrement)</name>
                                    <syntax>public virtual void Visit(PrefixDecrement&amp; prefixDecrement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>prefixDecrement</name>
                                            <type ref="type.2203712"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7BF2D82E33C18E26BB92077FFE1DC12000C2B616">
                                    <name>Visit(PrefixIncrement&amp; prefixIncrement)</name>
                                    <syntax>public virtual void Visit(PrefixIncrement&amp; prefixIncrement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>prefixIncrement</name>
                                            <type ref="type.2203709"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_9AA520081FF6F746884A3FA221A1AA6515048CEF">
                                    <name>Visit(RangeForStatement&amp; rangeForStatement)</name>
                                    <syntax>public virtual void Visit(RangeForStatement&amp; rangeForStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rangeForStatement</name>
                                            <type ref="type.2203895"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_EED4C734205C9BA3DE800A56D6CABFA6F704A9DA">
                                    <name>Visit(Rem&amp; rem)</name>
                                    <syntax>public virtual void Visit(Rem&amp; rem);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rem</name>
                                            <type ref="type.2203784"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A55020B5383EA9D46EA1D284637498256019BBB1">
                                    <name>Visit(ReturnStatement&amp; returnStatement)</name>
                                    <syntax>public virtual void Visit(ReturnStatement&amp; returnStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>returnStatement</name>
                                            <type ref="type.2203853"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_19CD26E83F19DF1389FDFF4B063CA82EAC7B34D9">
                                    <name>Visit(RvalueRef&amp; rvalueRef)</name>
                                    <syntax>public virtual void Visit(RvalueRef&amp; rvalueRef);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rvalueRef</name>
                                            <type ref="type.2203931"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_3B8937371654B5334421B5811EE92AAB09C12F35">
                                    <name>Visit(SByteType&amp; sbyteType)</name>
                                    <syntax>public virtual void Visit(SByteType&amp; sbyteType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>sbyteType</name>
                                            <type ref="type.2203651"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_ECB50C7731E255C02E6A983C68A2F2C772F76D29">
                                    <name>Visit(ShiftLeft&amp; shiftLeft)</name>
                                    <syntax>public virtual void Visit(ShiftLeft&amp; shiftLeft);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>shiftLeft</name>
                                            <type ref="type.2203766"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_AC20D5262DBCB8A077E9DC7BFF22F5E5DCB496E8">
                                    <name>Visit(ShiftRight&amp; shiftRight)</name>
                                    <syntax>public virtual void Visit(ShiftRight&amp; shiftRight);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>shiftRight</name>
                                            <type ref="type.2203769"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_9C1B883CE273D6A8287E5A1DD0320B851B803796">
                                    <name>Visit(ShortType&amp; shortType)</name>
                                    <syntax>public virtual void Visit(ShortType&amp; shortType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>shortType</name>
                                            <type ref="type.2203657"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_1D11CD37D9E3C054585364E3F146C70A8A2CFD53">
                                    <name>Visit(SizeOf&amp; sizeOf)</name>
                                    <syntax>public virtual void Visit(SizeOf&amp; sizeOf);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>sizeOf</name>
                                            <type ref="type.2203808"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_075400A45DC5C1534DCBCF2382E11ADA1D15AA6E">
                                    <name>Visit(Sub&amp; sub)</name>
                                    <syntax>public virtual void Visit(Sub&amp; sub);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>sub</name>
                                            <type ref="type.2203775"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C35482BE7A44D7BC07AD6314B5DBA83C79E98E75">
                                    <name>Visit(SwitchStatement&amp; switchStatement)</name>
                                    <syntax>public virtual void Visit(SwitchStatement&amp; switchStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>switchStatement</name>
                                            <type ref="type.2203904"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CE6AEA08FEDB45DBDC2EBBC60F33EBC0086E18A7">
                                    <name>Visit(TemplateId&amp; templateId)</name>
                                    <syntax>public virtual void Visit(TemplateId&amp; templateId);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>templateId</name>
                                            <type ref="type.2203835"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B22620481E19E5DF0AC49B9DA76C8098A8642C19">
                                    <name>Visit(This&amp; this_)</name>
                                    <syntax>public virtual void Visit(This&amp; this_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>this_</name>
                                            <type ref="type.2203823"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E47BC201FE16901F71609542EE03226428CFCF00">
                                    <name>Visit(ThrowStatement&amp; throwStatement)</name>
                                    <syntax>public virtual void Visit(ThrowStatement&amp; throwStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>throwStatement</name>
                                            <type ref="type.2203913"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_1951CFAEB61C83AF7A78ABA6468CF8B13B37C438">
                                    <name>Visit(TryStatement&amp; tryStatement)</name>
                                    <syntax>public virtual void Visit(TryStatement&amp; tryStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>tryStatement</name>
                                            <type ref="type.2203919"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E4762E1F0B8D6BC1B131E3247AA55873AAFA1B01">
                                    <name>Visit(TypeName&amp; typeName)</name>
                                    <syntax>public virtual void Visit(TypeName&amp; typeName);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>typeName</name>
                                            <type ref="type.2203811"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_18D081EB3D72FB1E970F1FB84537C1988DB70E4E">
                                    <name>Visit(UCharType&amp; ucharType)</name>
                                    <syntax>public virtual void Visit(UCharType&amp; ucharType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ucharType</name>
                                            <type ref="type.2203648"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C51190D1D5AB7CF8250E4867961649FEC0A2CB57">
                                    <name>Visit(UIntType&amp; uintType)</name>
                                    <syntax>public virtual void Visit(UIntType&amp; uintType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>uintType</name>
                                            <type ref="type.2203666"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_FBF14EB9917578F9705C98DF7563B78F1816E5A5">
                                    <name>Visit(ULongType&amp; ulongType)</name>
                                    <syntax>public virtual void Visit(ULongType&amp; ulongType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ulongType</name>
                                            <type ref="type.2203672"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_1DFED039450AED76833BB98F61404A434CF55B50">
                                    <name>Visit(UShortType&amp; ushortType)</name>
                                    <syntax>public virtual void Visit(UShortType&amp; ushortType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ushortType</name>
                                            <type ref="type.2203660"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_469A13B8811792D7388816F01766EA0C559BE941">
                                    <name>Visit(UnaryMinus&amp; unaryMinus)</name>
                                    <syntax>public virtual void Visit(UnaryMinus&amp; unaryMinus);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>unaryMinus</name>
                                            <type ref="type.2203718"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8AC89CD7B8B94961FC77DA51C152384BA205F1D6">
                                    <name>Visit(UnaryPlus&amp; unaryPlus)</name>
                                    <syntax>public virtual void Visit(UnaryPlus&amp; unaryPlus);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>unaryPlus</name>
                                            <type ref="type.2203715"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C2A9BEC66BA42E6CE859781327EFA651C556105C">
                                    <name>Visit(VoidType&amp; voidType)</name>
                                    <syntax>public virtual void Visit(VoidType&amp; voidType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>voidType</name>
                                            <type ref="type.2203681"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B75FAB11477E12DD5D6F09B5C0C7D1FA5D38FC0C">
                                    <name>Visit(WCharType&amp; wcharType)</name>
                                    <syntax>public virtual void Visit(WCharType&amp; wcharType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>wcharType</name>
                                            <type ref="type.2203645"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_32F344C982BD5DB73A8E9DEA06A52C52016D2866">
                                    <name>Visit(WhileStatement&amp; whileStatement)</name>
                                    <syntax>public virtual void Visit(WhileStatement&amp; whileStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>whileStatement</name>
                                            <type ref="type.2203859"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="2203679">
                    <name>VoidType</name>
                    <groupName>VoidType</groupName>
                    <syntax> public class VoidType;</syntax>
                    <baseClass ref="2203634"/>
                    <constructors>
                        <constructor id="default_constructor_VoidType_C39A19C686824E5CFA431F1CD2606B709CB0B187">
                            <name>VoidType()</name>
                            <syntax>public nothrow VoidType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_VoidType_6075A55A783CD2850F7E92E14CCA3BC8DEB4BB76">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203643">
                    <name>WCharType</name>
                    <groupName>WCharType</groupName>
                    <syntax> public class WCharType;</syntax>
                    <baseClass ref="2203634"/>
                    <constructors>
                        <constructor id="default_constructor_WCharType_566EC0706401885DADD0AFFAB38275BEF7A6440A">
                            <name>WCharType()</name>
                            <syntax>public nothrow WCharType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_WCharType_4FFA2F9556CE4E37E83680CEBDBBBD1838B4AE30">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="2203857">
                    <name>WhileStatement</name>
                    <groupName>WhileStatement</groupName>
                    <syntax> public class WhileStatement;</syntax>
                    <baseClass ref="2203842"/>
                    <constructors>
                        <constructor id="constructor_WhileStatement_E0EAB2EED2F6A4A12324621B9BAEADC3B92829A7">
                            <name>WhileStatement(DomObject* condition_, Statement* statement_)</name>
                            <syntax>public WhileStatement(DomObject* condition_, Statement* statement_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>condition_</name>
                                    <type ref="type.2203683"/>
                                </parameter>
                                <parameter>
                                    <name>statement_</name>
                                    <type ref="type.2203843"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_WhileStatement_5B9D2F6C9907076FAA595EE6CA228E7181CF1D0F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.2203940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_WhileStatement_B54C9BDD7F57D7367ACDB8B677F47423254BFD71">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.2197582"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_GetBinOpRank_1C24D42F4A9DC2C2883C43076F0E2683AC00C593">
                    <name>GetBinOpRank(Operator op)</name>
                    <syntax>public nothrow int GetBinOpRank(Operator op);</syntax>
                    <parameters>
                        <parameter>
                            <name>op</name>
                            <type ref="2203688"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.2197244"/>
                </function>
                <function id="function_MakeBinOpName_7116D8612E30043694F7E2D7E0F09C829642681B">
                    <name>MakeBinOpName(Operator op)</name>
                    <syntax>public nothrow String&lt;char> MakeBinOpName(Operator op);</syntax>
                    <parameters>
                        <parameter>
                            <name>op</name>
                            <type ref="2203688"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.2198265"/>
                </function>
                <function id="function_MakePostfixOpName_C35EAB3DFB07FEA5D4A0FBF1924F51852EE04E25">
                    <name>MakePostfixOpName(Operator op)</name>
                    <syntax>public nothrow String&lt;char> MakePostfixOpName(Operator op);</syntax>
                    <parameters>
                        <parameter>
                            <name>op</name>
                            <type ref="2203688"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.2198265"/>
                </function>
                <function id="function_MakePrefixOpName_9C5BA91466A36EBDE9324B32691A9107D010E2BA">
                    <name>MakePrefixOpName(Operator op)</name>
                    <syntax>public nothrow String&lt;char> MakePrefixOpName(Operator op);</syntax>
                    <parameters>
                        <parameter>
                            <name>op</name>
                            <type ref="2203688"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.2198265"/>
                </function>
                <function id="function_op_eq_563965FE6E3299477616A93C6AA10F266ED8038F">
                    <name>operator==(Operator left, Operator right)</name>
                    <syntax>public bool operator==(Operator left, Operator right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="2203688"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="2203688"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.2197239"/>
                </function>
            </functions>
            <enumerations>
                <enumeration id="2203688">
                    <name>Operator</name>
                    <syntax>public enum Operator;</syntax>
                    <underlyingType ref="type.2197244"/>
                    <enumConstant>
                        <name>disjunction</name>
                        <value>0</value>
                    </enumConstant>
                    <enumConstant>
                        <name>conjunction</name>
                        <value>1</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bitOr</name>
                        <value>2</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bitXor</name>
                        <value>3</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bitAnd</name>
                        <value>4</value>
                    </enumConstant>
                    <enumConstant>
                        <name>equal</name>
                        <value>5</value>
                    </enumConstant>
                    <enumConstant>
                        <name>notEqual</name>
                        <value>6</value>
                    </enumConstant>
                    <enumConstant>
                        <name>less</name>
                        <value>7</value>
                    </enumConstant>
                    <enumConstant>
                        <name>greater</name>
                        <value>8</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lessOrEqual</name>
                        <value>9</value>
                    </enumConstant>
                    <enumConstant>
                        <name>greaterOrEqual</name>
                        <value>10</value>
                    </enumConstant>
                    <enumConstant>
                        <name>shiftLeft</name>
                        <value>11</value>
                    </enumConstant>
                    <enumConstant>
                        <name>shiftRight</name>
                        <value>12</value>
                    </enumConstant>
                    <enumConstant>
                        <name>add</name>
                        <value>13</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sub</name>
                        <value>14</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mul</name>
                        <value>15</value>
                    </enumConstant>
                    <enumConstant>
                        <name>div</name>
                        <value>16</value>
                    </enumConstant>
                    <enumConstant>
                        <name>rem</name>
                        <value>17</value>
                    </enumConstant>
                    <enumConstant>
                        <name>not_</name>
                        <value>18</value>
                    </enumConstant>
                    <enumConstant>
                        <name>deref</name>
                        <value>19</value>
                    </enumConstant>
                    <enumConstant>
                        <name>addressOf</name>
                        <value>20</value>
                    </enumConstant>
                    <enumConstant>
                        <name>increment</name>
                        <value>21</value>
                    </enumConstant>
                    <enumConstant>
                        <name>decrement</name>
                        <value>22</value>
                    </enumConstant>
                    <enumConstant>
                        <name>unaryPlus</name>
                        <value>23</value>
                    </enumConstant>
                    <enumConstant>
                        <name>unaryMinus</name>
                        <value>24</value>
                    </enumConstant>
                    <enumConstant>
                        <name>complement</name>
                        <value>25</value>
                    </enumConstant>
                    <enumConstant>
                        <name>is_</name>
                        <value>26</value>
                    </enumConstant>
                    <enumConstant>
                        <name>as_</name>
                        <value>27</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
    </namespaces>
    <types>
        <type id="2203770">
            <name>Add</name>
        </type>
        <type derived="true" id="type.2203772">
            <name>Add&amp;</name>
            <content>
                <baseType ref="2203770"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203771">
            <name>Add*</name>
            <content>
                <baseType ref="2203770"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203704">
            <name>AddressOf</name>
        </type>
        <type derived="true" id="type.2203706">
            <name>AddressOf&amp;</name>
            <content>
                <baseType ref="2203704"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.697">
            <name>AddressOf&amp;&amp;</name>
            <content>
                <baseType ref="2203704"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203705">
            <name>AddressOf*</name>
            <content>
                <baseType ref="2203704"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203935">
            <name>Array</name>
        </type>
        <type derived="true" id="type.2203937">
            <name>Array&amp;</name>
            <content>
                <baseType ref="2203935"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203936">
            <name>Array*</name>
            <content>
                <baseType ref="2203935"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203725">
            <name>Arrow</name>
        </type>
        <type derived="true" id="type.2203727">
            <name>Arrow&amp;</name>
            <content>
                <baseType ref="2203725"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203726">
            <name>Arrow*</name>
            <content>
                <baseType ref="2203725"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203788">
            <name>As</name>
        </type>
        <type derived="true" id="type.2203790">
            <name>As&amp;</name>
            <content>
                <baseType ref="2203788"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203789">
            <name>As*</name>
            <content>
                <baseType ref="2203788"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203920">
            <name>AssertStatement</name>
        </type>
        <type derived="true" id="type.2203922">
            <name>AssertStatement&amp;</name>
            <content>
                <baseType ref="2203920"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.769">
            <name>AssertStatement&amp;&amp;</name>
            <content>
                <baseType ref="2203920"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203921">
            <name>AssertStatement*</name>
            <content>
                <baseType ref="2203920"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203884">
            <name>AssignmentStatement</name>
        </type>
        <type derived="true" id="type.2203886">
            <name>AssignmentStatement&amp;</name>
            <content>
                <baseType ref="2203884"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203885">
            <name>AssignmentStatement*</name>
            <content>
                <baseType ref="2203884"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203824">
            <name>Base</name>
        </type>
        <type derived="true" id="type.2203826">
            <name>Base&amp;</name>
            <content>
                <baseType ref="2203824"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203825">
            <name>Base*</name>
            <content>
                <baseType ref="2203824"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203728">
            <name>BinaryExpression</name>
        </type>
        <type derived="true" id="type.2203730">
            <name>BinaryExpression&amp;</name>
            <content>
                <baseType ref="2203728"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203729">
            <name>BinaryExpression*</name>
            <content>
                <baseType ref="2203728"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204502">
            <name>BinaryExpression*&amp;</name>
            <content>
                <baseType ref="2203728"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204501">
            <name>BinaryExpression**</name>
            <content>
                <baseType ref="2203728"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203743">
            <name>BitAnd</name>
        </type>
        <type derived="true" id="type.2203745">
            <name>BitAnd&amp;</name>
            <content>
                <baseType ref="2203743"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203744">
            <name>BitAnd*</name>
            <content>
                <baseType ref="2203743"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203737">
            <name>BitOr</name>
        </type>
        <type derived="true" id="type.2203739">
            <name>BitOr&amp;</name>
            <content>
                <baseType ref="2203737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203738">
            <name>BitOr*</name>
            <content>
                <baseType ref="2203737"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203740">
            <name>BitXor</name>
        </type>
        <type derived="true" id="type.2203742">
            <name>BitXor&amp;</name>
            <content>
                <baseType ref="2203740"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203741">
            <name>BitXor*</name>
            <content>
                <baseType ref="2203740"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203637">
            <name>BoolType</name>
        </type>
        <type derived="true" id="type.2203639">
            <name>BoolType&amp;</name>
            <content>
                <baseType ref="2203637"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203638">
            <name>BoolType*</name>
            <content>
                <baseType ref="2203637"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203866">
            <name>BreakStatement</name>
        </type>
        <type derived="true" id="type.2203868">
            <name>BreakStatement&amp;</name>
            <content>
                <baseType ref="2203866"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203867">
            <name>BreakStatement*</name>
            <content>
                <baseType ref="2203866"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2199027" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="2199316"/>
                <argumentType ref="type.2198998"/>
            </content>
        </type>
        <type derived="true" id="type.457">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.2199027"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199185" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="2199316"/>
                <argumentType ref="2197859"/>
            </content>
        </type>
        <type derived="true" id="type.466">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.2199185"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199370" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="2199316"/>
                <argumentType ref="2197880"/>
            </content>
        </type>
        <type derived="true" id="type.480">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.2199370"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="2203652">
            <name>ByteType</name>
        </type>
        <type derived="true" id="type.2203654">
            <name>ByteType&amp;</name>
            <content>
                <baseType ref="2203652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203653">
            <name>ByteType*</name>
            <content>
                <baseType ref="2203652"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203896">
            <name>CaseStatement</name>
        </type>
        <type derived="true" id="type.2203898">
            <name>CaseStatement&amp;</name>
            <content>
                <baseType ref="2203896"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203897">
            <name>CaseStatement*</name>
            <content>
                <baseType ref="2203896"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204528">
            <name>CaseStatement*&amp;</name>
            <content>
                <baseType ref="2203896"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204530">
            <name>CaseStatement*&amp;&amp;</name>
            <content>
                <baseType ref="2203896"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204529">
            <name>CaseStatement**</name>
            <content>
                <baseType ref="2203896"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203812">
            <name>Cast</name>
        </type>
        <type derived="true" id="type.2203814">
            <name>Cast&amp;</name>
            <content>
                <baseType ref="2203812"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203813">
            <name>Cast*</name>
            <content>
                <baseType ref="2203812"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203914">
            <name>Catch</name>
        </type>
        <type derived="true" id="type.2203916">
            <name>Catch&amp;</name>
            <content>
                <baseType ref="2203914"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203915">
            <name>Catch*</name>
            <content>
                <baseType ref="2203914"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204546">
            <name>Catch*&amp;</name>
            <content>
                <baseType ref="2203914"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204548">
            <name>Catch*&amp;&amp;</name>
            <content>
                <baseType ref="2203914"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204547">
            <name>Catch**</name>
            <content>
                <baseType ref="2203914"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203640">
            <name>CharType</name>
        </type>
        <type derived="true" id="type.2203642">
            <name>CharType&amp;</name>
            <content>
                <baseType ref="2203640"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203641">
            <name>CharType*</name>
            <content>
                <baseType ref="2203640"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2197582">
            <name>CodeFormatter&amp;</name>
            <content>
                <baseType ref="2197580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.678">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="2197580"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="2203719">
            <name>Complement</name>
        </type>
        <type derived="true" id="type.2203721">
            <name>Complement&amp;</name>
            <content>
                <baseType ref="2203719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.712">
            <name>Complement&amp;&amp;</name>
            <content>
                <baseType ref="2203719"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203720">
            <name>Complement*</name>
            <content>
                <baseType ref="2203719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203848">
            <name>CompoundStatement</name>
        </type>
        <type derived="true" id="type.2203850">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="2203848"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.358">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="2203848"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203849">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="2203848"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.357">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="2203848"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204544">
            <name>CompoundStatement*&amp;</name>
            <content>
                <baseType ref="2203848"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204543">
            <name>CompoundStatement**</name>
            <content>
                <baseType ref="2203848"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203734">
            <name>Conjunction</name>
        </type>
        <type derived="true" id="type.2203736">
            <name>Conjunction&amp;</name>
            <content>
                <baseType ref="2203734"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203735">
            <name>Conjunction*</name>
            <content>
                <baseType ref="2203734"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203923">
            <name>Const</name>
        </type>
        <type derived="true" id="type.2203925">
            <name>Const&amp;</name>
            <content>
                <baseType ref="2203923"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.772">
            <name>Const&amp;&amp;</name>
            <content>
                <baseType ref="2203923"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203924">
            <name>Const*</name>
            <content>
                <baseType ref="2203923"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203815">
            <name>Construct</name>
        </type>
        <type derived="true" id="type.2203817">
            <name>Construct&amp;</name>
            <content>
                <baseType ref="2203815"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.730">
            <name>Construct&amp;&amp;</name>
            <content>
                <baseType ref="2203815"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203816">
            <name>Construct*</name>
            <content>
                <baseType ref="2203815"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203875">
            <name>ConstructionStatement</name>
        </type>
        <type derived="true" id="type.2203877">
            <name>ConstructionStatement&amp;</name>
            <content>
                <baseType ref="2203875"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203876">
            <name>ConstructionStatement*</name>
            <content>
                <baseType ref="2203875"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203869">
            <name>ContinueStatement</name>
        </type>
        <type derived="true" id="type.2203871">
            <name>ContinueStatement&amp;</name>
            <content>
                <baseType ref="2203869"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203870">
            <name>ContinueStatement*</name>
            <content>
                <baseType ref="2203869"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203899">
            <name>DefaultStatement</name>
        </type>
        <type derived="true" id="type.2203901">
            <name>DefaultStatement&amp;</name>
            <content>
                <baseType ref="2203899"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203900">
            <name>DefaultStatement*</name>
            <content>
                <baseType ref="2203899"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204536">
            <name>DefaultStatement*&amp;</name>
            <content>
                <baseType ref="2203899"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204535">
            <name>DefaultStatement**</name>
            <content>
                <baseType ref="2203899"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203878">
            <name>DeleteStatement</name>
        </type>
        <type derived="true" id="type.2203880">
            <name>DeleteStatement&amp;</name>
            <content>
                <baseType ref="2203878"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.748">
            <name>DeleteStatement&amp;&amp;</name>
            <content>
                <baseType ref="2203878"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203879">
            <name>DeleteStatement*</name>
            <content>
                <baseType ref="2203878"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203701">
            <name>Deref</name>
        </type>
        <type derived="true" id="type.2203703">
            <name>Deref&amp;</name>
            <content>
                <baseType ref="2203701"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.694">
            <name>Deref&amp;&amp;</name>
            <content>
                <baseType ref="2203701"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203702">
            <name>Deref*</name>
            <content>
                <baseType ref="2203701"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203881">
            <name>DestroyStatement</name>
        </type>
        <type derived="true" id="type.2203883">
            <name>DestroyStatement&amp;</name>
            <content>
                <baseType ref="2203881"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.751">
            <name>DestroyStatement&amp;&amp;</name>
            <content>
                <baseType ref="2203881"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203882">
            <name>DestroyStatement*</name>
            <content>
                <baseType ref="2203881"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203731">
            <name>Disjunction</name>
        </type>
        <type derived="true" id="type.2203733">
            <name>Disjunction&amp;</name>
            <content>
                <baseType ref="2203731"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203732">
            <name>Disjunction*</name>
            <content>
                <baseType ref="2203731"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203779">
            <name>Div</name>
        </type>
        <type derived="true" id="type.2203781">
            <name>Div&amp;</name>
            <content>
                <baseType ref="2203779"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203780">
            <name>Div*</name>
            <content>
                <baseType ref="2203779"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203860">
            <name>DoStatement</name>
        </type>
        <type derived="true" id="type.2203862">
            <name>DoStatement&amp;</name>
            <content>
                <baseType ref="2203860"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203861">
            <name>DoStatement*</name>
            <content>
                <baseType ref="2203860"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203682">
            <name>DomObject</name>
        </type>
        <type derived="true" id="type.356">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="2203682"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203684">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="2203682"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.688">
            <name>DomObject&amp;&amp;</name>
            <content>
                <baseType ref="2203682"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.355">
            <name>DomObject*</name>
            <content>
                <baseType ref="2203682"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203683">
            <name>DomObject*</name>
            <content>
                <baseType ref="2203682"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204497">
            <name>DomObject*&amp;</name>
            <content>
                <baseType ref="2203682"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204498">
            <name>DomObject*&amp;&amp;</name>
            <content>
                <baseType ref="2203682"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204496">
            <name>DomObject**</name>
            <content>
                <baseType ref="2203682"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203722">
            <name>Dot</name>
        </type>
        <type derived="true" id="type.2203724">
            <name>Dot&amp;</name>
            <content>
                <baseType ref="2203722"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203723">
            <name>Dot*</name>
            <content>
                <baseType ref="2203722"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203676">
            <name>DoubleType</name>
        </type>
        <type derived="true" id="type.2203678">
            <name>DoubleType&amp;</name>
            <content>
                <baseType ref="2203676"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203677">
            <name>DoubleType*</name>
            <content>
                <baseType ref="2203676"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203890">
            <name>EmptyStatement</name>
        </type>
        <type derived="true" id="type.2203892">
            <name>EmptyStatement&amp;</name>
            <content>
                <baseType ref="2203890"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203891">
            <name>EmptyStatement*</name>
            <content>
                <baseType ref="2203890"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203746">
            <name>Equal</name>
        </type>
        <type derived="true" id="type.2203748">
            <name>Equal&amp;</name>
            <content>
                <baseType ref="2203746"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203747">
            <name>Equal*</name>
            <content>
                <baseType ref="2203746"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203689">
            <name>Expression</name>
        </type>
        <type derived="true" id="type.2203691">
            <name>Expression&amp;</name>
            <content>
                <baseType ref="2203689"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203690">
            <name>Expression*</name>
            <content>
                <baseType ref="2203689"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204504">
            <name>Expression*&amp;</name>
            <content>
                <baseType ref="2203689"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204503">
            <name>Expression**</name>
            <content>
                <baseType ref="2203689"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203887">
            <name>ExpressionStatement</name>
        </type>
        <type derived="true" id="type.2203889">
            <name>ExpressionStatement&amp;</name>
            <content>
                <baseType ref="2203887"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.754">
            <name>ExpressionStatement&amp;&amp;</name>
            <content>
                <baseType ref="2203887"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203888">
            <name>ExpressionStatement*</name>
            <content>
                <baseType ref="2203887"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203673">
            <name>FloatType</name>
        </type>
        <type derived="true" id="type.2203675">
            <name>FloatType&amp;</name>
            <content>
                <baseType ref="2203673"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203674">
            <name>FloatType*</name>
            <content>
                <baseType ref="2203673"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203863">
            <name>ForStatement</name>
        </type>
        <type derived="true" id="type.2203865">
            <name>ForStatement&amp;</name>
            <content>
                <baseType ref="2203863"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203864">
            <name>ForStatement*</name>
            <content>
                <baseType ref="2203863"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2198509" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="2198509"/>
                <argumentType ref="2197768"/>
            </content>
        </type>
        <type derived="true" id="type.412">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198509"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2198494" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="2198479"/>
                <argumentType ref="2197764"/>
                <argumentType ref="2197765"/>
                <argumentType ref="2197766"/>
            </content>
        </type>
        <type id="type.2198479" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="2198479"/>
                <argumentType ref="2197761"/>
                <argumentType ref="2197762"/>
                <argumentType ref="2197763"/>
            </content>
        </type>
        <type derived="true" id="type.408">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198479"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.409">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198494"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2198597" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="2198479"/>
                <argumentType ref="2197770"/>
                <argumentType ref="type.2198594"/>
                <argumentType ref="type.2198596"/>
            </content>
        </type>
        <type id="type.2198533" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="2198479"/>
                <argumentType ref="2197768"/>
                <argumentType ref="type.2198530"/>
                <argumentType ref="type.2198532"/>
            </content>
        </type>
        <type id="type.2198565" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="2198479"/>
                <argumentType ref="2197769"/>
                <argumentType ref="type.2198562"/>
                <argumentType ref="type.2198564"/>
            </content>
        </type>
        <type derived="true" id="type.416">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198597"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.414">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198565"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.411">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198533"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2198582" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="2198479"/>
                <argumentType ref="2197770"/>
                <argumentType ref="type.2198579"/>
                <argumentType ref="type.2198580"/>
            </content>
        </type>
        <type id="type.2198550" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="2198479"/>
                <argumentType ref="2197769"/>
                <argumentType ref="type.2198547"/>
                <argumentType ref="type.2198548"/>
            </content>
        </type>
        <type id="type.2198518" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="2198479"/>
                <argumentType ref="2197768"/>
                <argumentType ref="type.2198515"/>
                <argumentType ref="type.2198516"/>
            </content>
        </type>
        <type derived="true" id="type.410">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198518"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.415">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198582"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.413">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="2203905">
            <name>GotoCaseStatement</name>
        </type>
        <type derived="true" id="type.2203907">
            <name>GotoCaseStatement&amp;</name>
            <content>
                <baseType ref="2203905"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.760">
            <name>GotoCaseStatement&amp;&amp;</name>
            <content>
                <baseType ref="2203905"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203906">
            <name>GotoCaseStatement*</name>
            <content>
                <baseType ref="2203905"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203908">
            <name>GotoDefaultStatement</name>
        </type>
        <type derived="true" id="type.2203910">
            <name>GotoDefaultStatement&amp;</name>
            <content>
                <baseType ref="2203908"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203909">
            <name>GotoDefaultStatement*</name>
            <content>
                <baseType ref="2203908"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203872">
            <name>GotoStatement</name>
        </type>
        <type derived="true" id="type.2203874">
            <name>GotoStatement&amp;</name>
            <content>
                <baseType ref="2203872"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.745">
            <name>GotoStatement&amp;&amp;</name>
            <content>
                <baseType ref="2203872"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203873">
            <name>GotoStatement*</name>
            <content>
                <baseType ref="2203872"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203755">
            <name>Greater</name>
        </type>
        <type derived="true" id="type.2203757">
            <name>Greater&amp;</name>
            <content>
                <baseType ref="2203755"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203756">
            <name>Greater*</name>
            <content>
                <baseType ref="2203755"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203761">
            <name>GreaterOrEqual</name>
        </type>
        <type derived="true" id="type.2203763">
            <name>GreaterOrEqual&amp;</name>
            <content>
                <baseType ref="2203761"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203762">
            <name>GreaterOrEqual*</name>
            <content>
                <baseType ref="2203761"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2199015" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="2199356"/>
                <argumentType ref="2197850"/>
                <argumentType ref="type.2198998"/>
                <argumentType ref="type.2199005"/>
                <argumentType ref="2197852"/>
                <argumentType ref="2197853"/>
            </content>
        </type>
        <type derived="true" id="type.452">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199015"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199356" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="2199356"/>
                <argumentType ref="2197879"/>
                <argumentType ref="2197880"/>
                <argumentType ref="2197881"/>
                <argumentType ref="2197882"/>
                <argumentType ref="2197883"/>
            </content>
        </type>
        <type derived="true" id="type.474">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199356"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199171" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="2199356"/>
                <argumentType ref="2197859"/>
                <argumentType ref="2197859"/>
                <argumentType ref="type.2199161"/>
                <argumentType ref="2197860"/>
                <argumentType ref="2197861"/>
            </content>
        </type>
        <type derived="true" id="type.461">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199171"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199021" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="2199324"/>
                <argumentType ref="type.2198998"/>
                <argumentType ref="type.2199000"/>
                <argumentType ref="type.2198999"/>
                <argumentType ref="type.2199015"/>
            </content>
        </type>
        <type derived="true" id="type.453">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199179" specialization="true">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <primaryType ref="2199324"/>
                <argumentType ref="2197859"/>
                <argumentType ref="type.2199177"/>
                <argumentType ref="type.2199178"/>
                <argumentType ref="type.2199171"/>
            </content>
        </type>
        <type derived="true" id="type.462">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199179"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199364" specialization="true">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <primaryType ref="2199324"/>
                <argumentType ref="2197880"/>
                <argumentType ref="type.2199362"/>
                <argumentType ref="type.2199363"/>
                <argumentType ref="type.2199356"/>
            </content>
        </type>
        <type derived="true" id="type.475">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199364"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="2203827">
            <name>Identifier</name>
        </type>
        <type derived="true" id="type.2203829">
            <name>Identifier&amp;</name>
            <content>
                <baseType ref="2203827"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.734">
            <name>Identifier&amp;&amp;</name>
            <content>
                <baseType ref="2203827"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203828">
            <name>Identifier*</name>
            <content>
                <baseType ref="2203827"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203854">
            <name>IfStatement</name>
        </type>
        <type derived="true" id="type.2203856">
            <name>IfStatement&amp;</name>
            <content>
                <baseType ref="2203854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203855">
            <name>IfStatement*</name>
            <content>
                <baseType ref="2203854"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203791">
            <name>Indexing</name>
        </type>
        <type derived="true" id="type.2203793">
            <name>Indexing&amp;</name>
            <content>
                <baseType ref="2203791"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203792">
            <name>Indexing*</name>
            <content>
                <baseType ref="2203791"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203661">
            <name>IntType</name>
        </type>
        <type derived="true" id="type.2203663">
            <name>IntType&amp;</name>
            <content>
                <baseType ref="2203661"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203662">
            <name>IntType*</name>
            <content>
                <baseType ref="2203661"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203794">
            <name>Invoke</name>
        </type>
        <type derived="true" id="type.2203796">
            <name>Invoke&amp;</name>
            <content>
                <baseType ref="2203794"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.715">
            <name>Invoke&amp;&amp;</name>
            <content>
                <baseType ref="2203794"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203795">
            <name>Invoke*</name>
            <content>
                <baseType ref="2203794"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203785">
            <name>Is</name>
        </type>
        <type derived="true" id="type.2203787">
            <name>Is&amp;</name>
            <content>
                <baseType ref="2203785"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203786">
            <name>Is*</name>
            <content>
                <baseType ref="2203785"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.450">
            <name>K&amp;&amp;</name>
            <content>
                <baseType ref="2197850"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.495">
            <name>Key&amp;&amp;</name>
            <content>
                <baseType ref="2197907"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="2203752">
            <name>Less</name>
        </type>
        <type derived="true" id="type.2203754">
            <name>Less&amp;</name>
            <content>
                <baseType ref="2203752"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203753">
            <name>Less*</name>
            <content>
                <baseType ref="2203752"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203758">
            <name>LessOrEqual</name>
        </type>
        <type derived="true" id="type.2203760">
            <name>LessOrEqual&amp;</name>
            <content>
                <baseType ref="2203758"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203759">
            <name>LessOrEqual*</name>
            <content>
                <baseType ref="2203758"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2199497" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="2199497"/>
                <argumentType ref="2197896"/>
            </content>
        </type>
        <type id="type.2199431" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="2199497"/>
                <argumentType ref="2197889"/>
            </content>
        </type>
        <type derived="true" id="type.483">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199431"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.484">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199497"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199047" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="2199587"/>
                <argumentType ref="type.2199028"/>
            </content>
        </type>
        <type derived="true" id="type.456">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199204" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="2199587"/>
                <argumentType ref="type.2199186"/>
            </content>
        </type>
        <type derived="true" id="type.465">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199204"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199391" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="2199587"/>
                <argumentType ref="type.2199371"/>
            </content>
        </type>
        <type derived="true" id="type.479">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199391"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200241" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="2199587"/>
                <argumentType ref="type.2200215"/>
            </content>
        </type>
        <type derived="true" id="type.561">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200241"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200184" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="2199587"/>
                <argumentType ref="2197995"/>
            </content>
        </type>
        <type id="type.2199587" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="2199587"/>
                <argumentType ref="2197900"/>
            </content>
        </type>
        <type id="type.2199848" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="2199587"/>
                <argumentType ref="2197942"/>
            </content>
        </type>
        <type derived="true" id="type.527">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199848"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.487">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199587"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.555">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200184"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2204399" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>></name>
            <content>
                <primaryType ref="2199587"/>
                <argumentType ref="type.2204389"/>
            </content>
        </type>
        <type derived="true" id="type.2204401">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>>&amp;</name>
            <content>
                <baseType ref="type.2204399"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204419">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204399"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204400">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>>*</name>
            <content>
                <baseType ref="type.2204399"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2204459" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>></name>
            <content>
                <primaryType ref="2199587"/>
                <argumentType ref="type.2204449"/>
            </content>
        </type>
        <type derived="true" id="type.2204461">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>>&amp;</name>
            <content>
                <baseType ref="type.2204459"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204479">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204459"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204460">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>>*</name>
            <content>
                <baseType ref="type.2204459"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2204298" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>></name>
            <content>
                <primaryType ref="2199587"/>
                <argumentType ref="type.2204264"/>
            </content>
        </type>
        <type derived="true" id="type.2204300">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp;</name>
            <content>
                <baseType ref="type.2204298"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204318">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204298"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204299">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>*</name>
            <content>
                <baseType ref="type.2204298"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2204350" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>></name>
            <content>
                <primaryType ref="2199587"/>
                <argumentType ref="type.2204343"/>
            </content>
        </type>
        <type derived="true" id="type.2204352">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>>&amp;</name>
            <content>
                <baseType ref="type.2204350"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204370">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204350"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204351">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>>*</name>
            <content>
                <baseType ref="type.2204350"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203839">
            <name>Literal</name>
        </type>
        <type derived="true" id="type.2203841">
            <name>Literal&amp;</name>
            <content>
                <baseType ref="2203839"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.738">
            <name>Literal&amp;&amp;</name>
            <content>
                <baseType ref="2203839"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203840">
            <name>Literal*</name>
            <content>
                <baseType ref="2203839"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203667">
            <name>LongType</name>
        </type>
        <type derived="true" id="type.2203669">
            <name>LongType&amp;</name>
            <content>
                <baseType ref="2203667"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203668">
            <name>LongType*</name>
            <content>
                <baseType ref="2203667"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203926">
            <name>LvalueRef</name>
        </type>
        <type derived="true" id="type.2203928">
            <name>LvalueRef&amp;</name>
            <content>
                <baseType ref="2203926"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.775">
            <name>LvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="2203926"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203927">
            <name>LvalueRef*</name>
            <content>
                <baseType ref="2203926"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203776">
            <name>Mul</name>
        </type>
        <type derived="true" id="type.2203778">
            <name>Mul&amp;</name>
            <content>
                <baseType ref="2203776"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203777">
            <name>Mul*</name>
            <content>
                <baseType ref="2203776"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203818">
            <name>New</name>
        </type>
        <type derived="true" id="type.2203820">
            <name>New&amp;</name>
            <content>
                <baseType ref="2203818"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.733">
            <name>New&amp;&amp;</name>
            <content>
                <baseType ref="2203818"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203819">
            <name>New*</name>
            <content>
                <baseType ref="2203818"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203698">
            <name>Not</name>
        </type>
        <type derived="true" id="type.2203700">
            <name>Not&amp;</name>
            <content>
                <baseType ref="2203698"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.691">
            <name>Not&amp;&amp;</name>
            <content>
                <baseType ref="2203698"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203699">
            <name>Not*</name>
            <content>
                <baseType ref="2203698"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203749">
            <name>NotEqual</name>
        </type>
        <type derived="true" id="type.2203751">
            <name>NotEqual&amp;</name>
            <content>
                <baseType ref="2203749"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203750">
            <name>NotEqual*</name>
            <content>
                <baseType ref="2203749"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203688">
            <name>Operator</name>
        </type>
        <type derived="true" id="type.2204262">
            <name>Operator&amp;</name>
            <content>
                <baseType ref="2203688"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204263">
            <name>Operator&amp;&amp;</name>
            <content>
                <baseType ref="2203688"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204261">
            <name>Operator*</name>
            <content>
                <baseType ref="2203688"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2199807" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="2199773"/>
                <argumentType ref="2197932"/>
                <argumentType ref="2197933"/>
            </content>
        </type>
        <type id="type.2199824" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="2199773"/>
                <argumentType ref="2197935"/>
                <argumentType ref="2197936"/>
            </content>
        </type>
        <type id="2203932">
            <name>Pointer</name>
        </type>
        <type derived="true" id="type.2203934">
            <name>Pointer&amp;</name>
            <content>
                <baseType ref="2203932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.781">
            <name>Pointer&amp;&amp;</name>
            <content>
                <baseType ref="2203932"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203933">
            <name>Pointer*</name>
            <content>
                <baseType ref="2203932"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203803">
            <name>PostfixDecrement</name>
        </type>
        <type derived="true" id="type.2203805">
            <name>PostfixDecrement&amp;</name>
            <content>
                <baseType ref="2203803"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.721">
            <name>PostfixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="2203803"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203804">
            <name>PostfixDecrement*</name>
            <content>
                <baseType ref="2203803"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203797">
            <name>PostfixExpression</name>
        </type>
        <type derived="true" id="type.2203799">
            <name>PostfixExpression&amp;</name>
            <content>
                <baseType ref="2203797"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203798">
            <name>PostfixExpression*</name>
            <content>
                <baseType ref="2203797"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204515">
            <name>PostfixExpression*&amp;</name>
            <content>
                <baseType ref="2203797"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204514">
            <name>PostfixExpression**</name>
            <content>
                <baseType ref="2203797"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203800">
            <name>PostfixIncrement</name>
        </type>
        <type derived="true" id="type.2203802">
            <name>PostfixIncrement&amp;</name>
            <content>
                <baseType ref="2203800"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.718">
            <name>PostfixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="2203800"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203801">
            <name>PostfixIncrement*</name>
            <content>
                <baseType ref="2203800"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203710">
            <name>PrefixDecrement</name>
        </type>
        <type derived="true" id="type.2203712">
            <name>PrefixDecrement&amp;</name>
            <content>
                <baseType ref="2203710"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.703">
            <name>PrefixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="2203710"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203711">
            <name>PrefixDecrement*</name>
            <content>
                <baseType ref="2203710"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203695">
            <name>PrefixExpression</name>
        </type>
        <type derived="true" id="type.2203697">
            <name>PrefixExpression&amp;</name>
            <content>
                <baseType ref="2203695"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203696">
            <name>PrefixExpression*</name>
            <content>
                <baseType ref="2203695"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204500">
            <name>PrefixExpression*&amp;</name>
            <content>
                <baseType ref="2203695"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204499">
            <name>PrefixExpression**</name>
            <content>
                <baseType ref="2203695"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203707">
            <name>PrefixIncrement</name>
        </type>
        <type derived="true" id="type.2203709">
            <name>PrefixIncrement&amp;</name>
            <content>
                <baseType ref="2203707"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.700">
            <name>PrefixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="2203707"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203708">
            <name>PrefixIncrement*</name>
            <content>
                <baseType ref="2203707"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2201403" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2198069"/>
                <argumentType ref="type.2201243"/>
                <argumentType ref="type.2201402"/>
            </content>
        </type>
        <type derived="true" id="type.605">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201403"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202453" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2198140"/>
                <argumentType ref="type.2202293"/>
                <argumentType ref="type.2202452"/>
            </content>
        </type>
        <type derived="true" id="type.630">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202453"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202033" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2198114"/>
                <argumentType ref="type.2201873"/>
                <argumentType ref="type.2202032"/>
            </content>
        </type>
        <type derived="true" id="type.620">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202033"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202243" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2198127"/>
                <argumentType ref="type.2202083"/>
                <argumentType ref="type.2202242"/>
            </content>
        </type>
        <type derived="true" id="type.625">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202243"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200760" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2198039"/>
                <argumentType ref="type.2200586"/>
                <argumentType ref="type.2200759"/>
            </content>
        </type>
        <type derived="true" id="type.590">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200760"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200980" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2198049"/>
                <argumentType ref="type.2200820"/>
                <argumentType ref="type.2200979"/>
            </content>
        </type>
        <type derived="true" id="type.595">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200980"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199145" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2199110"/>
                <argumentType ref="type.2199143"/>
                <argumentType ref="type.2199144"/>
            </content>
        </type>
        <type id="type.2199064" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2199028"/>
                <argumentType ref="type.2199062"/>
                <argumentType ref="type.2199063"/>
            </content>
        </type>
        <type derived="true" id="type.460">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199145"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.455">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199136" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2199110"/>
                <argumentType ref="type.2199134"/>
                <argumentType ref="type.2199135"/>
            </content>
        </type>
        <type id="type.2199055" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2199028"/>
                <argumentType ref="type.2199053"/>
                <argumentType ref="type.2199054"/>
            </content>
        </type>
        <type id="type.2199136" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2199110"/>
                <argumentType ref="type.2199134"/>
                <argumentType ref="type.2199135"/>
            </content>
        </type>
        <type derived="true" id="type.454">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.459">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199136"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201380" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201345"/>
                <argumentType ref="type.2201378"/>
                <argumentType ref="type.2201379"/>
            </content>
        </type>
        <type derived="true" id="type.604">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201380"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201371" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201345"/>
                <argumentType ref="type.2201369"/>
                <argumentType ref="type.2201370"/>
            </content>
        </type>
        <type derived="true" id="type.603">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201371"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202430" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202395"/>
                <argumentType ref="type.2202428"/>
                <argumentType ref="type.2202429"/>
            </content>
        </type>
        <type derived="true" id="type.629">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202430"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202421" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202395"/>
                <argumentType ref="type.2202419"/>
                <argumentType ref="type.2202420"/>
            </content>
        </type>
        <type derived="true" id="type.628">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202421"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202010" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201975"/>
                <argumentType ref="type.2202008"/>
                <argumentType ref="type.2202009"/>
            </content>
        </type>
        <type derived="true" id="type.619">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202010"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202001" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201975"/>
                <argumentType ref="type.2201999"/>
                <argumentType ref="type.2202000"/>
            </content>
        </type>
        <type derived="true" id="type.618">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202001"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202220" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202185"/>
                <argumentType ref="type.2202218"/>
                <argumentType ref="type.2202219"/>
            </content>
        </type>
        <type derived="true" id="type.624">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202220"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202211" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202185"/>
                <argumentType ref="type.2202209"/>
                <argumentType ref="type.2202210"/>
            </content>
        </type>
        <type derived="true" id="type.623">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202211"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200744" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200709"/>
                <argumentType ref="type.2200742"/>
                <argumentType ref="type.2200743"/>
            </content>
        </type>
        <type derived="true" id="type.589">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200744"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200735" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200709"/>
                <argumentType ref="type.2200733"/>
                <argumentType ref="type.2200734"/>
            </content>
        </type>
        <type derived="true" id="type.588">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200735"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200957" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200922"/>
                <argumentType ref="type.2200955"/>
                <argumentType ref="type.2200956"/>
            </content>
        </type>
        <type derived="true" id="type.594">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200957"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200948" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200922"/>
                <argumentType ref="type.2200946"/>
                <argumentType ref="type.2200947"/>
            </content>
        </type>
        <type derived="true" id="type.593">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201170" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201135"/>
                <argumentType ref="type.2201168"/>
                <argumentType ref="type.2201169"/>
            </content>
        </type>
        <type derived="true" id="type.599">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201170"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201161" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201135"/>
                <argumentType ref="type.2201159"/>
                <argumentType ref="type.2201160"/>
            </content>
        </type>
        <type derived="true" id="type.598">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201161"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201800" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201765"/>
                <argumentType ref="type.2201798"/>
                <argumentType ref="type.2201799"/>
            </content>
        </type>
        <type derived="true" id="type.614">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201800"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201791" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201765"/>
                <argumentType ref="type.2201789"/>
                <argumentType ref="type.2201790"/>
            </content>
        </type>
        <type derived="true" id="type.613">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201791"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201590" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201555"/>
                <argumentType ref="type.2201588"/>
                <argumentType ref="type.2201589"/>
            </content>
        </type>
        <type derived="true" id="type.609">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201590"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201581" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201555"/>
                <argumentType ref="type.2201579"/>
                <argumentType ref="type.2201580"/>
            </content>
        </type>
        <type derived="true" id="type.608">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201581"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201303" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201268"/>
                <argumentType ref="type.2201301"/>
                <argumentType ref="type.2201302"/>
            </content>
        </type>
        <type derived="true" id="type.602">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201303"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201294" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201268"/>
                <argumentType ref="type.2201292"/>
                <argumentType ref="type.2201293"/>
            </content>
        </type>
        <type derived="true" id="type.601">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201294"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202353" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202318"/>
                <argumentType ref="type.2202351"/>
                <argumentType ref="type.2202352"/>
            </content>
        </type>
        <type derived="true" id="type.627">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202353"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202344" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202318"/>
                <argumentType ref="type.2202342"/>
                <argumentType ref="type.2202343"/>
            </content>
        </type>
        <type derived="true" id="type.626">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202344"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201933" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201898"/>
                <argumentType ref="type.2201931"/>
                <argumentType ref="type.2201932"/>
            </content>
        </type>
        <type derived="true" id="type.617">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201933"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201924" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201898"/>
                <argumentType ref="type.2201922"/>
                <argumentType ref="type.2201923"/>
            </content>
        </type>
        <type derived="true" id="type.616">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201924"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202143" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202108"/>
                <argumentType ref="type.2202141"/>
                <argumentType ref="type.2202142"/>
            </content>
        </type>
        <type derived="true" id="type.622">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202143"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202134" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202108"/>
                <argumentType ref="type.2202132"/>
                <argumentType ref="type.2202133"/>
            </content>
        </type>
        <type derived="true" id="type.621">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202134"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200646" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200611"/>
                <argumentType ref="type.2200644"/>
                <argumentType ref="type.2200645"/>
            </content>
        </type>
        <type derived="true" id="type.587">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200646"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200637" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200611"/>
                <argumentType ref="type.2200635"/>
                <argumentType ref="type.2200636"/>
            </content>
        </type>
        <type derived="true" id="type.586">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200637"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200880" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200845"/>
                <argumentType ref="type.2200878"/>
                <argumentType ref="type.2200879"/>
            </content>
        </type>
        <type derived="true" id="type.592">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200880"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200871" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200845"/>
                <argumentType ref="type.2200869"/>
                <argumentType ref="type.2200870"/>
            </content>
        </type>
        <type derived="true" id="type.591">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200871"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201093" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201058"/>
                <argumentType ref="type.2201091"/>
                <argumentType ref="type.2201092"/>
            </content>
        </type>
        <type derived="true" id="type.597">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201093"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201084" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201058"/>
                <argumentType ref="type.2201082"/>
                <argumentType ref="type.2201083"/>
            </content>
        </type>
        <type derived="true" id="type.596">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201084"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201723" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201688"/>
                <argumentType ref="type.2201721"/>
                <argumentType ref="type.2201722"/>
            </content>
        </type>
        <type derived="true" id="type.612">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201723"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201714" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201688"/>
                <argumentType ref="type.2201712"/>
                <argumentType ref="type.2201713"/>
            </content>
        </type>
        <type derived="true" id="type.611">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201714"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201513" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201478"/>
                <argumentType ref="type.2201511"/>
                <argumentType ref="type.2201512"/>
            </content>
        </type>
        <type derived="true" id="type.607">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201513"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201504" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2201478"/>
                <argumentType ref="type.2201502"/>
                <argumentType ref="type.2201503"/>
            </content>
        </type>
        <type derived="true" id="type.606">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201504"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199296" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2199261"/>
                <argumentType ref="type.2199294"/>
                <argumentType ref="type.2199295"/>
            </content>
        </type>
        <type id="type.2199221" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2199186"/>
                <argumentType ref="type.2199219"/>
                <argumentType ref="type.2199220"/>
            </content>
        </type>
        <type id="type.2199296" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2199261"/>
                <argumentType ref="type.2199294"/>
                <argumentType ref="type.2199295"/>
            </content>
        </type>
        <type derived="true" id="type.464">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199221"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.468">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199296"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199212" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2199186"/>
                <argumentType ref="type.2199210"/>
                <argumentType ref="type.2199211"/>
            </content>
        </type>
        <type id="type.2199287" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2199261"/>
                <argumentType ref="type.2199285"/>
                <argumentType ref="type.2199286"/>
            </content>
        </type>
        <type derived="true" id="type.463">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199212"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.467">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199287"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199408" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2199371"/>
                <argumentType ref="type.2199406"/>
                <argumentType ref="type.2199407"/>
            </content>
        </type>
        <type derived="true" id="type.478">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199408"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199399" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2199371"/>
                <argumentType ref="type.2199397"/>
                <argumentType ref="type.2199398"/>
            </content>
        </type>
        <type derived="true" id="type.477">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199399"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200468" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198020"/>
                <argumentType ref="type.2200466"/>
                <argumentType ref="type.2200467"/>
            </content>
        </type>
        <type id="type.2200515" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198021"/>
                <argumentType ref="type.2200513"/>
                <argumentType ref="type.2200514"/>
            </content>
        </type>
        <type id="type.2200280" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198016"/>
                <argumentType ref="type.2200278"/>
                <argumentType ref="type.2200279"/>
            </content>
        </type>
        <type id="type.2200233" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198015"/>
                <argumentType ref="type.2200231"/>
                <argumentType ref="type.2200232"/>
            </content>
        </type>
        <type id="type.2200327" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198017"/>
                <argumentType ref="type.2200325"/>
                <argumentType ref="type.2200326"/>
            </content>
        </type>
        <type id="type.2200374" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198018"/>
                <argumentType ref="type.2200372"/>
                <argumentType ref="type.2200373"/>
            </content>
        </type>
        <type id="type.2200421" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198019"/>
                <argumentType ref="type.2200419"/>
                <argumentType ref="type.2200420"/>
            </content>
        </type>
        <type derived="true" id="type.571">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200374"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.575">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200421"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.579">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200468"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.583">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200515"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.567">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200327"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.563">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200280"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.557">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200233"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200318" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198017"/>
                <argumentType ref="type.2200315"/>
                <argumentType ref="type.2200316"/>
            </content>
        </type>
        <type id="type.2200412" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198019"/>
                <argumentType ref="type.2200409"/>
                <argumentType ref="type.2200410"/>
            </content>
        </type>
        <type id="type.2200224" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198015"/>
                <argumentType ref="type.2200221"/>
                <argumentType ref="type.2200222"/>
            </content>
        </type>
        <type id="type.2200459" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198020"/>
                <argumentType ref="type.2200452"/>
                <argumentType ref="type.2200450"/>
            </content>
        </type>
        <type id="type.2200506" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198021"/>
                <argumentType ref="type.2200503"/>
                <argumentType ref="type.2200504"/>
            </content>
        </type>
        <type id="type.2200365" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198018"/>
                <argumentType ref="type.2200362"/>
                <argumentType ref="type.2200363"/>
            </content>
        </type>
        <type id="type.2200318" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198017"/>
                <argumentType ref="type.2200315"/>
                <argumentType ref="type.2200316"/>
            </content>
        </type>
        <type id="type.2200271" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198016"/>
                <argumentType ref="type.2200268"/>
                <argumentType ref="type.2200269"/>
            </content>
        </type>
        <type derived="true" id="type.574">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200412"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.578">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200459"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.582">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200506"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.570">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200365"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.562">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200271"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.566">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200318"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.556">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200224"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201193" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2198059"/>
                <argumentType ref="type.2201033"/>
                <argumentType ref="type.2201192"/>
            </content>
        </type>
        <type derived="true" id="type.600">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201193"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201816" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2198101"/>
                <argumentType ref="type.2201663"/>
                <argumentType ref="type.2201815"/>
            </content>
        </type>
        <type derived="true" id="type.615">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201816"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2201613" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2198082"/>
                <argumentType ref="type.2201453"/>
                <argumentType ref="type.2201612"/>
            </content>
        </type>
        <type derived="true" id="type.610">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2201613"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200536" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200497"/>
                <argumentType ref="type.2200499"/>
                <argumentType ref="type.2200498"/>
            </content>
        </type>
        <type id="type.2200348" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200309"/>
                <argumentType ref="type.2200311"/>
                <argumentType ref="type.2200310"/>
            </content>
        </type>
        <type id="type.2200489" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200453"/>
                <argumentType ref="type.2200455"/>
                <argumentType ref="type.2200454"/>
            </content>
        </type>
        <type id="type.2200254" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200215"/>
                <argumentType ref="type.2200217"/>
                <argumentType ref="type.2200216"/>
            </content>
        </type>
        <type id="type.2200442" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200403"/>
                <argumentType ref="type.2200405"/>
                <argumentType ref="type.2200404"/>
            </content>
        </type>
        <type id="type.2200395" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200356"/>
                <argumentType ref="type.2200358"/>
                <argumentType ref="type.2200357"/>
            </content>
        </type>
        <type id="type.2200301" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200262"/>
                <argumentType ref="type.2200264"/>
                <argumentType ref="type.2200263"/>
            </content>
        </type>
        <type derived="true" id="type.573">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200395"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.560">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200254"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.585">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200536"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.565">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200301"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.569">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200348"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.577">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200442"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.581">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200489"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200435" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200403"/>
                <argumentType ref="type.2200408"/>
                <argumentType ref="type.2200407"/>
            </content>
        </type>
        <type id="type.2200341" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200309"/>
                <argumentType ref="type.2200314"/>
                <argumentType ref="type.2200313"/>
            </content>
        </type>
        <type id="type.2200294" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200262"/>
                <argumentType ref="type.2200267"/>
                <argumentType ref="type.2200266"/>
            </content>
        </type>
        <type id="type.2200529" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200497"/>
                <argumentType ref="type.2200502"/>
                <argumentType ref="type.2200501"/>
            </content>
        </type>
        <type id="type.2200482" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200453"/>
                <argumentType ref="type.2200458"/>
                <argumentType ref="type.2200457"/>
            </content>
        </type>
        <type id="type.2200388" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200356"/>
                <argumentType ref="type.2200361"/>
                <argumentType ref="type.2200360"/>
            </content>
        </type>
        <type id="type.2200435" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200403"/>
                <argumentType ref="type.2200408"/>
                <argumentType ref="type.2200407"/>
            </content>
        </type>
        <type id="type.2200247" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2200215"/>
                <argumentType ref="type.2200220"/>
                <argumentType ref="type.2200219"/>
            </content>
        </type>
        <type derived="true" id="type.576">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200435"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.584">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200529"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.564">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200294"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.568">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200341"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.572">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200388"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.580">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200482"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.559">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200247"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2198300" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2198265"/>
                <argumentType ref="type.2198267"/>
                <argumentType ref="type.2198266"/>
            </content>
        </type>
        <type derived="true" id="type.374">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198300"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2198293" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2198265"/>
                <argumentType ref="type.2198270"/>
                <argumentType ref="type.2198269"/>
            </content>
        </type>
        <type derived="true" id="type.373">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198293"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2198390" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2198353"/>
                <argumentType ref="type.2198355"/>
                <argumentType ref="type.2198354"/>
            </content>
        </type>
        <type derived="true" id="type.393">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198390"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2198383" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2198353"/>
                <argumentType ref="type.2198358"/>
                <argumentType ref="type.2198357"/>
            </content>
        </type>
        <type derived="true" id="type.392">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198383"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2198345" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2198308"/>
                <argumentType ref="type.2198310"/>
                <argumentType ref="type.2198309"/>
            </content>
        </type>
        <type derived="true" id="type.383">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198345"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2198338" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2198308"/>
                <argumentType ref="type.2198313"/>
                <argumentType ref="type.2198312"/>
            </content>
        </type>
        <type derived="true" id="type.382">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198338"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202482" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198151"/>
                <argumentType ref="type.2198153"/>
                <argumentType ref="type.2198152"/>
            </content>
        </type>
        <type derived="true" id="type.632">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202482"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202475" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2198151"/>
                <argumentType ref="type.2198156"/>
                <argumentType ref="type.2198155"/>
            </content>
        </type>
        <type derived="true" id="type.631">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202475"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199908" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197959"/>
                <argumentType ref="2197960"/>
                <argumentType ref="2197961"/>
            </content>
        </type>
        <type id="type.2199901" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197956"/>
                <argumentType ref="2197957"/>
                <argumentType ref="2197958"/>
            </content>
        </type>
        <type id="type.2199880" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197947"/>
                <argumentType ref="2197948"/>
                <argumentType ref="2197949"/>
            </content>
        </type>
        <type id="type.2199915" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197962"/>
                <argumentType ref="2197963"/>
                <argumentType ref="2197964"/>
            </content>
        </type>
        <type id="type.2199887" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197950"/>
                <argumentType ref="2197951"/>
                <argumentType ref="2197952"/>
            </content>
        </type>
        <type id="type.2199894" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197953"/>
                <argumentType ref="2197954"/>
                <argumentType ref="2197955"/>
            </content>
        </type>
        <type id="type.2199908" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197959"/>
                <argumentType ref="2197960"/>
                <argumentType ref="2197961"/>
            </content>
        </type>
        <type id="type.2199873" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197944"/>
                <argumentType ref="2197945"/>
                <argumentType ref="2197946"/>
            </content>
        </type>
        <type derived="true" id="type.530">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199887"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.529">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199880"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.531">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199894"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.533">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199908"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.534">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199915"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.528">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199873"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.532">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199901"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199632" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197901"/>
                <argumentType ref="type.2199630"/>
                <argumentType ref="type.2199631"/>
            </content>
        </type>
        <type id="type.2199659" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197902"/>
                <argumentType ref="type.2199657"/>
                <argumentType ref="type.2199658"/>
            </content>
        </type>
        <type id="type.2199605" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197900"/>
                <argumentType ref="type.2199603"/>
                <argumentType ref="type.2199604"/>
            </content>
        </type>
        <type id="type.2200200" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197995"/>
                <argumentType ref="type.2200183"/>
                <argumentType ref="type.2200199"/>
            </content>
        </type>
        <type id="type.2199865" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197942"/>
                <argumentType ref="type.2199863"/>
                <argumentType ref="type.2199864"/>
            </content>
        </type>
        <type id="type.2199659" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197902"/>
                <argumentType ref="type.2199657"/>
                <argumentType ref="type.2199658"/>
            </content>
        </type>
        <type derived="true" id="type.554">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200200"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.486">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199605"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.526">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199865"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.492">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199659"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.490">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199632"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199650" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197902"/>
                <argumentType ref="type.2199647"/>
                <argumentType ref="type.2199648"/>
            </content>
        </type>
        <type id="type.2199596" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197900"/>
                <argumentType ref="type.2199593"/>
                <argumentType ref="type.2199594"/>
            </content>
        </type>
        <type id="type.2200192" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197995"/>
                <argumentType ref="type.2200181"/>
                <argumentType ref="type.2200190"/>
            </content>
        </type>
        <type id="type.2199856" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197942"/>
                <argumentType ref="type.2199846"/>
                <argumentType ref="type.2199854"/>
            </content>
        </type>
        <type id="type.2199623" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="2197901"/>
                <argumentType ref="type.2199620"/>
                <argumentType ref="type.2199621"/>
            </content>
        </type>
        <type derived="true" id="type.553">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200192"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.525">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199856"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.491">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199650"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.489">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199623"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.485">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199596"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2204412" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2204389"/>
                <argumentType ref="type.2204391"/>
                <argumentType ref="type.2204390"/>
            </content>
        </type>
        <type derived="true" id="type.2204414">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;</name>
            <content>
                <baseType ref="type.2204412"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204418">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204412"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204413">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>*</name>
            <content>
                <baseType ref="type.2204412"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2204405" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2204389"/>
                <argumentType ref="type.2204394"/>
                <argumentType ref="type.2204393"/>
            </content>
        </type>
        <type derived="true" id="type.2204407">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;</name>
            <content>
                <baseType ref="type.2204405"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.661">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204405"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204406">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>*</name>
            <content>
                <baseType ref="type.2204405"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2204472" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2204449"/>
                <argumentType ref="type.2204451"/>
                <argumentType ref="type.2204450"/>
            </content>
        </type>
        <type derived="true" id="type.2204474">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;</name>
            <content>
                <baseType ref="type.2204472"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204478">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204472"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204473">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>*</name>
            <content>
                <baseType ref="type.2204472"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2204465" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2204449"/>
                <argumentType ref="type.2204454"/>
                <argumentType ref="type.2204453"/>
            </content>
        </type>
        <type derived="true" id="type.2204467">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;</name>
            <content>
                <baseType ref="type.2204465"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.662">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204465"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204466">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>*</name>
            <content>
                <baseType ref="type.2204465"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2204311" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2204264"/>
                <argumentType ref="type.2204266"/>
                <argumentType ref="type.2204265"/>
            </content>
        </type>
        <type derived="true" id="type.2204313">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;</name>
            <content>
                <baseType ref="type.2204311"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204317">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204311"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204312">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>*</name>
            <content>
                <baseType ref="type.2204311"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2204304" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2204264"/>
                <argumentType ref="type.2204269"/>
                <argumentType ref="type.2204268"/>
            </content>
        </type>
        <type derived="true" id="type.2204306">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;</name>
            <content>
                <baseType ref="type.2204304"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.659">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204304"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204305">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>*</name>
            <content>
                <baseType ref="type.2204304"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2204363" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2204343"/>
                <argumentType ref="type.2204345"/>
                <argumentType ref="type.2204344"/>
            </content>
        </type>
        <type derived="true" id="type.2204365">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;</name>
            <content>
                <baseType ref="type.2204363"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204369">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204363"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204364">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>*</name>
            <content>
                <baseType ref="type.2204363"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2204356" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2204343"/>
                <argumentType ref="type.2204348"/>
                <argumentType ref="type.2204347"/>
            </content>
        </type>
        <type derived="true" id="type.2204358">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;</name>
            <content>
                <baseType ref="type.2204356"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.660">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204356"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204357">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>*</name>
            <content>
                <baseType ref="type.2204356"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2202511" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202491"/>
                <argumentType ref="type.2202493"/>
                <argumentType ref="type.2202492"/>
            </content>
        </type>
        <type derived="true" id="type.634">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202511"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202504" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202491"/>
                <argumentType ref="type.2202496"/>
                <argumentType ref="type.2202495"/>
            </content>
        </type>
        <type derived="true" id="type.633">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202504"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202601" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202581"/>
                <argumentType ref="type.2202583"/>
                <argumentType ref="type.2202582"/>
            </content>
        </type>
        <type derived="true" id="type.647">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202601"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202594" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202581"/>
                <argumentType ref="type.2202586"/>
                <argumentType ref="type.2202585"/>
            </content>
        </type>
        <type derived="true" id="type.646">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202539" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202519"/>
                <argumentType ref="type.2202521"/>
                <argumentType ref="type.2202520"/>
            </content>
        </type>
        <type derived="true" id="type.636">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202539"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202532" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202519"/>
                <argumentType ref="type.2202524"/>
                <argumentType ref="type.2202523"/>
            </content>
        </type>
        <type derived="true" id="type.635">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202532"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202636" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202616"/>
                <argumentType ref="type.2202618"/>
                <argumentType ref="type.2202617"/>
            </content>
        </type>
        <type derived="true" id="type.649">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202636"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202629" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2202616"/>
                <argumentType ref="type.2202621"/>
                <argumentType ref="type.2202620"/>
            </content>
        </type>
        <type derived="true" id="type.648">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202629"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.502" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197241"/>
                <argumentType ref="type.2197262"/>
                <argumentType ref="type.2197261"/>
            </content>
        </type>
        <type id="type.2204084" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197241"/>
                <argumentType ref="type.2197262"/>
                <argumentType ref="type.2197261"/>
            </content>
        </type>
        <type id="type.2199759" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197241"/>
                <argumentType ref="type.2197262"/>
                <argumentType ref="type.2197261"/>
            </content>
        </type>
        <type derived="true" id="type.504">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204086">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.2204084"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.508">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.502"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.509">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199759"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.657">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204084"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.503">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.502"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204085">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.2204084"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.366" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197250"/>
                <argumentType ref="type.2197289"/>
                <argumentType ref="type.2197288"/>
            </content>
        </type>
        <type id="type.2203948" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197250"/>
                <argumentType ref="type.2197289"/>
                <argumentType ref="type.2197288"/>
            </content>
        </type>
        <type derived="true" id="type.368">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.366"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203950">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.2203948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.372">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.366"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.653">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2203948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203949">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.2203948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.367">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.366"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203949">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.2203948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2203941" specialization="true">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197250"/>
                <argumentType ref="type.2198271"/>
                <argumentType ref="type.2197388"/>
            </content>
        </type>
        <type id="type.359" specialization="true">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197250"/>
                <argumentType ref="type.2198271"/>
                <argumentType ref="type.2197388"/>
            </content>
        </type>
        <type derived="true" id="type.361">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>&amp;</name>
            <content>
                <baseType ref="type.359"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203943">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>&amp;</name>
            <content>
                <baseType ref="type.2203941"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.365">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.359"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.652">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2203941"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203942">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>*</name>
            <content>
                <baseType ref="type.2203941"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.360">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>*</name>
            <content>
                <baseType ref="type.359"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203942">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>*</name>
            <content>
                <baseType ref="type.2203941"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2203967" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197252"/>
                <argumentType ref="type.2197295"/>
                <argumentType ref="type.2197294"/>
            </content>
        </type>
        <type id="type.2198369" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197252"/>
                <argumentType ref="type.2197295"/>
                <argumentType ref="type.2197294"/>
            </content>
        </type>
        <type id="type.385" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197252"/>
                <argumentType ref="type.2197295"/>
                <argumentType ref="type.2197294"/>
            </content>
        </type>
        <type derived="true" id="type.2203969">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.2203967"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.387">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.385"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203969">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.2203967"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.394">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198369"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.391">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.385"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.655">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2203967"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.386">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.385"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203968">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.2203967"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2202556" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197245"/>
                <argumentType ref="type.2202553"/>
                <argumentType ref="type.2202554"/>
            </content>
        </type>
        <type derived="true" id="type.637">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202556"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202563" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197245"/>
                <argumentType ref="type.2197274"/>
                <argumentType ref="type.2197273"/>
            </content>
        </type>
        <type id="type.2204221" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197245"/>
                <argumentType ref="type.2197274"/>
                <argumentType ref="type.2197273"/>
            </content>
        </type>
        <type id="type.638" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197245"/>
                <argumentType ref="type.2197274"/>
                <argumentType ref="type.2197273"/>
            </content>
        </type>
        <type id="type.2204221" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197245"/>
                <argumentType ref="type.2197274"/>
                <argumentType ref="type.2197273"/>
            </content>
        </type>
        <type derived="true" id="type.2204223">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.2204221"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.640">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.638"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204223">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.2204221"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.644">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.638"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.645">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202563"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.658">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204221"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204222">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.2204221"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.639">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.638"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2198412" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197247"/>
                <argumentType ref="type.2198409"/>
                <argumentType ref="type.2198410"/>
            </content>
        </type>
        <type derived="true" id="type.395">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198412"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2203978" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197247"/>
                <argumentType ref="type.2197280"/>
                <argumentType ref="type.2197279"/>
            </content>
        </type>
        <type id="type.396" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197247"/>
                <argumentType ref="type.2197280"/>
                <argumentType ref="type.2197279"/>
            </content>
        </type>
        <type id="type.2203978" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197247"/>
                <argumentType ref="type.2197280"/>
                <argumentType ref="type.2197279"/>
            </content>
        </type>
        <type id="type.2198419" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197247"/>
                <argumentType ref="type.2197280"/>
                <argumentType ref="type.2197279"/>
            </content>
        </type>
        <type derived="true" id="type.2203980">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.2203978"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.398">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.396"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203980">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.2203978"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.656">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2203978"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.403">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198419"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.402">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.396"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.397">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.396"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203979">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.2203978"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2203957" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197251"/>
                <argumentType ref="type.2197292"/>
                <argumentType ref="type.2197291"/>
            </content>
        </type>
        <type id="type.375" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197251"/>
                <argumentType ref="type.2197292"/>
                <argumentType ref="type.2197291"/>
            </content>
        </type>
        <type id="type.2198324" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197251"/>
                <argumentType ref="type.2197292"/>
                <argumentType ref="type.2197291"/>
            </content>
        </type>
        <type id="type.2203957" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="2199873"/>
                <argumentType ref="type.2197251"/>
                <argumentType ref="type.2197292"/>
                <argumentType ref="type.2197291"/>
            </content>
        </type>
        <type derived="true" id="type.2203959">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.2203957"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.377">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.375"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.384">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2198324"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.381">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.375"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.654">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2203957"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203958">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.2203957"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.376">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.375"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203893">
            <name>RangeForStatement</name>
        </type>
        <type derived="true" id="type.2203895">
            <name>RangeForStatement&amp;</name>
            <content>
                <baseType ref="2203893"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203894">
            <name>RangeForStatement*</name>
            <content>
                <baseType ref="2203893"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2199697" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="2199960"/>
                <argumentType ref="2197907"/>
                <argumentType ref="type.2199680"/>
                <argumentType ref="type.2199687"/>
                <argumentType ref="2197909"/>
            </content>
        </type>
        <type derived="true" id="type.499">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199697"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199960" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="2199960"/>
                <argumentType ref="2197982"/>
                <argumentType ref="2197983"/>
                <argumentType ref="2197984"/>
                <argumentType ref="2197985"/>
            </content>
        </type>
        <type derived="true" id="type.543">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199960"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200020" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="2199960"/>
                <argumentType ref="2197988"/>
                <argumentType ref="2197988"/>
                <argumentType ref="type.2200010"/>
                <argumentType ref="2197989"/>
            </content>
        </type>
        <type derived="true" id="type.548">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200020"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203598">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="2197965"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.354">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="2197965"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203598">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="2197965"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.677">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="2197965"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203597">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="2197965"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.353">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="2197965"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203597">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="2197965"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2199723" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="2199930"/>
                <argumentType ref="type.2199680"/>
                <argumentType ref="type.2199682"/>
                <argumentType ref="type.2199681"/>
            </content>
        </type>
        <type derived="true" id="type.498">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199723"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199705" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="2199930"/>
                <argumentType ref="type.2199680"/>
                <argumentType ref="type.2199694"/>
                <argumentType ref="type.2199703"/>
            </content>
        </type>
        <type derived="true" id="type.497">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199705"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199930" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="2199930"/>
                <argumentType ref="2197975"/>
                <argumentType ref="2197976"/>
                <argumentType ref="2197977"/>
            </content>
        </type>
        <type id="type.2199945" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="2199930"/>
                <argumentType ref="2197978"/>
                <argumentType ref="2197979"/>
                <argumentType ref="2197980"/>
            </content>
        </type>
        <type id="type.2199930" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="2199930"/>
                <argumentType ref="2197975"/>
                <argumentType ref="2197976"/>
                <argumentType ref="2197977"/>
            </content>
        </type>
        <type derived="true" id="type.539">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199930"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.540">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199945"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200043" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="2199930"/>
                <argumentType ref="2197988"/>
                <argumentType ref="type.2200040"/>
                <argumentType ref="type.2200042"/>
            </content>
        </type>
        <type derived="true" id="type.547">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200043"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200028" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="2199930"/>
                <argumentType ref="2197988"/>
                <argumentType ref="type.2200017"/>
                <argumentType ref="type.2200026"/>
            </content>
        </type>
        <type id="type.2200142" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="2199930"/>
                <argumentType ref="2197992"/>
                <argumentType ref="type.2200131"/>
                <argumentType ref="type.2200140"/>
            </content>
        </type>
        <type id="type.2200085" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="2199930"/>
                <argumentType ref="2197990"/>
                <argumentType ref="type.2200074"/>
                <argumentType ref="type.2200083"/>
            </content>
        </type>
        <type derived="true" id="type.546">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200028"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.551">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200142"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.550">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200085"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199984" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="2199930"/>
                <argumentType ref="2197983"/>
                <argumentType ref="type.2199981"/>
                <argumentType ref="type.2199983"/>
            </content>
        </type>
        <type derived="true" id="type.542">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199984"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199969" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="2199930"/>
                <argumentType ref="2197983"/>
                <argumentType ref="type.2199966"/>
                <argumentType ref="type.2199967"/>
            </content>
        </type>
        <type derived="true" id="type.541">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199969"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="2203782">
            <name>Rem</name>
        </type>
        <type derived="true" id="type.2203784">
            <name>Rem&amp;</name>
            <content>
                <baseType ref="2203782"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203783">
            <name>Rem*</name>
            <content>
                <baseType ref="2203782"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203851">
            <name>ReturnStatement</name>
        </type>
        <type derived="true" id="type.2203853">
            <name>ReturnStatement&amp;</name>
            <content>
                <baseType ref="2203851"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.742">
            <name>ReturnStatement&amp;&amp;</name>
            <content>
                <baseType ref="2203851"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203852">
            <name>ReturnStatement*</name>
            <content>
                <baseType ref="2203851"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203929">
            <name>RvalueRef</name>
        </type>
        <type derived="true" id="type.2203931">
            <name>RvalueRef&amp;</name>
            <content>
                <baseType ref="2203929"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.778">
            <name>RvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="2203929"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203930">
            <name>RvalueRef*</name>
            <content>
                <baseType ref="2203929"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203649">
            <name>SByteType</name>
        </type>
        <type derived="true" id="type.2203651">
            <name>SByteType&amp;</name>
            <content>
                <baseType ref="2203649"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203650">
            <name>SByteType*</name>
            <content>
                <baseType ref="2203649"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203764">
            <name>ShiftLeft</name>
        </type>
        <type derived="true" id="type.2203766">
            <name>ShiftLeft&amp;</name>
            <content>
                <baseType ref="2203764"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203765">
            <name>ShiftLeft*</name>
            <content>
                <baseType ref="2203764"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203767">
            <name>ShiftRight</name>
        </type>
        <type derived="true" id="type.2203769">
            <name>ShiftRight&amp;</name>
            <content>
                <baseType ref="2203767"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203768">
            <name>ShiftRight*</name>
            <content>
                <baseType ref="2203767"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203655">
            <name>ShortType</name>
        </type>
        <type derived="true" id="type.2203657">
            <name>ShortType&amp;</name>
            <content>
                <baseType ref="2203655"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203656">
            <name>ShortType*</name>
            <content>
                <baseType ref="2203655"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203806">
            <name>SizeOf</name>
        </type>
        <type derived="true" id="type.2203808">
            <name>SizeOf&amp;</name>
            <content>
                <baseType ref="2203806"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.724">
            <name>SizeOf&amp;&amp;</name>
            <content>
                <baseType ref="2203806"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203807">
            <name>SizeOf*</name>
            <content>
                <baseType ref="2203806"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203842">
            <name>Statement</name>
        </type>
        <type derived="true" id="type.2203844">
            <name>Statement&amp;</name>
            <content>
                <baseType ref="2203842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.739">
            <name>Statement&amp;&amp;</name>
            <content>
                <baseType ref="2203842"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203843">
            <name>Statement*</name>
            <content>
                <baseType ref="2203842"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204516">
            <name>Statement*&amp;</name>
            <content>
                <baseType ref="2203842"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204518">
            <name>Statement*&amp;&amp;</name>
            <content>
                <baseType ref="2203842"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204517">
            <name>Statement**</name>
            <content>
                <baseType ref="2203842"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.665">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="2197384"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200215" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="2200215"/>
                <argumentType ref="2198015"/>
            </content>
        </type>
        <type derived="true" id="type.558">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200215"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2198265" specialization="true">
            <name>String&lt;char></name>
            <content>
                <primaryType ref="2200215"/>
                <argumentType ref="type.2197250"/>
            </content>
        </type>
        <type id="2203773">
            <name>Sub</name>
        </type>
        <type derived="true" id="type.2203775">
            <name>Sub&amp;</name>
            <content>
                <baseType ref="2203773"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203774">
            <name>Sub*</name>
            <content>
                <baseType ref="2203773"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203902">
            <name>SwitchStatement</name>
        </type>
        <type derived="true" id="type.2203904">
            <name>SwitchStatement&amp;</name>
            <content>
                <baseType ref="2203902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.757">
            <name>SwitchStatement&amp;&amp;</name>
            <content>
                <baseType ref="2203902"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203903">
            <name>SwitchStatement*</name>
            <content>
                <baseType ref="2203902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.538">
            <name>T&amp;</name>
            <content>
                <baseType ref="2197975"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.482">
            <name>T&amp;</name>
            <content>
                <baseType ref="2197887"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.471">
            <name>T&amp;</name>
            <content>
                <baseType ref="2197868"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.473">
            <name>T&amp;</name>
            <content>
                <baseType ref="2197870"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.536">
            <name>T&amp;</name>
            <content>
                <baseType ref="2197973"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.458">
            <name>T&amp;</name>
            <content>
                <baseType ref="2197851"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.405">
            <name>T&amp;</name>
            <content>
                <baseType ref="2197759"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.407">
            <name>T&amp;</name>
            <content>
                <baseType ref="2197761"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.451">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="2197851"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.488">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="2197900"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.512">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="2197923"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.524">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="2197942"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.521">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="2197935"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.516">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="2197932"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.552">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="2197995"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="2203833">
            <name>TemplateId</name>
        </type>
        <type derived="true" id="type.2203835">
            <name>TemplateId&amp;</name>
            <content>
                <baseType ref="2203833"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.735">
            <name>TemplateId&amp;&amp;</name>
            <content>
                <baseType ref="2203833"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203834">
            <name>TemplateId*</name>
            <content>
                <baseType ref="2203833"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203821">
            <name>This</name>
        </type>
        <type derived="true" id="type.2203823">
            <name>This&amp;</name>
            <content>
                <baseType ref="2203821"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203822">
            <name>This*</name>
            <content>
                <baseType ref="2203821"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203911">
            <name>ThrowStatement</name>
        </type>
        <type derived="true" id="type.2203913">
            <name>ThrowStatement&amp;</name>
            <content>
                <baseType ref="2203911"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.763">
            <name>ThrowStatement&amp;&amp;</name>
            <content>
                <baseType ref="2203911"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203912">
            <name>ThrowStatement*</name>
            <content>
                <baseType ref="2203911"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203917">
            <name>TryStatement</name>
        </type>
        <type derived="true" id="type.2203919">
            <name>TryStatement&amp;</name>
            <content>
                <baseType ref="2203917"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.766">
            <name>TryStatement&amp;&amp;</name>
            <content>
                <baseType ref="2203917"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203918">
            <name>TryStatement*</name>
            <content>
                <baseType ref="2203917"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203634">
            <name>Type</name>
        </type>
        <type derived="true" id="type.2203636">
            <name>Type&amp;</name>
            <content>
                <baseType ref="2203634"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.687">
            <name>Type&amp;&amp;</name>
            <content>
                <baseType ref="2203634"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203635">
            <name>Type*</name>
            <content>
                <baseType ref="2203634"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203809">
            <name>TypeName</name>
        </type>
        <type derived="true" id="type.2203811">
            <name>TypeName&amp;</name>
            <content>
                <baseType ref="2203809"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.727">
            <name>TypeName&amp;&amp;</name>
            <content>
                <baseType ref="2203809"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203810">
            <name>TypeName*</name>
            <content>
                <baseType ref="2203809"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.522">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="2197936"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.513">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="2197924"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.517">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="2197933"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="2203646">
            <name>UCharType</name>
        </type>
        <type derived="true" id="type.2203648">
            <name>UCharType&amp;</name>
            <content>
                <baseType ref="2203646"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203647">
            <name>UCharType*</name>
            <content>
                <baseType ref="2203646"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203664">
            <name>UIntType</name>
        </type>
        <type derived="true" id="type.2203666">
            <name>UIntType&amp;</name>
            <content>
                <baseType ref="2203664"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203665">
            <name>UIntType*</name>
            <content>
                <baseType ref="2203664"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203670">
            <name>ULongType</name>
        </type>
        <type derived="true" id="type.2203672">
            <name>ULongType&amp;</name>
            <content>
                <baseType ref="2203670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203671">
            <name>ULongType*</name>
            <content>
                <baseType ref="2203670"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203658">
            <name>UShortType</name>
        </type>
        <type derived="true" id="type.2203660">
            <name>UShortType&amp;</name>
            <content>
                <baseType ref="2203658"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203659">
            <name>UShortType*</name>
            <content>
                <baseType ref="2203658"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203716">
            <name>UnaryMinus</name>
        </type>
        <type derived="true" id="type.2203718">
            <name>UnaryMinus&amp;</name>
            <content>
                <baseType ref="2203716"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.709">
            <name>UnaryMinus&amp;&amp;</name>
            <content>
                <baseType ref="2203716"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203717">
            <name>UnaryMinus*</name>
            <content>
                <baseType ref="2203716"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203713">
            <name>UnaryPlus</name>
        </type>
        <type derived="true" id="type.2203715">
            <name>UnaryPlus&amp;</name>
            <content>
                <baseType ref="2203713"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.706">
            <name>UnaryPlus&amp;&amp;</name>
            <content>
                <baseType ref="2203713"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203714">
            <name>UnaryPlus*</name>
            <content>
                <baseType ref="2203713"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2199734" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="2202644"/>
                <argumentType ref="type.2199711"/>
            </content>
        </type>
        <type derived="true" id="type.500">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199734"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2200054" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="2202644"/>
                <argumentType ref="type.2200034"/>
            </content>
        </type>
        <type derived="true" id="type.549">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2200054"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2199996" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="2202644"/>
                <argumentType ref="type.2199975"/>
            </content>
        </type>
        <type derived="true" id="type.545">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199996"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2202710" specialization="true">
            <name>UniquePtr&lt;System.Exception></name>
            <content>
                <primaryType ref="2202644"/>
                <argumentType ref="2197723"/>
            </content>
        </type>
        <type derived="true" id="type.651">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202710"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2204389" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement></name>
            <content>
                <primaryType ref="2202644"/>
                <argumentType ref="2203896"/>
            </content>
        </type>
        <type derived="true" id="type.2204391">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;</name>
            <content>
                <baseType ref="type.2204389"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204395">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204389"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204390">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*</name>
            <content>
                <baseType ref="type.2204389"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204533">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*&amp;</name>
            <content>
                <baseType ref="type.2204389"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204534">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*&amp;&amp;</name>
            <content>
                <baseType ref="type.2204389"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204532">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>**</name>
            <content>
                <baseType ref="type.2204389"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2204449" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch></name>
            <content>
                <primaryType ref="2202644"/>
                <argumentType ref="2203914"/>
            </content>
        </type>
        <type derived="true" id="type.2204451">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;</name>
            <content>
                <baseType ref="type.2204449"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204455">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204449"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204450">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*</name>
            <content>
                <baseType ref="type.2204449"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204551">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*&amp;</name>
            <content>
                <baseType ref="type.2204449"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204552">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*&amp;&amp;</name>
            <content>
                <baseType ref="type.2204449"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204550">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>**</name>
            <content>
                <baseType ref="type.2204449"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2204436" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement></name>
            <content>
                <primaryType ref="2202644"/>
                <argumentType ref="2203848"/>
            </content>
        </type>
        <type derived="true" id="type.2204438">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement>&amp;</name>
            <content>
                <baseType ref="type.2204436"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204442">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204436"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204437">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement>*</name>
            <content>
                <baseType ref="type.2204436"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2204420" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement></name>
            <content>
                <primaryType ref="2202644"/>
                <argumentType ref="2203899"/>
            </content>
        </type>
        <type derived="true" id="type.2204422">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement>&amp;</name>
            <content>
                <baseType ref="type.2204420"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204426">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204420"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204421">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement>*</name>
            <content>
                <baseType ref="type.2204420"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2204264" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject></name>
            <content>
                <primaryType ref="2202644"/>
                <argumentType ref="2203682"/>
            </content>
        </type>
        <type derived="true" id="type.2204266">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;</name>
            <content>
                <baseType ref="type.2204264"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204270">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204264"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204265">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*</name>
            <content>
                <baseType ref="type.2204264"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204507">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*&amp;</name>
            <content>
                <baseType ref="type.2204264"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204508">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*&amp;&amp;</name>
            <content>
                <baseType ref="type.2204264"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204506">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>**</name>
            <content>
                <baseType ref="type.2204264"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2204343" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement></name>
            <content>
                <primaryType ref="2202644"/>
                <argumentType ref="2203842"/>
            </content>
        </type>
        <type derived="true" id="type.2204345">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;</name>
            <content>
                <baseType ref="type.2204343"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204349">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204343"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204344">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*</name>
            <content>
                <baseType ref="type.2204343"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204521">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*&amp;</name>
            <content>
                <baseType ref="type.2204343"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204522">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*&amp;&amp;</name>
            <content>
                <baseType ref="type.2204343"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204520">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>**</name>
            <content>
                <baseType ref="type.2204343"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2202644" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="2202644"/>
                <argumentType ref="2198185"/>
            </content>
        </type>
        <type derived="true" id="type.650">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.2202644"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.501">
            <name>Value&amp;</name>
            <content>
                <baseType ref="2197908"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.496">
            <name>Value&amp;&amp;</name>
            <content>
                <baseType ref="2197908"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="2203938">
            <name>Visitor</name>
        </type>
        <type derived="true" id="type.2203940">
            <name>Visitor&amp;</name>
            <content>
                <baseType ref="2203938"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203939">
            <name>Visitor*</name>
            <content>
                <baseType ref="2203938"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203679">
            <name>VoidType</name>
        </type>
        <type derived="true" id="type.2203681">
            <name>VoidType&amp;</name>
            <content>
                <baseType ref="2203679"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203680">
            <name>VoidType*</name>
            <content>
                <baseType ref="2203679"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203643">
            <name>WCharType</name>
        </type>
        <type derived="true" id="type.2203645">
            <name>WCharType&amp;</name>
            <content>
                <baseType ref="2203643"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203644">
            <name>WCharType*</name>
            <content>
                <baseType ref="2203643"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="2203857">
            <name>WhileStatement</name>
        </type>
        <type derived="true" id="type.2203859">
            <name>WhileStatement&amp;</name>
            <content>
                <baseType ref="2203857"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203858">
            <name>WhileStatement*</name>
            <content>
                <baseType ref="2203857"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.2197239">
            <name>bool</name>
        </type>
        <type basic="true" id="type.2197241">
            <name>byte</name>
        </type>
        <type derived="true" id="type.2197262">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.2197241"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2197261">
            <name>byte*</name>
            <content>
                <baseType ref="type.2197241"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.2197250">
            <name>char</name>
        </type>
        <type derived="true" id="type.2197289">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.2197250"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2197288">
            <name>char*</name>
            <content>
                <baseType ref="type.2197250"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.695">
            <name>const AddressOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203704"/>
            </content>
        </type>
        <type derived="true" id="type.696">
            <name>const AddressOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203704"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.767">
            <name>const AssertStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203920"/>
            </content>
        </type>
        <type derived="true" id="type.768">
            <name>const AssertStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203920"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.666">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197561"/>
            </content>
        </type>
        <type derived="true" id="type.667">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197561"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.668">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197564"/>
            </content>
        </type>
        <type derived="true" id="type.669">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197564"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.670">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197573"/>
            </content>
        </type>
        <type derived="true" id="type.2204397">
            <name>const CaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203896"/>
            </content>
        </type>
        <type derived="true" id="type.2204398">
            <name>const CaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203896"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204396">
            <name>const CaseStatement*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203896"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204457">
            <name>const Catch</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203914"/>
            </content>
        </type>
        <type derived="true" id="type.2204458">
            <name>const Catch&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203914"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204456">
            <name>const Catch*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203914"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.710">
            <name>const Complement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203719"/>
            </content>
        </type>
        <type derived="true" id="type.711">
            <name>const Complement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204444">
            <name>const CompoundStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203848"/>
            </content>
        </type>
        <type derived="true" id="type.2204445">
            <name>const CompoundStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203848"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204443">
            <name>const CompoundStatement*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203848"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.770">
            <name>const Const</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203923"/>
            </content>
        </type>
        <type derived="true" id="type.771">
            <name>const Const&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203923"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.728">
            <name>const Construct</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203815"/>
            </content>
        </type>
        <type derived="true" id="type.729">
            <name>const Construct&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203815"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.679">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197712"/>
            </content>
        </type>
        <type derived="true" id="type.680">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197712"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204428">
            <name>const DefaultStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203899"/>
            </content>
        </type>
        <type derived="true" id="type.2204429">
            <name>const DefaultStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203899"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204427">
            <name>const DefaultStatement*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203899"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.746">
            <name>const DeleteStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203878"/>
            </content>
        </type>
        <type derived="true" id="type.747">
            <name>const DeleteStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203878"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.692">
            <name>const Deref</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203701"/>
            </content>
        </type>
        <type derived="true" id="type.693">
            <name>const Deref&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203701"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.749">
            <name>const DestroyStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203881"/>
            </content>
        </type>
        <type derived="true" id="type.750">
            <name>const DestroyStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203881"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203685">
            <name>const DomObject</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203682"/>
            </content>
        </type>
        <type derived="true" id="type.2203687">
            <name>const DomObject&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203682"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203686">
            <name>const DomObject*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203682"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203692">
            <name>const Expression</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203689"/>
            </content>
        </type>
        <type derived="true" id="type.2203694">
            <name>const Expression&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203689"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203693">
            <name>const Expression*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203689"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.752">
            <name>const ExpressionStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203887"/>
            </content>
        </type>
        <type derived="true" id="type.753">
            <name>const ExpressionStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203887"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.671">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197737"/>
            </content>
        </type>
        <type derived="true" id="type.672">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.758">
            <name>const GotoCaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203905"/>
            </content>
        </type>
        <type derived="true" id="type.759">
            <name>const GotoCaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203905"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.743">
            <name>const GotoStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203872"/>
            </content>
        </type>
        <type derived="true" id="type.744">
            <name>const GotoStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203872"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203830">
            <name>const Identifier</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203827"/>
            </content>
        </type>
        <type derived="true" id="type.2203832">
            <name>const Identifier&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203827"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203831">
            <name>const Identifier*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203827"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.673">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197937"/>
            </content>
        </type>
        <type derived="true" id="type.674">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197937"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.713">
            <name>const Invoke</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203794"/>
            </content>
        </type>
        <type derived="true" id="type.714">
            <name>const Invoke&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203794"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.448">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197850"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.493">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197907"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.544">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197982"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.476">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197879"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204402">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204399"/>
            </content>
        </type>
        <type derived="true" id="type.2204404">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204399"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204403">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204399"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204462">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204459"/>
            </content>
        </type>
        <type derived="true" id="type.2204464">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204459"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204463">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204459"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204301">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204298"/>
            </content>
        </type>
        <type derived="true" id="type.2204303">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204298"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204302">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204298"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204353">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204350"/>
            </content>
        </type>
        <type derived="true" id="type.2204355">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204350"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204354">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204350"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.736">
            <name>const Literal</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203839"/>
            </content>
        </type>
        <type derived="true" id="type.737">
            <name>const Literal&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203839"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.682">
            <name>const LockGuard</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197919"/>
            </content>
        </type>
        <type derived="true" id="type.773">
            <name>const LvalueRef</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203926"/>
            </content>
        </type>
        <type derived="true" id="type.774">
            <name>const LvalueRef&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203926"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.681">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197916"/>
            </content>
        </type>
        <type derived="true" id="type.731">
            <name>const New</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203818"/>
            </content>
        </type>
        <type derived="true" id="type.732">
            <name>const New&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203818"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.689">
            <name>const Not</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203698"/>
            </content>
        </type>
        <type derived="true" id="type.690">
            <name>const Not&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203698"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.523">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2199824"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.518">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2199807"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.779">
            <name>const Pointer</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203932"/>
            </content>
        </type>
        <type derived="true" id="type.780">
            <name>const Pointer&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.719">
            <name>const PostfixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203803"/>
            </content>
        </type>
        <type derived="true" id="type.720">
            <name>const PostfixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203803"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.716">
            <name>const PostfixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203800"/>
            </content>
        </type>
        <type derived="true" id="type.717">
            <name>const PostfixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203800"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.701">
            <name>const PrefixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203710"/>
            </content>
        </type>
        <type derived="true" id="type.702">
            <name>const PrefixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203710"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.698">
            <name>const PrefixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203707"/>
            </content>
        </type>
        <type derived="true" id="type.699">
            <name>const PrefixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203707"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204415">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204412"/>
            </content>
        </type>
        <type derived="true" id="type.2204417">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204412"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204416">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204412"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204408">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204405"/>
            </content>
        </type>
        <type derived="true" id="type.2204410">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204405"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204409">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204405"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204475">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204472"/>
            </content>
        </type>
        <type derived="true" id="type.2204477">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204472"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204476">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204472"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204468">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204465"/>
            </content>
        </type>
        <type derived="true" id="type.2204470">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204465"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204469">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204465"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204314">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204311"/>
            </content>
        </type>
        <type derived="true" id="type.2204316">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204311"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204315">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204311"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204307">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204304"/>
            </content>
        </type>
        <type derived="true" id="type.2204309">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204304"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204308">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204304"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204366">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204363"/>
            </content>
        </type>
        <type derived="true" id="type.2204368">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204363"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204367">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204363"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204359">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204356"/>
            </content>
        </type>
        <type derived="true" id="type.2204361">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204356"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204360">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204356"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.505">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.502"/>
            </content>
        </type>
        <type derived="true" id="type.2204087">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204084"/>
            </content>
        </type>
        <type derived="true" id="type.507">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204089">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204084"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.506">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.502"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204088">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204084"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203951">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203948"/>
            </content>
        </type>
        <type derived="true" id="type.369">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.366"/>
            </content>
        </type>
        <type derived="true" id="type.2203953">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.371">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.366"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203952">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.370">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.366"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203952">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.362">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.359"/>
            </content>
        </type>
        <type derived="true" id="type.2203944">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203941"/>
            </content>
        </type>
        <type derived="true" id="type.2203946">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203941"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.364">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.359"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203945">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203941"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.363">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.359"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203970">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203967"/>
            </content>
        </type>
        <type derived="true" id="type.388">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.385"/>
            </content>
        </type>
        <type derived="true" id="type.2203972">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203967"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.390">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.385"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203971">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203967"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.389">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.385"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204224">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204221"/>
            </content>
        </type>
        <type derived="true" id="type.641">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.638"/>
            </content>
        </type>
        <type derived="true" id="type.2204226">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204221"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.643">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.638"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204226">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204221"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204225">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204221"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.642">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.638"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.399">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.396"/>
            </content>
        </type>
        <type derived="true" id="type.2203981">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203978"/>
            </content>
        </type>
        <type derived="true" id="type.401">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.396"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203983">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203978"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.400">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.396"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203982">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203978"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.378">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.375"/>
            </content>
        </type>
        <type derived="true" id="type.2203960">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203957"/>
            </content>
        </type>
        <type derived="true" id="type.2203962">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203957"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.380">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.375"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203961">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2203957"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.379">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.375"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.740">
            <name>const ReturnStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203851"/>
            </content>
        </type>
        <type derived="true" id="type.741">
            <name>const ReturnStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203851"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.776">
            <name>const RvalueRef</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203929"/>
            </content>
        </type>
        <type derived="true" id="type.777">
            <name>const RvalueRef&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203929"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.722">
            <name>const SizeOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203806"/>
            </content>
        </type>
        <type derived="true" id="type.723">
            <name>const SizeOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203806"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203845">
            <name>const Statement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203842"/>
            </content>
        </type>
        <type derived="true" id="type.2203847">
            <name>const Statement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203846">
            <name>const Statement*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203842"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.663">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197384"/>
            </content>
        </type>
        <type derived="true" id="type.664">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197384"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.675">
            <name>const StreamReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2198008"/>
            </content>
        </type>
        <type derived="true" id="type.676">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2198011"/>
            </content>
        </type>
        <type derived="true" id="type.2198358">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2198353"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.755">
            <name>const SwitchStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203902"/>
            </content>
        </type>
        <type derived="true" id="type.756">
            <name>const SwitchStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.449">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197851"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.447">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197848"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.446">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197846"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.434">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197819"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.445">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197844"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.444">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.443">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197840"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.442">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197838"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.430">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197812"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.433">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197817"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.431">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197814"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.404">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197759"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.417">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197779"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.519">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197935"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.423">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197800"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.514">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.510">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197923"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.537">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197975"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.428">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197809"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.427">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197807"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.406">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197761"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.418">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197782"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.437">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197824"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.481">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197887"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.472">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197870"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.470">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197868"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.469">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197866"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.440">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197829"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.439">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197827"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.419">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197784"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.425">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197804"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.420">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197786"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.424">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197802"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.421">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.422">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197791"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.436">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197822"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.535">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197973"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203836">
            <name>const TemplateId</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203833"/>
            </content>
        </type>
        <type derived="true" id="type.2203838">
            <name>const TemplateId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203833"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203837">
            <name>const TemplateId*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203833"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.761">
            <name>const ThrowStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203911"/>
            </content>
        </type>
        <type derived="true" id="type.762">
            <name>const ThrowStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203911"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.764">
            <name>const TryStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203917"/>
            </content>
        </type>
        <type derived="true" id="type.765">
            <name>const TryStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203917"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.685">
            <name>const Type</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203634"/>
            </content>
        </type>
        <type derived="true" id="type.686">
            <name>const Type&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203634"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.725">
            <name>const TypeName</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203809"/>
            </content>
        </type>
        <type derived="true" id="type.726">
            <name>const TypeName&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203809"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.441">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197830"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.426">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197805"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.429">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197810"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.432">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197815"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.520">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197936"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.515">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197933"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.438">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197825"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.511">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197924"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.435">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197820"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.707">
            <name>const UnaryMinus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203716"/>
            </content>
        </type>
        <type derived="true" id="type.708">
            <name>const UnaryMinus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203716"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.704">
            <name>const UnaryPlus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203713"/>
            </content>
        </type>
        <type derived="true" id="type.705">
            <name>const UnaryPlus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2203713"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.683">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2198034"/>
            </content>
        </type>
        <type derived="true" id="type.684">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2198034"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204392">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204389"/>
            </content>
        </type>
        <type derived="true" id="type.2204394">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204389"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204393">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204389"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204452">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204449"/>
            </content>
        </type>
        <type derived="true" id="type.2204454">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204449"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204453">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204449"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204439">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204436"/>
            </content>
        </type>
        <type derived="true" id="type.2204441">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204436"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204440">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204436"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204423">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204420"/>
            </content>
        </type>
        <type derived="true" id="type.2204425">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204420"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204424">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204420"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204267">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204264"/>
            </content>
        </type>
        <type derived="true" id="type.2204269">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204264"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204268">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204264"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204346">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204343"/>
            </content>
        </type>
        <type derived="true" id="type.2204348">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204343"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2204347">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204343"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.494">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="2197908"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2198271">
            <name>const char&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2197250"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2197388">
            <name>const char*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2197250"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.2197244">
            <name>int</name>
        </type>
        <type basic="true" id="type.2197252">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.2197295">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.2197252"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2197294">
            <name>uchar*</name>
            <content>
                <baseType ref="type.2197252"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.2197245">
            <name>uint</name>
        </type>
        <type derived="true" id="type.2197274">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.2197245"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2197273">
            <name>uint*</name>
            <content>
                <baseType ref="type.2197245"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.2197247">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.2197280">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.2197247"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2197279">
            <name>ulong*</name>
            <content>
                <baseType ref="type.2197247"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.2197251">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.2197292">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.2197251"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2197291">
            <name>wchar*</name>
            <content>
                <baseType ref="type.2197251"/>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
