<library>
    <name>System.Numerics.Multiprecision</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Numerics.Multiprecision">
            <name>System.Numerics.Multiprecision</name>
            <classes>
                <class id="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53">
                    <name>BigFloat</name>
                    <groupName>BigFloat</groupName>
                    <syntax> public class BigFloat;</syntax>
                    <constructors>
                        <constructor id="default_constructor_BigFloat_93627EDCE150FB0E6A3C69E270EF5A3D78CD4E6F">
                            <name>BigFloat()</name>
                            <syntax>public nothrow BigFloat();</syntax>
                        </constructor>
                        <constructor id="move_constructor_BigFloat_6C11CE3B5E6C96920B4295869E868C328BB6D3B2">
                            <name>BigFloat(BigFloat&amp;&amp; that)</name>
                            <syntax>public nothrow BigFloat(BigFloat&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7405953"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_BigFloat_1F61E552E17087EA5A54972F8181244E0EC960CF">
                            <name>BigFloat(const BigFloat&amp; that)</name>
                            <syntax>public nothrow BigFloat(const BigFloat&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_20895834C351E98079E7C3115BA0027A051253EB">
                            <name>BigFloat(const BigInt&amp; that)</name>
                            <syntax>public nothrow BigFloat(const BigInt&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_8AA5B0FEA3020B51F51CAD27CD80369E60DE1D88">
                            <name>BigFloat(const BigRational&amp; that)</name>
                            <syntax>public nothrow BigFloat(const BigRational&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_5A7F5845E5B2EAEA0A1C2C67115107E0DABA1A8E">
                            <name>BigFloat(const Precision&amp; prec)</name>
                            <syntax>public nothrow explicit BigFloat(const Precision&amp; prec);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prec</name>
                                    <type ref="type.7405570"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_4617CA97E98F7F68740CF339DAF91D915CFA2650">
                            <name>BigFloat(const String&lt;char>&amp; str)</name>
                            <syntax>public BigFloat(const String&lt;char>&amp; str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_3E12EF7782C96A5646F5EC50B60048654D688D9D">
                            <name>BigFloat(const String&lt;char>&amp; str, int base_)</name>
                            <syntax>public BigFloat(const String&lt;char>&amp; str, int base_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                                <parameter>
                                    <name>base_</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_BEC5259CEA939F27B59F690ADEDAFEBC9F1A4D0C">
                            <name>BigFloat(double that)</name>
                            <syntax>public nothrow BigFloat(double that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7388905"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_B46E7D1133D4E6EC69CB7B5C4480C9D7E7D48468">
                            <name>BigFloat(int that)</name>
                            <syntax>public nothrow BigFloat(int that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_DE636A2776098C7E40417E72AE67777028E701F6">
                            <name>BigFloat(uint that)</name>
                            <syntax>public nothrow BigFloat(uint that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7388901"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Handle_BigFloat_1417D6A5E5040218CC579E251EBA879B3ACEC024">
                            <name>Handle() const</name>
                            <syntax>public nothrow inline void* Handle() const;</syntax>
                            <returnType ref="type.7389047"/>
                        </function>
                        <function id="member_function_ToDouble_BigFloat_1C528A9567BA04A0264BEC604E7E9DD032674542">
                            <name>ToDouble() const</name>
                            <syntax>public nothrow double ToDouble() const;</syntax>
                            <returnType ref="type.7388905"/>
                        </function>
                        <function id="function_group_ToString_98B3EC27F057E3D2072BD8DC2D98473F5EB390FC">
                            <name>ToString</name>
                            <overloads>
                                <overload id="member_function_ToString_BigFloat_E30E31DC5EF5F17B9EDD35EC0A11B2469C3A9A0D">
                                    <name>ToString() const</name>
                                    <syntax>public nothrow String&lt;char> ToString() const;</syntax>
                                    <returnType ref="type.7390036"/>
                                </overload>
                                <overload id="member_function_ToString_BigFloat_1BFFE7FC67796F2BDA21FC70B9104876FD447ED6">
                                    <name>ToString(int base_) const</name>
                                    <syntax>public nothrow String&lt;char> ToString(int base_) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>base_</name>
                                            <type ref="type.7388900"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.7390036"/>
                                </overload>
                                <overload id="member_function_ToString_BigFloat_2BC083E6A179B017E555D529F1DDCC3938B1C187">
                                    <name>ToString(int base_, uint numDigits) const</name>
                                    <syntax>public nothrow String&lt;char> ToString(int base_, uint numDigits) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>base_</name>
                                            <type ref="type.7388900"/>
                                        </parameter>
                                        <parameter>
                                            <name>numDigits</name>
                                            <type ref="type.7388901"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.7390036"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_assign_B5A5FD837F72256AA73DDCB97ADD390F0292332C">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_BigFloat_9E1BAB4E59CBA74BB30C7567FE9DB4179CE93CF2">
                                    <name>operator=(BigFloat&amp;&amp; @p0)</name>
                                    <syntax>public nothrow default void operator=(BigFloat&amp;&amp; @p0);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>@p0</name>
                                            <type ref="type.7405953"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_BigFloat_FAA70BA19A4265F69079DAC0E86B66977549000C">
                                    <name>operator=(const BigFloat&amp; that)</name>
                                    <syntax>public nothrow void operator=(const BigFloat&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.7405576"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigFloat_53494148E45592ED0A47D64E9A68FCC15C31ACB5">
                                    <name>operator=(const BigInt&amp; that)</name>
                                    <syntax>public nothrow void operator=(const BigInt&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.7405582"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigFloat_1F87ED7CF5B22797AE35DD8844B35540FF78BFCC">
                                    <name>operator=(const BigRational&amp; that)</name>
                                    <syntax>public nothrow void operator=(const BigRational&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.7405588"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigFloat_072C568232242F7C22BEC668D93A3B33782D2F09">
                                    <name>operator=(double that)</name>
                                    <syntax>public nothrow void operator=(double that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.7388905"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigFloat_4F1B356E056A725F9F8DD930B7D832036107EF1F">
                                    <name>operator=(int that)</name>
                                    <syntax>public nothrow void operator=(int that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.7388900"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigFloat_59BCB3563F5BF847BFD4B3FE6D5D72F826C9294F">
                                    <name>operator=(uint that)</name>
                                    <syntax>public nothrow void operator=(uint that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.7388901"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_BigFloatDefaultPrecisionSetter_CB4ACD3C0708237EDA437E4EAEBD18268C65BDFB">
                    <name>BigFloatDefaultPrecisionSetter</name>
                    <groupName>BigFloatDefaultPrecisionSetter</groupName>
                    <syntax> public static class BigFloatDefaultPrecisionSetter;</syntax>
                    <staticMemberFunctions>
                        <function id="member_function_Init_BigFloatDefaultPrecisionSetter_466501FD7806CCA3447F4EAC73B22A8C51582068">
                            <name>Init()</name>
                            <syntax>public static nothrow void Init();</syntax>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0">
                    <name>BigInt</name>
                    <groupName>BigInt</groupName>
                    <syntax> public class BigInt;</syntax>
                    <constructors>
                        <constructor id="default_constructor_BigInt_F0D8CC45932E09FAA2EB14A8B64247F39C1EFFB7">
                            <name>BigInt()</name>
                            <syntax>public nothrow BigInt();</syntax>
                        </constructor>
                        <constructor id="move_constructor_BigInt_D09987D7C430C2B3B3453A653FBAC4415D47F81A">
                            <name>BigInt(BigInt&amp;&amp; that)</name>
                            <syntax>public nothrow BigInt(BigInt&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7405954"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_BigInt_FEDC121C2BA0FAF385677CE5CDF2167A78328312">
                            <name>BigInt(const BigInt&amp; that)</name>
                            <syntax>public nothrow BigInt(const BigInt&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigInt_B88EFB5B832B57059DB131C18BB6F5EE8DF4483D">
                            <name>BigInt(const String&lt;char>&amp; str)</name>
                            <syntax>public BigInt(const String&lt;char>&amp; str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigInt_F81F5A54F2CD3D6F05A0021F721AB3FA30AAE086">
                            <name>BigInt(const String&lt;char>&amp; str, int base_)</name>
                            <syntax>public BigInt(const String&lt;char>&amp; str, int base_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                                <parameter>
                                    <name>base_</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigInt_47A90AE6B6DCC8EA1BFDBFD2D18FAB80E68E02CE">
                            <name>BigInt(int that)</name>
                            <syntax>public nothrow BigInt(int that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigInt_4F93C9E2AA2CF328A1038B63471043F3B6916D4F">
                            <name>BigInt(uint that)</name>
                            <syntax>public nothrow BigInt(uint that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7388901"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Handle_BigInt_BBA7C4AD8C6B37F828A4EE438EAE4366E13D0BBA">
                            <name>Handle() const</name>
                            <syntax>public nothrow inline void* Handle() const;</syntax>
                            <returnType ref="type.7389047"/>
                        </function>
                        <function id="function_group_ToString_38A1AA35A0463572A5F37530342D49BF3F84209A">
                            <name>ToString</name>
                            <overloads>
                                <overload id="member_function_ToString_BigInt_81B193B60976E09DD78E3CF9D244111E98198646">
                                    <name>ToString() const</name>
                                    <syntax>public nothrow String&lt;char> ToString() const;</syntax>
                                    <returnType ref="type.7390036"/>
                                </overload>
                                <overload id="member_function_ToString_BigInt_EF2C39166B714AD2A345836EA019462E561BBFFE">
                                    <name>ToString(int base_) const</name>
                                    <syntax>public nothrow String&lt;char> ToString(int base_) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>base_</name>
                                            <type ref="type.7388900"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.7390036"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_assign_70E1728FD2D77DE93BCD772643DC644EA2344232">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_BigInt_DC3FCEAE0B510623A25F20290991267D0226D4B4">
                                    <name>operator=(BigInt&amp;&amp; that)</name>
                                    <syntax>public nothrow default void operator=(BigInt&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.7405954"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_BigInt_D8618CCF9748BC2CD1F5A48DDF578A1FEA88EBF2">
                                    <name>operator=(const BigInt&amp; that)</name>
                                    <syntax>public nothrow void operator=(const BigInt&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.7405582"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigInt_4D6E717A2215A11ADBF322A17C7AD5877511C50E">
                                    <name>operator=(int that)</name>
                                    <syntax>public nothrow void operator=(int that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.7388900"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigInt_BE9829921A6677F81143E1F1F4BDFE371F966ADD">
                                    <name>operator=(uint that)</name>
                                    <syntax>public nothrow void operator=(uint that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.7388901"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23">
                    <name>BigRational</name>
                    <groupName>BigRational</groupName>
                    <syntax> public class BigRational;</syntax>
                    <constructors>
                        <constructor id="default_constructor_BigRational_9DE79FAB17EB1D58E27ED82452FF005E17024137">
                            <name>BigRational()</name>
                            <syntax>public nothrow BigRational();</syntax>
                        </constructor>
                        <constructor id="move_constructor_BigRational_97DF5234EF8EC351D955461A3927AF0904CEDEED">
                            <name>BigRational(BigRational&amp;&amp; that)</name>
                            <syntax>public nothrow BigRational(BigRational&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7405955"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigRational_E10112D5054C49BE989E0D6579FD11A918622AF4">
                            <name>BigRational(const BigInt&amp; that)</name>
                            <syntax>public nothrow BigRational(const BigInt&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_BigRational_EAFD5EE0FD87C90EDECAF123753D4E73D6AAE6A9">
                            <name>BigRational(const BigRational&amp; that)</name>
                            <syntax>public nothrow BigRational(const BigRational&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigRational_0B966659253AAA93D4984CCD6043717020B06C7F">
                            <name>BigRational(const String&lt;char>&amp; str)</name>
                            <syntax>public BigRational(const String&lt;char>&amp; str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigRational_D417EECACBCE9AB213A03F148A45A2587D2C3EDC">
                            <name>BigRational(const String&lt;char>&amp; str, int base_)</name>
                            <syntax>public BigRational(const String&lt;char>&amp; str, int base_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.7390041"/>
                                </parameter>
                                <parameter>
                                    <name>base_</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigRational_27F63093542FAAB786B5194C678BA4BC3B10821F">
                            <name>BigRational(int that)</name>
                            <syntax>public nothrow BigRational(int that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7388900"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigRational_E54905588F1D534D060391B3F51005BDAFE376B6">
                            <name>BigRational(uint that)</name>
                            <syntax>public nothrow BigRational(uint that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7388901"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Denominator_BigRational_93F785422587940FDBD8744DDE8EDB3BEC34E9AE">
                            <name>Denominator() const</name>
                            <syntax>public nothrow BigInt Denominator() const;</syntax>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </function>
                        <function id="member_function_Handle_BigRational_4B4A4C010B5C73524D802A8358AF857B3C7E2041">
                            <name>Handle() const</name>
                            <syntax>public nothrow inline void* Handle() const;</syntax>
                            <returnType ref="type.7389047"/>
                        </function>
                        <function id="member_function_Numerator_BigRational_57AA95ECA704B7D02CAF2FAEC1107D71860712C0">
                            <name>Numerator() const</name>
                            <syntax>public nothrow BigInt Numerator() const;</syntax>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </function>
                        <function id="function_group_ToString_9081DE02019B34FDFB3C2AA6156C9E659D88201A">
                            <name>ToString</name>
                            <overloads>
                                <overload id="member_function_ToString_BigRational_C879483567FBA605CCF5B9D89C48D75497225E2B">
                                    <name>ToString() const</name>
                                    <syntax>public nothrow String&lt;char> ToString() const;</syntax>
                                    <returnType ref="type.7390036"/>
                                </overload>
                                <overload id="member_function_ToString_BigRational_52226403A912990BB98B1186A02D3B508FE205A8">
                                    <name>ToString(int base_) const</name>
                                    <syntax>public nothrow String&lt;char> ToString(int base_) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>base_</name>
                                            <type ref="type.7388900"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.7390036"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_assign_75227836E1BEB739B20F4AF2446D905A62609D07">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_BigRational_F40F9BE8C7C6FEF21E9226ADE79E7DFCB64FCDDF">
                                    <name>operator=(BigRational&amp;&amp; that)</name>
                                    <syntax>public nothrow default void operator=(BigRational&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.7405955"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_BigRational_A1C2A56E36337DD74601196A898C79636CEA6AB3">
                                    <name>operator=(const BigRational&amp; that)</name>
                                    <syntax>public nothrow void operator=(const BigRational&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.7405588"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A">
                    <name>Precision</name>
                    <groupName>Precision</groupName>
                    <syntax> public class Precision;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Precision_A108FFE15EB702D0AD136DEC7FDAE68F99EA056A">
                            <name>Precision()</name>
                            <syntax>public nothrow Precision();</syntax>
                        </constructor>
                        <constructor id="constructor_Precision_84AC8A34F35EE7259416A6E9DB6CDF22FFE47A09">
                            <name>Precision(uint prec_)</name>
                            <syntax>public nothrow explicit Precision(uint prec_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prec_</name>
                                    <type ref="type.7388901"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ToUInt_Precision_A1E388CD72EA93FEF3914CFC6942F83536BFF323">
                            <name>ToUInt() const</name>
                            <syntax>public nothrow uint ToUInt() const;</syntax>
                            <returnType ref="type.7388901"/>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_group_Abs_E4CE68D81FB8D5B1A65D79ED0BA7D4358D27A208">
                    <name>Abs</name>
                    <overloads>
                        <overload id="function_Abs_7AF65AE95722C52CB1ADD3B39BA32D2C508E3BE3">
                            <name>Abs(const BigFloat&amp; x)</name>
                            <syntax>public nothrow BigFloat Abs(const BigFloat&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_Abs_F9EBD9B5E297B955626D9D7627866DF6D574D01D">
                            <name>Abs(const BigInt&amp; x)</name>
                            <syntax>public nothrow BigInt Abs(const BigInt&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_Abs_75D9575092CEFB070B30DCC89DB9675A48C75450">
                            <name>Abs(const BigRational&amp; x)</name>
                            <syntax>public nothrow BigRational Abs(const BigRational&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_Ceil_C817E559F2C738FBD22975B3D10B9290702092FA">
                    <name>Ceil(const BigFloat&amp; x)</name>
                    <syntax>public nothrow BigFloat Ceil(const BigFloat&amp; x);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.7405576"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                </function>
                <function id="function_ClearBit_5D06E02EC012493FA5CF446EFCA8D186C858AD3C">
                    <name>ClearBit(BigInt&amp; x, uint bitIndex)</name>
                    <syntax>public nothrow void ClearBit(BigInt&amp; x, uint bitIndex);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.7405579"/>
                        </parameter>
                        <parameter>
                            <name>bitIndex</name>
                            <type ref="type.7388901"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_Floor_8415F06A552A52B7B001DF605E48DC8A5E763A0E">
                    <name>Floor(const BigFloat&amp; x)</name>
                    <syntax>public nothrow BigFloat Floor(const BigFloat&amp; x);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.7405576"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                </function>
                <function id="function_GetBigFloatDefaultPrecision_483AC84D8899A5A9226693C3E387D31527352A29">
                    <name>GetBigFloatDefaultPrecision()</name>
                    <syntax>public nothrow uint GetBigFloatDefaultPrecision();</syntax>
                    <returnType ref="type.7388901"/>
                </function>
                <function id="function_SetBit_89FDAEFA3B0863EB2A94108DC13944EB3C66F06E">
                    <name>SetBit(BigInt&amp; x, uint bitIndex)</name>
                    <syntax>public nothrow void SetBit(BigInt&amp; x, uint bitIndex);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.7405579"/>
                        </parameter>
                        <parameter>
                            <name>bitIndex</name>
                            <type ref="type.7388901"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_Sqrt_1255F3C4594C8479BD9B55E746F127A4B215C584">
                    <name>Sqrt(const BigFloat&amp; x)</name>
                    <syntax>public nothrow BigFloat Sqrt(const BigFloat&amp; x);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.7405576"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                </function>
                <function id="function_TestBit_38E54EA4251112CCB31E9E78644C86EEDBCF29C5">
                    <name>TestBit(BigInt&amp; x, uint bitIndex)</name>
                    <syntax>public nothrow bool TestBit(BigInt&amp; x, uint bitIndex);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.7405579"/>
                        </parameter>
                        <parameter>
                            <name>bitIndex</name>
                            <type ref="type.7388901"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.7388895"/>
                </function>
                <function id="function_ToggleBit_2866B63CAB922D367955045744679F9D06F71EB7">
                    <name>ToggleBit(BigInt&amp; x, uint bitIndex)</name>
                    <syntax>public nothrow void ToggleBit(BigInt&amp; x, uint bitIndex);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.7405579"/>
                        </parameter>
                        <parameter>
                            <name>bitIndex</name>
                            <type ref="type.7388901"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_Trunc_8A007277928B2C2F16C0FA3DB750A307F2F61A88">
                    <name>Trunc(const BigFloat&amp; x)</name>
                    <syntax>public nothrow BigFloat Trunc(const BigFloat&amp; x);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.7405576"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                </function>
                <function id="function_op_rem_2B0C09A64E292F4D12091D04EDC86AC780DDAB5D">
                    <name>operator%(const BigInt&amp; left, const BigInt&amp; right)</name>
                    <syntax>public nothrow BigInt operator%(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.7405582"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.7405582"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                </function>
                <function id="function_op_and_EC306043569A570820AF0BD9C636E5A9BA3C6C57">
                    <name>operator&amp;(const BigInt&amp; left, const BigInt&amp; right)</name>
                    <syntax>public nothrow BigInt operator&amp;(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.7405582"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.7405582"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                </function>
                <function id="function_group_op_star_33CA2CCCC406AC14ACB6EE8CAAD649263ABEB595">
                    <name>operator*</name>
                    <overloads>
                        <overload id="function_op_star_29C14CA47F9DE49F712F4A8398692392678764D4">
                            <name>operator*(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow BigFloat operator*(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_op_star_7DA2D996E7725DD3B92C7D39EC7BDA80ECDF1B20">
                            <name>operator*(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow BigInt operator*(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_op_star_B61A03E02FC293D628B81BF2CFBCEA30521DBB65">
                            <name>operator*(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow BigRational operator*(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_plus_56A27315B56A578F0EF8630C0FF9385E5BE979DC">
                    <name>operator+</name>
                    <overloads>
                        <overload id="function_op_plus_D93C682747818BA5D9D7B791D111D1101439A5DB">
                            <name>operator+(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow BigFloat operator+(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_op_plus_EA427371E605518798A3E8A1CAEBF51E53B30955">
                            <name>operator+(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow BigInt operator+(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_op_plus_A05F8F6C489F7EFA03E4A3417E50D280E85B48A0">
                            <name>operator+(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow BigRational operator+(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_minus_332A4C7FC57A2990CF94BAAD11CCFC1B616D7B46">
                    <name>operator-</name>
                    <overloads>
                        <overload id="function_op_minus_99C9221D98E252F2FCE33A60D0BDFC137C8C0FE9">
                            <name>operator-(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow BigFloat operator-(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_op_minus_CEEA9BCD92DBE119988EB64738734AE80E018FB5">
                            <name>operator-(const BigFloat&amp; x)</name>
                            <syntax>public nothrow BigFloat operator-(const BigFloat&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_op_minus_2C757867007F6B36E4D047F5BE1D206AD00774C1">
                            <name>operator-(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow BigInt operator-(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_op_minus_2D312A4E8EA0F7FCFAB262227D11E8CABEB9ED3D">
                            <name>operator-(const BigInt&amp; x)</name>
                            <syntax>public nothrow BigInt operator-(const BigInt&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_op_minus_C7AB9CC4A7F3B11D26791CE549EC58B79FAE4B39">
                            <name>operator-(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow BigRational operator-(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                        <overload id="function_op_minus_966229DDAD79D88421205EABD24D495B8C62DEB2">
                            <name>operator-(const BigRational&amp; x)</name>
                            <syntax>public nothrow BigRational operator-(const BigRational&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_div_4362D23971F70C9242138FDD0E5E82AAED15E5A4">
                    <name>operator/</name>
                    <overloads>
                        <overload id="function_op_div_50F27EF62AF5344792B487CCC0274A0D11DD77F9">
                            <name>operator/(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow BigFloat operator/(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_op_div_0181C3610D16D6998B08782D86642594FC778E36">
                            <name>operator/(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow BigInt operator/(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_op_div_E24C6253EDE268977AB8DBF1085636DBCB4D26E8">
                            <name>operator/(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow BigRational operator/(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_less_01AD50632F343E948CAE58C5DED9091EFC0C8AFF">
                    <name>operator&lt;</name>
                    <overloads>
                        <overload id="function_op_less_778CB342C328F87381B0D038924CC6DCD7C1C65F">
                            <name>operator&lt;(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </overload>
                        <overload id="function_op_less_D4F7C5613F8286585A8FAE55078BF3A240CDCDF7">
                            <name>operator&lt;(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </overload>
                        <overload id="function_op_less_C3A452199911B0C014169BE00A05B55C2D11A932">
                            <name>operator&lt;(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_shl_2AE956980431DA753E03C4D98C544C64D5AACC77">
                    <name>operator&lt;&lt;</name>
                    <overloads>
                        <overload id="function_op_shl_51185FE91502A20F8199DAAD31F12942792BC6BC">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const BigFloat&amp; x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const BigFloat&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389712"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389712"/>
                        </overload>
                        <overload id="function_op_shl_36B833FDDF2C3535DD58C4EEB2E2F244C32CD4FA">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const BigInt&amp; x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const BigInt&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389712"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389712"/>
                        </overload>
                        <overload id="function_op_shl_265F8C16A6D2F9F29E0FAC407B092302F6995376">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const BigRational&amp; x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const BigRational&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389712"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389712"/>
                        </overload>
                        <overload id="function_op_shl_5109EA5D117645C4982C3975B51A22B43196BDCD">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const BigInt&amp; x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const BigInt&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.7389724"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389724"/>
                        </overload>
                        <overload id="function_op_shl_92BC67114039AB5A6F50E1330AB0576CE0DAFDE8">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const BigFloat&amp; x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const BigFloat&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.7389724"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389724"/>
                        </overload>
                        <overload id="function_op_shl_4FE83EF354E708B1200569E34B607CEB52DA7483">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const BigRational&amp; x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const BigRational&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.7389724"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7389724"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_eq_E07C6E6EC42CC7A6F491A21ED683ACA7A96D3E15">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_F89F98C7BCDAE1EA7E60CAAE44411BF33A6FF57E">
                            <name>operator==(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow bool operator==(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405576"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </overload>
                        <overload id="function_op_eq_4DF70DC46BAE5102B7B93CAD67CCFAB1EFD41F12">
                            <name>operator==(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow bool operator==(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405582"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </overload>
                        <overload id="function_op_eq_ABE9D40B4046D37E72F56D6EC21271BB78A479CF">
                            <name>operator==(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow bool operator==(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.7405588"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7388895"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_op_xor_4F7D875F1408C1AD642ED00AECEE4971D87DB691">
                    <name>operator^(const BigInt&amp; left, const BigInt&amp; right)</name>
                    <syntax>public nothrow BigInt operator^(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.7405582"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.7405582"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                </function>
                <function id="function_op_or_C16146AC5235A380AA8754B8B163BC5B0C53A95F">
                    <name>operator|(const BigInt&amp; left, const BigInt&amp; right)</name>
                    <syntax>public nothrow BigInt operator|(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.7405582"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.7405582"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                </function>
                <function id="function_op_cpl_F2C34039298906124AEC6058776E30FFA1826CCB">
                    <name>operator~(const BigInt&amp; x)</name>
                    <syntax>public nothrow BigInt operator~(const BigInt&amp; x);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.7405582"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                </function>
            </functions>
        </namespace>
    </namespaces>
    <types>
        <type id="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53">
            <name>BigFloat</name>
        </type>
        <type derived="true" id="type.7405573">
            <name>BigFloat&amp;</name>
            <content>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405953">
            <name>BigFloat&amp;&amp;</name>
            <content>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405572">
            <name>BigFloat*</name>
            <content>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405962">
            <name>BigFloat*&amp;</name>
            <content>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405961">
            <name>BigFloat**</name>
            <content>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BigFloatDefaultPrecisionSetter_CB4ACD3C0708237EDA437E4EAEBD18268C65BDFB">
            <name>BigFloatDefaultPrecisionSetter</name>
        </type>
        <type derived="true" id="type.7405957">
            <name>BigFloatDefaultPrecisionSetter&amp;</name>
            <content>
                <baseType ref="class_BigFloatDefaultPrecisionSetter_CB4ACD3C0708237EDA437E4EAEBD18268C65BDFB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405956">
            <name>BigFloatDefaultPrecisionSetter*</name>
            <content>
                <baseType ref="class_BigFloatDefaultPrecisionSetter_CB4ACD3C0708237EDA437E4EAEBD18268C65BDFB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0">
            <name>BigInt</name>
        </type>
        <type derived="true" id="type.7405579">
            <name>BigInt&amp;</name>
            <content>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405954">
            <name>BigInt&amp;&amp;</name>
            <content>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405578">
            <name>BigInt*</name>
            <content>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405971">
            <name>BigInt*&amp;</name>
            <content>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405970">
            <name>BigInt**</name>
            <content>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23">
            <name>BigRational</name>
        </type>
        <type derived="true" id="type.7405585">
            <name>BigRational&amp;</name>
            <content>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405955">
            <name>BigRational&amp;&amp;</name>
            <content>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405584">
            <name>BigRational*</name>
            <content>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405977">
            <name>BigRational*&amp;</name>
            <content>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405976">
            <name>BigRational**</name>
            <content>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390801" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.4807">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.7390801"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="7389532"/>
            </content>
        </type>
        <type derived="true" id="type.4815">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="7389553"/>
            </content>
        </type>
        <type derived="true" id="type.4828">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5075">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390010" specialization="true">
            <name>Counter&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type id="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30" specialization="true">
            <name>Counter&lt;T></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="7389691"/>
            </content>
        </type>
        <type derived="true" id="type.4900">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4903">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4912">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4919">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4934">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4941">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A" specialization="true">
            <name>Counter&lt;U></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="7389683"/>
            </content>
        </type>
        <type id="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <argumentType ref="7389441"/>
            </content>
        </type>
        <type derived="true" id="type.4765">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="7389434"/>
                <argumentType ref="7389435"/>
                <argumentType ref="7389436"/>
            </content>
        </type>
        <type derived="true" id="type.4761">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4762">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="7389443"/>
                <argumentType ref="type.7390370"/>
                <argumentType ref="type.7390372"/>
            </content>
        </type>
        <type derived="true" id="type.4767">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4764">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4769">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="7389443"/>
                <argumentType ref="type.7390355"/>
                <argumentType ref="type.7390356"/>
            </content>
        </type>
        <type derived="true" id="type.4768">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4763">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4766">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="7389523"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <argumentType ref="7389525"/>
                <argumentType ref="7389526"/>
            </content>
        </type>
        <type derived="true" id="type.4803">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="7389552"/>
                <argumentType ref="7389553"/>
                <argumentType ref="7389554"/>
                <argumentType ref="7389555"/>
                <argumentType ref="7389556"/>
            </content>
        </type>
        <type derived="true" id="type.4823">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="7389532"/>
                <argumentType ref="7389532"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="7389533"/>
                <argumentType ref="7389534"/>
            </content>
        </type>
        <type derived="true" id="type.4811">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <argumentType ref="7389569"/>
            </content>
        </type>
        <type derived="true" id="type.4832">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4831">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390820" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390802"/>
            </content>
        </type>
        <type derived="true" id="type.4806">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390973" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7390956"/>
            </content>
        </type>
        <type derived="true" id="type.4814">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390973"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391158" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.7391139"/>
            </content>
        </type>
        <type derived="true" id="type.4827">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391158"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392525" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.4959">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392525"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="7389573"/>
            </content>
        </type>
        <type derived="true" id="type.4871">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4953">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4835">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1" specialization="true">
            <name>LockGuard&lt;Mtx></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="7389598"/>
            </content>
        </type>
        <type derived="true" id="type.4859">
            <name>LockGuard&lt;Mtx>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394867" specialization="true">
            <name>LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.5046">
            <name>LockGuard&lt;System.Threading.Mutex>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394867"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4856">
            <name>Mtx&amp;</name>
            <content>
                <baseType ref="7389598"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7389712">
            <name>OutputStream&amp;</name>
            <content>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="7389609"/>
                <argumentType ref="7389610"/>
            </content>
        </type>
        <type id="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A">
            <name>Precision</name>
        </type>
        <type derived="true" id="type.7405567">
            <name>Precision&amp;</name>
            <content>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5085">
            <name>Precision&amp;&amp;</name>
            <content>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405566">
            <name>Precision*</name>
            <content>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7393708" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389818"/>
                <argumentType ref="type.7393551"/>
                <argumentType ref="type.7393707"/>
            </content>
        </type>
        <type derived="true" id="type.5003">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393708"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394748" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389889"/>
                <argumentType ref="type.7394591"/>
                <argumentType ref="type.7394747"/>
            </content>
        </type>
        <type derived="true" id="type.5028">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394748"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394332" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389863"/>
                <argumentType ref="type.7394175"/>
                <argumentType ref="type.7394331"/>
            </content>
        </type>
        <type derived="true" id="type.5018">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394332"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394540" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389876"/>
                <argumentType ref="type.7394383"/>
                <argumentType ref="type.7394539"/>
            </content>
        </type>
        <type derived="true" id="type.5023">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394540"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393071" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389788"/>
                <argumentType ref="type.7392900"/>
                <argumentType ref="type.7393070"/>
            </content>
        </type>
        <type derived="true" id="type.4988">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393289" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389798"/>
                <argumentType ref="type.7393132"/>
                <argumentType ref="type.7393288"/>
            </content>
        </type>
        <type derived="true" id="type.4993">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393289"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390837" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390802"/>
                <argumentType ref="type.7390835"/>
                <argumentType ref="type.7390836"/>
            </content>
        </type>
        <type id="type.7390915" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390881"/>
                <argumentType ref="type.7390913"/>
                <argumentType ref="type.7390914"/>
            </content>
        </type>
        <type derived="true" id="type.4810">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390915"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4805">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390837"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390828" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390802"/>
                <argumentType ref="type.7390826"/>
                <argumentType ref="type.7390827"/>
            </content>
        </type>
        <type id="type.7390906" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390881"/>
                <argumentType ref="type.7390904"/>
                <argumentType ref="type.7390905"/>
            </content>
        </type>
        <type derived="true" id="type.4804">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390828"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4809">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390906"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393685" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393651"/>
                <argumentType ref="type.7393683"/>
                <argumentType ref="type.7393684"/>
            </content>
        </type>
        <type derived="true" id="type.5002">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393685"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393676" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393651"/>
                <argumentType ref="type.7393674"/>
                <argumentType ref="type.7393675"/>
            </content>
        </type>
        <type derived="true" id="type.5001">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393676"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394725" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394691"/>
                <argumentType ref="type.7394723"/>
                <argumentType ref="type.7394724"/>
            </content>
        </type>
        <type derived="true" id="type.5027">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394725"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394716" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394691"/>
                <argumentType ref="type.7394714"/>
                <argumentType ref="type.7394715"/>
            </content>
        </type>
        <type derived="true" id="type.5026">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394716"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394309" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394275"/>
                <argumentType ref="type.7394307"/>
                <argumentType ref="type.7394308"/>
            </content>
        </type>
        <type derived="true" id="type.5017">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394300" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394275"/>
                <argumentType ref="type.7394298"/>
                <argumentType ref="type.7394299"/>
            </content>
        </type>
        <type derived="true" id="type.5016">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394300"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394517" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394483"/>
                <argumentType ref="type.7394515"/>
                <argumentType ref="type.7394516"/>
            </content>
        </type>
        <type derived="true" id="type.5022">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394517"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394508" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394483"/>
                <argumentType ref="type.7394506"/>
                <argumentType ref="type.7394507"/>
            </content>
        </type>
        <type derived="true" id="type.5021">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394508"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393055" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393021"/>
                <argumentType ref="type.7393053"/>
                <argumentType ref="type.7393054"/>
            </content>
        </type>
        <type derived="true" id="type.4987">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393046" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393021"/>
                <argumentType ref="type.7393044"/>
                <argumentType ref="type.7393045"/>
            </content>
        </type>
        <type derived="true" id="type.4986">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393046"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393266" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393232"/>
                <argumentType ref="type.7393264"/>
                <argumentType ref="type.7393265"/>
            </content>
        </type>
        <type derived="true" id="type.4992">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393266"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393257" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393232"/>
                <argumentType ref="type.7393255"/>
                <argumentType ref="type.7393256"/>
            </content>
        </type>
        <type derived="true" id="type.4991">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393257"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393477" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393443"/>
                <argumentType ref="type.7393475"/>
                <argumentType ref="type.7393476"/>
            </content>
        </type>
        <type derived="true" id="type.4997">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393477"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393468" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393443"/>
                <argumentType ref="type.7393466"/>
                <argumentType ref="type.7393467"/>
            </content>
        </type>
        <type derived="true" id="type.4996">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393468"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394101" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394067"/>
                <argumentType ref="type.7394099"/>
                <argumentType ref="type.7394100"/>
            </content>
        </type>
        <type derived="true" id="type.5012">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394101"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394092" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394067"/>
                <argumentType ref="type.7394090"/>
                <argumentType ref="type.7394091"/>
            </content>
        </type>
        <type derived="true" id="type.5011">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394092"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393893" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393859"/>
                <argumentType ref="type.7393891"/>
                <argumentType ref="type.7393892"/>
            </content>
        </type>
        <type derived="true" id="type.5007">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393893"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393884" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393859"/>
                <argumentType ref="type.7393882"/>
                <argumentType ref="type.7393883"/>
            </content>
        </type>
        <type derived="true" id="type.5006">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393884"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393609" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393575"/>
                <argumentType ref="type.7393607"/>
                <argumentType ref="type.7393608"/>
            </content>
        </type>
        <type derived="true" id="type.5000">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393609"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393600" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393575"/>
                <argumentType ref="type.7393598"/>
                <argumentType ref="type.7393599"/>
            </content>
        </type>
        <type derived="true" id="type.4999">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393600"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394649" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394615"/>
                <argumentType ref="type.7394647"/>
                <argumentType ref="type.7394648"/>
            </content>
        </type>
        <type derived="true" id="type.5025">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394649"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394640" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394615"/>
                <argumentType ref="type.7394638"/>
                <argumentType ref="type.7394639"/>
            </content>
        </type>
        <type derived="true" id="type.5024">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394640"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394233" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394199"/>
                <argumentType ref="type.7394231"/>
                <argumentType ref="type.7394232"/>
            </content>
        </type>
        <type derived="true" id="type.5015">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394233"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394224" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394199"/>
                <argumentType ref="type.7394222"/>
                <argumentType ref="type.7394223"/>
            </content>
        </type>
        <type derived="true" id="type.5014">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394224"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394441" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394407"/>
                <argumentType ref="type.7394439"/>
                <argumentType ref="type.7394440"/>
            </content>
        </type>
        <type derived="true" id="type.5020">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394441"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394432" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394407"/>
                <argumentType ref="type.7394430"/>
                <argumentType ref="type.7394431"/>
            </content>
        </type>
        <type derived="true" id="type.5019">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394432"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392958" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7392924"/>
                <argumentType ref="type.7392956"/>
                <argumentType ref="type.7392957"/>
            </content>
        </type>
        <type derived="true" id="type.4985">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392958"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392949" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7392924"/>
                <argumentType ref="type.7392947"/>
                <argumentType ref="type.7392948"/>
            </content>
        </type>
        <type derived="true" id="type.4984">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392949"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393190" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393156"/>
                <argumentType ref="type.7393188"/>
                <argumentType ref="type.7393189"/>
            </content>
        </type>
        <type derived="true" id="type.4990">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393190"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393181" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393156"/>
                <argumentType ref="type.7393179"/>
                <argumentType ref="type.7393180"/>
            </content>
        </type>
        <type derived="true" id="type.4989">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393181"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393401" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393367"/>
                <argumentType ref="type.7393399"/>
                <argumentType ref="type.7393400"/>
            </content>
        </type>
        <type derived="true" id="type.4995">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393401"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393392" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393367"/>
                <argumentType ref="type.7393390"/>
                <argumentType ref="type.7393391"/>
            </content>
        </type>
        <type derived="true" id="type.4994">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394025" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393991"/>
                <argumentType ref="type.7394023"/>
                <argumentType ref="type.7394024"/>
            </content>
        </type>
        <type derived="true" id="type.5010">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394025"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394016" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393991"/>
                <argumentType ref="type.7394014"/>
                <argumentType ref="type.7394015"/>
            </content>
        </type>
        <type derived="true" id="type.5009">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394016"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393817" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393783"/>
                <argumentType ref="type.7393815"/>
                <argumentType ref="type.7393816"/>
            </content>
        </type>
        <type derived="true" id="type.5005">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393817"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393808" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7393783"/>
                <argumentType ref="type.7393806"/>
                <argumentType ref="type.7393807"/>
            </content>
        </type>
        <type derived="true" id="type.5004">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393808"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390990" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390956"/>
                <argumentType ref="type.7390988"/>
                <argumentType ref="type.7390989"/>
            </content>
        </type>
        <type id="type.7391064" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391030"/>
                <argumentType ref="type.7391062"/>
                <argumentType ref="type.7391063"/>
            </content>
        </type>
        <type derived="true" id="type.4813">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4817">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390981" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390956"/>
                <argumentType ref="type.7390979"/>
                <argumentType ref="type.7390980"/>
            </content>
        </type>
        <type id="type.7391055" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391030"/>
                <argumentType ref="type.7391053"/>
                <argumentType ref="type.7391054"/>
            </content>
        </type>
        <type derived="true" id="type.4816">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4812">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391175" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391139"/>
                <argumentType ref="type.7391173"/>
                <argumentType ref="type.7391174"/>
            </content>
        </type>
        <type derived="true" id="type.4826">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391175"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391166" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7391139"/>
                <argumentType ref="type.7391164"/>
                <argumentType ref="type.7391165"/>
            </content>
        </type>
        <type derived="true" id="type.4825">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391166"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389726"/>
                <argumentType ref="type.7392515"/>
                <argumentType ref="type.7392516"/>
            </content>
        </type>
        <type derived="true" id="type.4981">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4955">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4961">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4965">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4973">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4977">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4969">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389730"/>
                <argumentType ref="type.7392693"/>
                <argumentType ref="type.7392694"/>
            </content>
        </type>
        <type derived="true" id="type.4972">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4964">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4954">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4968">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4976">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4960">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4980">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393500" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389808"/>
                <argumentType ref="type.7393343"/>
                <argumentType ref="type.7393499"/>
            </content>
        </type>
        <type derived="true" id="type.4998">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393500"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394117" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389850"/>
                <argumentType ref="type.7393967"/>
                <argumentType ref="type.7394116"/>
            </content>
        </type>
        <type derived="true" id="type.5013">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394117"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7393916" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7389831"/>
                <argumentType ref="type.7393759"/>
                <argumentType ref="type.7393915"/>
            </content>
        </type>
        <type derived="true" id="type.5008">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.7393916"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392820" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392783"/>
                <argumentType ref="type.7392782"/>
            </content>
        </type>
        <type id="type.7392538" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392501"/>
                <argumentType ref="type.7392500"/>
            </content>
        </type>
        <type id="type.7392632" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392595"/>
                <argumentType ref="type.7392594"/>
            </content>
        </type>
        <type id="type.7392726" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392689"/>
                <argumentType ref="type.7392688"/>
            </content>
        </type>
        <type id="type.7392585" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392548"/>
                <argumentType ref="type.7392547"/>
            </content>
        </type>
        <type id="type.7392538" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392501"/>
                <argumentType ref="type.7392500"/>
            </content>
        </type>
        <type id="type.7392773" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392739"/>
                <argumentType ref="type.7392738"/>
            </content>
        </type>
        <type id="type.7392679" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392642"/>
                <argumentType ref="type.7392641"/>
            </content>
        </type>
        <type derived="true" id="type.4963">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392585"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4971">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392679"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4967">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392632"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4958">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392538"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4979">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392773"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4975">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392726"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4983">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7392625" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392598"/>
                <argumentType ref="type.7392597"/>
            </content>
        </type>
        <type id="type.7392672" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392645"/>
                <argumentType ref="type.7392644"/>
            </content>
        </type>
        <type id="type.7392766" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392742"/>
                <argumentType ref="type.7392741"/>
            </content>
        </type>
        <type id="type.7392719" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392692"/>
                <argumentType ref="type.7392691"/>
            </content>
        </type>
        <type id="type.7392578" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392551"/>
                <argumentType ref="type.7392550"/>
            </content>
        </type>
        <type id="type.7392531" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392504"/>
                <argumentType ref="type.7392503"/>
            </content>
        </type>
        <type id="type.7392813" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7392786"/>
                <argumentType ref="type.7392785"/>
            </content>
        </type>
        <type derived="true" id="type.4978">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392766"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4957">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392531"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4962">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392578"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4970">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392672"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4982">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392813"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4966">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392625"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4974">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7392719"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390071" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390036"/>
                <argumentType ref="type.7390038"/>
                <argumentType ref="type.7390037"/>
            </content>
        </type>
        <type derived="true" id="type.4727">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390064" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390036"/>
                <argumentType ref="type.7390041"/>
                <argumentType ref="type.7390040"/>
            </content>
        </type>
        <type derived="true" id="type.4726">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390161" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390126"/>
                <argumentType ref="type.7390125"/>
            </content>
        </type>
        <type derived="true" id="type.4746">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390161"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390154" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390124"/>
                <argumentType ref="type.7390129"/>
                <argumentType ref="type.7390128"/>
            </content>
        </type>
        <type derived="true" id="type.4745">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390154"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390116" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390079"/>
                <argumentType ref="type.7390081"/>
                <argumentType ref="type.7390080"/>
            </content>
        </type>
        <type derived="true" id="type.4736">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390116"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390109" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7390079"/>
                <argumentType ref="type.7390084"/>
                <argumentType ref="type.7390083"/>
            </content>
        </type>
        <type derived="true" id="type.4735">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390109"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394778" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.7389902"/>
                <argumentType ref="type.7389901"/>
            </content>
        </type>
        <type derived="true" id="type.5030">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394778"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394771" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.7389905"/>
                <argumentType ref="type.7389904"/>
            </content>
        </type>
        <type derived="true" id="type.5029">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394771"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389639"/>
                <argumentType ref="7389640"/>
                <argumentType ref="7389641"/>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389636"/>
                <argumentType ref="7389637"/>
                <argumentType ref="7389638"/>
            </content>
        </type>
        <type derived="true" id="type.4874">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4875">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4873">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4877">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4876">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4878">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4872">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389573"/>
                <argumentType ref="type.7391370"/>
                <argumentType ref="type.7391371"/>
            </content>
        </type>
        <type derived="true" id="type.4834">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4952">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4870">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4838">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4840">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="7389574"/>
                <argumentType ref="type.7391387"/>
                <argumentType ref="type.7391388"/>
            </content>
        </type>
        <type derived="true" id="type.4833">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4869">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4837">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4951">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4839">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394807" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394787"/>
                <argumentType ref="type.7394789"/>
                <argumentType ref="type.7394788"/>
            </content>
        </type>
        <type derived="true" id="type.5032">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394807"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394800" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394787"/>
                <argumentType ref="type.7394792"/>
                <argumentType ref="type.7394791"/>
            </content>
        </type>
        <type derived="true" id="type.5031">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394800"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394903" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394883"/>
                <argumentType ref="type.7394885"/>
                <argumentType ref="type.7394884"/>
            </content>
        </type>
        <type derived="true" id="type.5048">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394903"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394896" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394883"/>
                <argumentType ref="type.7394888"/>
                <argumentType ref="type.7394887"/>
            </content>
        </type>
        <type derived="true" id="type.5047">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394896"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394835" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394815"/>
                <argumentType ref="type.7394817"/>
                <argumentType ref="type.7394816"/>
            </content>
        </type>
        <type derived="true" id="type.5034">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394835"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394828" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394815"/>
                <argumentType ref="type.7394820"/>
                <argumentType ref="type.7394819"/>
            </content>
        </type>
        <type derived="true" id="type.5033">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394828"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394938" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394918"/>
                <argumentType ref="type.7394920"/>
                <argumentType ref="type.7394919"/>
            </content>
        </type>
        <type derived="true" id="type.5050">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394938"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7394931" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7394918"/>
                <argumentType ref="type.7394923"/>
                <argumentType ref="type.7394922"/>
            </content>
        </type>
        <type derived="true" id="type.5049">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394931"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7405720" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7391524" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.4848" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type id="type.7405720" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388897"/>
                <argumentType ref="type.7388918"/>
                <argumentType ref="type.7388917"/>
            </content>
        </type>
        <type derived="true" id="type.7405722">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.7405720"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4850">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.4848"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4854">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4848"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4855">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391524"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5057">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7405720"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405721">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.7405720"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4849">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.4848"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405721">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.7405720"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7405591" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.4719" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type id="type.7405591" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388906"/>
                <argumentType ref="type.7388945"/>
                <argumentType ref="type.7388944"/>
            </content>
        </type>
        <type derived="true" id="type.7405593">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.7405591"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4721">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.4719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405593">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.7405591"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4725">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4719"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5053">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7405591"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405592">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.7405591"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4720">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.4719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405592">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.7405591"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390140" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.7405610" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type id="type.4738" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388908"/>
                <argumentType ref="type.7388951"/>
                <argumentType ref="type.7388950"/>
            </content>
        </type>
        <type derived="true" id="type.4740">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.4738"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405612">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.7405610"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4747">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390140"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4744">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4738"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5055">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7405610"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4739">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.4738"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405611">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.7405610"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7394852" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7394849"/>
                <argumentType ref="type.7394850"/>
            </content>
        </type>
        <type derived="true" id="type.5035">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394852"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5036" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7394859" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type id="type.7405909" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388901"/>
                <argumentType ref="type.7388930"/>
                <argumentType ref="type.7388929"/>
            </content>
        </type>
        <type derived="true" id="type.7405911">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.7405909"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5038">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.5036"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405911">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.7405909"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5043">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7394859"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5042">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5036"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5058">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7405909"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5037">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.5036"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405910">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.7405909"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7390183" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7390180"/>
                <argumentType ref="type.7390181"/>
            </content>
        </type>
        <type derived="true" id="type.4748">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390183"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7405621" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7390190" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.4749" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type id="type.7390190" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388903"/>
                <argumentType ref="type.7388936"/>
                <argumentType ref="type.7388935"/>
            </content>
        </type>
        <type derived="true" id="type.4751">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.4749"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405623">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.7405621"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5056">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7405621"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4755">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4749"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4756">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390190"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405622">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.7405621"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4750">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.4749"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405622">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.7405621"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7405600" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7390095" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.7405600" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type id="type.4728" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.7388907"/>
                <argumentType ref="type.7388948"/>
                <argumentType ref="type.7388947"/>
            </content>
        </type>
        <type derived="true" id="type.4730">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.4728"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405602">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.7405600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4737">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390095"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4734">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4728"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5054">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7405600"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4729">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.4728"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405601">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.7405600"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389580"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <argumentType ref="7389582"/>
            </content>
        </type>
        <type derived="true" id="type.4845">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389659"/>
                <argumentType ref="7389660"/>
                <argumentType ref="7389661"/>
                <argumentType ref="7389662"/>
            </content>
        </type>
        <type derived="true" id="type.4887">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="7389665"/>
                <argumentType ref="7389665"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="7389666"/>
            </content>
        </type>
        <type derived="true" id="type.4892">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4716">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405528">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5074">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405527">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4715">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7391488" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.7391449"/>
                <argumentType ref="type.7391448"/>
            </content>
        </type>
        <type derived="true" id="type.4844">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391488"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391470" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.7391459"/>
                <argumentType ref="type.7391468"/>
            </content>
        </type>
        <type derived="true" id="type.4843">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391470"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389655"/>
                <argumentType ref="7389656"/>
                <argumentType ref="7389657"/>
            </content>
        </type>
        <type derived="true" id="type.4884">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4883">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389665"/>
                <argumentType ref="type.7391800"/>
                <argumentType ref="type.7391802"/>
            </content>
        </type>
        <type derived="true" id="type.4897">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4895">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4891">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389665"/>
                <argumentType ref="type.7391777"/>
                <argumentType ref="type.7391786"/>
            </content>
        </type>
        <type derived="true" id="type.4896">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4890">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4894">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389660"/>
                <argumentType ref="type.7391741"/>
                <argumentType ref="type.7391743"/>
            </content>
        </type>
        <type derived="true" id="type.4886">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="7389660"/>
                <argumentType ref="type.7391726"/>
                <argumentType ref="type.7391727"/>
            </content>
        </type>
        <type derived="true" id="type.4885">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076" specialization="true">
            <name>SharedCount&lt;T></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="7389696"/>
            </content>
        </type>
        <type derived="true" id="type.4936">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4942">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4920">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4904">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4914">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F" specialization="true">
            <name>SharedPtr&lt;T></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="7389698"/>
            </content>
        </type>
        <type derived="true" id="type.4944">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4922">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4937">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5061">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7389724">
            <name>StreamWriter&amp;</name>
            <content>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="7389726"/>
            </content>
        </type>
        <type derived="true" id="type.4956">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390036" specialization="true">
            <name>String&lt;char></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.7388906"/>
            </content>
        </type>
        <type derived="true" id="type.4822">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389543"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4882">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4880">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4820">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4808">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4830">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389560"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4758">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389432"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4760">
            <name>T&amp;</name>
            <content>
                <baseType ref="7389434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4836">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="7389573"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4868">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="7389619"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4950">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="7389703"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391499" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.7391476"/>
            </content>
        </type>
        <type derived="true" id="type.4846">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391499"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391814" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.4893">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391814"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7391756" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
            </content>
        </type>
        <type derived="true" id="type.4889">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7391756"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7395012" specialization="true">
            <name>UniquePtr&lt;System.Exception></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
            </content>
        </type>
        <type derived="true" id="type.5052">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.7395012"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="7389934"/>
            </content>
        </type>
        <type derived="true" id="type.5051">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4847">
            <name>Value&amp;</name>
            <content>
                <baseType ref="7389581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F" specialization="true">
            <name>WeakCount&lt;T></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="7389680"/>
            </content>
        </type>
        <type derived="true" id="type.4905">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4913">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4935">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4921">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4943">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7390026" specialization="true">
            <name>WeakPtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.4718">
            <name>WeakPtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.7390026"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC" specialization="true">
            <name>WeakPtr&lt;T></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="7389700"/>
            </content>
        </type>
        <type derived="true" id="type.4927">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4925">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4923">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4945">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4938">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4948">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4929">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021" specialization="true">
            <name>WeakPtr&lt;U></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="7389693"/>
            </content>
        </type>
        <type derived="true" id="type.4931">
            <name>WeakPtr&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388895">
            <name>bool</name>
        </type>
        <type basic="true" id="type.7388897">
            <name>byte</name>
        </type>
        <type derived="true" id="type.7388918">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.7388897"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388917">
            <name>byte*</name>
            <content>
                <baseType ref="type.7388897"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388906">
            <name>char</name>
        </type>
        <type derived="true" id="type.7388945">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.7388906"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388944">
            <name>char*</name>
            <content>
                <baseType ref="type.7388906"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405574">
            <name>const BigFloat</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
            </content>
        </type>
        <type derived="true" id="type.7405576">
            <name>const BigFloat&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405575">
            <name>const BigFloat*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405960">
            <name>const BigFloat*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405959">
            <name>const BigFloat**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405580">
            <name>const BigInt</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
            </content>
        </type>
        <type derived="true" id="type.7405582">
            <name>const BigInt&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405581">
            <name>const BigInt*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405969">
            <name>const BigInt*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405968">
            <name>const BigInt**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405586">
            <name>const BigRational</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
            </content>
        </type>
        <type derived="true" id="type.7405588">
            <name>const BigRational&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405587">
            <name>const BigRational*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405975">
            <name>const BigRational*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405974">
            <name>const BigRational**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5062">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
            </content>
        </type>
        <type derived="true" id="type.5063">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5064">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
            </content>
        </type>
        <type derived="true" id="type.5065">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5066">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
            </content>
        </type>
        <type derived="true" id="type.5067">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.5076">
            <name>const ConditionVariable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
            </content>
        </type>
        <type derived="true" id="type.5081">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
            </content>
        </type>
        <type derived="true" id="type.5082">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4717">
            <name>const Counter&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390010"/>
            </content>
        </type>
        <type derived="true" id="type.4932">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4907">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4939">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4928">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4926">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4906">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4908">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4947">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4946">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4910">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4901">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4898">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4916">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4915">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4924">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4917">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4899">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4911">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4918">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4940">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4902">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4933">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4949">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.4909">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.4930">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.5068">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
            </content>
        </type>
        <type derived="true" id="type.5069">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5070">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
            </content>
        </type>
        <type derived="true" id="type.5071">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4801">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4841">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4888">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389659"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4824">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389552"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4857">
            <name>const LockGuard&lt;Mtx></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
            </content>
        </type>
        <type derived="true" id="type.4858">
            <name>const LockGuard&lt;Mtx>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5044">
            <name>const LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7394867"/>
            </content>
        </type>
        <type derived="true" id="type.5045">
            <name>const LockGuard&lt;System.Threading.Mutex>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7394867"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5077">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.5072">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
            </content>
        </type>
        <type derived="true" id="type.4867">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4864">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405568">
            <name>const Precision</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
            </content>
        </type>
        <type derived="true" id="type.7405570">
            <name>const Precision&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405569">
            <name>const Precision*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405723">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405720"/>
            </content>
        </type>
        <type derived="true" id="type.4851">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4848"/>
            </content>
        </type>
        <type derived="true" id="type.7405725">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405720"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4853">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4848"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405724">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405720"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4852">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4848"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405724">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405720"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405594">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405591"/>
            </content>
        </type>
        <type derived="true" id="type.4722">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4719"/>
            </content>
        </type>
        <type derived="true" id="type.7405594">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405591"/>
            </content>
        </type>
        <type derived="true" id="type.7405596">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405591"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4724">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405596">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405591"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405595">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405591"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4723">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405613">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405610"/>
            </content>
        </type>
        <type derived="true" id="type.4741">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4738"/>
            </content>
        </type>
        <type derived="true" id="type.7405615">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405610"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4743">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4738"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405615">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405610"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405614">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405610"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4742">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4738"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405614">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405610"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405912">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405909"/>
            </content>
        </type>
        <type derived="true" id="type.5039">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5036"/>
            </content>
        </type>
        <type derived="true" id="type.7405912">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405909"/>
            </content>
        </type>
        <type derived="true" id="type.7405914">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405909"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5041">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5036"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405913">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405909"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5040">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5036"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405624">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405621"/>
            </content>
        </type>
        <type derived="true" id="type.4752">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4749"/>
            </content>
        </type>
        <type derived="true" id="type.7405624">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405621"/>
            </content>
        </type>
        <type derived="true" id="type.7405626">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405621"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4754">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4749"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405626">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405621"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405625">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405621"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4753">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4749"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405625">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405621"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4731">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4728"/>
            </content>
        </type>
        <type derived="true" id="type.7405603">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405600"/>
            </content>
        </type>
        <type derived="true" id="type.7405605">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4733">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4728"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405605">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4732">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4728"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7405604">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7405600"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5078">
            <name>const RecursiveMutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
            </content>
        </type>
        <type derived="true" id="type.5059">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
            </content>
        </type>
        <type derived="true" id="type.5060">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5073">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
            </content>
        </type>
        <type derived="true" id="type.7390041">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7390036"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4818">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389539"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4789">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389495"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4790">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389497"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4829">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389560"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4792">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389500"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4793">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4862">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389609"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4787">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4778">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389477"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4795">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389511"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4796">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389513"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4797">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389515"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4799">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4786">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389490"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4802">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4798">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389517"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4865">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389612"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4800">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389521"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4784">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389487"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4783">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4776">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389473"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4781">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389482"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4780">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4777">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389475"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4775">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389464"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4774">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389462"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4772">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389457"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4771">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389455"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4770">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4759">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4860">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4757">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389432"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4821">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389543"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4879">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4881">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4819">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4773">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389459"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5079">
            <name>const ThreadingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
            </content>
        </type>
        <type derived="true" id="type.5080">
            <name>const ThreadingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4791">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389498"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4788">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389493"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4863">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389610"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4782">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389483"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4779">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389478"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4861">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389601"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4866">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389613"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4794">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389503"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4785">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389488"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5083">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
            </content>
        </type>
        <type derived="true" id="type.5084">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4842">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7389581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388905">
            <name>double</name>
        </type>
        <type basic="true" id="type.7388908">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.7388951">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.7388908"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388950">
            <name>uchar*</name>
            <content>
                <baseType ref="type.7388908"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388901">
            <name>uint</name>
        </type>
        <type derived="true" id="type.7388930">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.7388901"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388929">
            <name>uint*</name>
            <content>
                <baseType ref="type.7388901"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388903">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.7388936">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.7388903"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388935">
            <name>ulong*</name>
            <content>
                <baseType ref="type.7388903"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7389047">
            <name>void*</name>
            <content>
                <baseType ref="type.7388909"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7388907">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.7388948">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.7388907"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7388947">
            <name>wchar*</name>
            <content>
                <baseType ref="type.7388907"/>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
